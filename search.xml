<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Zhang-Tong-CV</title>
    <url>/posts/676dd596.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<table>
    <tr>
        <td width="80%">
            <table>
                <tr>                    
                    <td align="left"><b>Master</b></td>
                </tr>
                <tr>                    
                    <td align="left"><b>School of Mechanical & Automotive Engineering, South China University of Technology</b></td>
                </tr>
                <tr>                    
                    <td align="left"><b>Mail: zt_scut@163.com</b></td>
                </tr>
                <tr>                    
                    <td align="left"><b>Phone: +1 ‪(971) 373-7549‬</b></td>
                </tr>
                <tr>                    
                    <td align="left"><b>Address: 381 Wushan Road, Tianhe District, Guangzhou,Guangdong, China</b></td>
                </tr>                
            </table>
        </td>
        <td width="30%" height="100%">
            <img src="/images/image-20220306.jpg">
        </td>
    </tr>
</table>




<h2 id="Educational-Qualification"><a href="#Educational-Qualification" class="headerlink" title="Educational Qualification"></a>Educational Qualification</h2><ul>
<li><strong>Master</strong> in Vehicle Engineering(2023)<br>South China University of Technology,Guangzhou, China</li>
<li><strong>B.Eng</strong> in Vehicle Engineering(2020)<br>Hefei University of Technology, China</li>
</ul>
<h2 id="Project-amp-Internship-Experience"><a href="#Project-amp-Internship-Experience" class="headerlink" title="Project &amp; Internship Experience"></a>Project &amp; Internship Experience</h2><p><em>Software Testing Engineer Intern in Kaizeli Technology Co. ,Ltd. (2020.07-2020.09)</em></p>
<ul>
<li>Write test scripts according to requirements documents, using Linux command and shell language</li>
<li>Responsible for the on-board OTA and IVI module testing projects, complete the test unit and upload test reports</li>
<li>Participated in the project of automated test platform, and improve the design of the testing interface, carry out a detailed needs analysis and use case design. </li>
</ul>
<p><em>Software Testing Engineer Intern in GAC R&amp;D Center. (2020.10—2020.12)</em></p>
<ul>
<li>Understand the principle of CAN communication, and using CAN communication tools,  such as Vehicle-Spy、KVaser, to sample the test signal </li>
<li>Carry out on-board system function module test, and complete data detection, calibration, log acquisition and analysis</li>
<li>Participate in on-board system test of multiple models, and update test cases according to requirements and feedback</li>
</ul>
<p><em>Software Design Engineer Intern in Shenzhen Lan-You Technology Co. ,Ltd. (2021.08-2021.11)</em></p>
<ul>
<li>Assisted in the implementation of simulation software of automatic vehicle, design test scenarios in ACC、AEB、LKA , complete design documents and scenario scripts</li>
<li>Responsible for the parking area map design and visualization, compile the program scripts for parsing XML files, and using QT software for visual display</li>
<li>Complete the preliminary project and generate 858 test scenario scripts totally,  and  using the  parking area visualization program to help verify the reliability of map file data</li>
</ul>
<h2 id="Research-Experience"><a href="#Research-Experience" class="headerlink" title="Research Experience"></a>Research Experience</h2><ul>
<li>Participate in the Innovation training program for college students in Anhui Province 2018, Intelligent lane changing auxiliary system Based on longitudinal and lateral dynamic control,  responsible for building vehicle dynamics model and using CarSim software for simulation</li>
<li>Participate in the Innovation training program for college students in Anhui Province 2019, Design and motion control of multi-mode reconfigurable for self-driving vehicle, responsible for help generate physical model using Catia drawing software, and Assisted in the implementation of the printed circuit board design</li>
<li>Research on driver fatigue detection method based on facial features, the graduation project, used CNN for facial landmarks detection and a pre-trained network for training on the data set, using SVM algorithm to generate model of facial fatigue feature classification </li>
</ul>
<h2 id="Campus-Experience"><a href="#Campus-Experience" class="headerlink" title="Campus Experience"></a>Campus Experience</h2><p><em>Commissary in charge of studies, School of Automotive &amp; Transportation Engineering, Hefei University of Technology (2016-2020)</em></p>
<ul>
<li>Responsible for the study management in class and communicate with teachers to arrange experimental courses</li>
<li>Planning and hosting the meeting for exchange of learning experience, responsible for inviting outstanding graduates to give speeches and more than 300 college students participate in the Event</li>
</ul>
<h2 id="Social-Practice-Experience"><a href="#Social-Practice-Experience" class="headerlink" title="Social Practice Experience"></a>Social Practice Experience</h2><p><em>Support Teacher of Feng huang primary school, Chaohu, Anhui Province (2017)</em></p>
<ul>
<li>As a math teacher and physical education teacher for primary school students, spent a pleasant and meaningful summer with them</li>
<li>Planted the seeds of learning and encouraged them to explore the world</li>
<li>Increased responsibilities and accountability through communication with primary school students</li>
</ul>
<h2 id="Awards"><a href="#Awards" class="headerlink" title="Awards"></a>Awards</h2><ul>
<li>Second-class scholarship(2x) and Third-class scholarship in Hefei University of Technology </li>
<li>Outstanding student cadres in HFUT</li>
<li>Excellent graduation project for Bachelor’s degree</li>
<li>No.7 of men’s team competition in the National Student Shuttlecock Championship College group </li>
</ul>
<h2 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h2><ul>
<li>CET-6</li>
<li>Familiar with C/C++, Python</li>
<li>Familiar with the Linux operating system</li>
</ul>
<h2 id="Self-evaluation"><a href="#Self-evaluation" class="headerlink" title="Self-evaluation"></a>Self-evaluation</h2><p>I am an optimistic and positive person and interested in the emergence of new things and new ideas. I can set goals with others and accomplish them through the power of teamwork and communication. My main research interest is computer vision and deep learning,  and I have an understanding of machine learning, sensor fusion and computer science.</p>
]]></content>
  </entry>
  <entry>
    <title>Cmake Note</title>
    <url>/posts/79e831c7.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="adf8d6222366d02506b21522ad94325be15fafaccd5662f16c33120e7b16881f">62626637a28304ae90bb989ca4647acc44ed0c95d05bfd83b2d52509c6fb8df19d0b5a8af8792518094563a451a2fa0b6b7b946245269b89d87e68f26fea778da7c4670543e3aee3bf8aa632fdc803b276b4e383bbc502361b4f4335ed3d73e38d76cf9e5bcf3675e2172564135a8c58bf96da9167336d544d93987b3cd39a021163a75a8cd82cc0630b4200474d36ae1f2857b5819947ddf1121dbddc63b181ac146ebf89a0e61394d948e4e05728cc210744dca1ca2ac801839960548f50292ae001759b4c15333101b0f8cddcd098d05ac3330d5bc1d832c1fa53e5fa0516691925d40ac28f677101bf76b6072328175c526e9b488d132533e09f13870da19cd554bee61fd628cba5b683ef2a21b882c824b4d96bcdd7cd03f25e2ef33a7c2b7d5d5bb452d8eb81bb86acc2477937909cfc7fc788a91139eb3ec2f45651e288aeec8abdf5587e625fcc49fd21e21b659bfdcdd4464e0a778a13d429ec2f2d4233f6d4adf02cd102d64c04066044800d979405095cf835512a06b1dab8b4a371da2908c54a1f4a3426c5ab4a0304b0b2ccad9306462ab89f6f78993034a30a497df946faa229604cb2082748a5e82227bb8ed910fefa2567243d705d6a74e134d50be6f05536bdd6d109fa05836a9225fbbb78ff82af582f09dd365f574db6e7949df0f531531a5e5c4974a6df8ef01ac0f999572d5d8f59b0453b67b1b861b17eeba19ae5c1fb66bf28537f44f928954b6c70eb0a0bd30cd8b8ae049d8165550214872a97b5d258ba982630cd5425b6357411875b88146e1a313090e67774ee30a37266816ff72d61d8406b66d08aeb77bb78744704a3e06880c5808b2f9bfc90740709259fdc07aa35d950a8ec056a8905cc0be93691616ce5fdcf828f2e98f3b322ab432479cae892ceba72e69a1558a36e47b75c520bab7dc0cfdef09f62b2ab674a449ba7d39b541d634fd5f179242869f58197edce8ca4dc10497b334be663159c26c7fca11c9cc19a48664de4b89ebf4a90f83938825d2defdcf86620fd9ddd830ff0939ce13dc77018ab4cb8b7217c8838ab386cb89048d85c782424b93f322e3216232f26bd93f4f8578fb3b9fa42f976d21dd944235835b118587bc01c8e8df218076a0e3dcf0194c7f1dc1a7d37933b3747a42218179ef99ed66576104cf51abeb4180d4e56c186318dd40e19181e0fbff0ca7e95b4c8ff76eca89a9d6a94f2d4579cd203cdc0d50db72a358246a0fa8b4551810d4ae856d0ed717bbc634e94d64357dc226d3e495414aaf14d60134cc3ee92c217c497ee567517f2a416b2ec6b1d3d395e036d8cc314c60c3c5f444ee72eef27ff2e56a33a2947d14c2468705d2da284885b3ba60947a7e3c2f5b768c2f3eb1afb28e9997df40e029ff15d1f576eacc85c19d8861e92de2c88db530fd39f4d8ce2518b68ff0b9816d1e4e26d7d46c39ce027b42e299c2e0a424c564e747386eea54eebaec4a9ba5d8aae2cd6088706d3ce4399d5412b2e001e2f29b06b255478342d33a211239ba2b376a346112662b045a1db2a91a97efa0ee13a7ebc6c536e7b94b28e863ad0c993880da6517af2d818a60bf926f1285027c58305a4e66fa01cc799af678eecaf22127ca88a71a72c4bceb94892a0a09572a3fb44f0246763395931e6ef221b8ea74ec66261cf9fdbf2b05f2350be65f437218f1cf9eb21ff79487746d9149c6c6459c3b7e399d37cb6abf8268621caa6e9eb242c6b263e4c00a2b2046087872e348daf8c02547f34cecb010a53714f46395f6267cf4d7f20577ba0e40f4e52f84f5142dfdbfc734f222b36f9016cda34ca618fc000e9b9062c8a4b0f29f18e257cb0e35082b773d9fd0840adecd02420a7249b5fddf5b3a3fad1be60c6f45ac3baf7f87ed2169b8b30f08dd128009d5213fdade8f144531759a1a4b746214d47a74df810bcc384677fdb376fb80ccbe5bfcef230acf1240b3740753bc416a4779229698471b275a2a2c69cc346c35123bbb03b0bccc4a26a5fa4700118a9362ae521643f36b1ac67e4ea63ba60698c1c74a0aaaf3a710ea8247fd30eccc27d828968575ae24069d82a496dc0e74b9b339225392b3d96cb8b6c8b686f88ac78162c59a58b254edb77a436a75661571ff4899eb55eebbf6fdf4ba0e195f01159a69c344fd44f7e73582ecd5f5610d7f952956f7493ddf66e7cbf4ab5bf3750428e52b4c03663727c45cbc8c51e57995df6edefbb1eba4d2920d38f8ddb00f8d95af9575deec3812a8de294b06e4c014c42f5f3ac591fb80542acb667a40ed6865b2f58d7b6f60fcc131a6e1d32ec5ca95fac29127729f97be713ec799762340d71e375dbe71f97cd3bb6058ef317eca0fc84d61cc4f5a3a08a55829486a8ec4a2d72a1176002636905f692027c00fd4b7d320ebee0692a3521ffe8f0b6c97200ce32b0f1c691d3c9d83b5e261f6ebc0d11e1f1e11f4fe03926dfb8d3a68ca5904cc771e095679a60ca7715169c88167f3bc2d348fb8e59215e7c02f7bd17c070868c22333349a5634c4e13b9f905058451ef4da11effc8110781847525b5aea82a732782f50e5e255fdbbaddb13e438a004a5bf4ac117a8111c66c2357ef6ec5a4524571c7baccac348d3a69ca6788a8c1d7841046079cdd3dd62fe83f029808138fb65bf6b4092f8cb943628217c88fe1a35e084bf1718a7bbbc5daaa9098fc1306f4ac68e2e5fa0be2ccb6c72a749aebd37228fa9bd037db79490882f84b1ed0382ca9c4f6cc450af601b4e6bf91f53c8f30742c17c4cd4767c8de30e4bdbf9325b208095eb6c30f9eff81fed491e70f09b7151d65a8120b80a869e0d9f71876e208be1264d91c68d3849c1e1459bddd3de79a1846f260c643e5516d9e7a6947f4d77caab6d6592e9cb2c525040a179c44302510e2ac459020150bfbfb0b353970b7cb35e3663f210ce5e0d7fa174d945ab2c9c9b8aa8be0038321e5e4bfb4dcbd8f053cf948795024c5dceb5200978837e094c86779c4d4198d9fd9eaeddf3c12615c529bf3e638235e3ea4d5fcce2174dc33dfd9c8dac4da72179c81655c45c1ccb414dea0aac93ad8fbc16d81f9366733617d41f88399e2010efa372ae2dc13b00be13ffb038814f7fdf5fe61415aa113167720b78c270581d941c9ea797b5461ceb17cbeac7e6906de9897da36f97717e4f8841a7dcee948c0cab748d22786512d321d2e861c9377f0e3fa4db47078024d041b3a869d29de02d855db1704319598cd1cfcd385dfe013eebb522ffb5585cf6406ffbd88706f454b04b0890d23b92f8a6c7e738d8071272ed2d9de685b118fa85931e12ff69be1efede5f7395828a3868df37d595145fb26382b045d2e234f0670973472f639e837f6fbb41e74f7473a500c11f3e8e24fe0179e143d8c21847332a4871b1aa00361dffdb159b6b31928f753b611a9814a47582a45d7bb84df6f8092c60a1b2e56cc5d0a9ac616057db22615daaa4e4c538d475ad93a5b07c0f289a11397db1d0b077723ebd357bee8654a96216d5d6c243e1876432b8f6709697e453962101da221e2b3d3022eeb1a3467a8dbe611af009ca0f89c6a2809f980d5dcd38adac0344f3f6eb44a33cc5dac9ece6b64a9376e761ce10931d573e432a992f67c4cdab26d5fc6be29b8e22a28bcfc8caa1238d13afa8fd9221297124aacbfe4539d1deb7a2cdec9bfb28781088a042d8be2063488536c08e250c0633da463ce9f7a0efae84bdf0bee7060f08ceae316e1f72cbd2dd15d8f5aabf86cde8ce8fadb8474362e2b3a8467fba0bef1af3675a034ed8222149dafc0aaa154d43ff6f0fbdeec2dd8bb4db2264f4ffd0798fd4a9403772719bc273a107d110fe2ad201ed3448653907d0f6e3a40692d1e33dcd5ed2c753da5e4edc1a845516d045ed91623fad868c5684dff8e3278c786883acf7f5b617c08749f72d9a7dcaa468aee1f5a840049cb39955c7ef504dcaa0738935913237568bfda4679ac9ded47d7396c312e43f973b4a686f2d7ca502df49fd41ac56fe81a38b1eb1ecf7460c91b8db356dc8d16abd24458af0bb4cc95ba96a608eee63d1046fc7a9f860b4e80a9229e60d831de1e2941222d36541de4c642a0e90e8fd7aec7ac4e806713e61a7605e5f0bcd479eb46a54b3886f5703df84a0ac73858c060817c7587c539ba62e38527b94edaf34fb78a4b933d822d4846ab528bb030a3d3e4f938e3c8cd87ae5bb67cdedfc41b7af85c93ee70387d0f1e4c4d3661e4fa5e68a6f99f4b17a849606e2233ba9d477092b6b2592a8907f64b405b2321395b989523d74c21bf9542c0fcf9b52c4e6954712eb8deb81a4ba93ee7232269b435de1f4c87c2dad41e1a25132b38a7e1603a90ae37eb72bd0668260a8ab1769ec7128d9c14d56988e5b1b1fa4e3b6d06fc15c645face94ece062d4479c914aae6daaeffcbb631e5d316ec073b21c0a1c71a8a3f243d910ff7ae81be03e2f11703f8212f864883dbd94b9780d5020ee08cb520d62a6fc16d318d89742b4030e6eb77c3701259aca463f6951cce0296b6c3b216809726cb0a22832eb1adcc66a4456e5a307666d58901575d49120031d3a2cbff040d1b0dd20a9f03a9906cf10d9b79034bafe148d204879c3ac943f5a0aad346970182a99854486df51b9512d5a8cf2e328c2f6b7ad9da6039bf479aab825c47a1ab938895b220882b924b93d07933e63680550f958864ba0b9c9e17145b735712e553f0e8d5b8971d06f6aa8cb525baf5076aa08f5ab089e1beeeb431ffb5ee2942eb78b13b0e0ee19cde536dd27758df9cb6b545617f6392418ec32faa7f41aebcc553a46c86e4eb9a77ecf4345aa47d1d0134ce80d024b408d4a348ac27a157fd3e5e9dc52d5b1b252fbec762ac5c20eb9c6abb428e4589f9aa6ebce4c8c91bb083b16521f6e0e9b3794028236b35a19f570f745dbd1c7d385406c77bbc5cd07b2bcba6429096a85797d5676e8d9e618d006125c3255fba114a16c0c763792916d9593d3421bf96168f0f3c361fb8aaeff0058ce5ae81dda54cc2931e008b36455a544976e702d644876f11c983779b131d184e7c57e3d6a1acbf10916bdcd059e2a44d6615cb3d6506338267c7c6cc07194eaf7c47f38d9fa2f72b9e2f3ec4a2846df730278266535c22efdc7b448a3ace462507093e2d87d81227ed4a5fdc0f63900ad575d09ee3a0e50947ed822eaa56732189fca5ceb1a2181d57a6b4854e76fd50ff41f259ebe84488e9b46b872a79faa73fef187288ba45b6f1781be7e1720d63f77c03136109e089f57b3ab3939b9b71a8617d093f03fc2b1fcc53b321c1bb959c0cd04cd65c65afdb29ab9040aebf78e7ed8747967665dfa83b66d70c653251991a9a5f5c4efe6ef2dfb4e5534a276237eb50395fb0d39fb8828a7ed6e0a7a9f9ebb4c4241d78ef122255611bc18770f0ea0ffec9c8e151e542383cf1a01b87cf2c966cc42c4504d39c6635cb5ecd72631c40559dd14c628c439bd6c7b68ca0777882116f27b1c6b53b0a2d9408c57eec512e61e78233701d56e7aa8e8d5cf0313fd0595c504c48212127565a563aa7bb467d405def8941374be6aa5892e4ecb295331b34de9cf2862dc11c9f723f1cff1ed3dc1501e0d6f4881bf4e3a8a1dd0461a899698a03b2cbe9361fed9ecb8f1d26349f6e52a7006e9674ac5abc7ae3b51cc1a02e1387b3d3adbcc867a5fb40cdfc1223341e8e705ca72b34d761ceac1fe1d29d6d5098eb6b78b34918f0f05cd555e5c75fe057aafd36d416281970a2bcb4497477de7d76760c3b2f9fa7f5b9ea4b39bd9ae273f0f0f827de79ff2a636b4e028987a470b0cdc6062f7b820d64a0a7093952f5ddd8622bff05bef323cd8a5a5ee1dad1d9ee7a1a083175b5eff0837c0ed3fda3c15262d33225c3531c2e92a1e3613d5e05e51a78dc67a5ada815438ba30fad7525bd8ef7e9bf0b59c6037d645264d3873cec4d2874e446befcf9731294f963975a560e53cc9518864be2b1962ed2b60b70d63560956504d558a2bb7db89ed0379bfcff32b088e023b578e0d083a7841f1a7a599af9eb2fd3c198419b0eccd7903565b8fa4ee19174defe4bff910addba74b245dc24e80fc74ba2b2e2e086831260b1a104a4a60a96b7da0ddbae563fa66223bca7bc651b705245bea20952a0aa714d2302e6b8ccbb6103cb8ed0e92e5981d11fb4137e47ac53ee8b4f474dff066fe205cdbf2c7dc8c8830961990e7f3f5110a9532cfe606f29dd0c8c9de51b29a1f59ccc6435b0e71b18319049ad77a1c573dfe860eea2fcd9677067a5a2eede8e3ab4c0152f5ad9dd47b2db598b2af69343ed8f3e3c908292752ee9002da32a34431163fa564412221f0317110aff0f7f6726e12eec453cb00e68d159f72470de8e2bf1c232de9319f80eb223e85b37107daf353cf7d7e3276af216f4dcd7a0dc464feebbd6a8beacb5633ce634775cf8d7345191645f3e3c4bcd3c6aff2a466c32488647e9f0cc90d8c0a8eab090805a2bd1142b2567b4a543791c9aa1ed65e5bbe55f68faa9aad34036f419cd5a47da9a6c00f6e00a4f495d293a4fe59c58712e34c2370d846a6c79510562449f613597f58f1db1c025934d373fb404811260ae091e7717301af92f6c00ee2eec0b1646880c754617fa53c35af4f78f50b7334363e85394e3ddf6a2e2e68e472b3a14cc2423857c1c7aecc00dc14e8666dabffd8b9b3b05801cf627e1b5330624fb878a0370f0ea8382404a8fde468ee6e356697bbce4b8e8f5e7d69a3b845c2fb46dfee6ad8adfed61b2bd8bd2ca45033aa35a026df71494cbcef1f040a966daf0afc0bdb7fc8bd1a6e84e4457edeb765082d5826b4defdad8b2e0de3ad0ca634339796026d68760861082946eee854f1161b53551a6d74fbf32970e6077d376aad449b174bb0a86fd6814ce5c80e510c813209c45affa940057ad01ffcbf54248381de3ca2579bb1b2696679339b976909966126aed6b1db7b9fde5f110e6820dcb6bbc26051a522179d05df86700f3d0db11e7d5973cd6137a363462c400cef6006d6de9e930f89cb616b82ed58d956861713d367ee07523b665dc4c543417b5195b73ad7313795019138659ed756c9ea4317ce9a6ba95adb71d06b5dad27f3464bb17c1a1dd4eea94a0aa7b484c43e1fc7ad088387f6def68ffecf6d5865ee9ef1e1301338182c6a4daa73ad71ea8bc7d6208ff5df6f3e6b04aba79af3cbc59c574e9ec85348fad2f072416fd1ebe819aef89925336611894ab9f4e72c9786ae751db6daf5d55263fe05598b38847c8969bf71dddf8c2aa4b04224653aba6258de6fe332b481cdb7ed641713877ae373228ac635e7ffea96d9371a37428052116246ac63dc402b235a3783a2a8e21567c9cfcc4a0ee34445a748b8a183a1f969c5be7701cd713c1d4c4b2f21ea8f9dc86a5a3a345f7b9d2fa366cd5e4ae218b97c367b4a82d38b491530477a7d707d5c07eaebb452e8e511f3c13930d2de8adca214c6a95db07c88bb03f707ce8f0e54f6cab02932ed0590fd71956c567b90e164c3922e9c5cb0d0d8b72f74b4d6763d345240356351498bb54cf5eb2a30bb43a43b97c8aee93ccb62db00593eddda9c6d29e38745be116caf5b05a57dc522dc4497d1b8c15cc66fe5e8299d7ce10fdf265073bfccb08ce869400b519316c6fb9797d5a094855d59a854cc0f1180f769d0fbe5e133f22f8d69ea852598bf520af2106176be898e693b5f041d491af68dbfc0791d41c6f1e59cd6870aabaf5684fb92bf60a036845d8ce0441b5ce9635ce099d712b432f8089126d27363d83aa129625a153f7cd63736723ecd131fc25748f80136359c8698f1d43d14f5c927610ef7d06bc2dc44c35f7b69e104572ab604cb58277e1b698f07d44d2e6f90bab8e12a83b53b4bd0c69d42b50e154981cb242acbc88949e324ad69f4619737f415251e32cc2e8efbe2b86c730558d8081d21ce26813622a2501cdf9aa8ec7e346a86932472d11220e7f0fea2feeccfb72a0393b684cbcc37b0ed81845c619a397761d6ba88e544146c655cdbe40dc7f6673c609af6bb38dd4048a5bfed274038791a093c05f712eb6a266d71a6b58c7ce020483217d8a86fbb286d8d68648319d5ff25a6c18d9235a4ae7c651de7bfe8df71ea59392d326e17d3ce708f08e91e45d9967f65379586a9a2599777b2e46c12a261ed0fd8c39ba3d95e2bf96ed4865dfd736b50f27f167133613e3d2458e3cb2ebc62966d0c745d049b51bcc89412acaa2be3414dfd11c5547762022c91b8ac4d7e91fa9d66ef42bbd668b8c7ba101b271f714b3c5eca0cbada632ddbc3e9b219ee5b318f8f55c9344e563428fad25670cdfce3a08019be5c233cbd4e8f23c0daa55401e203af1fabf3befb16c9b4a9e75989ab8baa9e7048874e06a519a919aad3a3a227cd5cf71967b893d4db547d1561e0f26e9bf7234cf9f2e2b4fafc4b90b05d7b736c06040f7d99e309b4e6bbab83cbf413353da59826aaaeed4396d9ef1ebef97dc7cf3025eae19a1251b5e94f90aa1971970dce0080b2a08e53acc8602e67aa18661731a4be5096bead1efe29baac666200990f1602dcd86c70b8202e9e207401d5755ce5ceb944dd734472891ceceb263e2cd57f625d4def55eddf8ee4c2f4a312cf23363b005ed8119d9c1ef153749ac1f31de1ffecd6323d590f048b41a10f2bda1541f517301687935f59b7f20e8347f689f09014fc2bf35c9ddcd3c77b56169586c68b04abf1cb47371115603386ff8c6e2ad7ad140eadb326c0f7e659430bde5a86e46363563ac220688235f8b3a7b5e0141aacf4deb32ee375819604e177003558897e47c2024fd8ed17bb16a03d6b09de1a4d22d657f01434d00866234479951434171c895cf2dc53e22c3e5e09a5beef9959f77f4cf2fe997b7fc41a9b4e60dc1359b7851988728898eda985aab2030af513d4535d7029c1e63340d24987bf22496706eb4416c218e0a6a1df1e9ebc83731915744a21e1da2d36ccf1cfa38b288729edb8543c8700c32b032f9f9ca4b0ea3aa9eb2b199fd90e7aa5d0dd277a0bdefc6b925bfdc14370c95e844a6ec9bf64ae62e0228a90cd79b48c84be3ced5ec771f9be5bf2938eef28f02c2185b2bbca9514b15caa069fbe63e644e0578f62d308a2db3b81d4ccbe46c24078dfaed9be821078ea107979e481cae5815ee85e6861af616fa3012ae1ff57dc611415cef0ca242a90df401334fdf63d0d5e657040edbcae163d1fb0009303fbbe2c5943c3b8dca698cdb2b957195f74904a63e35ed9f80f8abedfd42e6fee2a07d4d94fec12d794aef190b1b87d61ea8c2100919f8d1d9a2c483b506b58983842ea05312028593e799bdabaf5a9c70de7b6b39db2c5105ab8eb4986badd41a487b03eb15767daa6661f27e4d224cf747276061d6f8ccd1a2f3fd2f00cf9ca5f8a14f702a1d758cc572b6d1ccae85f774dfab30c23e6b651e81bae0a55b7e285633c711accb30c876ae1a9e5cd504cf78d6703773e48ac4190ad426cb2193abbbc81c98c2b436fe55a1bb8d96a34327faf9c1fa0b0baf066726d098eb227488e038a2fe75e4c5d4080000b175f8a32ad2af2a96ad824ca21248a87c6d17127cb9665aaa9136c7b44c88fe86c217366b5a05151c4fb7b660bce5b5a8d8115e8ac4c1880ceae1565ec957a4ca80895ef95b428d1ca9e3cf7586dbfdaaf83dd85db3535250c10704642b29203583967ec996fd323e8b5ecfc7480fe637498d2125fd4c0ec564ab668ea20af37448aa4f5bb2ac4013103979a2d3bac8976dd0f0e3f3058d364745b0525cd2342b7e4a1f56d9b4c826561b45960c9baae0eda9814e30b6affb0c8605c9a461df0855feb952d5c58b4f5a2d19ea8021bfcc6688bebcc2fd24c558ddbad3aff700adb331e3194d9a527ee24f6053093223bc72987542f16cba705fd7df0f669e0962e9d1105680addadeb39b3df161d9160ea534ef01263dfb3bde2e5f6a6dde0d1e5e17211af5ec60d1273481d7df6da1842f1d91b2fc1383cf661f5f1467cc126ebf0a3ca987cf0e86f320801eb76d85f7075a89d8b0dcb9013d71e59b45efe6b42c3ea4d9c029f178feab9008f728e5e63264581b080d6e77c133131b46e57e708bfdc6cdc6011f9d5d480944fa2318331a89cc6004f2ed41930852a347d266b7dc2eb65ba2b0ed2f642a70976ecc111626f5f03079c1dc5ba691e5ff12bbbb1b85a4b199234d1a124194722174cf1abf79df868367f3766df98b12f22fb6db6600f5f95e5d069edbc4792beb38ee11570dc841e4ae5cedf27bead5619f6aa023bc3431615a61a67197e4f43bf73cd1b3f583ead4e501cba137f43ffe176e7515238193f2698e21dd82ec19a0bf40f8f59aa2ef8461d5007d0c74cb8abd21b7e918a6de202d68705ea70e3938e8b641394409adfae7c270d143d79ec042711298e1394042870d7f1c31cfe496af5de72405970194f9e080cebf49558a86484ec86756d62b2203e697a6621c31d09aa8db83fcd06f733f2b108eb93d7a9d64ee6179ff281eee26e0779f69632b0590487e8cb8b812c62255a668c0fc8024483d3859bd13f878da29768e4eaf96ae2045c2bb66e228a2a0ce95d9c84d775ee133d44d12f0cbb9718135a2e9072d705d783a1ecb469d121061918e757fe6eb30144f9e645f3502a1d938ef6ac4598fe8e3eb417950ea57ad2cd369aad01966c0926823b3b756e82dba5ee22ee0ed21a48abb04f0e2ca7c7ed279e6d9cbae746aefc38a66d9813d49376385f359746d9dd20ca61129c803389d48078c9fc2cfc9310505dc49bb5417f3824e65b34ec0dec8acdad8cef902ce4c2fb9b59416fc61d57f25ad376ba92c49677306322aa34239db3330030779c2584200af34862332c62662aeb748899f643b121e38d30d546a8baf980b4fc2e98af2f7b910a66e75e0685b4b77d06a44f39952b85a6ec93027775a8270469a775d2328a1a44b6b3342a2511b88fdad87a83160fd9cc29eb1a18e5c5671817949f6441775504025ab1a885bdb57ca841aa373cad438a031bb6fa6ff92c7bd5ce7aad037709d560ff5a4064cdd1fb2b23664f496d6c181282ae56cfae5feec5d6eca7a3694673cb86cd23b01b4f526910f0e1645ade67240b4760193cc0599c0a82587685841aaa5c9c8e4aaf381d9f89ede6eaff7944ba6dc943226537fad9f044bf1595a10293cdb7dc6cc1b5b9b37154850272a9cfd5395cf3f9fcf0b1d10bcb23ca40cd35744ed11071d0915be84bd0ac1de3bcd41f97e780f8552ed1b5631d0075827b4ae3f49222b0d816ef580f427693be2be18789369a6ccf81e25ba2c1918c6fa2777d02bbf458acd02a046cec23861190e8ef69391076bffce8c1e7418e9e0203b38b73cbff731aaecddd2518264599eac7b1e11fca97029e9bc5cb1f69ea2d2bd057aed555263bc2f2143cdb5fb09039e5cb92ab6aefabd75b239ede5f298e4d6ab0119ad184c856eeefd7304eb116cdc66f362b9a39aed7ebf7ecdc3cc42b1c71c12a1e88622d35f38292554e896f65292099b66bbe7e6defda0cecbcbb67e5a98de58d85f875b457a93da3ba341c7250fb3a53816b02c7f63e32efc83b40c22c7102e7c4bbef407fcb7dc21d585623dbeebd2d900c9d40d69ecaf91a8f867616788bd7f0d8b9c1546009f43f84bba4f0dadf2b1478a1daad2a0ba9c46bb3c63267419474165a264479c28eda7e4f42b0f598801dc7caf4fc44fbe0ddf24e5aa97ea0053e75f25305c46e1c455e538732f158cc9d476427885c305edd905c68c7380f1e55bcf8a5b2d1d6f6357506e756d7858b19fb89d2ac297b858266a3927fb8011170aca8738b6ffbcacbb1b2d0beb78dc7dc60d9d2a0ca2a08773bc719c44df5b0cadc490b37dfb61fd6527c8a1b139b2ba5537d325eae08a9ec47208fec354a015c3e45a0d0ad4190f8c92aceaa8341feebd2fb4e8eeaaa6024fe2ff896b90b9d64219641c5bb52d24f12cadf9faa2dd607f7d7b68d2bf8de64523fbe39e999b15fde2a5f6598cc36b5b195adad667179e3449eafccad73e64b238059237ace416c8d9b4d6e5b209ef67971f1b7c57fa5b3bf284c2cb7bfdb8a544b518ca8af9378da8225b4468e3a515070161c1ddeef9028003bd74f91bdd73f7c3bbac66d3df4ecc01afcaffae1c39a810084c4854954b8ad9fe14f2a6297e7f39cda77bdfd98413f9b945e21ad9433faed40b2d9d98921e86ffe02bfc2ba755047d307aeff647e77112fd3a4b94cc5d4dcc181f585effc0d706a784a14f79da8efa63978595cfa1ec6ea70da0fa8821b019a62b24673ca94d4a70147daffca773f2cd6d37b26ddeb46c8ccca847e422e36142d3c0460c2b061df068ab0754dbfd55c85761fe0705b45239f861b07a6234f449d136de4eb225d8b1459feca4ce0a0f6ed84450ac1dd8f4514a4b1385917b10ec6b52ad41a27c5d983a10c4555c44125320f85dedb003b2069adfeca6db16e55a96cbaedf5d980935cb9612e9aa86b3d4bce943a1818f4b77f7a76b0244e70c7de3c978c8fe0ec6b07c599d470950efe219f558d88bc330314116ea70a7353f5c14ba91c6c0a844b6d4dd86a03f75760867f25cceedea21a38f9bcdc561341759f9661dea5bfb5096934499b755afde2de6c194b153f797defadcbc1e8526d7973e408900c3be3105cc374cfe7d8c88b2ecac952bdcf1631cca75e25f9380bc1faa27161ca9d01ccc71469a63119216577595df0941ee0c2965be2bc9e1317bc4c35a329fa58477097734e940ba52385ac409751883d69bbdcfa7d3b6e81e0ee48d390617c348366c4aaa428f32bada8565adede642f88cacab0eaa0f57d80ad73f2e6ebf44c026cbe49d73c2fdc0359c5ef47f4af37e168e4a80555fc39af4e4652334e2ca065dedbc694d50e50f1877a7bfe7d917dde2a711dabd1b7b55e8c87f85da4a3349a88e02ad85a6f38e62352fd74a791c3b6bd0db0b406abcfdba86f597e542e2539db8c91451625909721fda6a098d2cf38926b6c46a175ac50d2a2023aeb4d3342633ebf128c57f7401929ba249774a5b6fbccd8d4d297740eb36f3b7553c5aa0e634bbf78bea263731ec54150105f2b4666d5c47453579d7d1d6acedae9321c40654fe9d019de959711772355eb3c452363a25a02540cb457b78fb79b9a7258e1b88e11f837cd1926bb46d0fffb3bc6b123315faaeff4adc25e631d08c12f3749d6a9ee6a0ba37b5d1f2a74b28698b4922157dd89671f2f0874c00736cf55335f3154e347f4d0da2ca2bbf083c7e781a3d49fd5f1f4a00a577d8b464ab32373c92c97f52265d848c3b843ff3d9b3ff197e0ca3c7222eeab8fe365b4f33188ee146b9e55d5d8829693133ed3968079f5fa765ab5b505fe8f68a738dd12c488d1dcfe84af806d61e9f928b2fa5bbfb542da01d614530f42695a69731be0f4c8bb78b28a371e4e441d165c373d33651da6d0137e9b3d4bccc6eb81c715f2a90bc96cf98f29e625277bcfdc3ea549b0243ce4eb4be1c8462328f12d6c1a67b294f3b963a50fc1bb66f34436e2e68357077fb9de62a33e99c27b460ebba55f6cf5c72224d59592c4005f27d8aa4d2a0805e99484bb4bb1bb53934e6432cdbc01f77d69404df44d63a1c8e959f3d51b910a2a0d5a82f7f1a40a253efbbc3cac6fd2f6de04b5334063461d0f8460bbdd9fab895d180ccde2e12c95648e9026fb95f3c5f44ccc97cf9ea1e82d2d84877ebd078e6e2f9e12c7480bebdea5b857c16dee3dc60b31e3d2a1114b894da39514a0a676eee475379bfd5338b768a5e8d179e464838bed74a6b0160fb3583b61c038f0f6f205972beb42ef37fcb2efd302285c7e102c93b4e1b158971b782fcca6036c6e637b4f5b42883a10ce5a05988153c8e7f34b0a989195135a14e0dc109a1125d0ff53e646185e935a217855de8590b2edf9f00fa3150b9d606abc54ffdfed92f41b0d9bc6f7b45e14d777b5aed9f17d487f026e451511852fa70ecfea9d3d7554bf8575c0a20561ac52273bc9d74a93b418ccf6cb9e4db87212df534a9380e9609bf82b162829dcfe8aeb305bc58d5c4833352e2cab59f2c8ea141839c37ec42bcc0aa463e0c056b4267cfafd41969c5763899e9dac6ffd753167add1d327fef893eca75e58c75ffad54710f205db2970715bd77fcf8734761e389038187986110d03a93ceb3a7aecb4d6f35c12f2c9931e44070a0635ae17fa6b12c166eb50acd0631b06ad9715c68e955d5392836fbff31ba93a2847067bc299e472bd18334137b00189483bdaf7db922ce20b43e452043687d6ac1bc3e425688222a98c62ef196f3f992e96edaa75d487ecdf2b722948e08fa9c0be7564923715a6176ef10c406e7b80e3a8da94d71a079fb586eca8984abc1f02a42172c56e3240dc3f271e91e62de50a03d3278ed19935ce958eebf02a8d79ab736a78059865d7919df54829a2dde0b2a2b9c2c58a7631e4c4ddc50d9aff30453c7dc114b9553d6e54362b00d1661f5514d29380d61efc5bdde528901f4754fcbf500a77bfb5c9e1fcf01956a7528450fbed966d2dcbc370fa5611185693a870dca574d6732b523761774d152d87b86920dacf098155334ee256347d18865856db9d5c24589716f187c4b8abf6ae27567291f3822ba622f9e7482b6af7f86f52966db385d921b8ad7cfe3fcd67afa6947783c98edc604716e5a407dc82a7a363f241607d05e384b84143678615dbdd49202570d04cb58806671a389424a09a11ddbf5f99c3b12a93dc79f8ffb1403e18f3605819bf522ccfcd3abd22a72b9f4fbec039cf2a1382e1aefadced2d3679d1894206541d6060ebf26bfd0596bf7c998bc1d9a318c1cf4f72c20521115e8806b23ba90ef2efdafed208fc15a5377271b41a1a2179abb8d1187deb56fb5aa1f060252a808eacad5c7b584f68f4ec69ad8022bccea890e620ea7fa9b78d536ce11a866ade311bb5545749d9d1a8fde9392401ebfed01d74e2ebee5f22deed171e9ed26151f0d4be2e3d543fcbcb21e6e75a5527e8a463493030a00d5078c13e7bb4576e6998e44029e35573f71f2ebbe06e0daaafa9cc13332f9f8ef66348c1b80c18fda667da4683133dd08d4f28def159fdf54052c5b87b159f2a63c0b6b6a951d9cbdba603c3211be6ed929e8120226d23997aa0a9264721ec1770a650f5bd853582d2ac171fefb285dbbae86a31ca8b379bc5edf96e494ce244244e07c3900024fa97388d964c77b610da51307fc56e117dc7161bf173d958965b3d77cca5b5b22af4594ba3385ed8cccc4309b6c740fd1c2814291c8dd46ffdfa6170faffebd53766cd7a6b51b622969ba368a5cbd8b7b7b6385cceb813177a48af787505efc755cb1e7a43dfaf36d6047f9989fa41fcb84b570656d4dd06be64402d5584a92f8055cc8cac1fc8e03d8e7e260a4e7ba7d8ec06a35e528dc4dd70e3139a6cbac066983c5e7fbd68dd54d6f8418f7a4c8e80148e59f092540e9c8b95abe8f6f3980a0b6c62130a7b24f3392676fbc7f12124263debf0d7a5445781d5f08ad20dbfb5cd0c1df65b849393878c95c4ef38e5f2242bbc4af395aa2d889d44c520f816d2a837d16e60160ae57312c8a9c3758ac57eea374ec5b53ac83e333ecf6dbcff0d02e9136f5ecfa535f19812ea490d034bb43d24810c04814bd4a75964f80b494ecd38bb32f65ff5a9cd11d5bb02f44c3ede3d9fb01c2d1f6f1df53937af39a51ab6667369ebc3001e1a1b6737274c020261277e8cfb315716b910a5c3eeb40a29a836d6878ac0dc8c2f190f361ac7126e41708a923ea4bfa5a9867d95f25ac05133c547f765b552536c9ef4cc5c18728edb57322aa17a9504af328bed6da446ced0fef2064078ecc151d78b352fd73c268b76735f4bdc673b64eb97bfcccf35669bc560d5757daa331615e4f92a5369e41f700c75a579284bbe931694e3ad3a3d9a811ced9d7b5b259c6a1bb8ed6d69785b9f805e48f3379e42db851758f857769f1b17d1f311aacc52c1175e412ddb78f76c7680a638ddd61e02bf133935e107e9230d9f7b0ed21797e50f00d503f0766d615c58c13db35cf9d22e1768774468058b232e9d33162c3b1d2ae77db9ac838e350b30343dfb228c29da98a9a1019ddab14d83c5f579da11b29b695dbe1e452a3b385e94096bc338fe12da13933d16a7e7b9f52ee09fb1dd04b42df39386638c9b932e0ffc2bd5f59fec24e7f9954bfd31927f0196289c30667b9812d8946f08f0e9ecd0687dd4504fbf625507813999e5df012aded55cca3e75ab49f3f6898287e345640831fbe0fab35c3f1ede182324bd35b3c4a82f9da39446b60ebfe580b8752ef594dd36bc04da53e602e7c0059d2ec5be9dde1310970169828dc6a867ea2523f6aa8e84cc717013246c988ddf74c10c4829a4fba46cba3861a874e9d825ce3047e80116411b9dca1460c037d06f4ddc2323a6723d6ec15a5cd65f658a704f7c34f4c01a56c1062e303364a5e2644637bf8d910c9585d5fb9cfba605c669b42f05fa84c1b2cff28375ec97e7c4b1861644bdb0dd76076780fa989c709e0fa81d11694d83b3c2cbcc52622f1f09bf995aaa4f89b7a6128307d2fb77df5bfbd902e843acb88f0712ff05c16cd64abb71c8be8aebee85a9441de2c9f91bb99f57e3770c63b7022439ea138a79bcd16c80093a4c6ecf699340216fccc2668f48269d6601ef6d2bc99a586464095398ed9603c84c338fc7b463f3277240170d1a9e4dc3f94b72f6ebefc3da4ddfb7b033ec418599a749a6f6a29f11153d56a0cb442265b112f61542a142d9bceafdb6a5903c46139a88be41df295d6baf9ea0310ec7b0de2d6d1015d0e9cbfc5d0e6e46904607d28cb5200f04f65c175ec73d3c92c0e4cf8ce2e4890be93070c7998b46bb46643cb8269e8a1e12cdd111d294ed17a04d1f5fcc9b091f6fa8ef4e7e0db60ee7ff3ea7358df70dc642b8366fda0dbb0f291bbe4a97f085523630900c586cb2588813ecee3459488acd042e58d829a2ccdddb61a648ec08e660dd0f90bd5b4a185bcbda719977c0956b0a63be874439fcdde49679eb7f58bdd97eaea89c1a724ef87651e560bcbe35593f999ab8149449ce05c32b046b93b8607fc295c3bb449b2025c2776de39fa970b32bc15f704f2d1d128baa90f162067debd49a0b392a72c43454914417ccff93ecaf942d53604d30864e7e5a9de2c37365fc325989dfbb4d8b461feff443742d2cd06f1f220b8b0e8f85930b8d007b06bf89d9d0aaa2b02be0bc2fc46165421879be1118f973b030a3af2d4d8103a100c51858e51c787c4434edf737a9f6148d8eadfc687105385269f91dcf90b3e0cba428cfa403cb093ae879aa2e7f4ee388dfbe4c46cb37322636fdc95eac4f9d2f2fed1cb13e6c0ddd32c63873a10bd49a40e68f4675dfc6d4c04949f709bf5e882ab162af8f2baf61a583d1799b39a8c6b72664075971db8e3ddc5c8ae92c716a933ccbd9fd91be8c01b10464e1c2e1d92b44dfa33bd3a975d8ecf62a512e26159ff5f10c8ca228f3ac81f37f5657e3e01382c35cb4da29db945c2ed721a58079c45b89009da31dbddc63963a7885a1edc493c0ada8bf25c65f38db58ee3f90fdb65e942d14fd2060dc8dc0c4e826a067999074b31e4947535157f9cc7c5a04d16990b884ae33ff12784597fa288c4139beb1127a6a9cdc66ad0d3ddb61fd4162ef1487b55743e372185ec53b2028aba36cacc4ab2f3b058576c3fa86e6296c387a5036cdffb316f68f74f2555b969e7aeb5d591186f9353ae7bf4996b945d8bf86f2f6b3e7109d8bc3eb32c616e498c79ccee96b627b16895f19bba0b491f4c3aea5fe74bb596aa6e6199aa4899b0749ede63d822daa1d2b7a4bc00a9bfb0c859238e1a6f52e90fde2bd314df4c4f40b9be6102567573c809e007c386eb318b05b106bb0f9f1de896ebcca9959e79bd6b4a995f48cb8eb5d75976445a491365c41cf03a34c0227ea6f21d01651dc5c2f77c8870e798a4cb9258fdce23448d9ff512b5952e0177f4cff881eb2d2c41258cf4396f88b4c5f0e1d1b8ee3e73d6b1879c1970d6ab7e3364db076d6ffca959562bf40d5cf2debcb5296ab54255b786d7db889db38a7f6daa5021393bd2d1f15a6eed775ab77491be36c96f3dac1bf7242a612281bf5b347edc442827fbce33a74e7ccc28aa4186a72fad91cf15c3d30823a0ee88c6163d342f37123484a43f5c6194da8ea55786b097314d58a3d8995dec8e5ea8fc75c7a141852b993f2433a31cec57d5d9873943ad5b10457e748f125a31e09bf0c4d853d576b3e581c3b38cfe686ce8e7a2d009bc75fa9c93b7ce915a2e9b2010425a1e316107342ab641019521db0ebdefeb3e081d7a7115d475ca501b4e8039a745a3902f280f2624eb9824c51af47a70ed8bd96b211bb42a4a32728a8565cbe1cedd95fd8b82762caa7c689302ec2a9c431d106bfb260485f50811b6818e939b27ffe72a0108dc39b94daa97dad23107ff0b9b0c7713f9f1dc974b9a84459540dbd8e8c60619ba69bbfe2d1aec9ad84cac2aeb9280ede9674c172a0b46fd5a63fad9cbd28dd870a0ca4ee8eabfb43e6e3830ee60dc1a1add4a9673da940fd84f276088acdca200ec78515dc41a17bba64d6ddc36fd181a1aaf236c8c4e98a9a1a8488c54ace945cdac0bd7c144ad01ad4bdb83cc64a49e5ff3c04ae484a0b8a4da36689b8efe20ba6fd3c10365ae183802e88364a2a17e9e18a9fc326c5452e1d81740c20466d0a86ce1010785bb13d7a2650ecb866951ff5d2c44f05dc1b66ec492607b636fc7edc3e2213b1bc33cd99bd0e43b37e5de4d22769d892b09065ad9b63a3b1e930cafdcef4779056737f9e7fa3ec181ac418faaecb7540c061e335279e909a25745adbbb4e5edddf019bc97018e6b24f8462961e3bed606228d81166672cf6fc02cd84fd90fb88ae1c38afdba0a6d38ab495e9117f8169cbc65c9e49c3b924d58f94e5f498337a2cbc3de5f55a41b8c64e55b0ce0797d2098386aa02fb867743cfdb32651e908779808e54d470bc5a3efd0b418a38085b39cb0782f92ddcb0a40c585cef5ec8d5d6451724c828f8d31e2212f591a348f8f000d917eadfa6ea3ad01878d886f46b1206559f8267191a4a9f59026e14b3aa6d4abdb1663cf99d5939e31cac08ab82bc67deea9d598f84b62dd0e02c0c7d5c0f400c61d664bbc8bd12996a6e9c0dd1ddfb1e36e99545e9c4e7129a89a50a060b41b33176c66eec79ae2241014ef22afca1f95978971ddcf4ff3c189152f865c1c6d537bd50509358699dc1aadd79a0560b0f4de091007b8b207f0e9722678a1ee0fbb9e4da707682fc81f11a0b9c2a7c443ec9c739089bcc53bb4786daabb970b084d6bcfe61ac1f94ac79ba765003ee08c4843d5bd63962c81845f6984e6c4ee75f1c51ddf31494adbd18647676930ae8fea8518d7d9d041aea9cb78e54e81ceb025980fd759ed29828b93a614672f96d2fc41b9c46e0b607b6cced3d3e76dab78832e8e845bc79fff622c4004414c3dd478a4671cb764524fd7ad0d63391a70367aad2341493ff75cc260143c9e53879493a50f04321d9a78a2d4b1e3e07abc3a2ab98efff2a4221521eb182bcc1eaa9deee3dfb315f6f62d077f429f1218d076851659aec8c18f07d57d2bcafeca475aff0391290e671b9ec7f657365ac3629b3763417e627219e2c093880b72fcef84f2f87be9e4d0900c993a352b2cb4740074347181fa13bf8a6ea66f9efed969aea3f5692ef49e8df7030eccaca8f52ce4f28e1ecb1e8f55ae82fcd7d314ab4e6a95a5e1a39a640325ae471c28c29f1948c9c0e9773c9d470ebddc22b74394f45505719506f155549c8d1699480415beaafc62b5b52de6eba4cd19a327c32b63f361ec93380c7cb9eff2fe9f7e60a01ad94e140b2923014cee1b0a3debdf18d28f71c6322d95523bc82de636dfcf109eb0dce6b74412695c857c8a88f89b5f1490ed11361cd2141d50bdccd560cdc2c24822ef79c8a5610607d5da5a348418f6d2a04eb235db5cf4160d1f29dae9c22bd6b1564d23d52c22a763a5331f2ac38b4200d07ae9ec48e1d39f9c167c43a6b85bbab9f3d976a61f685dd0ba3d629bee66f6af044fb39e1b3d8a0430448a1ac5d8d32dda2bc9caad6267e8825379ca4785c38c1f1232c31be87e56ce285f249c4ffdd0282840b2080aa53752528df47ab298197bf87ab29b796c173befa81f6310f3cee3e05243c87b92564ed340019d24495542a2c3f782a86385d387d9027ddeb295cc3175afbf5fbb72a5170c4184f9d307df3e37e0edbe6f650bfa2156874927a71386cbf1447be4c4b1fab0f639017fb24ca9b8e63b4b4d745b13208eb7c14ba48043fc5fde06778b676301d471c4f9fa1da362d8895d64a080aba7b1367fddb1e7b1334fcf5842ff482548aac94177f5af50c8684c7008cb88a60b3dc51db3168d6f6a469f6f6597f06be90fb1556ddc0de0fbdec244ffcab094c38c8e8757a96f230734ce82ba910c44d59640cc7a5ef15790e6cab0edb76877ad720e42c3e7c423075d493f47517c5129e702dd9d187f88f76619c86f738562f9aa36442c1f7c771832805fb8c73425873f49268314f30a5a29085cd49dd2b394de1bfde0c819a32094a90b7f14148827e34e2879ca12909432acd62a097d70eb251251dae680ded6c817811f41047d0dfa2bbaaf4a674db5107cf954390b15083c7340d24de4bb1bf1d25ad2e7f3845b7a91cca5e6321fc1054b9dee156bceabc24691469c849e9aeb07359c07c3dc714628175b3ea2bb26ea8355d89236e1239b90b120641e15786c89f3cfd37d464a4048a8c908d4eefeea3fcbe9082dcd9b8081bcf21c87f18d798c0fc7e5226f5cd5321a8f7b8460e12f8ec028d7342ca8a879b8ea4e4f52a9a52bbd2730379dfd90a9e88acf376a081b1af6408a7ccec87c85f30c0ee4807c381d4abe46a7cb79dc8e612728bddf9ee31efb3dc0a992ebf2bd9e63915c239bc0aa3828264100d9876dce1f5418128294db93a1e745f1681abed4ac940de8585c5528d58cf3f6527d8364694e98778ae2a94da022fb99c75ab09dbdfe3068368c3889c5e93af094402c549e5cc7abcb33297be4ee2ef484897d0c8f42e4f6ae79fd6d572abc57e536ef78d2460ff3e61b9067ee6437e774733c097c7d8decb7faea1402cbf843f4f648d856730bb6b9aecefb57f174efac034575c986a23fe4a895e94a88055477d6b61460d134b333c0406aa42029de93ac0a0dc49234006880d25de9ab017ddf94d7dedc5abafecb8a7e10b61fb3f58903c8a03b07f067ca774eeda0aef30812261a81d65fc23f5428acb044fa8cc38374d7e0a78dc3e92ee7c39ce6aa69eeb0459c6a068022059210d601b951ad0044c8526e064299d4db931289609ab5f4d1ef951e503c6e91e72c203796de4ad504281da90141dcd0a515ac0279f04d4ff8161c423ea3b8300b85b774fd775ef70c9d9e87b738123b40f36e8847c2825cad38c876c420a7b09d4514125782e04a418fa0a5b5c0e431dfcbc15d3ef314e77e0fa669fe002b80c18e96c76fa1baa9d57323b723e9804407c5ec5ad75454c7df9b4de04052e2b44eb4c9ff68eb291ac92be8fc2ca330b39c4e8263e942442af7dbf199e525d300c24d4b2aae22aebd60e469f1d42f5c1d99d4ddadcf7764a6349cc758c0e902a98b033a45bad8a205d30b97e8635bf86ee7282ad0f5b95a7e1990b6dfa075757c2f0a2963333d41a6978e9cff2cd5383c4c72cc4b0d06e4bd403bc3fbaea3012771ead529c6e723b48bf53ab0daacbd046fcb3f8c0806cbd3ac4dc76146b30329cf5e39cda6e1ba94cce8035b56b3f7cc53242933f1744e869c82c6511d0822defb368579686c0cb4dd309c0ac5f26231f1f319b64d6979949e73474be37a0717b4d1562e29dde84b991fbce50f8b50d444f5abce7b5d91f18a843509de4a933dd6600c67b526a73e98be4e34532cfc5f835fc613e975d24da1bb811b41457f61a777104c825ae9977545636d6fbe5bd8d8b354353d25226a1ed3b35f3afb1751b7788d40cc1d3dfe69f4071083fa6671132c63faebe8ef442788e108936082f55f81bc647ff7f0ee72049e5a0747ace3a048cf55655e5106de8f97764b607a6ae8fe46f4a33bd75124888857686ade48f2e2d0c86a4f0ba06efd343ec15e250608b384de551173f99a5c188d114c1529c798fe510196bd8cefe54691495c1128bfc7410b8b28aaf6df07a491c82de7fbc4f5358db86476a3b8e2c7bad9130f4636e2eb747c3cb8ada4cbb20da3925bc6ddc2989e0ba6b5fe914ed45a88f5b723129815fac23b46cbbd3b053c657f74f0ddad686f2daba0fec631898c7d62265f0cc18e364ce1d905e91b63a878cdbd1a8304bee3239919da5dcf79dfc7fde8ec72673c5455e9799d88312405f3686ff8598391ffa664049c1fbab316075886423d8aca8780fe39084e15b2fb80f9c4c16fc50b6f5bc1acf1edcfbbff901e6f624404bc519c434f412cea442c8d9927d40416d3395c0c6598b14c4edb77f536773f402f89d47162271b6be56182165fc1666357cb15c17097c5fa94d90655dc424965d962c7a25120f02f774fb02fd190107ad12124352692a3786c58b4ca3d161f33b3869199f7afd8cd5617f3e4ff3356b947798702267926da5e0a1181a61d22ef5aeee7461fb28c56ad997fb1c12f69a24479a13b9d887aaf518e243f5f2122a91eb9a8ffd60d111941ad139309885073437a7b0eb4a054049cc6f9a8aea12bcb160d69730beb19d433d233db9037c05134ef99d28d57ea16ed9464b385b5e30e56c944e2c055cf98c2751c83a0fe3b89185043ed8b1c174bb8b0c52634552091b7821d3fd26f0da631fbd78ef6903c70483b3824f696efbf4b1fb7ede4298888d96c3052566c6ce3f1edc803245333798d925a05b7be18c8845b4bfe35e44a3d8d7dd55e64fe160fabfee25ebcbc97217a03ae8b0ea4194a5f8fde8f4c985910c978f6ab10b3fdcb1cad3c17a57e1eb11e63f77e65220a402080229fca5c26df7706942c4493c2f3b2edff856232f7b1d99c9d9d3c5fb6b3936cb4958f34f5ffc0b3019860b1d4d754ed2953a42d0194e92fd01e74a3813d427cdbeb0d57d4050459d4116f908bebee543edd64546a5e5c1639fc90adbca7d158e7e3cd9130da895c8fc03be98f87932fe9907069380ed3e0eed340aaa2ab5a4ac5c43d244e627cb2b2aea0c1e93432b8aacb05d06490364ee8478c234c2b36234cd8cb8909db8fc5e629e3dc9e1bcb477ceee83fbc9577bebfa6b443d1f88f1f5a6cda6e678aba7eb1c6d40d4e860ac13edba20079e36e5409534d572f20dc9fc355e9323a0582481a9c9691c066c71af431f94e04aea26293f2006b785456f84cf2f697126ba4d7bf9b0531f2166496827a6735bae70435b311660a655bfa97cd9b1443af9fe3f10406de7e2f866131ceb386dca3ab98789802329bdb9aab283424c0db698bdfd068111e90c4427a69c35dbad25423c125d4183260fa4468779e596dec19856768d5a2fadf7adf6b4bf2966561e03a6c5eb809423594c1353423b533bfb275258c395015c58cc1b3fff8a4d0078f075e1cd2a23acbf51ecd2100a21d99480a70b7ee62d8f86acb3c794e36789d0e9ada95d7932829b9a0b358c9c5c2c0750770e80b627de3218d8732e40e929093c06ba21dec02ddefd0100b7e15f1d7c9143195da7a215e57dd3cafbde0e609f7f7f46e72b69ef00a0b886f8f44f07452b980700e3e29cb6b5c478e32e8ccb11c9e6917aee9aafbeb78bbcb3a7beb4069095f1064c541d37a059e7afa49bc484cd694981def59a9ea4a90375406c8ee8b175232c13965b186732c1cf6b9e84da2c824bdbf6188e05492a54b3fc3d31d2dde28c163ecedb72e4aa234dbc6ba02f386ac0b237d693e549ed96679ea0dacbd0eb845059b5928a19dc9916e532ed83e98238860a027334e2dcda1fa58b48eea196f222441b22db8427d2401618499079cded10641fe2e887a0b4e77c111f01618f2620f721df6a8a0d085900504c8acdf0e84eed563545b41e1783e3afb213462996c5b6f2fbb0c9e88a7694b0e99217f067afb82e12842bb39c3ef0060e6f32d583eb74c2f558c9f1582616b06cecc600550cafb34b50a1fed6264f36d335a0a093cedd80371796da526967959a302b57b96ba1e88246b7e19b2339f0dabf1444c83aa66cf2ade332c9031d8b3a03e21399b96e1241bc6bae85b44805de9bab1f2cfa803df49ab79208d0ae5480166fe19c7b50efaa7325fdcf7730fa24e8e44b59849dccb4263169a54cbb414e80753aa5a6c081c71b3af4dbc39a11f773b7c129bc7461291629af1168c115c844ce6d52d50f39c818b65873dca62e1d81d6684652dfb8232390c20a77ec996880feb035abbb6954b58bf0618c440ca61dd6fdf4da7bb801a0bedd9e3e004085476bae0155f87085d60de188b814a9937be36ec6bb42405c657f2c1a688dc19e38eaf12acffcbbdf6e47653f5392c82179c866dcb82db0cff90a99ed81f793e28e32c8ae2bdfc92863b1360e50884fc4d2650168513564f4883f26e54a4b701bb1add0c5ef72d532d7040d6a862b7c05b0c568e8245e0f6993aeba2e8685ba63bda0fd3ca1db7407546f07f90190f531247cce2f7abfef80db63624ae6736df5c5725b482b38dbb58c8fb7eed8190d17f0cd0e5e7513e0ad8be71eed050e73a8735e2f5f8ef40d0a8401aa3301e9c4e0f6b465e8657a73b343933ed5481288a12e19c75c9cf3a4c68ece0b1bbcc7c56d6136e6fb635e7c7fd333a180b5f96e9bcccf15f18b6857a0b2ec5ab811cb97d65ce62b8132c393039584027e87639b13c7abbcc4ba76b4c4f61fc13e25fb91b9b70e772cd7be614dc379b8eaf7602982f7292f8d33ca4233716969b2de0d7825ed7a28609d7110a56d048e140ded5c5ec81c26d56dc96d79b0068485f91ee6ef5ec85c05ded104ed70704501d921cb8358feff04bcde57e50d4a6beb497a08c65efe072cb3235ec59f0bc925dc96f8570c40353d112e32fd30fdc45f57b4b5db7fce2dc27d41195f8b0ac59c5dc697ac39c7bd85de68540280da6051465bd0bb08f2684fc23921e2f7af74bde8ca279bb314a9e1b719c3c0a9d0e4dce9f214f205fe4942a14e3fd5b317fd5b6521ffa6241ea811043df84182c0039ee5463480b40fe6e536f6041011e96b46995c1400e7ebb2493d1b4f5153aa72db850b5666761199d111cd3b662d1aaa6539e3c80bc1552251c3d6b17b7ca96fe7c2b7da8d0a7febcbeba7aa2eb39b7346de65fef49050e51e783c86d893e36f856c0a23334bd02845bb0a6c8aecfaa5a0a85a1199f9210c84e9215eeecc97fbabc6ed7e55e93f612adfbac3f46c93e1e29f54fbb705286d78f8244dbffa49afe68cf3865e01d8a231e2da97830a6d3d74a8b88b942d7ff1138100ee5f59c89528600795ae1247c75914a649ccc98b9e2429135e04ba6f80732c0e7689580b3dd27fba84e30ed1238f6b76b2f86e64f6298629e0b13d9cae875d6bfd9eb88fb4ae74853120dfe4b7acf3776548b64fb250c25f11ecefca683fb0eda2fb8010cde088f3a2fa7ed35ee0cad6c5e90ef439ad861417df79096c4c017549cfc2370547688b37caaea6d1f121bfdf9757a641ff7c5230836269235a0f28698ee7166da2f4c0b7290cf8374ce54e087d99540447a4310056de1aa52156180f147bbea152b74c3701672a8de9b55d50905f25620aa101149547215ab05a85cf99038089d28ef7b1e178b6d9f7ea30708158d6bd32f3078c1d5580f835ba0612892073137663e4fed745acd508298149dfee1282ae4dde843b82e7f992ef47f7ef33fc1d940e26e6b7a4066d96bef6bde8f84f6f96d78dcb9b54d9f4de83c110a78b402145f948b1ce04cf125a7fca4740a260ff4db1000abaab97bcb22c2dc9bc42c328bbd0d8a26e793188f05e9ea611db2bc2a7c45801dc84fb7d877b6192185715776e7df4e7717bd1f326b1cd2b895e3662622ba9c079463c0843f8f151a7f9dc8d80cfc484c9f713e0f5130aca7f1f1354bdb699910eeb0c298c7a6139601f97d9850ec60ec2f3a5d98ff93095be1cfeaf2e28f3b91309cacb3f51a8d2b0af7e5a959af159f7c461a4885e47583105762294a54f3ce6ae7069fb9f80d4875b95464b9d6aea525f6c11ec0f6b4c6c5a31d777441bebd046744dc22c5598796baaab14e6d7ac5de8b5c971a753c841ddcbcd310c253e8207e52fe125c981b6eeeb5b52f58801e882e607bf2e2449b2b42a7f812d2c771b3566ded9a63e91f0614bfdb1f4caa54c944b83f56e3ea51be68dedc237b09e70bbc660a67b6b10a23dfb119f3f7ad94faf190ccdb306115bedd26615b9676905ec4eb7300864dcd3df2ca558b47030c540303ffc6149e55500d1ec3b3418f7f0d14b3a3fdd1216e47c6a9567a131936952b50180acba2fca1871e9819ecf82b6f7906d7131508df8fb6722bdef0ce14790995e6346d485f102b9414a6e19f2ec8eb441037bc4eec4334f111d8cc47c9c8f9d1e12c5d237f2ea57005d16f75e25561bc6ece78cefcdf81264f269934ca68e4dee40108014109b1ece443fa902dc82280c1712c22546ec4442e3e1773a473d93631385d52d664a7dc8040ffd511bf0e59ac24a88352ec76b1f73517d8f57f5252b4526b5c100c800e82def1f3cb5ce4e1fd484284c09237ecfeb7403f86792edde863625c1f49fc0f583297c3e49207dedea0e714273993c98c68fe27880e9f5913b3f3f9ac3c8f4f6b748e46c38a8eca20b4b765eeabf47bb1a84518f6c7f9b5bc066fb5ca1db3ecf946f891b2022a34723671593370d2dd2b3e81abf78c4ef506084b06f5f93a2dbe047c40d732fbd27aab8b52e8b73ceb0232aecc5c5519beb963f4b0161b67b6df6b85077769bd816f90dfc5ad7af1eeb514f4847c01640faaca0682261dc18e5c69f58452811b827648921abb14e3c6427992971be048b42ebff88f75b8157917c6c8553a6064124ccdb24683d19ea02c8f0e906fe8b77612fb2c8244c7b0cd8ceac07bfc49cb7d5fb5f94f850f05438431e88987103f34b55c9f5599d5f8b9813df4be613ce57d9cad7a59984066415d8fc38ff77458e34be9fcff2fb7e19c27957b85607e57206fd93665092a35b0a1085bf264b72ed9247706463d0e17ed25a2108ca9ac07d456bc2ad2cba270b85f594ed1b0790c8c0b4efac8418b54750f8375b6c30ba93e302e44e9ad51fdafcfe8a9dbd12025b585991a4beb43a3574cd3404ee0f3f215c3e5682e981b37b0b36006b0d75961e82d8328a2ddd6bd8826b2e59a9b96253211a8f1ea131c99b82117fc5bf5596f9b3b33a894817edb682b2f8bab36de9f500fcde470549fbb39900f023f27f13cd73b6339c841b354f1a5b320ce603499ec1c165ea74177c850cf3fafb58173dd28933133fdbea2241b094ca30019f22cfbb8e2c293ccbe82dca0688b67580a47f2cdd69eb0d28af111c14355ee8907ff874123ef81ec7fdc45e0771a1243879ad211d8b4f7c21e70780fcf08c6aadfc3f8af217a654d20900255b32467a4fe36028e79b0a3350eb270a06108efd77ffc9d042cdd71a84930d0afec2c204cc08a0122fe5761b9b3f8d6ff8469f639313cc7196af845eb6f2dfdc8bc07c086c7600d3307bcd83e37b91c37bb259162ea49e506cdb7dd3722ce62f3e1982679bf9e704e46c14273079fc2d14d0b0629ab51cfa85683e8664ac6d81ebe30fa5005f3e1ba8a48e863fb1c4846b5765f1e0b851d646d41deb4006f8af32c10a55281d8b791e6d617b8b5849d9e8f6a7d2dbb2b9eb7e7b494bb54a3323535d4fda3c2f8ec6ee6a81ecffe06f5a6793f304dfa1ae3b164f39da44edb088e032df93c81ccb484884887e70dc151356ef1f8b6ca99dda8585c13875a4b3e4c42afdea90d936ca1291fdf1f8146f98f3579cea769f4fd25103c7646a6c944f826784c2bcffbedd33dd5788d52aa96709a355cd0cf8869f7d0f196d217968c450fcae127d6e37bfc4cb2e150f11740beda9ca47d2680aeee3eea5d05ca25c44fb3c12e32c3cb1f4d038920c67b7e658f5b273945c46f813bf378b180c9dbb7880acef763ab07c3baeb003459ab9fd202003abb6f3b81db0e33f60efd76dc2f5770dcc9086531c5698e618aff1491b1909349e2e9b6d3516fecf0e2269045093527e2d6ee95561bbbe1d4b01f8e6170766aeaa71c2d43e2a9d951785da2e1a1cf4a483e036bf77b87b1b70ab49e1e89fc9598d84cb724edfb3a69d18e6410498cf9a9b25d1f1f88c33004c7f013314f3959ce153d2b00987bc417268d9941404186998d89b3b29823c87f4419a431ec19317b52c68a13b06fc84ed3dec3a861e7e23a4263c4e7886f9a5d8dc77498f00d1bafebe66d2de53cac752c5cca75eb4e8d1621153af47722c057d1377db9db20d109b96392f5ec506b6853f006093abad6cf10e805de57fbe8e698bee3132c51bc6aaae1be67a704c325ab921498c8bcc03b077713c4d2e8dec1343c05ab9cd804e860bf7c32ad68b96746bd0ed9d1fcd4abbc78aca5678e937b5116a3385fdc7237557f3791ce1ad9e88b70a415e2f5ecb6df4d2997587764533c7ff67e30eb29705037dc01c58786f310cee45235175b6921869ba42f0d9776e6c1845705ab89a843ab477a009229a9689a56bd9dfd5a5b745be3878ce76d31f1f3a7d0ef8b68ebba05a252afb1291ea86da40a15cc54689bd7a9b82e4bce5fb4458a17b4466869c50d1922574d0fdd387634171403a0594edd56f3240a03ab9e240b1a01a398ae1fb524a529d067fba9facc265668e84d98f53adf9062192208a2dfc0a6a515ab3fd4c39cfe0e09f2d4ce46d8234a1ffa4221d08a586e54a9b3a71bbff1e9102527bce1c0ebe82159504a5be3633ffda1534b2c435fa8dd19877af53e2a7661b4650a30170e5896520dd9affa78b205bea486a50051cf0c402eb7d3d7b8b3d29d305af6d514ec30121ee9fa1135b0baee79c21f29bdb0571aa537e6493f15ee4f088be556e224195713c9a71b1502168f3659b85df55835666686974046c24669633fd46354ec16db50df93df1288003da23de80ccdb8ce21e8d7a152de7927f8b93a6c6f86c58bfaeacf4d0f2a20da713d8096cb107052e7b38694dc59c104cc97506f3a3b5830f6091f75123962a413f10748fe307b1066a050902f249b0115650e358260b773192ec0606523a93fe01ce16e48018e90ca3084a56bc5e2d0db0b0ccaa65c47915b7dd042a96337a6adee4a91d12fcf8f33942069102b573d459a8e01674bd09954429bd4be159f2f1876a52c9e801447efeb73ea87ab96d09bbe061558a785b287cdb11a330102ab5f91b516b219df651205e037f5491b605b617e34caddd2a3f12c832f5c505d5bb452cecc7a415b161a163f54b47c0c2aa086a97a9b7808c76f5866769f2903597447f0ff26e1ac7df17f2b118b0a0a941d3425bc6446da1832eca7f56aed2203a906459e6a31920f66a59360bc09e1939f35e471bfa93f2a4be73ed159491d5528b7346916ed158a2aadc9c01af2d21085b30f3ccc16f4c9ff9a281f7fe6da4dbce226dd4a4ea1a433594ec5b2e60c03c4cff67069032fe72722040433bb86b8b6df8e57c4d1faa2f5f8db3250b00d266af688c8020a032d3a727e419f41160ed4c713e813bcaf8598e23555d58e831b78b90595908d72e9980d22acedcf9b7a19b21ad8fea9a16fad21030fb45f423a01120a7ae93c0d0525d954a16431619ee33889e81d46bd8822ec1b84d27570444ee5929c2bf21cd3397a4bbf4d43c9870a7f7a3a213fee1f3136ec77e4e21cd6f5be7847672b2f512449f2abd7da12b409abca04ef88f2e9df391e8aa34f36943c58b1f4cb3f0beef0c4b696da39cf2a90e8446f9b959644ec68942520031bc067b0ba278d88438f7fe223f5572f8175235638d6fe4e8469adfccb612f4b6a5e930fc526952573bc55d22e76c3a63a0932a6b088ac20b66fdf4fc6f6c1ea7901f8321979d79e3f2d6bdcd2f20486c8e0578ff2fd664388e8978229bd4827a63ce2133339588a3678324a0bbe7b1de5d873d427614780725e3fc3db1a8a2856342559ad43c5560f33254726451b3f90562b4589abbbc482257426bf2c18d7f59b83cde927fdccfe3f7fae4d6e4f8a1cabb9171b47c820d033b2698bab23ff3287be6dd49b46dd6b3aa8c539e90804f1034aca083273b2c2d52bdce93d6b29c2645117476a3566c5d87965c780e21ecd5e1219617f41bff48b090ce1bb120dd27b1be14072952bdab9459eed641a63c9506fd7eef140da7daa5b077affd1adb31b221155ef6b0ecd0e5ea3187557491b9336a15660fcab3eb395915e161d1f44376763db12ebced97d5068c932bfeeeb451039e6e4201c5aad7d669503f40cb1a48fe8a1f650e0eec4579a639c94b12b0ba606f87a4257267910db7389d0d91ff0a680770e87e07c8ec9f73de8c1bc612b5c3fce6801a5282f66e0da7c4e582a338d077dc65e28430078b37de7838e84900c8731460d02dbfe5cb2e6d9d308505bc43b3ae3da433133851dfce9d22a0e08915b01dfe047e1ea3b133738af47464cad08e4c554bdaf1890fef61a74c307d4da1054a254ab52a115459fa02eb286455dd489b44648b8da65e15c610ef044c26068e22cdb233c7fab0b641e2981fce7dbf1fa23f5d46ff2e005048be100e294b127d63137ecc07216b9d754d2ed8408333d2f8f67aca529207d4aa6a863cb712d29daa4daaee136bf18cdc3cb5a5a3f5c084463fe3d5f7cf7f2fc3667891f10c37aed80d4918bd6df36e7f29e5d7e562cb6742436e5894df068a247f6bfa0d7afce42663d18aaa9848080da175c6927dc1368f831bb79251debb50c9d049f80b2278492336b1bd621dac980e71a07f2076dd91dfb5b8fe04a02e96d7586351d0cd4313a7846143864a107a0979063873ee72fc38b853cad73ab4cfdc2e7a032b20c4bcb3df77d4fb7fba3fda544edddebc2546666b06d5d468ef2bdf834cec6857310b2e93bf1ba932693bc08eb095f3027ca0dec4fdd3f1ae143dfc6646dd2d07397cf64a74d95c4cec0a5eb4a346ac552f93504f17ec538a78469a8122cb51eab6fc6c5d68e5ea1328761b7f2bcbf445276161b86410490da474f19b594a2bc2f5401232e3663e937eabdfd7ff50639281e5a11541069b8c8741012fa3f6f8b55675098bd6508b6bd749129672279f5639372e594e1d4de44fe3e097bfe9d5fee659f98b654370a0905f388e4e0cb2ae7e02f90da5adb9f003c14e29dfbf8c8ed471db588a08cf1878a57a7581f60e832a61d1aacb092fb2848b328e4f3e29c988388e1c42bade37fa6181f7f11a27e68d68cf27a1e323c6fdfbb831951a5f623f7f1a54a8c9b94f709fff3b3a2a65100fe4f3eaf9b30bd0d41724655054675178701124c8255a6ca28e9396e06cdfecf41a05920af4f72f3ead245847c9a1566928093595b97697315bfe4383df6874c1a44c70d2ef5989d2ced44899495561a143fd0a396448c38c05ae9f47e15bbf6ef244160d9869d0299b383799201cbba973dbb5bc9bfd82afeb1e16e2347e14b99b9b59f6a6319d5f230b41b868112731c033b8b8c8253194604b4f8d327db5d0b2e2f60d683e1f16d0e63d54e2a880d4e7a2c7d114bbf6d505e6b1e1fcc47477600a4fb9684dfe3d87b4d9c56e64af58d39295a9e7a691e82481f4d56cc43a18f867edf68457ea97da1f5bc45d357dda0594a4ce1081986735df0e069c40ebbb28cdd872453a35f35f1f5bb08f3a871206bcbba3925e4533f68b90ad9ac935b491f66d7557396ecb1275e1a91b19576d9c7cd1e8877faf4f699acff892d37bde00fffd0cc2a46bd92a4971c674746c8e94c511e6a8dbf1e1a2113caed5d33d58907bf0398059ee564484b309c900476c5cabdb29ee1ce3c998a610ee50e4c7a9ad4a59447a97b7b41b2fbeee6fc8cca273c4bf1fc7b1e6aa3609fdb11688649c0df9de1b8b19609a3545b2dfac64d845cbc64cb9c0215c6f7cdd662a1a5ccdd8f60216e7d39d7435730fa73095cb2e334a6a19f9b4bb9b450ecc303553ef961a5ed3aa15eb53e68b1805f36a9834f577383477f2a875e9e1ba2dc5193974e72f4fbfbafe574b3f51e1c98442330730c7ec3ce1666403b23af45241b8452e0cb8dc0c20dde9fe0042d77a9c24f0c038a236dd12375a17a404c496615702b086e2f57b143b669b17304f1721a1f6c4f71ddec2423133d4f74e316669094b963c9c34f15118d5d387d0aa450b6ba2a4aa98a6e4bb8c2f70737b3feeccb0360234362fbe1c44b7fadbe4b3936a936b25f5445d50e463bc232b38a80c034343d92ddc2a6db4740178f13a1833656e079175ce1c097b92e3b32e6fa216bba19cd0b4da882e2120f2df899bde06cd7aff4b745b63f2632da79c98c893970063013719fc9b51a04090d40cd7e3c53929b00b8def13829f71f6c84dfbea3df5f5894ac99f4da559b77b88944f50c3dd9a46da478e91fd2f1105c9dd7a4fcfad0f12678c21e50811bb72c70526a64ede4a3594332fa2c31f2c2cf0727051d3d79c2d8c7db5ebc639e9e311869826cd6593c152cd744d3c0fbda4275e7063cb72bd6d147ed04407089bf43a28c7823afa42e32c0595a3cd385eda47ff02b62fc122fb406840818dc7fd74f4c295571af91a952efaff6e8dd5c24d1f027568e28e98ad8b41913acd036ccb9dd6666db6ed4fb058ffbcfaaa8c0a8ee44179099605177367c1361e6a10519b000344cc4d25afc8f829f8ebbbe0b42898ac1431ed62429581d5c10189e0c33f06c8423be5f5faa9a73f61dde847b18d92508fab397dcc42fac4a1308cac9fe37295718d02a5ed093ea2f3dd18cd6c4176547507e003a6fcedf615938c1a09556429d1aa90428124bd0c403e02e4a0ce616a39f8d6c67f59cdbbab3eab7e2540b0dad3e6ec4198a52cb74f98f8d50c9b2dbfeac50665d38b0204e15dac61617a5c85a549e8db344db6eff52fcdce32f52343492629fb2fb694495efb120488335696ff3d454fc12854e9b023f255f9369aac7cb42dc9a9da97ac2cfc38d39c21bef795cfe8a70bb865c1cb6913b904e0432cfa68f261c8754b3369434a47ece01c0699f40f5e4ea1074844a12fdb2bc2efe44ba5a7aaf2e018fca47025d73c185b6ed5a87de99824c87bdfc34903250c2c7ff823c16c6ce0aa46a7d7735044adddff55c914a8212d19d060ce038b77110563db3aa503ea4befbcdcea0e112d3ec07df88d9e3fbf1115aaa5d9872d8543708ccdc5deab63077f27802222e9b3dfeb0d6bc3a8b2e6e13380b847bdab0a4c1a4f9adfe8d2dc79856d5a26d7c93bf3b94f71b50ea64ed015015282268c0abe3b1ec8d885789d89c207b2eaf9936f163793d30e01273a891abf85bce4780329fa2be46b3f4519da91174f6b69a5b9ab0a5bb23155685b9e040f71659bfd62e06b76f193defdaccbfb6db491f19d18b71beefd7367053136cc0d4034e17d7bd87d1f2665e5e2bb70816ac40fa87d7fb9dfe379904ad95203630bbebc36c4f8feff70813c7f3d6c7dd5a900a2b3674d7b77c2004abc03ecadc98de856d3e5bd730aa0f5e93198bdfd3615d780becac542da4695820fa1b9ffc96fb46a87907e26b37099c58b03e40f395994a0bdaf05492af8195846f61c55a22abec6ae08ee7582f3cf9100c2dddf73285716e6548d4ba7d26562833100bc04bfc24f3c779793bd03b862aed39af20e351a9a08e1a470f696aed44d1bcb767072f16b78c0ce1a7e47fef29e4d8372bd886f6b57267bc1d020166d3e8bfff1d8864ecfeca8dd1eacbf73d1f305922f97c3d1997475dd07a49abe18514ec597c0ac87e1583ffaff43b89b205ca021d8d02518f5dbbea0bce2fb5a6299541795496669af4d7abc5d2a0b5d3d16b42362d7020527e5c946071f0f68c8804fa44b1f09c678e1c3225cd049058dfe2a114c0ee0dd8c61e57bda9b3b09c7a4a3a251eb3cd118ae583ae437a235640383885631d71453fa5e1894e056d6de42f4c1509b5009feb4ba6ab879823a900a62b3cef22ef99132af8322b886143d206d6476ef5db9337e70217e536078eb6caad7b8b3e6ad16acff34400fb935994c8fb24d7d43d81b36f41d35cbe0138c37818beab12e28c5a67abab5c1eae5e340ebe762d4badeb91792da22b6e91fdf09baba62d045af2b2497d4bfec68ac97679eece2d468aaa07bf82cdb7694013b34ad3655dbe2b8096abffc0e6db3c4d9d216cc2da3fbf690de18b67858a532ef81a89bef614c1aec49fd69a83f3c13fc01da0f65eafb5e4f58cb75d5c37422e969cee29f45cf222438b1225d1295166cfc3e3dec3908cd486956e6bbc9054289070f6549473e31bdf9878f41f03e797cd4e23b2eef5e189cf7c115c7e7eaa7b3db57508df22a8f8b3116ae978a6cc077dd79af8fc977b39481e1251e725ab48249933d288822e98a62cd8cba1daee5d075fffcf6079373ea1067a317c8aefb8f91e581b363651fffc99c61d259d97f9fe095d5f17dc70d61cd4103e2853c38d860fcbc4a274ef9161eed7b4ecf84bcea92fadcec7be4fb75a53ce699e682658cd13be9d7ef5cbbff9f17e7bbdfc97ce542242e5e2641815745659c397f8871f6aaedc6f97e5686b8d9dc18e40e620467679520fda75902be99ae033ad314ea3793577db1ca3edc9d4d674cff91b707a7c1b574182a68b9101c1e379e6151caa32aeb19fdc0a018abe72e9bd4a28bc0f4900e744ec033c8eb7aa0e50803db93101feb326aa103587176dd1cad036e1d7f3104adfd98ca92407a3100cd69ae5b3191844cd0236ce7f1154f4167d86be86c9e5aba4ea3e090736d6faf6aa39a11637025b75a6c9d7e7768ec7b8a86daae5c7e6f90b80a09bfbf611e05d50e278cbb9c2395d92f60353d1c3a56561ac17b300ef73cde5924b1d33f92fcf013e94517fcf6a03887ae9fb939a26fff372131fbf1c1f579e4f4293494726c94f06860308c978c0894660b2b910dc46a2da1ec8ee077c1a432aa832be993bae070708fb03c6cac28b78e453946f75ab139da11ed8c0db4cd5de201dee24d6f9def9d4ec94481c3a8aa5c30103137c993e34a302baa1f236f0daa848292ccdc93c6795e688f67c5ad24f7d54c174ffc47278ecd62e3490fb1d23a10ac05aa83a841f9a128227e9ff4dd9febdaa8877da4858f2722514ef2bc5fe7241383b08db967afc9b21248a46cccbfc63cefdb3f669de92fca17711fd54dbe37bbf4c8f7b2746b77efba79f3f42c805f80504c6ed17b0546ca71f6fb3267c1e3c899f5a804a0234fa69fbb48f89d5a542fb905a54eeb9b3d816b0c89c69667d1443ecab1d74b61b437650d13333ac4d3b0611da46bf0dcdf711f9297a6a5a72fd19354bc27b58ade7c1925ce4975dfdf2935667d73a1037cb33bebc038bd25a99778b2f9555ea20b2fed300b9021117609f8b40f6e5eec42753f618a78cbd3f4db87dbea95b6294080dfbd92fd3ab437f8e713c9d9e48006f0e35d983ee228fe0accd17dc349906a8c9ebdcb48fc3c15622488b7a600cdbbbc216b211a87840ab17d992f7ec8c4ea0c8dd89afbea550650f4453b810159b17443d5fb1ef8188d6459e69a895573d8baf5c975d4659360c5362f58563e81013ed356df96704cd4d5ac0a5ea2b0afdc9bec4fde5907504971d641a4e7b1d868647268ca1d4de5f9854b7d1700bd1e6e0912d017459ead1a1aedb63bbc18049bd13dcd940a651057784c465d6c92caa8cb35844c284eef502787b57bb02575b70e83d8e732991100b344e3189928193a6dad3eab140e127a177e91942699fe968b8acdd0cc7e90125240f6b20b04686dd416010704a4253eeb4b8bbdcf5bf5e43d330622b8f85aa6bed0015420c4c44900c679f0132b61e44cb691b0e4f5ec667c2eea35714e3dc244f57f8581c6047a7bec2d7e45aea59cbdc9c32d6d9d1b104a80e8a2b78cd45e20bee6343983c746b7d07343cd6897b88a1fc5fa54d26b33b6142d5fe3c3641cf339eeb46f371e95747f7b2de6abd0a48708830889536863bf4be6f24c2930fcf4ec5c25e22eb233932b990b16b07bd33db27ad69921bc22ff7de18f9044d32622d2932788ba3bec6f1c01ec26806f11ec031ef1558e4fc0f0cdb6e9cdb9c1dbe93ed46b68f77aaadf55468907f7990611e1700722fb10c021c8dfd2020b5c06e31d32782ab947237d85028f39e83443e018288d3381ad6cc303fcd1fefbb405a09850a71749a196c2aa1f01c550aad5422c65dcecce452b88586701c7aa332bc1066d5ba9c2db0fa701ad035e47836341a4e7eb04b41b28d29f2be29d0f03f7bdb199b35a1d9d1b7b6b9a77b9f6cbc03d1c974969544b03bb096f5c63d5c060f4a293b9dfc4f26ac85c93532cf75909361b36b521863f2e2767a8bbe228211404d45d984ff017746e031f4181702407d0ce3396467de01797482f0d1a5070d235a1716e1beb46b414950360686c23ff5255d4498a3ad0eeb7e58fc461ceb2c0f003deb443f66083b74c6470ba667fc2fbf20fad88d1c8d23d8a0c85501c663c560578e565e12dbde303e10a740425ecba4d71a24d570ba966905be655855a7172cf675e2f315424b6dbc3a90cef8a6fdb0f3697f8d81ca3a16fbd41c5544182d3fb801111836827cde4e1349e42825a7fa5e882291669e2c3de4d60f7e94c21d951fbd34d39fcfb5870f9189206d2155d9d0331f29c1533d46d0823384cda32cd47a0b2126412e49230e5bf021341eb8e672d0ef1469a84addc2d5674812444992e3766661065dbb7953364ea3a77c534f77a031371609dfd7e17cbf870231964fc0544464c8a3a6cd45b16aa2625d4ece234edf29c0f7b55048560a870221f6eb136e4014174a0469acb6a99222e5c86f004cdd6d394d950f410430db4050605fbffc90484ffb9a24d8f0b5d754bf566e91d199310b87c805551ad530e9b22d01169d7f152f7543befc30f8eee88becccaef6393e26b72ae0b9544d7e38c1a1d6a2a3de71741f5f9d7eda66db250ae2bd514b20abf82c7084fe2fb5cb86fff0625d312223be32bd73ffa5413ceb189a01a2d672d40dbf449b5dfe1fc912844a4482defac35fe609ebf17e43bcb995ad0a1006a8d69bbc99c2be2eb18fe545ee0236fe90216d8151321f86dc648918abf4c3292c8e88d367dd6fcec034b15799f3619b029c8823614c81849605ddfa0f9cc1b1464c0787b69e7a7654f622833874514c7f86129e6544607dcb9fc31cacbdd693edc625ce5b682786bec7c141c4eda23fb3309af480ab2267684583f1265bc02f379050b9673df2a208a404be62582cefa85625bcf0c45b64c4074bb839943c84089edbb943f4b001ecaf4821924620d259dda829b0fb802c97f967debf51fcd2fc721f29b41574fff4b20100cc2282e24aed5ab1f053383ebee7da89d5be85e32d8ab0d96c649d225cde5f38e8db1bdb664f4486e029048c2bc2f1e07c8f430d5045042784d66beaf043edb8e0131b531ff38cbb2b4ae14389eb45f31500e4bb5ae32bdaea67b5d18ccb287ad3cefa23452717b1fe2e9408e0bee7616f9caf7fd7929b729280f0b99ec3f90778ba8023e550272f06ce5ffcb1aa62a7d3faf21b4c22a80a1d8e2f8d89cb47fee1e90890bf4001c8ad64bb56113674475dfe945fd424ee968e669223a306ac3454fba0bc3d2d8f3dc8e43739e8f1deb13caecb4721340f1f17dbcc1edbf771075d649753053fe319d6c3c3a25abd75cd071f4c25e5aa092f7eaaf9fe789bccd59cfac122ecf4250696cd032e4c635a1d761fff40df313eeb2ee459990756871f18dffdb372aad08fce0c0afef80a0a02d217cd0aec25641b015a464b2ce092a005e63d05e446b22c8ea76e6eaa471bbf3f8f2b89b59ea6d555c2e1e12c48f29745c47256ab91f1e89f71eef310f5a7bfbd0c3f6d80885b3948e58f8062ba8c9a1780c98dba50a40e5de9395561fcfb71f4a9d34a1a28b1c21d11ea05f77224ad314b3ef0271e3957feea823ab88bccae759cedcb27d93e70b89238935e61d2ef225e4b96da16e3a8799a1f2f104825def49b9aedcdb3f69f5c8c06fe75d082a93c762d8c9ca39991c07f1a3935cb0bf42f2f990354b52e7070f2c719146001fb227d0d894e931fa9241f3dc2211d6d4307ec0a965b1a4248ed876784805aef3316f5e19c88f4deaa75385df0eae83014817f633be725ea520d8b9b1b1edf8b2fbf66a5235c77ad854aacbd4618a001e5603b197d9116ecd051f389f2d281eab37f4dd9479057e6baca327190c313cf90081b5adbb41058c8491ab47e5bb3db0cb6b5043b9d9bcb611d1682821b0316c2efe44af7fb1e565eaeb427f430c86f3c4e521663eb89ed59b3d94f40e19634aa929fcf5114aeed2d0d2ba2d1a49c8171fefcf14201eb38e9d3dd773c6d1adc9b9e67473baed13e9f5202d2cd6ce513b50d3854143661b436220b2b67e2f28f36ed3c96aa44bd56f99b0401eabf0b9ebb7d303d90a6d5ed036b7706dd747cf09c7559f8f9b14a273223c75ba15546910e20a0d174cbfaf2dbd8eeb22c2eafe8132ecbf1beb4cfeb4ac4f8ab36e56dc89e9564e906313c2ecf26b8b0d5a534065637aab1f16e3adc448c5e3502206ead85155199ae1460d24bbdf5c053da19ab09280d31e26151b1b30126b590ba1676d7d35627313924cc4d6ca4624dadb0982e33fe1387713b2e544a0cf2356853da9078a39438f6c9ec2e161b791e4c9cb325d636740743066134dc9ce24bd68ab464f98cadcc322cc6dd24ac03dbac1897a40a0cb1cfb88e765685c475521b9e8266e4ef07df10bc0993315836ad8db2d5be3d2b018f7967f80f0b0b06135b3fa395bedc69e1d93f39515430016548e40678e792f364cfb0b64b6aa8f54f75fd67ef91319f3d31aff239f29ebb03f590a7227aa6269f41b23b902a5341e1b4dfe563c3df47f166386562ac2a5e0865526d7f70c4ffd6a5bea4e3157b29ab84debca7d3e28e898ed28cdc246e88931cf72afe2903cf2a70e71b483b13611fdbf001b556eb89bc0e7ba2ee981af7d4e0c478cfceca030182cbc09e5a34e9644d7e6ef1fe528f2a432b0a0e391c05681ba783aeaa2ef3778b8489da74c8ec10bbe24f2986d20c6268a1d115bee444d85c2b3e9201b4ae21591f1d63a0ae7238882b34046fa0f6d93cbb409739f5da689ca9a988b47c95dc76b209adf37f989b3a10f821aa4e1bf71174adc5cc5335a967f4ff35c4eba74902d121fece9503962401e4ed34553362f5fcb6404989129d0341d284c21410309f4bb6dc4193c2e8fd7c88e7f67827bb1e2c163f5b9e85c8ef7cf808b486f809d14898bd71c6f43afa029ab7cc8b156ef4bba129e5e94b51f0a11c96babf79b16532727eb434fe523204f4fb9a2c39ab6170c5d94a5dd662653afc3c5a230a93b9abbe5a970e770ae0ffe1ff1146c8d13361e73e49ec10b4067b670025c0d4376cb7f3bfaba63bf104ba94d478a1f29fefe9e4950e28262355dec0c886d3e29536b2eeb1bc1293a7a22d951beac880fc8d9a3ad97f86342f079302461e541d19b30b47a46767085962b9dbbda10b6079d71d2f0232fcdd4648fa7850fe3143dad3fa0de42cb9f32e8e03d641d1834c092ecda1c1bd19ea82e6909358a1f5d6b540281b253c70e3d68f85bab17611ec9f2fb0350eb6ad010b7f01998c1c638ed8c738c0d3de6706c5442cba63147e136d0fb81911eda87dadc34307f76718cebc1251b5d9160349bce9be1b7e03c743224280e178de289a66f5c70cfa89a603345e029b73b25f4e135ef1cee3d3277487432a1d66fc9b5817c60695850dbcf9d8bfa9b85a0e04f7598cee4415eb8e6f22c907842921bb646333a9702a27ff987cf1f0f6376d1d6c7239a5f5f966a052bb74656832b6d857f0ffcfc94e87152485c737e2d11a51a76a8bdc457893905b488b31cf559165d76f74598c8eb88ff87e24fe10fae200cbc8110bd8f9cde83ac9c68a292e55eebaa3b0acd19a54c3f1a5eb3ebdaf981b2a689dbed5a32501692906fe267aef83544c4d60e7964d2fa0b486403411f3a2cfa87188b46d98ebb642a30f24a90945cc098626634d45c3ee9f526844328c761c30399f2c86d2bbf33ec04025ac1ea1e52ea83facec809a618121b6b982ce60ecf2e6d22eeb65f5e4c89bb80364e54f8ed48b9bb0048a19845d563750ccd7b098d866856db00d6ce8f07ff6cd770814ed15201d3069ff8d9f66ad039844773a7d87d4340060f5f489aae3975f77d52cd159525eb40b2339cafbc5727d39dc02253f77830542be7fba4f7f93ffb5dd71a0f91de48919c0de469d242f2daa867fe84e49ee8dd64726e22886f62c25b4991602b166a031974cc37ba0bce1fa7d955e82ba2d1c4ff009d96a6245de50b19cbaaa5705e9a868316520029daabca0b1af6adb16cdcecf4dadd8db17928a3a5c1c7d8f3a2f06fa259ac27930e9e22f8fe0e835426416e2fa0de505357fa0272d64c515084aa2ce22112cd7185284e8927978fe1e9995eba3d17d9452dad37c49301b1b822dff59c42cd6c2846d1d5cfb1fb9cad217b4aa51ed194aec678a36f34736461bd12f9504eec3a04a0f60ca513318af172d1b376a46eaf756f9990e154cf93bf8e9697b551fc2ec5217cb98dc88a56a3406d572045141fccb5d010a91ce7bea9a3516c9522b3e4c7cea675c51532fc8b15d7841ac6a6cb59ddb1ef2ad65f7ba6f6cfe89a54df7c6f7945495ba07cbc1e494b02fbc4661679b0c06b9c26526e32a150aee05b7166f75632013757acd2ab147ba18af69f61212083a64d382e9dd3a0b4d780f31a92a1db4ce52c57527fe875fb01a8819935ce67d0cd52032e9629b4c1f76f29a07158c5576db6995edf403c3a849e07583df3a9ad3a2cd00b9b0ce5ee92d668ab682a15dd0a9c4480f03eb804c0de7f86fed42cd3f2aa503036d234f9d7829c5d32e0a2e15e1972fa0ed4daa8d0271a865d06d7a8a2202ece3ab62ced7b23e1c9ea550dc0945f34c11aaa9899b7ea429915e29927342dced6bed943b969c7253a72d318711ae366477fb559bd69527df825d00783c343b8db9da902e07f6d7643694cab6997e7cbca92739d2e903e7294476b827ed5b895b2951dfe03b50efd4819739f9dc95736300f42a966b470528599149f51ba46e0d7ac422b420124367abba30ca40b0220b7f633ceae312c440f2ea996df4cca138fabf0294aecb637c5cc535c814be6cc037f1cae0f5c0ab7823d4ac8df3279f9c20bbc3ede7c4a67e670d1b30f733ee043d99e3fb3e53a803a204a48ba647cbd85b5e6699bf0e5034204b6500abdd6a863003bb92bb1334a561eb890e339ba26f1edf1209be2de525bfe7a232004d2a7e3857745e20bd060ef93e0127db9c1e26de3de74991ece01f13fda977c5eebaea9d6d92f0bc436c990e4ad0ff91542103405e5f4674a9eb2e1e677d118738278b5b8a1240979473a3449e7e83b92d5add5bce68a6bce1e24eefacb2fed176f78903edc7e0acddb20a994b47db6e463106fd3736ac86e7dce04addbff03730c1f8e1ecae2559021e0de31df0eccb6948978ef6267345601e13dcd7e0e48937a905d3ae832d8c3fadca516daf25a29a6e30a4c226c7dc42a478ae7544de4fdde111438e56b24f874b78269d2b496ea34312c7e6af5d27579aeab2547132b2fe5a7ed4ae6768b7c727029ffc1aa950fb80b6578bf1ad2b916edec08aba1e59e1d017d7685735afb94fc28a62cd75f429f4644530522c3971c206285f6343ee698c32e19b2cff3bd8859398de14d86bd4a074e9baa19883f93c838df7d64ab190871d8a4f4d87fbc5c69da128fb11d1b9893f53c0aa50c47eaecb196ab3ef43d4581cf0be69d165f5a4c2d89a3434471739acccf78d01472d5a43145a8ff9bf70c7bb2443e2300450ebd95e64a497398ca678909e154ef70ca655ce2ff0c58c30bc7b2b2b9e98a0a2820f44e4547581c22c7601bec67ce5f3fecc33f23f0fd7a80ae2a2fe6230df9bfb5a3932d105d4c77d58fbe64c043302de44ba0423b6648a44b4e8f0efbc14fde3c77ef3bd07dae3a0cf04fa66806da3bf121a29ccaa5a39ff94def4a921b64cfeb43143bb609ec9573e232f89935787063e5991c0c88581ed739ea7dbd2c22678327839d43084139dbc188857bf4fd1a741be426fffcdc386a5d3bfa490c38b96e96ac3e44c64bdb10884e2c799ac13027b1754507aeab8eae3797a57eaf7c412b9634f9f00244b23f0d11953454b0bd392f452b340f3d3d22b95cde54d01829207321d37c210cc17faf4b5c9925cec35f343b4a66cecdb0b4d2e155531d29d65094d33bc39284d8e3bef24f3b13836ae547fc688221def00022b9db0c7a4bc6a6cb4fbff992bde52d1e5a5b6ba07aea53bde08a5ffff7c19606a1f4d5c367b7dc699e1ba8b92e2e492d7f874345f0b2ef6ba806afa31c75327aaa2474c6088113dbf80dbd11a665997b9980450feccc5a7f5cddbfe41a8eb603fee258c1797f14a38cb87a2be3ed3fb7aa858afdaf3d090786069081d8c74ebdbd78fcd1d8e7a4027a725aa0966fe1974cae8cda87cbb9eb0f5239401ab7ceef14859c97ee1e5382059ac6d4b8b7dcaf883c4e18e5f6f3100cc5ebbfb76c0ea2ecfebab758ba9d901999782d50b0533ea0bc9db570c52405b6c0f7f2299d6115458783e444db4bada498fb85102b5fcf292aca298bad415944790f7da0c3740271c5a90d73768a122a58ce21e1d5abf1176f78ca8c0905ed2d8d481ed94285c12ba75d951ecd9848194765062f75de75fb711e12fa6b10c2beb8791f0b5993a2d653dbc5d956b95b4ab8eb034838b848675d850017a47f36d58a2798b38708db9673e1edbede0c867cb5cafca2958f76453237311b7893ecfc3e60255dda2e550b0628be6c70ce91391a06cef70c89885859c718d9c72f43104ff3870e8c015c47876deadb867ace83d449b2f2d1269228bec32fef6faa0a778e0220cd9d212ac0c89f676340b7c08d3fcd73923e9114aff9dc1a710094a649e022ffdc20d2ca4cdcee6a2d97308a96d405d62251d911c70990f255fa5b31c333d5dc4a9e04977b07e7a2d2f06f1e4cb695c83c64efb6cf360609c25247d6d9897da45cab178b31df2702328da3eca4a15a8466e49a76fb47d7ad6af6909dcae382d7e9ced886d1c30c07426467299e0fc09dcfb1e0220f09fd35398ab5ad50ccb84649b0e4ee10755c3f159e804fa96fff2aef61c5f4090fc60d941739de89593c21936ff593791d6f80e52f0f6cacafe22607d6509b6a01b0347217848690b5e75d5ad6f1e8785802f210b757e55b2f675ea425faf3628d5c74ed07b65a9c746bf8eef0690af75032f7789d89f4a868dc899681db28ea82b6e97d92dab9aa82cfc31ee7e3fbfdf8ccf9d6494a684fecf2a2a381da0338a786411e56267413e6c295ab7eaaab9531cd8e3c69ab4287b259c140088cc8ad253c346c96c4f7b05d3b0c408a49f94f6350ce81cb958d639aa9f273420e393756b762b20fe5cabb57d8975005508c7302eebaa386e5c2c722bc3bfba773a930980db32c77e663cf73230494bbc853b3f8404834d93bdfa5c5f925faab324b434208cdaa238c926ed400c9a9f4a5ced0c2e0c942d34ef4620424ea9232f6c1d0cf1adf3395cef6a052d914869b6744001e909536a30fe30efef30139bcb0e330641337337585c11a50606b1410d1910a334501eb056308d5023c201f9fc6ddda9123425643d3d819b9de68af0e35b34e51775da3ca3008f5febba5d54ea50eeb0d0bd08e402a91c4bd067fe21143adf6d5f2fbe9fac3e845a69986343034069be0b8bdaad351ff460bf524b40cb878cdd70b89136aa69649177e5c92d26bde9b5058eadf093c0729b10109776119d30ecf1c20aa84be26c3dce3ae70dc172a04eebd687a9b6b4045cf73f8b9cfaf338271f0d9f801c785e63e31a917404d7d58e575ad58b9e72f3094e20133d90cf80c173bc36d0acea098bf3a9d06bfaa126720e5ce9c7f107c144125509547e9c2ae3cfae7d42e2806680263f4b9cf4164afb22d2a87b1b1d1b171845b434629a98112bbaa43d5a144f6a36409836dad6be22bcb5c4f1c082acdb7c0fdb2d74018a29dcde6a6a52f5bd171ad43b86f4fecb230e393a23e61c5255130bc5bf2bef3ba166e6ab45c3ea7fcbbd13bd468c3b2f3afb4926bb785095675ec3c247033bcc333d1195bfe6b83ccb0ab1b2fab2014199e208ce4cf4eb52cb1af330dd8dfb34e082c29c700dc92b153a0be3ba6e777070ae3bb5898281a4754ccca6677e5bd2b7e38706f081a49d022c4a0b91759928fdd4e133a2d3a32395ec4f41552ca097962c2d4863eadee3e3652a322756cd9ca54c9c331a6142269d5d1717fbabd64c84b346f82629b4803140172f2595da7fa2bb323c9d7dbdfd53eeec8d7c9450cec7a9a7631949d5a78ae950fd29ec64da414f9e994ed110fdbea7221ea112a684e4bd15de28835531b6fdd6016f36c7571366b99f24c2a27115f8af1e280fa53f12f46589d258f55d3fb8f19a577359cb62694bb44c7e9f5897a826a57dbcf297184d20cdec87f90642e162b4abe7c4b2ac4ff676f353ff760df629f469c8778c94c0bb8bc8c191fbc44dbf384d7b7e17a6a3906cf115873e2f78f725dc1d96f8999302c3e32178a49e75ef91008242fb9ba72c940051382cda1e1ee7f7eed2d0390ec175a6c7bab88c1f044e02527f98fd76a38be59dca24ebecad51ae18ae21456b5438c9b4d6e814419de9cffd12c41969f92e006354ebe8a96ec977b14fe2de4306bd5792152b274a5d71b4e54fedc272734f408699400d39840cb4a35a6a0b346ed78b88951e04e56ae07c2d28807c7813499f38780bb38a81223306d61e1ab4e76cafc7d56dbad5132c9947f70032ae3f935f4b487833a3d64235db7267ff7c3a20ab7d6a2ab2db914df4e5b2f4729c94da87a6f01f294df2b7948fcbf837b70619c84ce4c131729ee01f754bdb121b6f291bb2d12e0af3c3f59ef01c10db9b187549852e3a6b9c62f52e90ded40ad8db891d12cff1057758fadf93ff8a38086aae81ae26d53daedbf2e28479a63d5dc05c34e5e5f2fd9a8e2c3eccb424e2ae86a82939e84d8f26ce5836cc5418835164495d718147c7559f035b637d7e65534707b004617f7bf74e93a7cd73b0e43c44cf7da06a0757abbd87b5a0f20a845fa408cb9b7fb42583002c98db58b85cfcd5549f8666100eac42ddf4bc468bba222a88ff74ceab2cd0abf05ac84d6348bc91aab68305ab68471a17d32083c9e57c477a3202bcb875be8eb4edb497c081cc2871452dfdaad5010019a6c72f3b470162a85922d1e321af0d637a082e2d75e9a9fd0d84cf01fda03f238596dfe9906a431ef6960f2695aae8b555675f71b5913c4c9775e21e6e4ddd6bb589232d34019c83b70742b780baf1af9eb547847df68dcdc7ee7d5626ba690c66e0c32090bcca6796ffbf80671e33b0539ed197bef9644eb6bccaebe38f821a62ec5eedfdf2260845b9a09dae9c5bb6958e1279c5311a36fa57a30e26b731718bc91eabc9082c1d0f45de7c3d2220add221b6db45c567e8c64c29efd67d952259769081dc2ff8404ac12a1a7413d94928a4da1da4ba125861fc6102d2eccedb5b79c2806a6cb38e2b23457f7f316ebfba2fd78e26787ae4e84e7adf559f57e4f293f331e3e711debcec21222a28acf6c2f57835dc811f4b1f17cac4a4a705c41a15835292c0ef7c629c0d15b8c05291267135eb012e520d160eb64e92b3441f60ee017475d662c8be4c5cb09e1bf35e2ee1994ae61db70cdb5c7a93a476e8a88241bdf023fbdb06be7e414bfcad226b71e6eff038b038c3a16fac4304730b7c312259ca071833e2b0763e8c6dc509b6194caaa10b8cb59be111f510d57e76e5889cd1fdfcb117c4fcfee62b10f8d9bf1809e057a99edff12393fe0a9601ed1dfe8f7bae41e6276b8d89fcf4423a4316765ef71f7c63d21b9f3b74fc324d1bac3bc7e5609986f82bc9d9bd39fa5700f58f5db3ff2933b21e14a4da1cfe0111f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Cpp Note</title>
    <url>/posts/ea6e9b40.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="59c8566a98ce65d6a51d97dc12a51e59927ad9c241729a352ffd10f019d24c4d">62626637a28304ae90bb989ca4647acc44ed0c95d05bfd83b2d52509c6fb8df19d0b5a8af8792518094563a451a2fa0bad6c7c3a05f7f02eb3bb32657b735edacac5d257989ccd6fc5da11e32752f7add026728536e5c4bc25ad4a111d6bade658c8c64c07647f07b2cb61475c057d6983aed392edb0a4083156b75f22fae4fb7c999857dd0ff71d87973311cd59ed536ffc0528a07de73ae4cd621d61870105aad8c0c22a37167fb607a5cebb627f52d6068d4418743b924c938f92eda5adcac530f97c8f1019a29bba54858bd7708a0dff66864c76ec9886277488803dbf7d824f78c3d7b56d64fe0bd011fb3ff8616457e31843db3d78f6bf5c4c358451afb503166d61bc34b4aa4b2de6057148682c6bc7dad3630b25fffd8c4a571720008a26c32b14b0c18176900b423ff84e2f3c18567ef6df595e18aeb10ae5468a466cbf7b59a8b52463741348d30c2833d3d146624d3fc2fe539709001e1c081aefec35512713beab61b198d5799dd61a13b51fe6c5beacf89adbcd03d886671f2f67d401dd5c90ab15dca72fa5bd885f547c4ce1d4f583debfd9fe3d1e7fde6619763bef85891689ddd1bcd25456a6e0da73c77656dc15ae733541732df3d305d23f7e7d5e4a7b1a7ede46ccd78a2b72f1713dc5954f88980ba2dd227356abaded117be3cee4979f5e334c87f6ae118ebdb5836969e596c2795701acba1267439d8a2f1e32da291d1e40635a676b949a8cc33a8359099caf14a48644fcb12205c8a5bacce55da4f0daf899bd2cfa6c083466b1e1e6bee0dcc165d6ee401b3554a5938005854fd980d24be75dd79d05c0a5ce88397660d93ecb93e56b090486218f9b8c0103c9e34ecb582ad829880dc8d964035ee673ff3153b895847c1a544c6895951103544c6bf92a0a450693f465fbc3bfd25bb46c35519988c531c7e6dffcd3d0e6c50fc642cca81affaffd652e6bce3aaed55f9c8f0736bdb5ac3e52dec8dc5a343797891b5ebb3ec774073809d377328413f75692dfaa867330b7a32d826dca33797ebcad39ceba84cada423b1cd17c6a32dbc5b1b4937a89ab2cfe882963a7d0a417cedea17b446923686b3e2c72d79d1b1b17d06156786bf20d35633c126dbae97140ebadbb86fe55fadbc590592ffdb7fdeabccad2c5b5aa784e5a7cc92054148befb1840cc0cc49bce5773a24e9b61668fd4f48b545a0904877025f1c864ea839c4d713a4e608660d9e237b47d8e664f1143df50bcea9c74bc18f43a898445f708beed37e6ba75f10f07e76e1e3f1e525452daf7029b3517586cacbd21328962828fbc0487577c545570b893730bc620f94b1812a6f830d31507a48bf2fdee0c91cef98d204d1f7a1384695c46df8d9e146499c3ce98af76ef8d8fdcc10ba8e201e2dac90ad2be2fe9e9256a73e2cfcc3669eee94b59abffa3022f2a3839a3b42bb244f05bd8c9153dbfcb639cf597247308a459abc88d8d8c90d4dbb61456aa2c901d811133e97875b9a54816a3bcd7b23646051ca917994116a8b7968c501298539dbe86fb806f34129597f981d3dd17a03062ca516961375ad17a32f2ae1190f22e988f6fa08d060ff1d93179480380b4a19779101cf9a53b5a5cff44c6566f52d98f25338972d2fe60f7928965e431111b64d6438ee51c067349ed73cc8d0f1c070e92ebf0a7699fb2f73b963a87cb82c474d741be4c5fc795a7951aaea1e9774d24f89f3008190a07def2d3e28c6a6554cbf3c93e0615aa5cfa021820cdebef65aa46a502609e0acaa4e657c788bcf7d1775ef3300a95ff6ef17e3bc668831303ac4210e55a121ee0c600a0d7f8b2fe952d5f8123953e5d6ff67517f558215cb8887fa0ae029f89458d8fc990b4f5ae3ed76a33e6d5683c7feba2e8793936cee9c4803893118ced420e3ce62150840bbfe313a58bec7930eb2e19c94c028ea624e2d7ee708d36cefa83eec9e9ca33406538fb8d7a26a0e8ffe1133563175ad5870086bc9d7706f27a645c64267c4084ea44f8af2019f15930cc8b1e36663b482b00faab1cde84dfec7c9acb174e1c3bb3f82ed1ef6ed8aada85b8019550976c894c4833e26168311c07d7a79a6b22b3bf21b310bb829077ebcddef573d54dd25ef24082d73c4ae09eeb89248e93391a31fc73fddd3b2c705f5c853c0bd9420aacfe624e0d0d6cfb18a95d4bb862ea449f8cf1ac7a2de86ff369d389aa1068173132712ff262a320e59d80accc43a35358de7da21028249a5fee0c33d703062a9df616de7f133110df38139e0aa68cbf7b8589415f4b56770565bfcb4be0bfd0e4e3e91fb180d3f1ead0b76743bfea2e5b2e26145f30fe4d462597912837b1a0717074a8eb3e9ff48e9a384da21a2b2c7a841b8dbfac6582c25903b0c23304a35cfd0b34ccf4af49c1b3d51749d8ac415b2e3a1de669e2bc7cd6fc579d3be595b36b5dfcc167f2d5d5efb43685b40c57f16760c5148db225f4e9ba1af87e0c90f0efbc94276ba97223b008b1be4c09844a66d49379fae10f6c367d01a0704ed0fdd99041e6ec4b2d5fa59a23f49a367388d8ab3722f6197e057a6127fbd0111096c6e2eb37e5019b4d5236337fa9576cb23987b541350cd1b4e96f6da02e3bd700efa69def8023089f0d861039dab5ed819f1fd678e44697c361433c444adeba77f5f398b79bcdfa617e204fe1ef1ba47a9630b370fcb9dd919b5ba114f95a3dcc647b0ed5a91ad96ce94e816494e9ac01736e6dec8027941568e96c56831bc5fd2a5b437baa1dba045b8d73981ef20bb5f677ee84eee22dc309340845dbcada8cd3a909aa067b5a424d0b373c00780a235079acfe49f8ddb103e6276feec2d53e989a1b22f929f774db9a1c42e6bd98a382cd589ac473fea2a353b6d0eaff919f97ff2aa2cccd154fa509e081f23d6cd3782beb76facfac71362f67ad50916e8db3789459cf00ec7b120c8681f60ef050752c5a7944ffa4d0108ecbcc2798165687127cf0a27e1ed23ff2082445fcc06b1c0f4f2da296406ca251a0dc46833a8bf0305d312c2ef27ebd8e5be944fd323aa4ee721ef8712938cfbc7a92599796637b885630a66acc10f632f2a1c44861b459139fa2613a43fbee1765371b6ced3207b7339975246ce10a1ba3e25c2733bc385d4a96acc01132664c6140c7f0f14c86113a8f685128ed78deaeac4b69db83e40d1f2139fb8911a1b52544591b2ae032e628d15a85bf0b392af052b860b24d1e8ccbf6d22580fbf018c467e844399710fb5055c6f8627f001dddf55bb1792a4f7a70cd58a5849561a0dc374fdc6368444e72a6a27bb6c393ad57475eda286ab3102d7498b782f7da5633b651204e81d909c230f10e6b8f74c46b42a18c760bf83925952624d6b9a503d4ca280c6a15a7b772d41b07989d2cd42da35e7c0c4c2780a0c51193f92b993c66b6bb152efe16e3a0522d2051a61c10fb4c9d091a022bce8bd7f5fa1692419df05ac320c7e9518ef05ef6bfc2b4918d71c75c240aa122cabc1932125e114b45563cdc1def32af3c06e1aed53dd88887ae16913d914d84497b55f193de388bb63101032aa8f75203dcab5e284478d6af1afb533d0cc7127e931d6d289f4e456c651f63f74e77f41726158a11c6da3aaf47bfc19ecb0e3de94afa485e327668441d7c7fa4f4457f08dc5e67b492e81d07db069196fb28247929d3e84fe8861f5194d865a278e89e14126ecfad24a181beb117f2e4a74814422e9f6fc42bc23a79a3a39c3c86a4407348f6ec7c6bc81af6be979ae4bc2eb4819f13265b4d8efc04878003d3913fb25de90032d11344c52f85c9ac8655b051b6762b42cc2acd969771668d38ae0faada4f49e441770dd28e15aeb02de430da31a76c5bdf2b1a667d3fedc291cb49fffefe4d2bbdf2116f7bc07a47b72a97e13715132c4efa284cbc2a9293ec996b4ebbe3fe7e8eee5d450bf80fb3921da30f7713fa27031d18f81bfe3ef5cc5ff81fe8e46aa90cda8e3ea163ac58a5c86ac8c5d1a7a6604b1c5468ed136ebae9331ec4ae864006480a5db1646d0adb2325ae5151dee7f4de7547ee3b323c813907f4858833c41fe86b727189ba423920e6b6c2886485bb56d25867585391ee40d415be5da0b80a7571ac3850354c1f80d8f10ef711aff8b3423ee1ce571b199ace7ff7661a1647a77bd208cfd36a0ba831a764dca9fe834a9fbdf0152160a8d51adf1a68f5c289ae9b10af6a3821a5750fb5dfbeed6d23d69828c8a85285f7ab176031db723be6d13aad0d2734508c021482b1ec06abc956f555643d3529fc47456fd611e5d5084bbde2fbf9f58129f9499e0d903cc4129cb5d7fb51fb04a95d7e7b1a23167bb3c811190f4038935399635352b6b0a107ebc22f4f99e800841226cbf4701787148340101a9d8d7a36f3d58a9e437e4c29b539fb2d6ac3aebd8a57ca677103f518481c2154122f2ea0aa1113841c7d55606264181dc9b2632dfd635c4873e97204429a5814512cfb02fb770248d5ae421beb2c9b9ad5fb50c12da7a35abc115dd0fd040117deb04193fcdeed8bfff9c10db3b926c74e3c6047ad95fde7aef1c00b866bad6e688f5e1d9d55da4ad2abc521532c8954df1167f9596c8faad2271d48e092d11d59cb7bc9ca56ef26c5fdb4920719e016535a75259f02acb870fa9720740e78375e0e1b76298adef17231a35496b9ac88bde9282a46896ca28876d90cfee1f76ba342144fd04fa9688f1c2ad86d8fff7ba90f30316d2e63b07d59046bc1abdbc9a266055c07814cf52769c5f2c508a57c9ae7921fd4c930235cc735d747a0045e96d8d93bfd1859fcd3dfa9abe088efae6dcdc9f34dfdaf0bceb643ae7e10b792d1b5de9a3142212aa6ae91741453cd7c50249b4f8c654c06a2a98e555e57a63126845e1f4b7c4eceb5b9f8206dbdabab651b606321b3a2c29d36c1373d2772c427f5e86aa24cfe4f91f83df8440442661a6db36eddd3ec7af924c2b8e4ceeb05d30edf3a65ce96aea8f49a2748798dc6023d4f73297da0264cc3270dab18adae0fb46eb78d1bd4427f4164dfc35423cefae9c8e2fe82e228519b49c73e6feb8a88c7c79f9a715905228c077bb084bc9bdd38b8203bd00f02cee7f45420e1d03a66ca856690c9e91ee6905d9b526fa55ff9a301b990bc05e684cb2efd778520ba8dc2609f31729ed1312247bc1b527768abd6ea0b6c61734cb1ceeb8c034e08c11175fa293c9bb23f8bbd3867e5e6ed698b6a3c4a5f322bae3dc2c10bf2e7584fd74e841011d841061353859a2e1e76cfc148d0535b32e5ead7719f24fc8833e25a030b0a8557c28fc5f8848e7e822bb75f83b548b689317b7fe7684a6a4a394e181ecddf4d8ea97b6f8bd8c8a044e25cfef3bf192fb9ce24367b96ee77337d4030b67cd9545f77ae0d03a5497c545b1059e6dae24a089483fbfe6ee4c68adbaa04a518ea11619a64a92d2e138c66fe213591154fc5977556591a72a59b4a2e7da0106b852c30037922a140f82b1ddfbf3ec99342c2731fad2360aecbe5335ffefe4b4078cdcfe183269d5af60cd36a9aa94967f30b32703481841ef6cecd463e285cd5a07ad0020e3c6cd4665933d95cdc293a1acb48b30230b7016de59ff8f2c655cb732d897d96837f0f720f6d4cc53f70b82907f226a3344f93b1c61ade89b8e3bf7f3575b80c1e41b188950478db800dd5afd37f22943b2c9c10b051a2ce20cfab68934f8b1eed6cd59889fefef4a2f8bcf1d28df03c1c9052a85cb82513310e515da9f5e05377dda0b38750a0e84f241908cd3d968599094e40fd871200506bbad6c7863551efa5d69fb13b8a3905df4afe1140a6d8b9c374e28c37b27d1e8317c17e899f2303cf0234779a61751bd8debdb60d5b98e24cb1c37c320c0b500981b469f13ce70cf3e5111138a067d5d40c15d5fab4529fc2b35a76f7e5a6301227acec9249e65d18d80f1769b600f07a6c077fe3ec3918b3ce251efdbd66042821c4700534fa6bc223fba245b68996a5a9f4b8a1236a96db6c5c6083e7f7ff34ceaabd11cee4aabce1b38504cd355c7346100d549760b77c6990d308f77fd79072c6cc23b044e5d5b95b296238f4c4afd3ce29dc829602f5c2c3e180cf549a9c2a07794e117eef66b6c1decdbc3f13122db41a89cb315f5b64f585a3a7937400d3866e45ad245fd21133b496ef801a168943cfba4436358c96ea3746113e38105d9dedacaaff4b182d0690b7125672fc35a8ae68d2fb75cb5c99f0a159f478d15bd8b4020e465a73f36af3b350132874152d06658ddfbb8e9aeeb6083214635b009ee3e8966c1d230a52b17b77dc4021a0412ed6384120c8d68912318e09457d10e1259003bb785ab2767d4730df3c66bad7a12cc2eac9e8d3d3647aa6c06dba4482db0d8f435ac3bd5dbc6a24b5408ed58bfdacfc6662ffebb2070b638f078b424dedce731425f716d5fdfe1686a98f3ce04051b949f3466a4a5ae976bfc2e064a35a57f6a7dfc4d3db63a9171487a5ed4145922c8de8c9d74de23468f86ce1fff1e383b97034c1cf55454c085e181e9d0f29bd5ae7351fe583e5848e7185a167d709f31a4b2c8dc3b8969cc2983d62ddfff0d6f1dd142535d623ae144958be0a61ac3f1c686563f348ca24e5d791e65733f2fe79acd8cb5aa7d6e12a9b986aaae82888fadf71369dd9df3a5a228aaa4e297cf2188bb7e38902a4f596a991b3938ede44f9ab4ff1e399cf6ebde4c2f2a6d3c7e0840c776a8f3212323d86cf8ab8dbd1e611274fdd8cd860125d8ffa4e7002e704a2602f3aa366085b4619e2f71dfc90c7b8c33495c3d135aa759c94d7dfd4a5e4cb80d6911a4d619869520105b8954263bef14ffb7945e2da378726fc9fe3a8aa3b0f6285f82f99c4d4449d49d1ad8fae88164a32d874098058c54eb10249409ada76df0ff7d61ba560cc79ad61e5c0842056dbfda21ac182dc28de9f284c9b3a4215f9b3ed23d952119e4d4615e0c7c22cc112c50e5666a8cf415471794c3225e4cea84341f63bf35a5e78a9f4000c262ba47604f37c7cce00d192fe0128bf71a3f55906a1700fa8596ca2ce0a93ef7d234492a2df1a6cb8d2c23db7a3cac7e5986e48dea4f0cc3a66daf1d167a25d5d14dc24c36dc8fa5b3056f28283139524ee1bd3c34caa0f2521df98f4ee418fe95d24e7d8a0364da96f55ca3b239522981ee70e94e5842c0e564cc8e79bd27c2b549be8529e2941f1059788eb94cb250acd0e701576deea1205a782e166390a64d70c5a850fd204db6c093a405bc2766fdf32932d0f4616d7d83b6f82668f47eee247772905d1fe8c30fc5abe932081977626e1c9a3f744611b678cb3058b5b6df9ff0134bc7dd6dad4b6aef63d4eda238e70d52419ce12b329011b6dfcdc48ab7e41a22d32ac841b42bc0c21fc640d80183747e4113278fbec2e3705ae9a9112d2503184c513d8e25ec2ba05e55f8061d5aeec2481fd191555c567f3468008e742da53cad606f007a554aaba97de42f178bc8cacaad789233cb5c15ccdf95be836dcba9c78f531a42a7070a50ded842ad2a0f08fa7745a9d044d78c26d69b1ae890da87515bebb70a778db742770ddecd5b1b991842b0816498ec1d0dc30b1aa472f9cd98ff9eea0af3e74600007af38c55f8aa14b0ee2a283c44baa62c46e5b59ee926e827bb9c32d3e8833bcab449ca8f1e382c290eb164b1ee31eac26935641fe447fe41405eb11a49622925316cd7a0e5e4bb3c31e6d551668c66bc66088c042c5427dde0ec42fb303bcc524193489bbbf3add1d97b40c44917e7c0bea0fb859a2b294231b6b8a3de9e5a5a1cb19e44c8a8b9e62626005c3f412cfe295972f83327663071d5aa71db7b90d32a54334de1aad26d98a63c9e7ff99efa013db8f6a14c63d0066793bd5234d6004a58579b85cbedce46b455beb6af6118f492304f9232936c7be9a4021e1935da04a60d8673ced911755505783da30a6cf498b2e6cc290cb68e4ae25205baed3363dab7ab5b2cbce1d00375e55130d81cf1223522830dae634520bc4ecb8943da9fc8c9fbeca930e7146648d054c825f79723b014177b8c6d602e35f49be47fea190f2f947e5503e7ad282a2b16e76445bfa304c197d9ddde3cb971cd7fad23e8beb50bcc3de2a33df3fa44a8fcb44ff40a79a0258a59d74819712c3757ba714601d4ea83cb9e7d8ef23c8157730efec3f3a3577de4eb684535b96bb607184e9ae2542dcf2d26570e52b6876b97cf75547b67d64d2f31407a60785c4bf53cea7ef8aa288a3d1f12b1ba772623438f42673ae421224bf580053ebdde40c2f386a974f7daf1e390cd21af273c562ae007f58d561be68a22151d330062b8d58e36fb1a2e06681dab255076ab63aed0438009411a99dbbd8f9f5f0935a92f03644f24e31cd9f4897f5762022cfe0b31bf4fef14ac43eabd6429c142071547d3b7e3aee0beb8c149c95bbddf1c2c7f8775477c1c82459c146b41075898c1a81b9599b192649e76962e015443617c4f54e8f3e0d9490c2236b6e6bd0071da19a0d89492139f32d7c0eaadaf221251c1e79d1c32363569a94dc23dfbcc8e92635e867e5db7b9436956dd2cb924f2a97c70778324b416139d9e96503301a53d3474ef7bdc9f2d017ee7e965dfe169cf1b9690ad9bfe0df28bb21d314653a299f64c13a034c2457a5978e192f9c14f429c491d76fadaa0513028a994dbf35171d5c8d0d3cea6bfff9e2e73b75ddf0ac2d3ab3ff3aadc2bd4c5fd59a12113c7c6cb121972a28b18650935be2e8e5a393f05cfcaf12566e6cdb1676e5c167049b7cb9b12b9f8d5771ea596128ae4ef38296d1ddc0be6def3f7da4c1067a4650eaa93f388ef8ceb8f4f5da3e17f5525dc505dd3ed46d4e147cbbf175ee43daad0096504a53ef5a5c34d9f7b9b1edf96a833cc100fc4ad34c0a104cf84da986142dbca217e4d7d993824a2f671a865875360f1aefc851b8837339ddf9ef40d7b230fa40a13c86499e2dba2b376ed44d9a120c5a726dceb0cdbf4ff02ac6a8420f88847c77f78300340ac77fc3b936705300f708043571ceb6f83276d52550914dd20d3389fb29ac71e2222a35b2e07c72d8d6b242361953eefc47880129288c16326aae42d98296c5bea96575edaeef128dced506579ccc4307e119586985f07f79b68613958f1d21e32db9a26674ec4162b60150ce560b4765a31f4bac669f7d8515661951925d7a675e7832efebd8b178c70bf82ddf0912dbaddd856ee663fcb570a8ff86db25ad9a94fb9dafd8a07c052b0737d7a07a8135d1ac787b7d8a96d879d5d722818a7af7b96c5232a2cd2dec4f4204c31d1645e3790631efe4c41d0d2d78329f4d1f41ee3bef1ee42faa77d1d2aad0b358717f7d2a8f3c2c0fe0b26c8ee5958f6f3a2a7b75eeffaab50c7a9dd61c5ab86569cb8bdc19cf83ea4196ec214170b08b5518fe0015dc374eb2e9306eee4298eb252023133f05cbe7ed9b5775a0d64913ea8322852ca0efc459f575c482f5e94a4c7d16f38be45a24cf7ebf8b8dbceb0e4e4e7a5ff5b9e209f4dfd961b3c09b561167c8399da5b1a3ed59911b9ed96a366ad6cdd41ed3f5db3ac63cc6f5c55cb38b33afe27b0f324feeff0a7c18f545a67b13a8a2de85f06cc0cc8a0b206eb64ec4b30650d529f0a325945b5c627edffdf60cb55019004ea8dc70fd9b9ddb63f2819fa267a29c35bc1468fac32dbc850098c4b2580cd435206d01d97a8bfe55e58ed052362dfed98e6f83a51eae4fb47db6fc5525ac147a9c2c11c21ce73939cdef5d17e3abaa391017122ff9834b26b8aedf193afbc3b1dad51b1d899bd602f1b55830e90a6fc30d34bee6c829ad0c0e1d4732c51a60e5cee332296458a775d45c5229049cd4f8096232b4e079fb39de9c20aa284bc148d6d13883181405448aad0a5696ff12ccfad5f3457e8660394d00ab4979392675d1279f647743deb59234ab985511f9fa039d0eea9476dfa1786cf889d68d8bcc33024d7ae04afa10662fd0287b47dd2e49ac8d08d44a6a08e757c56dcf88b865986db891805b93e27debb0aeb565cf6dd429778252ee03a15a6884b76b1b4b2cfd01d3a7da3a25ac71955c1cb12138c38092545dfc2cdcf72973135cf6c0ce356758041bae2d7429c6f5b42371c0f82b8e32a0f4cb9ce4620f08dd3fbf0523f797d603cd63886eea93cc6976d1de73704ca006aa6bde231532b360a7873e5cbd8d2da0d2796a1b1cb8bacc919722a2ec2077632eeb0dfdf8e1c6c1b0d4ac0614af1eb7078a47d1fe23ab8c5f6129e06f360e1ce4baae08ddec55b65e83f6d97a08099118e05b8747bc364991b9ed67a2b68d97a1605f4cb3f2b33b0a3997a7241c1a1baed772e8a25006f67d8cd5ec67e484d09e19d256b88e0ac3f7db0fccfe760b10475ac4a44c9f9691607f7e145a138aa14c2397008b242ce635b9f92f6282e48075b91a36b84d7c9079a97c3e5430037bf5bbce8ce34d4e42b8cde7828452d6c754c39aedbbada5a1d760e966d0e8df3a3820c876d9d2df0d0fa573d635d769aa6b94df111d9f28ab528e9cad462beee7315b39ad63ecace5d312a1c6a53c4d95e44e7e0a3047b4e0dad46588a4c72f7afc91397693524ddce55358c207fc3eb3ce02af571e52bba593463428eb598da27bcc0b9399ec35e7e74a1b1e32e4d1f2c988a634029c9a8e6a063db078164324478ace29b19f3dc1c4a72809e1a49e18a00c39d64f0ec170e18ceec4b521cbe16f55447751bbdfa1c42d803b6fd880f2d0f7e460a55b6f29704d3142a87aaf04ca74158004a1e963d2d0a110ebb5c6d0fe304bfe4c067a5dffe197379dc3dc9bad8d6ac552ea102b084d1b70aa34e16c9d9c00e573d35dd3d32e639fc37757bd01f77e3f7960e336e9bee02aad29a2cc3a59ed90ee3c75255ca64d6f4c377a76adcc0de6a00f90412555c05a5d2ca0a208bd907c499562000df9e7297bad54e53f1d61350f3246d5832fcadfb7b4514b94f886f97f82fbc61eac70796ae37e13b285a9888b1d068b8debdeeab1fae97e1a58f87721bb4f16f5c392542eaed9f9b69b36762c63d4db7f1a10276d0122d753e6251e31efd78affb65e1a2a055b88f9fcf3a3a46c83793ac5ef6e774ce0ee6317f96adaf439e70734269751c96bc8a703d1f629590355ecb9870556c1d04cdfeaafa14b8ec327a3a0463d5135faf11b0acea96df641f6bdbbc17cc697a8561f84f996718cae9efc941c4e2a41e5e0c76d682eb0fcf446ce8cf0bde41d08963f093fd3123a08d86cbc4ce332d5be2d2625e41af2c622bbaf59e7768c1ec7ff5f2dbbaa326fe00e84b2988544d437ade8d34d937c36851263e3bff724a1b6e06ee3218009a73917f5790a0526f3abeb3f7db4e3129c36b48ef51b76807410f1a330dfca7fb18f6e53c60a8068b1e5303e28d2cc11cf28b28b0ac637269ab95d2a8d300422d52ad18e4669bf5b7dce76b340f383d868a04e72cff9000158329de36491e3543de40d314919032e87eca64c9937e7ef618fce58d46845d328783dbded6392df68c77543c07cee17266f58c0dd61823d8b284663b5a806f49b68d3a111f213a59d97f90bdf3df1e5bcd5a292ff7a7f9e9c0e8f7ab39964bc9de5afb9bef49c3bece3f7a8a742e388e852b2ce61f34993a23817fe399cb710dc12ff1f2307685dc7f8d9980008b3ef8b9b68c06a21bb074eb0bccb8d783923528faccd93e345998536f9e22f584faedbfb73548e1f488ef6881b95475680ab8d666d606301216622d8c314f7ea96b430a20c0553fae3a4b3a4a69bc8fd4e3d27a90a8df9c329261167cb743c827a5e53e01f77483b3c2f3cb23be5e3c03c9f2e04819587c799717acd46970acc814990fd7f5d7d06abc528070265380a147c90e613122dcadd7d0a5f8cf48a6079b720814de9b5da2209c7840c62d4d40364443a276b953dcee980248d69c9088951c65385851b7c94104c1028afc8bee11d7285f67f9e3a15e52a1af3cae7ae7e36dbe29e47ef23a2f3c76dccae610edc72bbdb05643dbd9db3c70b3743dac87647c8d9b6c27697a140043f751e4da3bce2f7c8df7bd254c81729c007fa937c83a22b2dfb6457a5303f90b9faa1ca7965d910fb82d7af9d49ec2a42b7c21dbe15cbbb40ad82fc3e7398afdabad7cef17573f383aa03cc3ec3f05db17ca9d2840f3804291c8a46d83e76e44adbdc55b83be5441713178c7caa53ed8b030fff2ccaa1f3060c374142a8354f5c531d81d4ed1b2dae5688a2b61b6050d92d70ca9e5863f0f855e75349dbc4320c5d3dc1a5f163f0dfc225f219bc7625f8403b1abd6d8d71b99a9109fba6d89c334e2f7cc7562ff99a690bed53b8b121e7cc2ac3ea436a4a7643a99453806954a39ae26630c66739ed939df9abf6fbe6792c2e42c4ef0123f89a18cd639ebc0e0626bf1d0a02c4f32f7416aa38cde6d32f8053c913f5c5387468f684da6da9dddc2e68ca91504bafc5fa694f59b0e1004e6635522e450d6a9054b400cdd9cb602cb9e6c6cd2a85f698c08c4c325473753e4e86819f08d2ac2021c52ab34b3701e0a88cf40036871f66eac4a0037e43e8ae911dda2b33ea22001125e10a3b5a2a1c16018e45edfa49d62dd0794320a06e871ebf9fe8ba8e4328ae8e35ead942d772e95067154c0b030014cd068a1f94b2f6dd2e788d8c5e108dccbbf48a7f72ef9b23327c3168dc7a619630307df91c9886ef21a6a7d0545c8902b4e682500d5fd9d9d6d6d7e31ed26d0584b210336fbfb6563ea238f3e23de3263c255d54929091b31526c8ba616417688529548d37c5130d58d9c884a5c32f9fc5d4c6933bf335fd1ab1a61c7ae3a92c83dbf56830a07a74b791c15d2240e170aa9601e706917eea43831dfcd8019777d9198231fc153b0664c8aa80febe4fe1105550cf98e511913e38aecfa72210eadd90f58cf05c0cdc39210ac4b2c4c9245e15888697921ac62ff7e48a2d6fda7d026b6089e6078a8d9d7adaa2e66af42c7ad7020186dd3ab3228d9f1080fd977fa17a375a95db87b97902a13599aad27d1a11c35f6e32ae5fbd11915705f3df37c6e21e032db43d6d37fbaf64ebe521ac3061983b9745afab9be574373f22b1b8277fd8d5db395202ee303fb19153ec9c674f9b7d84fd3cb59f57050913f71dabf192f2c97d0c6c0978465c5acc811a1d96d94b277b43db811e3b4552130683146a060a92cd6c7fa56638e6d780d18e394ce3313ae4c60584967050c95c3293fd4927151dae227f8909d3760b6680198014a84c27b940c30fae07d8117d0694cee33ae27d40a3c3d5927f404dde2e94e043e80bdaf1e536dbed588320ab32921be273ea9b774f030b5f1fcb9039b202dada6b4804df2548f439dd91a752c5155df96c44c5df1ea21427d90d7bbe97d32dda6d467d2754bd641ab9693f9160399541337143c092e2dd5050670ef22257dc2b854b76fdbb3fb8eaa1edea35f2a966ff519f2eed5d2bcc082aa2543f813f4166aaccfbff2caba39eea92f7054ad95e6366d9fdd66633ec09d516538705e97ff4602ff6558573c04c8acb34caea6793698a2e02676651962428b8a9b972c23de910cd15816c435c7dc6da297b01d9e3ec9d447b88cbdd062cb26a0f007a021ff460ea53cff6b0a4349c7972804f7ea39b159d344f63adb0939680d676c48b20b4ae6a6352716e302574053622d396d43e4f61131cce61b3a8ade38aca8d447a6a3034ff6ba63d901e34f1cc85fea9e7fda1a132097f672630f97d7d3a46af8eb8d9e0415c85f1491d571f386d495970e9753f0fe5e4bcf063b553a47396c01ce09f1eb5cf3663a6234fa600adc868421aab6b0cc6057b91456f3970908b0e66f3c3364276d21d49d1231909f451796c696427483a84b2bd86411a85a35618ead4e4b3433e151c1acebdad6aef1307176fd33e1f0c896d490bfe497df2993a9c902f99ae2b8f420f24bf50cfbc6bdbdf874359650f1d45a979150ca819f82e23639042d5e73ff8696def6ab495b56284f0d6630c678e93f1e37173638fe63d1f8a96d3c024e863a6be672c08558c9a9276b13174d82586c3aada007f6c2fdc427f37511759781d3e4cf1f839f85818da211ce9dd792af5427c566229b0041199f054a62d6ade0846042c146e1936419cba289ab3a7ab821fd3190092533a5e550297a93f0f287604b08cf2f136ad0e2643682f27166415098e92f3cc3af630e0ed00370f8ca0d99d16dd2fb60dd1c3745a51e7b832f28b4e8d8a62a78926078f731bd509e95700fe42801e6e761fc37bb95862aa21c9cfdc37c3ea6c2b78b917d12fe17e1da75a54eed48760cd9a34ad2d6990eb6829c3c7816974d74df0a882f328711037d18c535e433af7c0d130bd2fda2a2eae0db2321fe084bcb3f090dafc7d1d54403028c23f75f852620644868c3850d023bf44ce6a4d80033ea5c7392162ea1d4c9c12740a83f656724df766eb930441e8202948a63174b59fa7f960df016f68e91cc520b79e913d54971149bad830889a01dce0b4d4393012be2c0f25d231642f18d85e919ab4ae5ab5f84afdb41696376d52b8ec4259ce039c560e385eca636e0269f6ef36523ab6be56fad1986f63fb7befe22eb310e32bd53f04cc5675b822c9814c38a83aa7dae4355c38da4f7a64dabcdc0718687ed6e330f64d7b0730ac845b5174e13cda53a64ea63ed91144bfd59949a8f3c5bcfee4a8dee49c4873869daed6f130401d04756cc7fdffeefd0372267d3eb7e0e012b33ff69d5d83b289f40be16a8a22cdd84ba494134d7b1ef97ea1d14971078dd57bbd51f3013a8ff0d3aca128b7330c73acbfbedeca3fde186586e646022282a1cc7045076931a76973d87e6d07360659c6b8f751607cf8b39a74aa2386be622133b2ab2217b9846b5e894f3041ed65daf4912f5ea5887117cecbb98e8ff4cde0bb4503c455d03857345a854366417851157f2828bcce86d3b38540105b02ca1e2784138b75e29a29b9e05322007769bd341647dcf799433a681f933e5b22d2529685f8a755ed79bad62aad3caf8ea12e4e4db26b45a8c2089f5ca43fadd19095b5b74596225631706fe4c2b75d8a45b0de75197058f502f4a8b4b3c72dfc6b8c0db807d499b43b92dfa535b3038ceaee90cb4df975cdc5a2b3e37e821f4b82fd5ccb2a12cfefda9b64d5b2eadb77cedc0dce7f7ef40b4869f6cc46101ca8993c57d8eed3851c0690dbcc09195aa7b0020a55807f9eceb414bf14d9b170033bf46f37d3299851f388a6885c09c1725145fe308153d1c199f6f38969e9bfbc4459e8e159ef6146075850f6b3654c2f9b4f8ae4f7eba842f8c07db5fd93ab8c656d1f05967ca2f06548f622acb5f9b1ac02396bb21e700f369fa002f52301d8f97c8b0a3df8c09b4e2581fa839538600b95a602fc8521e006ad90e27c6e92abc7510d419142c5c2472a0a3145ddce5aa968e0722b4e1ec9c2163f33d2e45fe672842640ba717c82f177578981fcbdfb1d1b8846089707f45f613c6e792212259d354d2117e6784f9affab140e26e063583110884d6c8e1523098f3c7652342fd1a6d0a95c0acc3fd89f5b0f03c0038dcd9720d90c94a1e84d27cacc8790aa1c362a5031fde7759ba9964b87b93c2310f0de818d9773d3fc390e895cff184f9554a36a7851b05eb462c4eaa5de1be531958ba828233237841e729abe8f3a7883840d52d30be54cc1cc809e9117b221695f017481ce46f78a4a7ac0a74cd6982228e619afa60bd4e9a53dcf62842104a0a33bec2f7c5149d7483edc226ecc216656588df0a000a7cb8a5056cd4266ba0a87b1b224c29caf4adc27d358eb219ac377cf15130b9ac1ff530a12e47f18ec82921444c8e1c9f580b2ba6031bbdb9bfdf9bd4b4e34787248959cfbb2c48c88c62c5269f4b9fd38d0ac7c19bccfea08a93d102416cb767c90f9a5b7d1c25e55c4b55ffeb5391d6e3874db30f4dda4cf9fb27010dfd25366febeb4b08ab0be0748b7d4b31e7cb90c8193091761b4890a5a8b6b4e5c0daadc58986059c1325ec85fca4ffef960491ca3ced9c21ea672f31a46b259217e8a43669c2aff2f2c39cc27ae020d91d27fa8bef0a00109741a969d0806deb40eef6ddb79dbf91e40b16aa1f449480e94da959933b58756add61a4b6684e5554812191d1a39aca3643703db0d1486b91bcc7caa0f2e783bfa345eb304667ea2832b704baefbd19f769b0027e8f50b27674aa418808cd5b771303c8a62cc692ea3c22305dc1ad50c3278d6998f19de47532a395d73878c70fc53d7017b63d9d6602e95f51beb6e63a7362e69b6970b737a33eda14bc1105ade60c28dd3a43c8a7f849c2c5fa6b208fa498d89041068bf39361df833a4ea95a4c64a119cfacbc6e782541d796d0556cc126a74425a8c29628eb717fd5316a98c7d5e82c875c47e22428f8eb713e7d586d8baaf0941c0bd2b1c2d7897695775b02fe5d8539c7e4abcd973c6b9c810ea3ebcf51f7661f0de8342d035bba22de0e68089aab8179592021e65d48264e6218cb5d5b3f27fb8a4958cb9ed61b248a339d350f339f87a43094e00544fdbf46ac3e27b24e3f97ad5fe9b9b97792a06fb0adc9a60722f07749b3ac8530fa818049ba298e0218e44bf81272edd4c2fc01083c9234cbee56809063714457e62a8653e5ce5e148162ac8a3261dd201faec535059af09a8216806a4b13b9e795f8171890ef5d71fe648b082b4a374c1444d80d180cae160c6de8351814531af9f079097b39b8adc100a0fb04fb261d0e10c33dba84ee3b78ae3be111ddf7a998d33a81b849819c0543b5d3c0fd39bc014971a47073f925b30c5f3980c7eecd8436a395c730e7b75a1c65b559edfc7df72e4ca11ab1a76cdbe380f5125cc1b08d1cc8d8f3c86a2b93829648f44ac98da49701fe6a2f0ae03391d563b9990976b3818bce746a52d9aae85d15efc36429cea37c47365d9315cdcea8e7bbcb62d1c14566f55b65196f8dfedb0937dd57dc160d36ac4ff3f3c3fdb54f97b4ee7cc0d41c79e06fd71045c849ea9220bdd895170727e69df4be6e9fc76e373b2abcf0610f526ff7a65ea0306fc0ca2b736f4ccd3d52ecfa0dd219290e26999b72a373b73d453725200b45fe6be0ee5696d2cf01e7375800d9ae04d185e80109cc8dae1ddf20725983773a0b85a5d42ebf8d94b3682e3aeb3da982051a8adb56c44547ef6957ac837c5e1c980d1568ad0c2072f370dbe2efd6817cf0f73604fbd671a30441feed2dc55b4ceb8131ac273f22738879066a452103464588278bd3010832a8b850ab8a297f4e1484a5b4d62dbafc6873ecee3e6b5f1f71659a2dacd7c49bbb22df0322ee02581492eb4d8ba96cc19d08913f3d36f4d2110569b77976e47254efc4eeb72aefec39b27d0bbdf227a21f1e43c27122452834d799565d528e4a9d2ac4db7988f4b34bee236a37c2c1c7dd937a54652a8c7e3e671ea99e73a11057871e4d08a78eaee119c828ddd219db37d6633b404cede3db415489ac0239bf17a0f464ef4b4da8b29233835d2b794a9dfddbf394598119a3a077c33e9e704639a7669b759cc22933ea16f4919e8e51a5f8a15473d76a996067a00551cfde4ed6e68edb8788f8122b5f596a49983e47126feb2bea5ee37060ada3a805bc482dcb56689c5aca65cb6035d220b6cc65de2b109a6ca4e49b664dba7565f0b301d071d039a5e22a2f2f701a1fef107ebb0d160f8b5e3a52c3b3503a85e0edfaa0c2855e7b0b1b19aa74389e6b96d76638b01e6df66fcc7834ea85ab9ed35ebae587b0ba0c5e4e4691ebf537eedb58ce3c76ef24220ec45b19f59f76855c216824d66cce96f225f108a841fb87a17ad4bd791b1ca93623aeb68cad6b587111e9a50d8044d5153abacd1b653230a6a481bd191b18f7ba8ff9b3228afd72a4120f77526a656465d7b19ba50d253a326fdc92b7a32484fd8d1c830cbbec78c39c9424511b8b1b6b4811e8629bce6189c24eb20606a061c9695d2b656e83bff68d7d2b962c5e18086ea6adab68a52aae198284b6a5e6256e96fdf2734858f91a7765478832ed2142057b7cba3ab99b11aa921326d8ed26e629cc610b5fff88007d8c7b17a9ce5fb7ac736b57aa854ccfad166bd428c9449c47b49a4f42f4d19b045d10c2c3e37704e208d3cbd0cdc6718237e74e7d0fe6ad488e3fb8377e1b16c5a3313451e32ddcdf7efe1586514958d4428ba09e6fa04018c678c593d5d67709a4c0cac02a2bd6b5193d176ef1c94c18ac5ea07060d4315eb0449eaafc52ab9b3a7bc5c18ce8807d81424a6dfb17a4bd263dc59e1e9ecd03d97d2bb1a81b5bd300755c943caf2ae66dfe86e216e9db398b0ab4669c4bf622637fddac1ad35ffab5404a3a83bfd7b88a082deb10230b4d895302f34c111c76243c4c32b0afd7c54137311f3da24ba48a3d1eecfca7a12b8f428c869d2d893c80bc942c105996de7c7df7dd95463cc6723179cb494732ae56967d777e421e583ada11d4740bb8be4fe18ea9f3d4f95e6b33637de2da50101bf5cee2dd747f60ab5b96967771843cb642f9bf1c3bf41d584ebf4c1283a244266b0a6b4fefbc321d61c763c4c1b467814fe2eaf73d3ca6dd9854ca9a2b30dd726bd44217051d1ba9f9098c55b7cf1c9772fa7dbcc5b16c820e69376d45069eea3db7d505449646791b77192dcf92c7c7b99d73cb02344dddd6cc6276e51f69d461f0ba294aea89b071479d6b0b6054290608a5459c58b5b96306173dd4f373397823586aaf72398d6a392c139870a4af4dfcf8336009cb880115845a31b3b67fa618a5a31a4190bec48c9630220801c2c4e36f74740b0659c33ab5ed8a36f75e91535e5f88bda703ab339197d5a4308f4a5acc9fe25a3a2a939189faa3f3617a5956ec5aae03fdfe6db587c7ffc87ad4934348eddfb70e6911215324861f5f0ceec0a82a387cfa840cac70804b49b20a95d3ff7bd57fb9e2768cc54c64f3054a5fa4d8ae265956fb659a400524648c7aebecc1daa34c520d64454d27581dbadb87ad2751e6b24778789143ace651030d458a45c1945df8d25e20c924d369e78aa744ca630a1131a34a10d6e7a8574a7338ac4f1b55a874e39b18ef9996fe822c586bdfd3a488e96cd0888dde441075f2263b6607c7843baf927d9ce87b250386766dd61dc1d2f835072b7f7ebb8af80ce7685b4e928a795ca9d8907058759c11b803e4fa2fef5d2840423c60edc6f085bff40d84cb7188e8f63d0fe7690825e49450492ba400d2de59aed3f7096e7e605aaed25d4cfb591f595f377c5ed698123b18fe0b89b96ad057bfab29708a6d1931f1d594057ef3018329f430399c22e26854d0787191560e5b35983e8a0514760fdbf61a7415ca2499edb39abba23291f19b98023274abbd2dedf20595ba9bfaea3529be93c87a3f2e5c09de4bf96d373401db7ec65bbe388e07b18245c66c8a28e475d9b08d587c1acb7389b058988d0fb65a68cb5f2c19504ca6d40feaaaddb37083e85b456ef47dd4a6a90e4c37a9f08a3b7d178a7169b0d15d95a0013c6c1088054fe237f6d6f1f76aeb1a51a0f12dc5a412986989750ed8579532a442cb6a23559c770ff25d9776761531e5ba1812c6f925b9c1768de7fa3ec8c76b0468d8961578b675a8c4260a344237161298ce828893c8654e0eef0c7c877c56bb030ca777d3ca178a98c61f65a76634c424059027dfe38ecf8bea4daad96f665e903503749c08315edbc45dd46141bc72386b4a8df8e8fbfc7a5c1b07feb4062ec4bc6004a28664fd377b059eb0908fe74ce475818f02034202c3ebfff4378aa0bf5b988e9419f9e29ddffc666e905d1b03461818bf7f94a3cbcb3fc76e8e818b64a398f326fec18a74ade400787b094eea883a6e1faac820bba87460750def3d7fbb543ec1fc721c65becdab3a5977323dbebc8d17db457db92fb2fd4f2a1686344c04e7a46d12bc9686ba2ba1fdd461c30bec3d29b28c57dd49faa8c9aa67eb7ac1dd650629b3c067f4324825bb9e025508dae79cad0e12b493284ce8cd808492e2a9a4199b9bc67a6b79bb6a5b095dbf241312ad04053a36c32a243cfcaf7ad26c53c1eef96dcfc14c87c8548af352156cc5670e69616c596e9ba3ef893afe73bf0317a3c4ffb8019c0022356c4882456ce94ca3e7ab9db4bb6dcb401df38319f876a0857722c69ca2f5b94770b8716ff235d08441e8788e209616324dccd2873d97bf46548ad9f1397829f72dfbee05fb8be61001f950fdf7b2f6ff919e08da57dfb4d9944d1eb581cc7e636739533541548f15fb06e666e338d11ca5f47e0d3f72007198bd895704bd2b1a0c3e74062604ff8ea8648fb994b306de1de4a5280c976205fde4aaadea88e090722edf8d498185217157e078fb6a19e106ec0eb33278575982002fd2991f5e29c032ebafd54381344dff133219d9de471ceb07e3a7425251773841dd9d968dc909849b8bcb4ae8f8d8512b360459557309005a52ebe7b59c06e0c2e1ae6cb03658a96c240edf4ef33acfbd01df3abec2a87bbfee17d0abd3bad5bd2fb27aa1dc68539966e7fd9bf54ff10fcd50ca79ab67730cea6a6e38dff20f5b9480019b33e4e82ab757b6fed7aa8dff36c1380f7ff4f903c7d23e3b89339bf6f0d99745543f4fd1228e3ae83de2f5682267e6cbcc47a333c523443058a6efe29c4c65f28e137c2ca345a944b0c9e0fbf2e84991204e68b9b238d27cc20b9d270e91b56ed5a15cc88f939aca63e89a2dda6084be02ccbcdf87ec0ab580003be2f8e8fe6b37323ac5c04206d8e7c1c68038759ddbc6fae573f2b21491ecfc540261547e4110d618313c0f998deb4490e7600ce10b5c788f8f2db3001c4a1ce819f32ed217e32ea2989846a7b51881dd653d84ce6d4802f27f3a359bf0a7573d309b8610146d8d6114c2e5d6b327001bee0499de647b582434322bcf5f73037b077626e4fe75f73b5ce6767dadb1309dcd4bf6043dde3113eff203bc7ac342698d6ae765adb0a9c6e050afd7996a07b3f98088a15424f6f020de8565c94a44b40bb029169f6328f24edfbd453462b8c08d7371dcb73d0253018879f2a26d0f943756918c963d05c82a197c03d1f201e5bd4c6247cbc5dc1b0e1dd445091f8a7b33b5422c0e6a2dc30a81794e2ad1833fb2bb446b2e61734fd27b9f2b21261b0fdf99934f92a8f2e43edb0b121fd757a8b6358aa6eeedbeef36e9e6c3152ecad3ec7fd9cbec39323db61f75008a22c51e7c607d3138a9b8140ceca871413148dc21d460e8ef6b6f502d5609cb0ec219c62944413823bb727a68887659317175b354e83701ed0561df51d81a4b155cd60d4697fa16417e24edf3dbb9be5e8df15912a025708501bc830140abf8df354e8fc5d91b82b7fb443088ed65381634a5a1c5715761c6bfd236d2be1187df01a4c7ec4a49c27926a3a8d2267842c2a2211cf4693fbbf78d0d7106a5528dad13fb8f0c59362b7d65d9efcfa8b374c80371c808b5760caea92ea6b8f413349a6f4067e013b9c403afa2b62b90ad154fb16ce95196d0340e94bcf32d02678b9e49b9f42708796eff5862f8ebbe1cdf869e55ae79a1178e07e7b43252b87ebefd71630d682d5b91195819cedf04c8782e4eab001066695cbc55e6c5c316b50afb1c1f1f9e8770a8091524b5ca3897b5ae1683ed6f16cce55fb5914b260b690eb052c3646f85d7b8e40d64f690ac86099cc64ea3b6189d7381229008f179c5f250fc30d9ad082a5fd43a127437607fa856db52d34ca081792707bc6c18e369c0bcfebe4a4294580c8075bd8d139bb48b49ff50b2ab69b654bc1b9fe92f03008731c09be8e05ccf71fc66dc0bd9e8bd8e7c7db97b653c893178613c2a62326840e7ef92ee356c151439df52b9784f6e90c4928d438a5dcd0aa5889d4d7214de67d70a3a7355a64201ee337432382d33a3135bc475986e46c9d1d534450e3d2e576a8d29c475e6551c51c2beec3683ce6667062929ea224ae88460aa94bdd31c00a1b61fb88fe0fa628791e078e6863042176adb6cb718d9b4323d7c6311bad0c63a30473f47d7fa49d0634aba0319390c2ff5971ec4787d3d03fb0d3e01e51a1ca1a1f5abbf666a9941b034c11921ada3cd892a9f9880e68aa0fc3813509aed7e7e532265bd9faccb77b9a11e115e2e3fac4164c557d5e0ff208776ee608a159b631656419cab2b03d6bd4e2718ce21e343c73b4dfe58c08866450836ab23af954bccd047f7539537c72ab42dba9f9964e918420c70e2ce8da46c4911f2eeab67481817f5c085878a76b80bf852cfd88385a510be0b0fdb753deac75dea5df4856b7635c8aa1f5641a95da9c5cc8d44ce25056ffe8684e9875a9ee3feac4db9bd0b9ac2357b137dec469e8b77422180fac6b9889d4e703d62aa6299323e401c836215ad1a8d58d81d41291733b2922029e2204a94af7e573a35148265ea69eaeeebe05dcf4bfc694b67f96b8067f595524bc76b9fe4722559ed279ae1a559170fe8248e951b1e1d64945d86517c006c810a45a5b2a4fa9d6c8082d9586ae3a83250b0aae3d8755a29780a51f97828ea5f3d23020bdc233f242af27d3300fc4be79e18754b9675a7fefe0cb1ed8b368abccdbf69aa3d87a2630781978e7894da5f0c95e069ebbd4e2e81819e2a5e0e762619195552824a9594cc52c6655ad85523a2c0fa1c3000ae8ca982da8f4489ca9e02dd862fdc3ad466a6edf837c5195aa06e7e81d117fabd634279d91ccc0d6c08988f0d4771110a864fbd66c8a02df4badd92f81bf1f1b26556f6e2648b0ac5cbf0baa438fd462e11451ccf0a8c4b2da7f379fb2308a090898d64360fcc732649608139fa272716536e9e5adb29692dd148f1158436e6a609b50bdd9b952091f5a01123d54da484797bbc48e31821260a0e3b6fc2d106132bd69e0ad90047344066093d8db07cff4a50186b028c6c168140946cfd84ea7640f87d182097d4ddeeab92e4dfb48aae5e3c6d4bb85ab2eb71139afd4029490701d18c043956a5029bcad28359662329c2a63ee38f30f07895af84250acebfcef203632a0dd7a5294f91b50c8e08d12cbb3230837c4b64ce2b3fe97c9e8a6c4b0e185a830ee50a74646581bc536c86cf56dad42c9a90dbd76b181b08af7a5aa1653c7865e203aed9f1c798e1a4146fe58a8db12d072148d73b82d53e2c1285ab6dd0fb5004062ac51ff283a1e3bd1e0c5aa34376b46ce0a862e6796914a0ee973a104d9c19db82129e6a6c00971d7669712fed0c070dca0b5b729514e6b398886397acaad514cd8e738fda7775a5e6df58d148a429d7a9643862fb1db5173c2ce28f3cff1a0b8b2533ed89ccb1170e5782e46fb7e25a8e63762d62ffa655f8cc7d2abea7c59f353fe4e05e669cd18f11bf0d0f6c117b556d5e64c98b74c202b3d543659947f1a149a44cdef11692bddebea3b57eca26b828078c190cea6dd3b335d5931d1516bd82358396d141b65eaf6a3e0427dd5b3a71bf4a24a1533d980d5b150dc59eb03d105dd01f9dc0033b23e00a7c256f4812d5deb85d5f4b625ae35a5b70168bbea82f5c4bad412c65f49712f03983d25d4407aea86c3e2b1d43c7348e161af6aac4b33404e6e845360ac605fcab826031e03658734f708b93624b5befdc6a4cc38b0e30f2751a701d57a7ecc3d34166032ca12c42c6d0ced7e62ea304bd2d662b924a31ba23d625e61fe761d923e2f2d91e1d03bc4abbf63a485718e6536f62702431262187be723d6c490dda256e158a84c23eda93dc333b78d14e88942823ebda2b10e3de9cf7d157992d4b1c3091a662f90f65b9fa4f122287bcb58197cdda540e2683fd4b632a4c7404bb103e8739a368457a2ed713d2a8a4d5d730dd0ebaea5d9722f5ed6aacc57b391ce5ab7bca39295fb57858fa5e2b23be418509c3d1832715c86987be80db92fa55b92c443b47177e7d79b301367964cde89107f89601a8a56e08a564c5c4bed0840de77e2054bd1a778f3942b847ec9fa337b679370e99e327ecb37458e700b4ea4348b0f3939aff74e63b7190d7310db614c8f22aef45610fb6066e26c80fef03bf194adabe1ca107fd18948627c6ec8da8510d51e5b18ce9bd170484ca951f0a4b600d841695cbb20ef3f29dbe64acb591f109ac0e372d090b4bba7d4a5a5f2057dc6d500465c4a4163bff2cc4be1afa26e2b25dffc36245bf26532649dca5f6838604ff4b572ba3f95a449448a80d0a159af11e649b806ada20ea0547e2669ee36ab362f50ede2c611e50e3a3ce85ace5deac1e4650dc191841468e419e235257e6abd3fbe64577249195e4043f5600735f0b8424d6c25e95be0bccd9a1c60d9384dfd2b79681c7e268e91188cddbab8b1f25f43a0a4dfa73f77d7047f4b50036cffde3b7b568aa37f4d73b89542fd9df7aae1cad99e4a8d3034b8cc61b92b79c0350d8698b280357bb975561a9b52d2d60870b2dbc1f37ca1b00ff58d891be98f8115fb836b24ee191c1a918a76f5530a9734e6214eee0ba11aeffc81dc85a47a2037d9d737b0e02ccd575d0828c5954516eabd327fddbf466d9fb3c4737f3e5e41d6797489c97dc39e7a9e869958ab3f1840c0eb615f15cd547d416bf2aa871db194cd96286f63f2ccc5559290aee29bec8751d442b5761a0d91b924368189ff14046ce0d3ea1df5493311d0212d040b8fe0a598b920b02739eddb7ec1215cc396299ddbb756130c7aeca640fc455c6f70e87a1c64f7aa6fbff7230cf6a94c07701ce3a9cbf8fad72f2a90f7d7d91ab8c65bc628a59f94c66853ec7db11a77827b20776968b57f2604f40233e4ac0c4af73d99690d71517afef5d062dec53689a980ba933411b9321eaac53c4d413f08ce760754ceb87ef10e6fb6e69a37ebf10b29270d3ca104b23b638a7527e36b15f943110fea46ac4087362ce37546b2e3a1ff71135d4e4b982dbecf249684570d6a8a6d32051b7ce3e432fc8bf2a9b2f6d1480ad5e982de4fd8d991bbace14d9c36cb3a5011734cb6b229cda3187081f7b8d73d9a02072081eea1bbf04c82511105b6e940f8707df85fa41e802eb7deab2b41fa652fcd000244497ffb3aa8e24b4c8d9884dedb451e23f32927bf8728bcdbaabcafa6c4789b07c6021d43708d37676334f98aec19da8da012a9269ccee8fa5275c1c4be7b4b89508ef1ebb30e38eef931ea4a46e3ca0cb76c2cc048c9b9d9227d10711f021779c4fc7092944ce0b33993a063f2aeb025cfb78b9399d6f9eebf777a32ae89f88720f62cfba64e4a7d8443ccbfcd11cba0e3924c81417a822f84998d8c1b59e1ea75be268b0a35e79ba2ab6ccfb4603cfda532ee8943229cded006bc3ee6477dd68a3110b7fbf0f203ec81896a31400b598e303687a3e0ce752cbac3c4034ba8f8cf81fe664aca1bd55ed2e46ddf12c3bfc1d8b8e93122e48ad78d38802c2d7dbf51b202078b6b132eaf820e5f2ead93b335c85979199dbabfa221d3c59a04f5fd2835f06dc13e00188ce6180363ae96e94b010710b18c6ce2c849934e92f808c010db03a74480973fae1fe7271c92c33df2305cf0ade8d4e92eb2643252ced518680264747bea74cd86fd9e8c7f24a3b406c823d2a9f5caf8ef6ee800d5adf07ca6a0970b8f61f5eb8117b4a399378b2ba620e99104b7256f748bdc75e16742ea580add6ab17fa2682e52d6cca9cb330087380c0ddd5cb5360d0718374d53d1a470e796df1e93689b92772c5162a12a90b972288c7be31d26d1a3a23f5a9aa4a61ad6834eec13ac5da39fca12d5649d842eddc0da9251ab1a67f511e68f489ac4e9490b1657d9897c8ce2b0e024ffeeae1ff151754b07ed975d0676f53ccef3f435c9b8d6a5ce13a9d2863c6617e77cef45d037b8b51cb0b0daf30b5c7a48780c683134bd2770a5520a7af50d5e19270b101bca94d76fe03120bd208f97994b438b44b8001da90988b565c65e067c9001f45546959c841b8b9f22a4dd407fb688b276dbda81e81050d4923ec6fbb308d13abf93a3a1971e51ec0130d429d56b156607427b118f9f547ccd079743edb4b28bce4d09e54d9745871ad199263165b4f2d9ca5a23031c725f7bf995ff9a1ed60664eb6f21b27afae84b57f4778b1f8bf34349eec698f0fd14e2097527ac48237afc9121491c93e0ba63cb2fde368b7700f9965bd3ccbb480f2cc00f28d212581aa6d4db6848d1a196c78b70b578ef2b0f41114428b3abf9b4feef51188b23d3b2ba205e748103abdc2d8cf98371d236a778a9f88cbe205ea9c1427df0c82ce9d26a2fd6d7451e5408f46d44e7e20059072c0c58614a900d7b7ca57320815a92813fa6a9dcba3fb4fa3a790383e5e94ffa95b826d87fea34859ca0d1d94289b3489857d826e79ee3b9c5cada113bfd0e01e720f2d8b67a417ff5d8e10752d05733cdcf2fe1e489c0e0106119f5d2e8e788820468f7249b416ca08cad7a9a42abc7206d8d8471f350aa17fd7e14a2462b71f2ad0211305908488466954cba0605cf0dceb16ea4b71851b9bf5bcfcce4184b90b932091340554b2a2fd68a0966074344d52807b697fd358c1cde7221515166a01a6f27d3f4d01f5e3ef8c35ff8e6762aeb5b7fa167cda256cea4f434e4e8d33f2ef2877eaba1b298f5ca617db1384d88fd7eed9d073c4b16d25b3f79e1337db3211647be4f0e2e7db47de7baa7e7610043cc2cb77e015f637b75fc493abb42665a2b6701fe5bb4538f8cc2c197a362c4ea76c9821011726f42eab32ad05abcff70c7d83a79aebfbd3073227b1b1613ba92b43b832fef1918bd3b2a1f2323439359bcba19d9bb9433ddc475a76d10b68d4e4f82c303f06deef4163050d475b8931c182247d3577c91577501e1e43466d21dd86c0cc6900637fb169326c11762ae4ad573b7dd03fb638ddba47696d0e8d7be129f77a1eda127fff15b7388e4c43bcec3ae725eebe8d98a57fcae1052095afae757d2e43c2c68d332d1d3398e77960d22e99efa320ef52640db6c3a3cc84191fbdb0c9d311370754de9c13271b3aad22843f143a220d0efdf6fd9d80e9d15d03db66c4c8dc11fda30a1a92520a356a6325a4cb5122d6af12f214f41ba4bb2f9111320ba3a9225158de195a9c6f09dfc529e3b6203866b7c61db20a7e506b6ce380c682152ddde596a5badd257bc65060f64f1899f9804ce954ca73c90402b56700fc064336c825c4dd763c64d17c8bdc43be4a36e38f13d73be6fdc07c4367fe7aa3b6ed8536f0fdead12c13c4ac2977d063b583c23a26f9e0972a52dadfb69f7d45608bc2c03e309574376d706639b6bd4c1a583536ced13e161bf85e2cab9d52f2345de5852970a9f501501a38c6b71bd008b88271db3fde53cdd1a9b7239bb93164ab5acd26d51388ee1401d4c77d5bb1261386f674ebc5b2d803dc454e324a513d948c161a75da9d914b53902c3e0f7a58193086a9f8e525a09cfaecebeb36ecc89a33742253b7dbeea59dc31cfa6e5330d78a77be5fc1a9fa4dd4ce95054dcbb3cd3249dcdfe687023a5c0b0124326e8da580cbc873d65d388a63d395baf58d64d9359ce9941de5793f00ab9513d7a6c09c992aa7280c695f4ac0f33743058eab1f5006750ef83d44c0055dec55299eb23276e188033fcae00c9a383660b9029a6f515c07b65626e2a30567709766a938dad218c24da64ce6bf9ee0201615ffca3ac48affe6c65c21a223e70f414e1943e90f976a59252e7c89a831dc72cd0d0dcdb4f653f197be0c88da06ace66ed4dc993f15e80896109b081d4c9f1d5b450e4396b63af285981bb8f38060164adaaf2bb1c3521547717da948cc7f997ac29eea5a8060aaec99ef030c1d1c4f3df6cf55f64269dea140623e679cec8dfdb201c310365e499bd0c3e92d60d355fe21d4b19cf07abf2b043f31a2220a7183cb6dbc5755c7bc67c5f1b21d5a0af3a7c8681069cae79709a96a0f1ad198f1f3d4b525f50d9351a39dd80cf4fe2b0d8b29fc3193ec523c27cde35cbf686d24325f4bca6745edefeeb972b877942a5c1c63dd5adcaafd034aa73649f34fa041714096e1dda6c5b29503182683c639770291ad83e9d85f5d3b3a05d27d679e1c89cde9d353db46f610eff57daec6fcac5e90f09ec6942192c6c45dddf92653922d5eceace653db112e43b2b23a765d2c0d6df1282a628840466e774ee0fd875f47f23c206042ea6f8c5d89066a03cd238e4b488f416b634f2a588a7846c3481c4ba067db1e1c57d7c14e236dd993265eaf62df97192d7836177746e9a36eb22e98a5449d97453da81dff87ef4913149a812056ab36d8ab911273d6bf0e84ea3768c64e4f9c41a02df7b54f6630757483be30e280ececeab400e1d3ab103592c1a3c54d34e91abeb74ec612a8914ceb00bcbdbbc99b45441aeeb04d972d23dd886ef551dda3b89039e89d83b0df524cb4e48dda4089cb0a6c10e98725e83ecddc51487205a381b75a2795117d7b5539f65450004ad82dd2918b375ede1103a5ef118d470803dfb13a340d30394568423a7c27bebeec2615fdfcc36c4af3509186d970fb98ca05133d4e0364d7578aa68d2580a6d1d44dd849c65b869b5831253e63306b1347b5c09b452cac1beb1e405250c583db855e4478ce9ea6978259e1c6a86a57757cfd2746041e678e2b77266d1874a84cfc9948bf3d578e9e66ff3d83079495cc7d1f3426b490a89c83f5605be5b075a89c58e776ba40531a00a54ebf903df5ebf8fdf1de11f4e4e96ce38a1ad88e59acde7578bee52e0be76009ff60f1b47d0af95ed41066df53c3344ddf8e4b37e6d5bd7be4b2b8f65b6b9a19b221da5e71899d899ce40502a4b653e5c6039a29b049d0390a85eaf8d1630ed143fb06fea4530e6b90aa25a4538afa90e94850846e373864bd784c7c9ce9c59ec4e8e9e324245b372ba3de19e5ccb3e5730fc9d00b46596e35bf9f6b6c4e32bebf3309d9628768bddfa660d6f2ec61849d6038f5cccce70e164fe04e87f79ccb28737930e02c8659c3443a23747996ae259348fcb99cdcb6c5fe91238ad6809a3ecf45fdbdf6a694e210e912a2f4d68e2fb8428c5f06deb6e1222c8009b704d6a58658798ade41ef60bad05d401c0728a219bfd504711dd63b72e8b998e4f553ac4da569b4821cdfa6d3ea80e3032cdd15ac0ca1776b6a51a1d98e6d6c1dc7ad4c61f9b4461a0fa10eb514159be12f0d256e0c0fe393ba11c33f8781b33ea95ee3109340a0868fc53412c8596e7bc45ca8c93b5faea9fa4361b3699a456b05397e5aa44d34570434af1fc7755f04778607dca305bc47317c782ca5414d39f6ca0ee9191340db93632b0312ee64b6c4dbf98f16f79fa0b80c6e5ad5baf32ddec7d99bc1422c30cf33f26c1ba31f7d0550dd23aa0736897667589e8b95ccf9b4042a5c767bcf55ed391daae5d0e7ef325f8801ff284d6e96f10d4d6574d779c33218406ab7d2f6c6ae2ad570cbd07ccb1faacaabd364ed74b6fda77ddc79a7524c8bb1a874a8addf27a55e6b658092c31262922cde9f7c3cb47ab0b50895deb53c2caf21159e6be6b01910ca0f361d1a88971f947542b3743bbf1d01b4b427ce98e4c54471c0d193ab409496005cb3dc471ddabd3bd41698c905fe481ecce6b5ad61b2a3b9bc91e2ae3bcb4c055f83f0d93321bd6278bbf3c85a8c147675d4a4c85a436c76f8b9dde7587c9fc128bdf11705a4977f627ca456b621fa5a2f0ae11c6c5c1858f9e283acd0361ccf53d77fea3a35d9fcbdd15795de4866a42f63501dcdc7f01a49a11de211c995f06eed7062a1ba02144898d8c118663cb97b9c9197bdf42d9f01872e8591f4315cffdc1525c32382196a6d9281852520898a3bc87f64983057b39a440660c6711df2fdad96b37e5acf9a1ec0638e6154339a151cf3ac796ce4b11a1d88520edb081ee0dee223986b0a36994f10ee1a107dbbceaed53131bd2d6ca0ff28d9d64ef3c21aaba20c08e8f2a062b7dbb77d54f67cfd4833273451312bb12d0a7fe0dec9f1ca7994eb86044f4c58f5c910252ae7bc1a52c0740d2e4d6a048470e0b37f90f549fa00bc1f3b9e8c41b4b092e0932728e07eaac90fde091d5bb25d1800f0cdab0832531bf32f762314a5a5e99dfb68f67018902d4f38d8522d4b9c00a4dbc4280088830633ee248244dffe688480b31529ace45b372ed625249c57c67ed9c38d29bd2167ff6ba1f405939c09efed3e7666f240d194cf4b03c38bf4d9719e93837b573b178249763a48033f56affac2f1955fe741f4e675551905f31fe41d9c23ec1ae4a60215d8bb6974e29e5a56ec8cd02ef93ac23242d6222072c53d9817ca8379829e6772da72dfad248c71578a8e8899d01c5aed1af7f8184e6d87d7068b7e9d5e88c45d37a35764ec58b169f145aef68eae5b0abaa5995e06d75cfd8630c63b70bdbacfe116c0cde584f3608ca92d15d01e60030598dfccdbea9e46687424b21ac0a13338676dadbdac5e76716a760f5cb9bfb0eede778e8f311476f8e8bb2af1918929a4824a249000ed48138b862a74a821cad88f36937e37f40092de4eb8370c01905317c3caec5d042dc331271a1deea54938591e8bc6c7c93f4b16ed60c3270efb1a21fda8d54791fe1a9c863d038f6a794ce6213f2c5122c3bb85b644f32fc91fbf8b0068020bbc845776c1555e24d4db93f1d7d882d3c9cdbc9a0642d22d56bc6ea47d0c30de2df4e1c9645e4f974677a4eae39f786ab3e5b921d6e2e5a5638837d8d0a7128773dd60aff2880ab224c5b923fb1c0bfed591b36440690b8e5adade180e50b76f56d8d8f3095e3723ea37811835059391f7fcb99b968abcbb3d575ab3e40567097e11d4822413308bd6693a3d81b60ccaaaec1c50a307791d48cd0e6edcb3e90d233fb828d4f0419a4d203dfda7706225891e73b9f6c41afbd4f3b67a49a857e28d0333fe4056b99802c06e3dab5c1e868d78de20e02017759066ccfb8ca1f2bd3bd0964fe0f39d693494d1749e7b7a51c1d2ef1744a6c409900d2240892291cdc99b6e59af20a777f84969d560876c321339296f404a2882bc5e32c6432bab49ebfeea7ec80605c8e3cf46ef318ece7361bc88e6eb2cfe7795c588b04cd1df603d4c1bd7f7751d7dae4173c0048f0c09a55d5bfa9d667f0e192baa9eb46767488f9e032c126a088d6e53fd50d34314a8e81c9fe018d66814e0620dd43f303ad4cd37be4ce84c479ac55b61b0f5553f3b12f022e6001f6b7d08df78ad4ed894305fd379f0fa7149659a8a6b2fdfc926380b760046ca140f31603ea3b0ceb7d88fa896bbd168fb9bc723aec5d65f21bfd05929d400888cb994cefaa9b9dda1d5060e55e4fe4924030be856edcc50be9f1d9ac518e7a47274cfdeec3480ff1bee772b53f66ece16f2d76c4a0d9705ec21dbe17959bd71963182c1fd7cd6bfd4fcc1b859584ec01dbac9b0a8a752850b14deec6508e06009afd8615688b0f8dc57ccfc81a1812fbd362b03197f33d14430f0896ad43dddcf4b9fa430f8a09d13a6eca53851b481ced64a5b114dbcc58e168a598218c53165d66fa8f57bc2ee45daabf8f5e563b2daad95c4a06cb4b7d26cdaeac38fa1d96f0876cdaa6211f72c7007ea9213786dd6c84ab68934833a83f88d899c10a5c822ed759ff35d8b084303885cf0664a6cffe4af4f36e722a4f75aceea0b78d40d6d3fe9f8c0cf4b026226f4bd4623dee54e55118e3255a2bbbb91332b541d67d0c889244223128d7a22bd23c3315f8a8f9616f36402ccb85b0755cf03473802d8f01cd89329e2def5990f5ad08fa0d19fc773bfbcda3c1decca7648e84fb271b32a2ed48de645c43692a2c1f46e8f5bd997ad003ce531ec79fdcc754de38a057d70319e325960480bcbabb836a1d4e80d801d22f0f000d7ef3ca857b1f0e4912a15f5764e0df9fd6c3094a3957cd9ca752499efbf6a5245c5262417e0475938038df7ccd3b1a8e786ff73a4c663a511ac0eef1379f6d7b7eff2c8f5c96c8a1ea6677b54a59014373260c7793dd29eaea9456a3d5d5e2f24c749cb7f25ac5015f304d659d3b1ac91a94d35d1d6f3cb8fc890a4fc455f1a82c505568bd58eebec7925a13397af6a9ee5562ee8394f9b581a6194d923aeca0a7574ce975adf4021c3e669892a89b83b940f88187d14cba17dc701ba27350e599d5a6c2372f795b4ca434faf415c6cccd11d6b1acce8e04c7c3f4dd6ae22ce36790953ba1cfebcf62338f72e3efa47969286c0fe7a5e9422cc29183e22bcef98094917dc5dd134a8703b1c8379a35b335a3a26bd824c83574df3ffabbbcbe731d5b524caca0ae4bfd89275123f9f509b6667968f68ab6a438017efc36d5bcd3684d4512c923a066b434ea636e502180b46533af11fbb68796a3ae21490100c98371b6d732f667f6f15af6f27df46603f822d55d51f67edbec1dd67dfe017ededd898ab1abdbf82238f8afe0e37ad7842fced5ad9d742b1ddfc950c1cfc12fe30296518d7420f8e6c0660ac3c089031d468e8b03535155984d493a57139358f8679ca3f5822b2cd04f2e892fe2594f3b83fd86568064818e966a34315dee8cc0983024d9cd558e36f1af0787d3ba462eefee093b9f7e538ef802e573ac93a94a131475e60f1ecad7e03b8f41a05b8d3b8afdc2efa39b66b7976bbb3937d398773f8076223abb1be52c69cff3868bd0d6c7e2934bc00508760fc6ea80009d566205cb90be401c4dc0b9bb735a2572e8b43acf097f7aaee0b72afeb254b716423307443614b2da2997583a48c5b47d46a629e415d502c75479331257b1515eaf53980642d8e8696f9662f2b3940bc8e26f756d17bcac2276b51f7c4ebf2a84008a60aecb41d86b8b9b9ef92d14cd454f8be5afd974f2f488f3ac9972c5c4a735493d7008233c5f573dd4e914e43f0371b465aa40a85dc3770a9d6497a8833d89bae630cf292daf3de9263d7af23852120a233afd92c962ded671208bdd6b6796ad6bd7d62fd9dbd8d88c3827f838a239b1590ab3273997f3a8b14e1f9b2eb56f13da583873377dd43446590e1a6d01dc19a937f8524912411b0d1fca32373ea53d0c50c92c773958196a8b8fa70db2ca90c78dbb5a3045ab25f3244b98113a1657389858a44d9ee5f4cb658f4bd653c9d746279ccae7817178e6acd6f5f2f5dc42678efe0b7b4d93484a7216116a0659d927035bef000243db311b0389d62ef854698c78726449881f8a487cc16c9c20b7674ccec8b2f1da0d517ba53c7a84682b9c4827e4db5d2f2551a1a3e59ecc83641fc987a5c3b0310a46a6fb43891cfcaeba861f2d5da985f649404f34f745b39f4b400cc11c3f74fecfcec1b04c5a5dfd9972ff19d613935eeb901ea91e049bbea9fd8313da453f85927726c5502a4a69404adc628616ab0a1f6c049715e7bdbaad2c64bad1b6c90e59221aa6516733b4416fdaf80bbcb0aea27c0184a9130d571fc983360600e3173bfbb7d5f10da38d091a37ef961ef339a62462524da660d9247fb2851fa64982a944a4bd5dea9ce609746b680e7224a5ef770ccf8cc672e14544ae2f331b59a05384f67073e78531bbbdfa8135d50b25e69d35649be0308f56c651f304d67d9d44e512f11ecd1810ff54f555936907dc2564d26a5f3e16c19726b8d31a2eaf27383b218aaa23ac27be547c8d14bcd8e6ffa1c368b30b35f39edab497cb122d2187f0464499e5bdc19b3cdba9b4314cf07f2168369c85ee4fd921c0e72a667785d500a90ad7850ae14dfae472fd977266422cf1d06d53ccbebc779f6b117b5e6f3340d888642e2fe17a8e1796107977fedfed95490f4a993ce421fc54cfaf4fdb6907fd3bd13b206fec370c1c0bd102f102e504868f66dcbf6049ade2ce84e4828233d1ba500aed043f8dcf70d39236e1181b21bfad758a21df2d69e577d67ae62930aa752ffc3775e7bd00749baaaf27e12b63ea422fddce05acca1a3362e84a834676fae8f8a2a83352f61226f983206276f6d991e8ad8779ae660a60ae13d4cd680aa940c8f50dfe7dfffe3a1f70cc27dcfffe7aaf7ad5bf5bd8084aead352a3df23df29432ecd0fbb77278d952d3df058396199d2af3ea700043d1984e9884759e4e743811f5587ec4572b954a7f12b03a3c0419464867d5b66a7b8a981c850bcf5b38abfcb75bcc85069e3a3c67c61edca33969b79a5aa25a2f3d72b51a9bd41c7235024ab67f922621b048c6ce7ff65b7066442416b98faa09c40686c1c8fda57295a8dd65cbb549bec328bdd7ab21a24663c9f9ad8cdb48102c13ff3658e48a9952b0f4a96b7b7f80993533f272ba7ac48f33e10f388dfe4a26ec419a4a6ee0bab8a00ddefa7e2f36dd129820d337fec8e616d1d517348b27db684d8efb645a144c946e2d8f8535bc41eacf4c98f74b336ff21336590df945b7202f340e4658bea35b3818cb0299f594113c77e617a7e831ec12506bcb575f47af7e17f01708d41003a76fc665fd2719ab27a0fbd9d940626b7c4939445e655a7846c9041b634b4b2c435ccc1850cc3bb50d73dcd9471c1b1230ac0add82fb4284ed25f507f573975a047046531cb487558fcccb195d80cbcdeda3c8066e23fa0e40ff89fd263f88389d6308b4eb643779f29dd71dbeab12f1f6619d9d6c649a172fa8ea0b453f77c9e63c14eceba5e148d8c56cdf72034731ed4927e4085d5f5c194f0bf68429920ac2201dbbc169666e7d551b5a30add4195d84fafe60b44023b7476aea18550e908d5f9504574aebe01d107cad6fcfeb254429cd1f7b67fcde1f33c507b16d961177319ed2f58a3e1fe8a208aebea1e2fbf30b77b0fbec9f5e6b42d4832e4e6b8085f57ef8c38257685ed0b0fb06fa151d773add407dbd95dfe7bc4b2dfd03158c5c52abe28df330f2e4da7c95edee432a190470eab38b6264398bc7fc907d55a1462d6581de2207b15e8f662ece59cb3f338a705f8826185c78977d3fed4d327f738428a4ac8d3d537120ae322fbd8b39e00777e64e3af2b13b1ae13562b98dd69c556f00ba2e69878a0f17a72b717aed2c062b219ab27311d9aea181900529cb38531501d472a6d311bbbe676f4d0e8d5ac5d4113dc59000592d8501a3d692502419028fb1c20f46d871637cd031b4d8dd3917fd53bdfc1a8469af5a54749f771cd60b3d81f1fa3337aa851a2f69c990893cdb589547d5b305c2f7bbbde0370b9eda1adae6f2a6ce144ad1df2eb38f403c9f6a6fb64c4bcba76a36dcb1f97c1913a736f00cebdfa8ec9c49c66fa208a1d6bbe54f5c513b44517ef43b961f0af1a37b7e0b97a24e3ec3f38e8774fccaa808f57ddeadd2e30931ad2a9364033716621637d586166a61442f0ace23edaafdaec9d64d19559b10a5b3783f45faa47e5f91bd8bf9c6914f1a2cbabfe7e154eb955471573dab976b7bb97b1313b55121c946860bde3b01eacef93c1f1c2aeddafc03c00ca526619defa6e8137327d2b392c19d067b0ea23ca17c23422dd71a421c5b8250de4cde98e8fb3c5f8c48bc4c6966da5618e0443aad0a94fbb2ee4b5dc01619ef81c8d6ded10571b31c61ce63ed5ebe8138159de8df382e124be6d14652cb56f5455a1473798741ff187c946cd2338a4883b6babc673b030b8a5886142207ed5ad00703e145ab223775dc5d35135a1ab7de8678cab353b8099c56b32f3cf4413fb28be1efea298756c63bc0a9f665ec7955a3e469fdfa29e57e1273a85d1e2cf0ba18540e5046c624ea2779bff8ec36b9b3f34f8b9c321d0e1432c4affca984ef5fb003c5c07d4aae3c72678fdd50b66e57483464baf0b31081e8b5ca4486d8d664dbbc89893bea7261596ccef7448226aa5f30e649208a23d829a2637b32693d53c6267d4a2d2c65e888b9bbbc173c589e26dbf0cad67a6fea556cb8022491ecfe08b4ed3a7f2eb56dae8e17c1ff6cd10de284c0025a9c09b87b8a97d4e5f6ac92cfd28d26b2fed64f3d390e1be5f73beafe3580ee6a81d9346f02967e46b9f73ffe1cc27d372dcb4185262fb95853de7bde2f9a0512a9dd8dee65f6de5006d7a733b52c6f0091bfb4b3f6f24d8ccdb052deee06e75be05bee21113fadd3523324e7e7b1fad64d013fad2fb1617db3470bc030a43941744829ad0d928ba6589c867924548936fb8417ca6b18dd03d16704988b4c4b370db148db619372a95f4b74fbdd627afb57838eac980df1f950f755552d0d6602f90b4c49663ae9010d0d60fdf5ceef65e5b248209f8ed3c7bb7d11de4071cc38fcd913467e677400f7ba4cd67c6a36b307b061ddb6dbec2e979b64349afaf845b887dc8b6cd96e9f2e299dd0e94e9e4a83c06442d17ed00d7f1ce33e452cc2f34506a1b15d71782ffab209617a66470be35622aa941aae44db8db9c2248a86274b79aba80f81ddf128b5d4c2447f44e224bc6b5ffce7929db4c6697ce080b3df8ceef9435a3d43760881d055108f5383a7bf933d7706c0eeca3d00b81442b6172f9134552e04b51b0af4c69318a3557dc320aba81b3854ca9645b62a3bad9352c0c094b17c2628b83205a3aca3298730e13597ae04a24b84080c75b3ae84bb910cc5ac97e84cd7f0c1a865fe5f102910828df6ec6d383129804b952031dd7a2c61eef315aa6ad2281921c8e65242f9801f420646db4929d671425582d81f5b1f734a83aced7c772166bb321d5608fa0a011a43bfde61ed8ffc55f9804767081a23037445a8d605fe77549ad9ed7fa8992019521b51835595f83e45300978ff43dc87cde4dad7eff62e17adfdb9e00e7910dabb32f633d7003be2b12b07cb179362f61ec7be3ab6e22e4eebca8c00718dcf67e63a569f74be6df3618859620c680f75cf62876eeee8447cf3857f4643c7847c43c0d9ac0be6e7e0a2952e50451993377cec8b0fee53a9ed13794daf7fb9f8af02f7bd5fd99d248888e5fd173be69c64725da2b0bcf52a31b9dbc774d368954c44729b1d0100fa1707be54483517a8807423b865b99dfb4fca7a0a645c44786b01801ce3a2aaf1658628fc33c39aad3bd1d78c86e4745e5ebc80211c8c9a8796f1b08762a37436c74b0afb49fa186aa5f6794799f977a6918f3f2ee5ebfca17121941025d36093272edd571851d488b66ba4cc44a5abe1441916c9d761bb30c225a4e09bd47a5a64bb7219a95fdf86438e1cfdb302e4afb7a93df7896377a485286886c4340d3c46eaa4d0dfb681a47bbdfdc64951e6a159626b412305c75de8fb3059ab5a650e77f63ba9e6bb8d09fcca51a765405e89c533b9165f424f79a2c18adc2111ece566620493df5735e93cab8731c8e49a320ca28729541a728204317fe37df8bcac16599f6162957ca48ab71ad17db94bb0a2e3a2e761a9250fef682c8a761e5abbb4bc4157c641732070c9cd81e337499bf43a433ad7234bee3e676ba76f1188f0709f304746500e66ccaa5c864205f07b317f63c78f2768978ad906d5081a378c34494a7588a409ce3c8397925ccfa80cf8c54d089083a32f8b1215c42b1a0d4289a717c52c86b523a4479c74fbb5f5b603b68d4df246c854ff19808750c4c0a2853012f63b7be7876265c6cd79d98274f3c1f6e08f3709c7a2ebd0ee5141dac709a91039335df507f83dca1b074c02ce81a807c881ff2f875343de690222523ef76ba4a3f2af5628c71af2102df52151b4ae2afec82282e0a39077044b8570e898a31c792e61999f5735294f4b12dae76d9c8a37ed455da841048f9c835cabcfb1d0e298b70a4fde4d15615f8cde999ac72bca29cab6b5220ada953bc572bda1738dff1450454ec12a35c5d153e3502cf9fad87ee25bda4314ddece1f476695db836395720f561c3ba7b72e3107d2d4cbea5fada96cc95671b789bcc41f5c5fe4266309921fb434e47d3803b34732708bfa83e7fea042fff17a2c1d19cbb8c3b14dc30ef6fb791159c668226d535af5dc350923f9738a05185b9ae1e54fe69039e044187b92dd33d20862fc54045e6b07c1589af0c5d90ee4f8b6acd8a73e3bd87f2b59da7666bc99f8aa6c077ada3d0a74930777de36da3785c0fb8dc647182dc2ae3e890f77d9633a4b7d640b091987abd94bafc62a8e6123e8e891ef5238de2e5733da3c5a5922232ef05cdee7871594ce56783b0370fbd9de95ba1b11330e1233ffbde7f05328f6fa592f7ac54858dc93aa7fac89775373b141a11e98c826d83cd7387a23c0dad1053a3e7813ef486f6aaf4ed76bfeecb96879d26c802e5e739c60711b31d8ec435414ebaf33bf9a933725811d018d51ed1733e3fe4050aa58687c51ec09275b9d1d140dc1b922631c3cee1cc3f432ccc0f48ada5d781c868ec6522122c14310f2e6a3705402576a5f8396ce087095f377ceecc04e2e7a1a5c609048a6e24eb56496ef610e68fd665279b95888638f9994bba55b9843c4ef71a1c1034a6232393df0c1ddd39870cbb87df5e2948c0a38a5cefeb57f131427c3416750ffab464b8c615b65252d155643e445425e753d995f14f2237a01416bd278cf4f318d06ada2316e6d11ed1f5827c7c5f00640b6eaae004c419075db8a48736d10ed501bbfa537e67148a263c0afdfdf7f7549e8e4dc8660b0648cb069be73d65cacc522b505bf9616ec97b59b83734d6595aa3818515c7998f6485a9cf6262496a797dbae80ee945320798d2d1017298613be431c8dfc89610af85b57cf7d1d0f59ea5abb646237e486c16cc1148f95723aee4bbd6061d57e96de88ef62ec876c9f9b66e623fc991f10a4a96853ded711d0e94d0f57899b6e468071bd95ca4d5a1181a6662a4eda873da309c7a5ff716d177e09d8bda0868df653a9cd2039f1242dc45e324567fb95da82ea6a40e591a7a228eeb65f4a84cd46e9ba4d449997754732448123dd6a124d1b96ed015d79473ed932ae89c5490cf5f5b2a84fbb01c0946d200d456a9139a9a4e99f1f95897fa65c023a3cde3f3d6bb5462fc890da2ff5aff4d593fe7ad5b8366815e3cc63236a3aa2bc807164685252c1e1e6648bc0fe73d32a97419f7674a7b4be111fa5610693afe73e8d9588eac3c3f7d7723533034922179b6dc3f1017d0a631ea54187ef277bec82a1c7ab2b94215c1376291693ea798ba0a3ef1be66579082a844cc9181ffba13de4e4c2599e3f40ed6ab24d9b5a033dd838696f709666c61469c266a9c4d6ce785438bb33f4d0c254dfb5c3399d3732227e5e414473d425af4669beb5c99989ef89579abb103a99d55cec9ea0cd8215d3298661c57313e0307a7240d10141fd8007211ad9511e07819f95ef30de4a71956a7e865579df551546fe094c092e9a2d7558d796765f4f4518e39faab5301bb0a6fd33dc2c7935d46dd0371835c1990d8e02b8cc18e13a5b4fa492c8323fd98a3ea8ddb5c871485cc877f7327903f2d47f7323ed24c521ee7a6f9759751de501bacfaab8add70825ec1fd4cda775fb82b24497d93cb10e1ee479390ee6a097712074920ef33bb2479d4bc81ffb6519f1db69ca611c7576929fc3f3a6d47d4c7483eacbcdbf1508533347d512f557fbef97a6c2b304fbc6e8e50d7f33718f81c510c7da09e56f04fea6612c99ef2881e03f4bfe09fb9cfb4b2e4a8c08f2e370529d7d8241e75ae5ad192ccab79560ed9506aa5200db2b04a0ae8b26bf152d332737a479adb2f55afd1d2ad52a39b0e6b421aa9142faed9ba8661a4e7487a7fb9c6f07d2b5f4e811040df3bddac91f6cd2db77051ce2024a7bd224b50e3d17021d7aacb2c89de47f1e4fdba9a5b025668fc236523f2bc9d14f15e1f48f85bad67892617ce3676c2e37926c70c17b6e407f84bfb7fe684302cf35e0298fa4e924e0f32e1a277ecda722ea3c68542a2cb52ef9266559b3f9b0bde03748c098899875e1d1e3076f1d6dddf180ad5ea226a33e1ee2ed70d3b4fc6d6f30d3fdebc9d2e970585ed1c3fe06d506c8230f3f7b8177068b8f66419357856494c577bb70a6ca3192e2658e247e0367ee4ec9aa0779f40580cbbf56ba6f2cbef3cbff115e4eb5c5034b47f7acd945953ca00f3d587da0763bcd648f7c26cadeaf9725f2b61af13a527e671b6c6a2e2851f8b4dbe289f9c26f4f7dfed60c6134017c70c08970fc8e7f3d44009f66474bedb71317b163d2225ad926b5d3727bfa6e3d9914b239aa17bf4f2c1d391724abc59282d8e0dc64736504776e42b61c4170d34fe318006c70abff407dd6d585b57cb0b3a2ed3b085bef0fa36e0abbdf96823121f27e4c33526b5054e2f8eaba0874e541ef86c8a7983acb4e456f5d54acc18dca0a3769bd64add608916e019334e97745f3eb8680ff21d5f6355ffad3ea16a760020470a0ae79ef0bb77929654b53a268f16eafb17af2b64df51557df9c82015945982c169130b2a3f8d90564ce1f82d27b656790df4eedac29f9b3bb04c7cd7ce2cbd5393de48284f759d9bfdc31a7fda26aeffa9472b7312c5f9fe5c8eccbdaef9131c390e9563901ab597d075e3b3ea220bfd520f751fb5d03eff541fdedecd808f36c5aea7dbdbb561c6efb986c3e6d618cb67d2bc3f848f6922526bf73fc1270cf1876bde91b1232578d5b5117e8f94204b265dceeca78131957d69ad85dc9957b6cfb241e93e9584c3d8636fd55af601d9fc9f37075f859750736647ff8b8ee0052e028a59f7a76f0247538781b986c6df1513c0c0015eb77bc982db1d647eda3d4e6d27c66485f1d4822eb5fee27ea8f73ae6b62b53a418197be3f6d12e1ca1585d1b424675edca716f71d9da77b38dcdc865477ec6b4bf44839414ce43214d7486c6d6b031e3124e5f4fcf32f5e6339ca5b2065b7ae75c95757a208a9a90e4d018aa125fa49400384e57cfd0644bf88bb019375357cf0effb8d2d7f0188288919ad55d836652a81b03c17bf0447b82c40b15d8fdbd4c6684d824d6d335a38f58b2dfb6cfa561f4eb1963540a64eca225d47bda9cd47e37502ae09d359f7edb1b5c1a003d5b557b65cc3b007905898ec3db82aff1a9ddc3666912fec06f73909d86a5678767ee9a1df302cf7450e5bb40745d132d0c594b434c4433619c1bcd7e25ea9e7aa26164757b31d9a50c9fd64d52482d9105511212085b2b65c6927ce2c8a1e58768440b1d418648fdb8e4a6779c86a97e23769d4c460cdf9a381f50cd7ba9f6886e35c72c012769f753f5e8aae2dc1c280559ea7050f0f8520865341d47a7b77f8e5f88686f1ce8fec7405d4fff042ba32208dadf7cd25b0da89de74841f3a9a4a8fc2e711819b5dcfda7b905fe3769d39e95276111f7f94cadaa0361e980ef86f4a9bb5f15857fd3583140b817fa2264d3f12304c318e2747d83f2571a4346d3e4ac4fbf3008219f3915febe69577b82b5532ad673f26664b4b7995fb4e0dc19f7c2552b0573c975505a16ad4bbd0a4e309fa7bc0430478c7901a7d1b4b37b55da05b608bc3374eab4873cc0dd5d23b2a9340385f45cee31c3ba43260ca6587f4641b54b3fe30d6158c01bb8d3f258c2eb23d1822e39945d69531b0586aa5cfdfc5c41640e4281e7ed9acd293767f3dd2a2840c07a715937d0ad330783be6308c8a75f922ab7570a5db0ddfb2b9897abcea17b2218f889ee45cfef4ce0fa391b2fa5751b435382f1ab32a98156d3ad7e2ec06a59cece4442ef70c2adce32332f3d5a65937e9298b8c61d3990ef75235b051e9fd24f2c74cd50e5d068088d3e4c0493afc5554685fe918a65eebd66782a35b41a10b860696f805473ad2e6abc13da32dc011180d7d3b9036a3591df75716c14b6e4a7520605b395cc103e51b51ccad7a6c167bb41421ab8fcf11d5d3a63810b0b022b6b03e5dcbb8645377441ddcc3cd043b2de1c95cb7c4158dec1767803bda1903d94ee1b0e6fa53b25fa3d1404d1ad0cb4f84cfb7248262871b6bb4420c7e6dc3ae63cebe6df51ff689d1136a81940c70cdd17cdbd7828e9682350c3e25401a55bc6717e95c17e8991854c140409bf759d843c9d8754876a4a4f5140d34c1bbac36950966d3476600e98896e9b0a3542dccb383da3f98dfc4e45fe0364734c67f8a44b4094c127e9dcc58690ade76c5b96ea485e9e8998fc440861b09bb78cb6f38a0c68bdb12cb36703b66dda6cc6afe3371841f4794103756f1deafccf616c19fff2cf8d8371e1afbfd74441b20642a46cf31a7b4d5cd827a781e47d6e7b34a395bca626ffe510fbf2bd082b032426aedeb4ccd1d195d99e9ba5f01eea6a34b98d70c8a1b2de4f1c13affb97516afd68a588a9aa23a2fb53daeb5cbdf0abf19c70f35c9deb546d1edb9b9753714790e78dd7484d3c49a98881a0364a695395c86695ba7601bbca3b30fefeab6aaf4ba1f79232a394b6939d52223c65a69388cb02e8ee2570d34ba0d3578ba62034a00118da263ccf5bb0841fa807a5cb05fa1a8017e66afe401b4f29455a8bb7a29da2b4ca6b6b8b59e9793106bcec326be7aba8e650391eba89d38b4a94f22e17a034622731061a73f0b8d2c871fde75e29f7b19f10544cee317c9b421ba1885cad93ed6904bf905181a0034c3588f1a627793df289e18227acb0bc1b4bc1941fd2f83e5a325ec2b226d01489dfb6f7ad659f410df31016852db24002508b18074558a7f366b4cc1401cf081476b840a9358a6b33b775665db79e11ff1348c7512cf7c1e77d93f1adb1c775cf2e9890b3f55a7f3a0a51206571210c01937bcf04954682a28dfc834478c6a06c41a2522096364c62594d69a31185a54c982cde147a4a2cb02cbf968b1c33fa84ed20901845f9c1034ee8473da23842db50e455d5eb5f05446db487bf3bcba3e1b82bb8187506611626af33f1353cbcdd7f804bf0694fa8277833c775d37aa640c20c44c0069d3337fff5e650b7dd69501300c970685efa87e5efc934f7250c8d42462ccc57c0fbfbe5edce0d54b441b3bd6ba3e5db3a9255da611e7808c1c4140ef98001baf20880d36e9c2a1c27e151e2608a15ca45a0f9ec4a8bc67f30f8a13362ce7fe910312f1e9734f260a15b8e8c14b1270d085e92d1a7cd4c27444c3a6ce650158a956563dee6668a797dc6196d2bdc8f9ea16ba48b0ee9319c00d2ce5737c1cf6c12ba43e76586449772e795923b25483f6f276a88dc68a7667a546e37e7583151cec0b56d21d4a42957caf7f784ce1e4b6d75cb025d8bed4402543354c6b5e2772bf94b6c0bf157453a8ea365f02a2f23e2c056df33486308f5792d2899732b256f9203354ec8e68184ba64baffa65fb1dc9649b530709be335afb48343ec48d9920137f12c110e49c724dd10d07d6fd1c6bec25d4653c9506ad0c7bedfe802533b2b890a4f694b0d9daa18807a550120e90ae09bd7b22714dc09f58ef3eb3e1363c433972944142f7ef36448ab99e93854452c6fd64d4d7fd4c6f2e84702308edbaad042f39598464312bb8d570d85307a6fd90706cdd4a730ac22800dfa9650af56f05a4f742b7d43a1c0106ef09f41bcbf4144d7464385965acc4b1f45f05fd6943692d3914a43a4917ec458cf0d9169d30857a59ba3c5c0e3c5c4419bf35c411246cf55fa492662da83b4873f7e72004f98649f22f555fbfa12250cc847cb083a134c9a7b71adc89a41f455cc377856ee8f2a9e2230019e5a99a2d69da5c20c53136a81424be38be76d552aa48b859a95071c80866914d4411aa000684b15f4f5c9c990c2b88493d698683e89f80f757e2b75acbf6c962b28f1534f356bb803af317d913a5d65175dc37da6dadb743332942b405c1d04021356661d0f7234ceffc1d00b2903ee4203b1989ac1b9986ea5b166a127e081a556a6f72d2cd031ee61690de29855d7d88c581fe6cbd00c8c01ccdfe755cb5ccbc5f592af4ac8ce6fd038dbd032538b193ce531c6a976b36d89b584bcd412e795dacc21ca50cc58e1c8eef25f413487f7bd44efaeb73b22aa9b83368d29b124ba482ea529bb97f7597025f8d6a93c36816596d7b2d23198c85d87183659a98dcde199e256e404873e4f13df4196a8dd8ed25d7164159327653670a923a49f094628744cffc8542c3b6b207dc6e599dcafeee672f55da8e64df69bed27efc6aff19d0c3861f413fb1168b30e4ea390a9cbc910e5ab3ff9e69ac1d7c8e01e29061036c1ebacb3a81f7a99902e2fa932084a09e2ce2c038a08c8d536ba026565f97cdfa1e474caa82fd2c5f4cb33b46156ab31ea177140041ad2cfb1edf382c4446f5d13050d97b22c4aacf95ecd98753c67f7c2e14baa217f60988be69031fb9b04b7d91e6071cdd9fc629d5619e8a7d7f5b27650188b495a0b92bb66980e20a110dbccebdf1cce108925a337b307eec10b4c3444f85b6a7b2cc3e690ba63f02879c15334495980bb6173e69fc7ca76dbe8c6ac02943653a1a67095600d5d399be9f2b1d7ccebb38cd3700c4714161e346fd92a1589949512d9d1c639eb7c27fdf3410a9a597eb518bf5eadb5ad1896ce7461778f5f9f83d0d36f499e291ec5c4c63bf0d91d57f9d9664e38171d5d0753fd1419494f73b521185414fa987d2fc6093e53b734def53452073b849832136ae5e62e426c372724a44b8100557e699970e6d63ef85b204280beb1ddba6b2ba4d676c0a3a109fabeeba67e268085a2444f0bc4b41e316c6841f5757cf3ee75e366326e71fc5b765e868789227911b7795608cb165fc7c56fcc89cdcadc61f97c5a9d1dad712296cbb75cbae199114d4bb61acb04bf79e028700daa8fe3b3d8f67da2f7bf9c2213c720ced41113a8acc7cf8b061555cf8be286b30b606e656cd517d62c89837ce56c99ab4888bd46e8ad0c9a53f136bb3f3ae1631410ca15cafa687c3f89f1c97d153982965cca5a7ceb1629d35176675de9c0d3abd1bf0a82f9822beea30a411bcae4c050e1ffb1ba2f751bb41d7eae87377ed917a632bfb34e0812c6cfcdb4775afa0d16efd9d150de5a67e47508d799981c1b42e6c11c19d7740f6138536083e8ae04f8162bbe56350a484b6f1e85b8cef8f2502dfa21f9c7883ed215bbd3ec3e01405cd5dcbc46130856dd875e47ca4973677c44efbb38d6c1df7aa8211ff79a9abb08665220a14f5db1bdd0ca68b1fd0d01ec85ef6c3f57c178d89e276d2604e7c62e8c72a6ad3be3a35cc8326ca9383a31b5b03bc21f2386e74a5a8262e27937f55c4f5a086373dc136dbf1a0cab27d2515629c0cf1ed9c902a9589fb1ec9d4e6d8f83504824400c684f9147230b626a8f7a9aadf32de752fa1d171934d0f3684b4d6c21e2e5c747b2356ac933c38b1589375d583e7c1ca7bdec284f8509fb1791b01fcf77e3054daaaf80695ca6e884b3bce2f9839e2db64a72a1b9856a75da431f9f317610741d47a8d61990f963dca78951b273c3b18405b47ed3a374c1ece16a5de005759e5495fb1ec361c7073d13e06bd612e18b02edcd702ffa67c3bf914d59944c2c3d850d90856e79307e2271b3934074f35b6239cace5aff9ec00b5d7fe94f9b2a8de980f722b9ef2a1a2ec57c36250a7b8ea7801fa8465138e6a9f2abebdd7935b16ffd4967343cf95641a4959597ecd7d870841f08d7cf5d1363c071ac2394191775bcd99d5e65a4d5cefb78c0eccdc9613e229d54cb58d591ad4be6f630827e4012ff60b08e67d0fcf382ff5f52e171421f65e68dd174e12e60e88cd2891bc22b86e91468c3d69356eb31da195db002ddaf25ae170bff46541c82ce39e9d2f551463c10dc094c0eed6359c457b571249e910e7771d90aa9d979e1b69f694ca0f44325db71943aef1f5a752e089c7789fdc5fb07e4f76c0a00fff0c666f9a8353622c3ec54575b0f11f240429155ced75192c860d5b30b046cf16f2eae3b8bd9370a8d0a16306c7cd623ee5fff3df885e00ffe121925844e411238390f95d19d5a8563a3456a3fda94884776a2c45390019d8169ad2cefe462ade7ead221ddca3989a361cb460e5fbd083e10f6403693e1c1d98bd65ed16eba0aabdd81fd5c6203f6de78c3da118f6580af313629074e4b5c2788dd4689cdce162ed8a16678ea7c9a2c3ec432cb2ec6b51826ddcf5be87478194c65efc486e17ea01692a9e8aaf7dc296a9d9207fa7ca933b4300d62e59bd4c83ab595f508ad445bee5da8b71e05105eed977f10c38dd9e70e21ac82d28f1b23812654a09c41af94aef7214e0f4879cfe5a22ac62804b96a4044488e7da00f4b991fc6f98f7e9cdeeca73b5cb46f0b006678faadf6ef25917b2ffcb572a07aa9a107e3a822d149a4a3a0acb24e4d172781faa8683a7baa60d1a7658fd8790573ca0400a8b31ab728c8bbe898f683700109026a6dc0796cd44465ca412d823fe5d57aaf883c01795b03c475d08c18ed9cc8f760d14742b56bc53d51860596c89769463eba306c687620b416c828cc250bf174df27c068ac4489fc190a976ac58f7f846341bc3054744b74173d8ee85e5acdb6c96cf94a7c75d4426985e0ecbe376895d04cd1130fe251c31058100f9136717cd7b603d67dbfacfef57376b304389b155508c7e4d9d1bab1a13424bda9539ac96cbdf395db510f975d69552124b5dcf595e3cd654e51ea1c9c48cf14a67d746a0be1d5b5300a4b5abc38d43a46e11c2e1f3460e111f7c3976880a66b472a23c8a619e615b0ffc2734d145ca74b7b3ecbb741cd337439b1c2e5d1fb9c020c7cfc2002c489918bfaa0b202c270eafe2523b457391282acc8d8f974e1213d9453cc5b3141a866184df15856c3efb1f31e1ab5696774dccdc7c31e4b2f391f61771a5f61e5524d9aa5f76b679a4b927962f6691144c47ab5aefdf8ceac20394d04770b26bd293c32a8539486e0e5054ac0b5f9bc16cf935d68a0dee768c0deb625ec268bb57d1e216389a3d6a3cc98b5490d715708b41a0f4de5ce65821e04f5365867c9d5c1efd82a67aac6afcad76f4ecf3ea13ff9ada81a9122a05c94594591a762333a3821e2ab74580a740d556ed0956209c821793e0a4724fb5848eb7984540a40a80873b5370b73fd1d844a1660be1a7dbdfe19cc5d36666301f9b98d2125f31a9a8f9ed5087f15110327bcbd92dbc5f9a43badd93a24897d602b9d30655bd607552c1ab7ccd385f5e54224d4f8211d38545763c8112733329117f88225f8eb96454f190145e5ff37a1b8a8c432f6783cf4c819f2e236bd54a5f38e9890c0e000ea47b885f16b3f04cece674adbf7c848ffd9a1a06b5ef1e5f065e2671859c534f40e274bf165b4121a84e4b9f3ffef5842f8aa6df8dc92dc53f7fd9b500f03fa6b29df03728ca84cf40cf53fc8f33925108883b79cc9423b10d2ac93b464d6289c8ef3ff764dc8e3d3754e0d12b41ffc603ff539e4a5daa539d223fd78a1e3c43050b73097409fd7f41b27366aaeed90dca8193c587b8a575e11a7b9cef2d30ccaa87c9ec7fe5904353101ee90eef6b40d8e90d92564d6547549569c8cc30b65c82098bfe9f39f30ffd2c12b6a3c7e6972cc16b791f34bd819e294611648d37ff505007e27f964e9bc8a058e5f3fe30c96e5b17086e28d16c16c5940b840d2014f5bc501cbfa9f7a8d44229ee796e99d301b49d3f84006ba23b16d3ac4d53884a8848615c3c448f4367f80b0e7a45487032a556318ffb1c6b9e93f52c31fefc10d7ca2b8f84f7183bf4c9caa6c9558f85c461f59755a0fd3901b822ffdbe3f24bcc1429e17f2977388922cf1845c72bc9c775450ef7d0e5f79378e004d1d82789e7907e2060d69bf87e04c6b8fc9488ea0ec8cfdcf590031f1c2d0a0a53776575258d591fc1a082b23e2b52988f2b1d179733635f110e91641e50b63008e4ef921eb23fabdf1fbe5af8e25c98e8983bbd4fcd058066bf30153bc6a06d59d8373cf0bd859b60d302107526e90dcb2d8b272012bf7ce97a8d4c15244e3c0fd58a5985a122f4a4f6b4e3767f5f1539e1826347a8de0b9c31a1577ac1f899bfcd68961ade0ddc7f360966f2e6a67bb9fec984e15595454384594007d611625e1b69f40d3260c6b13bc9bcd015d3a601e4a85c9386635bbea8a6ca48ab2432f81b96ee3c7664580a050e41a2260cfe932ef65fb7e6fa035fe1221ed669eff86d97a6d8713eff3fd972516e9727500110fead8faf7d3b1fc3c635e8d94f7d9d921a073f64bd2f1833d5a64e4bf3ea43fe4fb39c0a65ef24654eeafa2c4c84a6894f685e5e183eceda968745005b2c4299ddbf923f881b1611af0ecb131d1f17e9cf59a9d962c9cc4ce0c9583822512a7a20d73b5008d8ebc3c769394a81d28ce1d394a2270e9ad3025a09b8a43fa9437a3b2a1b91b6bd6485d9fb8b294088afe15cec15b4d78abac4ab6eb07932ca421cead15d4bd48ef31676be14f4b63c8557eb9cbc79ac92c909bb179c595e158a6537606514789519b2804b2f72e943cd21e749f1c8a513aa098e77ffd6eebe81db7e8308824004f7d36ebd1aee76e2e150339276385dd6ee32e477043a149e3d3b1ae15feeee462827115e20e5ff4b667b56b6273cc27272dc21668bcb178f743ceefe3d3ad3401236660e85b60a61b9c5af6e80ca946eb0a40fb88f21f0397b01a47e36f496e2858430c0cb217f86b875efea29d2afd5fb989dbbc48b570ced1c8f77910069f9addbcaf08dafe18a0bab62939c13a15bb6f644508aa54f92df4431d69d929f03da2f4fc2f20a6b047263d9a55bbe2744a4555ecbd5d3f34a84e360fb26cdd7df6f4606b1dd35ea7f389f0a7d32bc612395992edf550fa9987c353501a7684a32300065877a9908c0ce845199358f7763b9ea33c755ff7732edfb2bd7884472c7994f35ff1b18c8d32d57068cded5f05bfd7a8c4b2c273bada8bfb5e4d8be68d1405898769b8ed01f904dd23a36d2d7719cf74689c8f65106167217193401841b42be7e2d0280ebda74dee2e0278ca1f6a4a192e73df39553a7d622cfbe5430893ff54381fa2f16aef72cf8050d8de59923336aa9d4072b503c82fdae2635f48619f88f0a5efabfaf1e4db98bb3c8703ded42f06a93788a9a7ab6db506078987a57017da84db6e51fede3276e28496bd193c37d3286a0ba2fb4942f5373fb746903bcdfe5e25120c4c6f2a9770032fe5f9ed6ebda5ec7de04dbc522c00c883bac2841724a359a220e27cd354ea1c8305925c50b0ef0dea3c34a7deffffa4035a9ac5c182e8ce958d0349de3fafef01ffb3dd5e46708b0b3951f8a3b78567dd72a5ec30f512344051cee10f658b8b3724836041f8417025e1f435e8f50325f97e51af256e514961b296e806031f5d06c4293bb0f993f5a8c17689b845807847901b53a4134bc61f855f73a09673bb24b2f64a4edee4b0cc1a416a2b4c7175073cb0cf8ac65da1bd9a029e180f828b65c61f7fe0558882a9374dfcbec568fd1cd4d0b5c5fef8225f35e610421bff9becb069322141cd528b1de3458ed31446c7002208033b9e57822cad3e97abcd93f4f5b7b9d449ea851521091e683b1ea41364cca8f383a8b1059be7f3a769f63c6a0a72dbb361799e5ee488b6e25f0460287c35ec0bc535544fb5f94feae170c464f7428c3ef0fb4ac599aa611a93b552aae4032a31836c92b654238e7a23e2111fde7adb4e8396b8041b22c6246b34fe1022fab2b965fbf6b8cc9181f27c591ac4a07b1ed804b7f00d8a9531027208f5d05c3c40ed12e93f7b7694caceca1e5216d855688f906f7b20b34b48877080558cf4679aa10ba0fd59f7b303a6573587457b79bda96d418a8cccb7367a306f229f2972871c57d242e2cbe3b3cf8df39129c26adb0b8f36fcf8acdf2b5682bf7dd93b149ed6f5a86416841b470ec9a4a32614d32ba1d3b78bdc584a481979ef653b03f96b0e060935068fbb619e552455193a12cc1b6487f7488b45aec4b8b9080f5443137e826e579d5bb1655d98ef2a8e4d3dec0efdcb09b512ff5bd9ef2e0fee826adaf55dca48a8167d3435e359b28144c0773c78c47803b5718bb60763e6d65a8b923791af5871c2af9f0177a5d388763f2658ccd99d1370af2df8a506f5a5537c665e8f97f677012b38f499c81671b199a560910a4672f2059e2805cdad935ad20d5bbcd6763eb816fca4ebfdfe87948d6bf31b68b45bb8514c2951b913c4aa50c56a5f6b899478cd14e8a5d1e35a51f60e5e42076477e1bb1983fa3a717e931cd5f8d415d5760aa58360a76185350c2ce47a311490bc770ee6acdd81c78ca37c2903d1fdef4062fa742be1b75c28a3626d28dd252e2f25773f0929da8c22ac906c494b13421fa75fe0e7ba3b67016b9a79561a2e21802870992e562777249100f8f961fc98ca48a74790d77f4c61ff6b6d2ce4f9ae0f34b63751da339f1a697067f346ffc1b815ba5e4e5bef96d59035962f4965fa570c9640c6ded762961074eb2478f7f406f9f2c1c571f9cfead61f6c9ee8f44ac9e9c64d87b9dc0c7a7a68d0afb1fc5ff0151359d66277a27e8d7ec103023aa8f1fc786c92863916cf6109e7f233a092e6f61aaa2665e9d1a7458d1c4e00484d29594476c643130342dbfb6a10c088f6969a48bbee4be99a6052f7b598bd767bda1a909ff82783511500d66cdb1383f8579b593daebce4e95f18581093173581d1d58d78a3381ae94c902673c0eeaea22e0fa0162b732ea054c03131d556dcff9c6b42e3305fa9d0419a98ad2dd57945e86df063a8847a8eec75fd80885e01aab78a8e50f68aba2e8acc125787499e5bfdbbdffbe498a736b65b4f8deb6f84f0dc6c0e954a29f65452fe15268f91adae5986204796d153a7c3f3e9c555d9eecf874eabd685f2f7e7a5669dd0d9368628d61b513812d21e00bf98e2c1f9688b04bb4f04c60378b581a571eddea3dab5b11e995aef585807955188a4b9cf601bea0aba5362500ac27375aa8e8f6e5a3d247ea2de475a9bdbcbb00a7eec4ae8dd30120c2ed2a33fffd1c621cfb918a50777e88b6ea5234afcb594748359548750c7f66bbb9f2e5c49ec51ecdcd3908765ba7f21532f8b462ff467048877771993c0e1aea2c8ffa79dabb52ed761c7158116f2748b1dab49fa8c80903c79d4e2e104be7ea9e599edd52b6472a73ce2a50f73866cb468d6bfd2665060827d47253b93a759564b07b351a365bd6314f8f8b969e1076c5e05a40b3aec15fb0843ba2517493d41d6335a408600c84924ad91dca1fcda03bfc7b708002a34c82235c9a4c3bdbcf995b06cfb1772e9e68855b0893e418421fc8e85f5b840e105bd0419122fe09c270d870a327ac54824bc0a5113a89f320d84e656e35845db289714a04fd921dc1d0d1799014c8fae550454d757709f20bf750ce3cf27baf776fa009a1562327c2365898c92415c5cd0668593b91a1014df67b6548baec480e63798bb5bb2bbbb39518a71d7be65978a2fa25c7fe1184b96ec2c882979e19eef74facba5527ea40dbbf5a8456406c2f37d2f29a1a229323a5160a2efb5bcc6a6b93897a3bb50d8f7f028da4a7c86f17a871280cae48c0519aeb7653a3dbe085d1d7f88d67a97ce3648e247ee441f83144d11c4038373f371708ad316c351101aabf0cc83ec33396594dbe1d7c52c04cca4b07c7720e0c65e3c05013b583fea8e292981a210b8eda262aa2f5437c4895d50ba11d99858d0a35ebc51d9370ba17fddcf86845719e7941a4af9e1e42e53520abdaaac0cb8515c535b93bc78c0202d62aa03143b3355f0ca892b5c7868d34f80209dde0c59f1b51bb296bbc84de6f9756cdeaddb8f817dd1a662f4e4691a00910f26dab3407df9b503d82801d97b39c86ce33d0c2ea2aff1d69f5f24c79bf029451b048977976b75eef0a9c31d6a67505223c6a2bbc85fe152cd1fad24ee3bc133e4de6bb688d6dbca8e95ecdd50ef2f02bc7389c63a234e20ea4d3a45bfa7a1a571fcc772b1ab7194a7777bad4fc0f8e6217a384b87cad46f3e0fcbf3e999331588c44fcff16ebd9d801be083b954caa74d4ccf24029f780e3d0b548768f938b21f6033a94aa2e70ff6925985ec6ad540e6e680b2b892b28e64b2c69244b5d814590e0888d7baef4fa1dd7d3a14d3e7f6ff77e3b13b33ab34d3d64e611ccbc79cf12c2dc8b67bbd667d7f0f286c3ee4314c55bc0560ee4aa9d357ec4b593182c25f9766a0c94c4eccb8ea47dea8d59327b66a63eb486abec391e74ed790789e339742c0e078d5ce94f8abfea20586c34159a75fb1146ecb9dfee7c6b28910e25f1a8cf0bc032c04a7069c453f0c341f01a310ee7b3590b99fc3c3b5cbbc056d59b531731cbbe79cb0145e48ef0d51bf4d74774c9fc9eb1e4ad2cfd69ba88b8a65f2215c30dd9c68b2af60c75554239239c3b9f09a9c3992513049be29579ef17a38e3223404c1ffbc63e40d516eb2337f1a0307991ea88f73b16a6f67379ddc631700637d814c574506831f3623fb946cb81b8e8920ab5931c906a75ce508ebe1d659c777365c3b63ff5f9f39ebcf5f676e203325c2f83cbb6f4b32626741cf0fdef7825721df58c7c5a9f68a20b0f646acd73694c10f39d63f85d51d762fa32fe8cae513e282d6e3274fde2dff3e08bf0988029592ecd000c3b6edb79f2c56c0237aa5eb241167ebb9559fd6f10dd6defde06184a4a25b1ce17262805a5633c4714fc2b9b5971e47ef925232f0ff140f9d95a0d078e97d12f71911b83ba1b25c47af4c7549e33830752c743d3f832149e8eda46b76c5f0969099c6063ddda123ab606e38e6fc64637c4262df63787c9cf58ee5da6040f734f37929619fa7e0eefd0a6e76639d8d229a9eb6ad26c1d27a8f805ec8ca088c3525a5db4c24cb2f864f735f53b48099f259bd5ba0b4b98dd11b2764c84456a23c6f677169a9ff770dc94b7b92ac46d4ea7ae5ea69acfdf10f1cdecc46a09d49f566bad853f5c2bfe5d06f14ed1ccccf0db929fc4c32ef602a7dfad98b161cec09e42eccb8013f0c629c04c802338c276491195a80034242868b2d91160650b3a584eef7ca5500bcb104eac172ac9404fb5ccdb4574e7f172a8640aa20c7f9e3bddadfd6b01723a326495688599e1a4ececc9ec8334ec044210053671cb16f55459d1b3d87bc676231ddea2f63a311162b706a911c79e9d48968e2c0f695c58625b2f1f34bb950ca4d7a10a22e1c45c52bfc7286f30240ca741f55935f6a3164b93cd0d1846e86863c7af192e64079847c088e9954020472b61d2091426d7a408073eec34d9ef97ae9ce2ed392cf72dcf1cd536bf1b3d659269e19d65cd523920508a8c3ab6cbddb5322b6df0376d836c2066b74d6669bad5c0922fee78687bb9e83ddd6a8ff7c88837c42e6e05198af1d197562355a5572b4a2120d2e2a53f49a387d795f097d4f386b14b5d07b09532a4b5b37e4bf7e51201c3add936179a455f9f1fd33d97c62bdcd4f937e845a98b6b4723be1facc5a23e1a6e7cc97bea6f9507a1a1156c7675cc97eb2d8e2c26fa0d7163264188cbe4cdfe2bba4da88f74f45985ad9d0b807c8888f86ce59ac3f6f4717c5bb1f2eaa399941702cf19153b46f0d9a93a09090fec6ad9bd7af6d4bf749cce62a702501f76a4a975406d5bc15e4b9814dc783bc0edfe1128b6bfb8405132418675d7d715eefcf296f0a9d8e0745d69e7cacc45ce3c4ae30bad706c77e4f58c70757eedd36fe337de64b7d7706fba11d9657dab9a6f2e741a0ff8f8ee3e4b61b460812ed6c53b162d8ddcc567a7406b992d1cc8e477d02c48d36100121382c6388c03ad7effeb010232dc7e4e4bf1f88d6e5cf8ff9a3b44be67ef8d2a6e9bd56f8aa3f0760243e857d2edc4f17c0effa304c6b02ea511ddf1599dfeb4a4248190cad25c79050d0cb708eea2c6578d30559ccb40cda53c78e180fb4feec3a23f7403caa73f7d87e25588be49cdeac093ccb54d83427888e6fafed541e1eb1afc1766bcb9dd046561210eeaeaef7a69ec9fd2ef9fdb3e4a272c51b5bf279c8268f274bce24df4a834cecfb39f17e8feb38290d9c8a65a3cc483f5e3f380daf4edf6e197a7ab90bdfa07d017a87218f91cc61de9b9770327803f549282b6f4fec12e4c83c217b51e0318562b148262e05c645f6016e1e9be60685ad4063108ba605872cefb2d6fcbdc21699fb195518b941a9fcce80e13a4eab8d7fea734d443b99d084f8d700b3ba3d8a2fbff087fcedf03cbebf41621e88883ecaff6bab9146486696401edb1ae84b6d56d9240128bf3d8c926b4bff431968f1fae5b6d22add0465f5095bed300365324e10865f991289de17f250c1d7e6f99d34a6004f2854e34f98c926c561b5b9fec72b97fdceceb8a9c0cca2ba2113b34bc7998f752ada257a765a9066469825bd4af8d985387ccf42132c373523fa3dac1d5d1dee6ebb93edf9a0ae4372c3d3a15b5933ee16f3821031fb6b89a32426e8b48ca38d8c825e1c2d0318334aa88e0c9046477b28899b7bff8e51a86717009a72a0f352bd375ad1950b024c4627890a6df86b9121e297e01dbccbddddbef9e8e0ba4418eb2218821da0f7248bad9d21dd22dc773589209c6f85c8b4da9c01e742f44c73c72bfd151c666faeea5044db1fa591263747d6a860ba637b6b7998559e3168b3e3cbed28f61c2dc69382bd404bf9a1d28a35637e3f35f6aaf4b365584ba313ec79752f19fb9c89b0cbdfffe98d7956f4162cad0804fff636db82f1894984d3739e3b79a4409a35a540ef7d2237c70ada02857f0a2c3bac4267ad4d7d6b454db34b6b1cf89f661e9e248e2702375b231b34e644dc7eeec606c71f392b244e9221a55ec66830a10902e0a020937f3f434d136131cc04af31065a8acdf98d12d8fb3644e5fc39bd7633486c4461fe3343575eb78c0f524e4dc4062294a339744723d94e5e693e042cf530e35ee046d112cd7017f8c38fde26820d2820a922e3e2370949839fc66a55482676f96a9c07f3f25f3a82f6f7a20c3b2ce12c34e0d59f883d0f3bb4a78f96b161a334a56e90b4d5c41add3cb23887aa8f655c88ded18918eb5cf7c595cf46997911caa726f43a7a514c7cb9275a0072662d90aa95d69ca527d4c7ef85c833e84cc76e04eab79fda38865f49facd9b9363cd0dfc35414f557a5e6e4765e24cda1b81eab6edff6ca467452a145498e495bea0baecf9decffbbc7de5c0f713b092bffff95aff53319ac3350216c9f743de31b3fd0e45f1859589d0821f1dc8bc53174752da116e5d219699ba11d5440e9aff738be1966bf6fb74830ebcdb28eb268c50c71c012a3a6e3061526e0d7474ccd48dc2738554c97ec7296b1072ce97cc1a65a82608a87c09c774519580a2636ec3559bf3ffb5c10d6a87b4f9f8ca10048d028d9c1a4e93c2ed41bf20db6cb92d0408a1a4dc275df40d6f3ef36f885f99ca115e2dbadd25a1b192d0ea4b9d6aaf3319696b861d805b0ac722a5ffe8110a21705d39d4bfab7aad6d97bbd67a836b04b9a1f8c641c8c8e0ce83cb2adc42c9ad15f5a67840c05c5a701c281ac29125b727ee4176afa21bbc61a9ac2272234f5f85aa7455d752a588b451e03caa93f9721ee228e13f8d996fe3fdb47f489bd373c94e0cd7707b8c804cc1b3bc7a3bd0ac01340eda1b6eef052eeefeec80e4cb36cbec38c9ff8a6a4836479e6c22ee350ac35ba619bce21c604d76bfdcca766aa85fa6aa689c401c1dc746b8a647d7c158a5a2dcf38bad1671729a59cb22264a2f73297c0ae00976feb359c003e8134532ed652397656ddfe418dfc8cbfcd5d47973f95d0b736e8b3f29243a07302c430513cddb9df3c9c6d93b6e2a2ac61f88529508115b5d6266a370cba402483af3420e3d69be27bd3b983cbe7b43c528c99baa59e409961c0ab3dd71c6f8e9b73877e524e28bfa7c6470d9cce0bf574ba8ba2488bcac6bd023e105d958e108c1e7200e26b791f82872d78b7b9a8cc1a90e0275ab3a1d72e20a7a97ca3439a83158dc7e8d90fb2287ae015049e7bf991c4f71c35bbff7b09f854f50a4685636bd781c2d82f97579cbfed4147c43c64ff36d6b672545a843dd93931eb88cc0499425311762a6a5065cfeb2f498dcdfbdf6e09a67d27d11464c161a3f0654cfd183452a960fd91d7f37fb117123e7fd6806d7f043afb559421ba878d442c8d9e218a63aa1b89dd044727138d26689a5d140b1c7cfff4b5fb901b46b57c6db4543e37f53960d15b35e85659f85e0137803e910cfaddc22eed4a6605858ff08e9be950b1c4283e290844c2e06d244687aefa95f99d9c116dd4fb06b9b1020861923434c50dd7dfd64e2736b4c650926e65604d7e4028a23e7a9b473bc8588486a4efb09f9b4074dcef1ecdf3ed54e671dd7e3c30053255502c6d7c40e2ebef39e6e3ca97bdee69ba0b9812665267e821582640e06c440193fe276044de8b867b9d6278033dc8626e31f942284648d098afd722e49f057ebd5d0a34b22efdea57370a1c13db5177e7f3c3742d5705279caddb34f2bd3c1f3f9740f4d01cdd2244c8ff34125072b72b82d46a44299cf06028288d7f948ab0e578724635427ed24b2d15cee807ef89c81af1b1ce8cb26267996d3b59965c74da0af13eefd61fd9a8fe6abdc15dd5ab906b30097d1ba46b62cddc3c18c74b0df08bcb6a5801d2e48962e917ea4502c1351891786920d532c1c5829785b92607574fe797dade99c0e076cc09bf4fe055a33f9ec713d089c0c1e0fa57e0a3473a4ce81536e58a28b61572c75dc3db760473900be7db676361eb29653c6562ad583f446f53608810f5de776421baba1e658990fe9a2021464bf8715bad2a421c2a167fbbd874a8c60e0ae3b94825709a27688e29d1025df110c193abdc499713c9ad0e4bb4e79671e423f6869f2562e89fbd047ab46ff585ba145cd2fc3cac41ee9424a4b9362bf390e3d7abe939191cb61546913707d1e1f09667f0cf75424a17a648efdd17e70cb78d6da92eb8e9519192e1d8f7ff700d1148b01878b7275942c25f1aad1af0873a0127c480dd4ce35486e04f4809c483d50f12743effe377a39223649c3d9e2ff2bc25e43724ff0c879a438422e07e993acbc418daa73de18b5dc36ddd9012c6f450cc79ec86811ab0d2ae13e6083bc99299ff2c5e556f4d6606454f8967d63e056c07c2379a6423657e619cdaa83430879e4ab30c22a5807338a5477554399626e374c35e9cc0c8d46938048895014f4547cbd0c87351e7733678c9c10e7cc7b40056217d6c2525ca9d1067079d11b4c0bbe6d7cfbea4180398cd6d286017a120a5790ee18cfca8c300bc632216a8c6e5ce63cc6b038c56ca08d88a45ce0efae9cddde32f3f896c4bd7cc2476d9cab9341b2bddefa1ab84cf6e112024964b7a9293b521ebdbf16c19eef4f6ca14faa10b653fe3825e85dd449434b7d72edbacedb5c73c74a5077114bc949e5f71a9d36f6934364ad075f10c722fe6259e9b7f172228c7557a6f0fc7073cb312ca6ff03a01785c9c0018779dac7cdfc2824b6d892de83b7e1cdefb55b508b8e8f5ad545819708eb2bae9368c78780eaab98b2689e2ef5819eee5dc6398c55b4ee4fe8ceae81fb22e69586337844b9c68996bb451c1325039994558134a0a4d57ecda6ea5ef33a6af2cbab6bb88bce3e8039da05616c5a8d1808753fe88e314e2748ea4469fb8b6f42afa8ec1ac18077b27fe169bc48ebffe096beec3979b744437c862ca4cd0c7fb60c8a2476a5d8e654cbd1d83d059bae0fbe9f48c7b86d789412524f8c2dda00bbc8cec0aad602df8b9a067ec6eab12cc94d0104b76758160cd5ee4e61098829e8e5a080742762512942f8d470a188c64518cf26cc6b40c348d064afcb0894e0b4e41da3ae24349787f9f3a5114ffa37ae71288db52374ec38a4f742fb0bf0bb1bba4d0d2474ea9ded226a027ed3fcef4c6ddb94976ff36452f8d5b5072d2bacb8361c0f8b23d5344ea341b82653070d74b3aa53fb3d493ee41b8df106ba713c045d28e2c11c71728f92489b8cef6c835d5e6dd4762e5fde552e2194e17c45eaaa03049531abca0ac6f4b3a368c137ade1ca8e58dc948f39a42b638f4928adc6b12f5e6078b01dc5224dce8394431dea1026d12176420466e399586281977f83c4d1069940b517c56d17a0af211a5273bcd46558148afd39122b76145efff72a2ffdc883f119bff5e687d784e34e81700b785e9529a0eb13d5d5867c613480f530cfcdc454b9a48f532c5a8f9be7bd0be12cf1a8b1ecdb03587b0bff7f9003ccb4abdd40b64e3f8fa0ec140a6a5067561840ccd00a86e1c8212e7378e5630fd44485d325448cf9cf89041a49d6fc792b5ca01cdb7047c993426e41f170b168f1372d6d070588c10f1c5b9b3c81b1ad6cd34189350474ca455c8bbf8c942e1de0b7fd09f90344c6c088f678cf05af4f80040b8c0e174b441ab4e4dbc6d4212352c2727df9cdb257d0b0555e231624e3e014d49b639ee7a621ca5e6986abc26bafd67fca6b4c91a5f65c01dcfca8e8a5cd0797c4f5758eeda5c7013a66da3387c3f2a2c6f2f68f6d32c5321adbac515024fcba5c58dc6d781cf1c5496f5067f59f10f21809e24e0dc187b048104a3747a2c8ec0ebc45ef202c770b35db03ba672d4dc5e7478fa4b2d4f36aaa7d31e20944cad912a3e668952889af4f23a993809fd5d232287796cd513726d0c713f6e2d44c935e483f4dbbbcc760004a6b960c22190a9ec22f9ffd58baf709671fc728e53784bf48e5ce84109a166c22a919fccae549efc9d9b06d8d7de085914ef13e50bd441a26863dcb468718b98dc6507939c0b55b4cd35e58e80de806bd5b5df9f4c7ef6d01c67d138803ea3cdab537bfb416ae7f15efd2aad0ec4a3bc58979fb71eeaf5a154d983fbbd5e8c9d24c0a5fbecaaa8ba15c80faa4d51c3aad2766db0ff2613ee9a126cded45983222138e80567e941eaa905821a51a4778356887b1f8433407fdc0c55440f9b5a2a5fc204af717c1e0e6527f2c22aa6878a62a571c020397511119c4d020afc1aae0c9d3ccdcb63acefe56a21fd7b482dc22a78def0b5be28f66e87879cb388a06268302c462427aa309c6fa9f686d4bd154cd043289e3934cbe4333924077d020fdba41b28deac439f22e6bc510bd81a815814928025bcf06689e87540c885d0ae2924840921e0c91ce2fb6ded1ae124ea1915c95e970f3ae65fbf4f00161f7322b91aaf5648cc9caa7f517c7bf377ac4666b4b413435ddafecebd299138ad623b5048d04bbdf5de4c3e7989a5de25270a8a1621f63286b5210120f9fb3f49e000c1212beb5cd7d5875d563877aee9465b35e58c6ef0eeba1ecaca54af7a10efdb099e76e1692ae2ebb12a9dcabc3a6cf3ad550f4535c92d70b7be927687bbe724c2d3c2411b947ad01b90c05b31563a625102b17d8a2ca17295a547989a21f619559caad71192420c2ea530093d302601919b4e7fa8e29abe4c5b89c9cbefcb2d6621fda18894b42c58d58d3fccc27d007be9020da665fb1b44f392f2bb298e0349419614ad9e77f1480f047c66a4dea33bec41729ef0b78876f4d1525864533e220c721d686eb97ddf57b3731043df8c9d4d194c876e5242c6ab1a6b16b93f5b6476b903cb9096321eae7cfa99ea7ffeb430600254407e83eb2f733829f9ebc8435109493d050dcd6297082eb0650330936b485fc1c40745b58476a51f7836527c809b53b82873041ab08b7e4fb66f1f56e83162c0263b2e28082157da416a0f616fa5f253324050cc9f333a2b3deeb34a14b67a145fb9215cc844abea4498a235437b4cf9d03710a51805cebb47ef24d69f4b850dbab1f005de5661adb9c85ecf707eceedae9c0b8e0e6b4a340ae5f2cc333fd71188d64b4b6fb4f62dec36e949fbc93139a9f92a2fe5db90345af173cddec9642c60200751fcfa6189d620c3389ad21cb35adb94a5bbdac4f9fd7c8eb1e24f6b68782010d764ef1aa187eb620e91a4466c76ee7a716fb34effd3b7c919c631e1705bb874c4b6a95cae8e055baa710631ec05eadb037a510cb9bb78ea82f286b070b32edcaf1e494c1f65885cc51448b541909ed738bf9b64f0e2e5d21ce29686ac943d2821158645bcb073b3349ac8126863f4686bc41cf0bc13985df18306b9aabaf15c256f67bc2bcb57bc5acb1ac948df0ff436dd9c8b3a646cf88eaf8d96f3f2cb0d31376ea873606c05662cc5528a5f652b1f5dc9af5645d29d7c173fd78d52e98f2f240f3dec64d046f77418977c8c5b61660012f6132dbfa5121219ea82d9d3bef1ef1b05b131eb2d8a43f35bdfbca3c9237cd981004177a66a5bbdeb6f93b434876825d849d720d4bfe56d604e88909c0e24595366dee04964e72c568cb4283827d76365611284b1d913e7f5f06713deff230d9fb6e6b9ec2157222129f5bf0b2baf73a6a2fb6b8f0a956800a60db3ad95e44ec79286060a410c58afa1188f0d3c2361e4972d7b1ee2532763a03723f6af17924576bd6190057d49eb00ac3afc887dd4a004706307f0a5bf2f1d21d6289b58f0b393695b1be9737baf48280a517cb0b7700023aba1b079c2b9164ca503a8f182f75549974089a9e861ebe3df07364339d13907e892400119593cd0f546242a0379addd72888f6fc594581ddbd19680efe2c8bd9696a8cb7d80d9f3f3ced7a548c82df2512954a5c95975e36f30c352144379c5eeb892eade41a64ddbcdc10b82cd7b28530c1c90e42f0c17bc110965160b2d1f3387c5e70aa684233290772b29384d6844b2d2b1c9e8cfec4ab919124efc42ae922dbe3866c4bdfa9327df6629b0aaab3890d172f63ddc6d4ef37b1d9e13f1ce839dae853d976795e2096c6dcab2d402b6d67ca8e0a049bbf3b7b4154e4c699f65b0389d29e80d7e511400ea635cf978c87e6acb65b37f0181c81dee9cacd45e6d508c84cd6621d241a4ed6daee79c9409b2cf1f2a7fb4ad78c8b0c8fac0c28ffef324f2af58c02c6bed06f3e94079f892d1b2bf985151a9a95e13f48c5baff68c856992d174222a72576f83f79e7bc0c57fe67e6d7d9e38928ec77e84bc761e5a2e4d6127acb5f96fe351b13ef1981bdc350b99cff11dd9f6b0cecb811614fd96107d2238f51b1c54b764138abe074ea48451fc0382bd0c0f536aa924cf7fc40481ddbd52d8edc913f011e1d812e4a2c71833b2a61dbc60b7f0132cbe142350c14655c0628668f305a561d316e58fefb8951229a20a9f737780db86618e362d22cb9b69da852e8896f4d0e81c7473ce064d8097d7c1784db9370d2adfe1b293e611ff933ed44aa5cd1792093872958f847b4ca2c2500a2992ce5b7c607fb9ee143361cc4759895b49d45d887023e426690638d72f9671036585174c63b2380b2c807fb5dc307b31c4f11c067e9306ac611888a29373ae13a02baebafbd6d9e33fc9950c06e701a1d970750989e44c5c951288dc8711dc9d75759b4843a8b320f418bd2a81fbedc5f417d424fb02c05b57719fc42293bcef2578f54112c1c98f92bade9bd17e461d04f9cf01a5ad17ffb8087f980644bef5bdd9206473a3ed6e631c89c97f3eacf8d1cad4494010c54afc4bf874ee00d8c5c8c1c5bf02ca4f6b2a65b3ad25e8d69c7677c82d13ddbe1e526ad3d8b4605a21cea0c50c730c892851408e7cb476ec2be1db7fc883d2e680b4e643e991a3e86fc827880a35e7b78f5b6c0b4c591fa5906386e046ff7d55e75b7fb1bbf6b0c8c8f9cfb4c1898bd1c459c7afcae5fbc14dc6e527009896a19ac8b492a1ffa44c36ad809cb26a6da93f7cdaa568e502b891ef329a7e6322dedfe8d0bea063723abfd689698e06e4a175091320cfacc37a8a75d193f5506f289055e123efc5d719afb7334c0466ec7493347567ae1adb2451003444e00f1a60674d1ba956c8dd4ec73fc91d70e3a50af218b8e3d6fee80b1cc2c3d73c9bbad4039ac8d87af727365eb1d3c1f960529e46e50efb6fb29c8493582a7d250c84df77aea6cca42bbd5ee550b7c4d46c944befee85a4fec5f72a266d93848bdf136d09cb535e68890ab0ab2126e9f3714f5a3c5f1ae743b7a5c2b5181b9caa4dd50476f4692339128daf0a8d398b82f5b0b306d171540bbca7dd7e3b67d14600caf7710a51128a5c6ea4089913214d97675de532eead4f3a56f1388b681c7254f8d4c821320c6d32acdd094f1dc9789d20b8e2636e6fd2728b5a64d8d1b27978242b9c3ae75ebea0430118358a8e80145ae364cb431ab86389f32f46adf4d1d76032b604dfac4ce65b9964e4f73b264866371b1b77da7a06255d2509c868491618c6630be633ca2606b453ece89e30375520ec9aff2c055f952b5413ade762b1a0a929c14fdf740c59fa2b70b1311111c69b9d51d15050a52700df62fed324f622be9b26a27c52f65c81dfecdbfd33415c4747c8c8edf74d26e815ccf5beed2a1dde749c415a4ddea427c5c6ce879c096f8b2872347aea56621791f7664a1f26862659f024781d90807c00c1ddbc9ac59f6442f57b9edcc6b75ef806c2d54a6ad8eb4f7aaf86de5da4e4649522e1334fd1e91c52a49e90a251d5166a908704e8b3706d092edb646e41500b931f745a27ef1a8b12a201dc0805825b03efbdd46c19944d48967d542fcace64daf882eb3a046861ca1329ec2e73d83473738d07c9c7e1253d840b845dfcf27470d47eba3e3eac5baf2e4504a0c601f419c7a98a37ebf6dd43d4f7e615e537ae0186ba69dc6d405d9c8295b77291afa3914d958a46f39b059f991badb5d1fd60b08260865df962ee91b9d2329e3e0b795eecdb5b953735c19249270d5c008503fb814a6c6df9cee2868433e7f78a2be88e4be42388d721ac9fa3ed8826bb003d889832b072f2577610c390e3541b0108c02e530a7a83a7b89f40d41f8ee0c2101803b9cd915c62ba31efdc9d232dff8cdadb0fa0067e69554e9f5f1cb348cf3a852a80ba18b093262664a16e37b7a37c2982cd49508e8f4301b9a94dfd92daa8f5a440dd808cfb5872a6b4451e656ef60cd6f64852b21bdd8d83c57f2b7950061706bbb01aa9b2ef032dbfcc7e06ef684cca4c23e420952dc0cea3e5f14d28b6b8b341055df80ce02a1e6975020bc774122e7684454352edcb09f7c2a022b834dca4f7e2ee058fe132a7425a5b5f8ede743b4da348110a5c72aa6e5834c8061aa6053b21f52a25c70054199a5411d110849b2e4e3e70e131e6c0b2a421d5b6280125c9fddf5caf6b243178668c9f0c48825b3ef6a49f7cfa4478487b087578943310b01f2eef3c58e0b7c74d43c0d04764a6bf0f7fa491d59260ab28c1bae8e18c71ba9dc16e8be94f88424cd7f2c322f9d270ef72ae9349ceb0079a4a8645a229d6eaf25b0694d39cdc56275200cec64f6ecd3d645333bb0952405ba0d6f36060885e8833e8a6134f8a4f89ae5d40f80f1732e747cb003cbc3a61cd02655a5337df2ddf9db7c4389538cc665b8e64d699836cff904cdef46f483eed60bad1301a67fd378f96fa4c4bc401e809577336fd6e20dedefdf94bf8aa6aa11a9bc38abc1c3809266ecae2f7ee237b00bbb6fd5be4b46523dd417e42d794a15ef3890d955eba6793c7a734149f03d347a421f8519159d00ee0d5bb8b75ead0e6c74399b4f8a4e56b50d1de75bc2a5f5e10ee7c34a98f58d44cbeac4ef931eacf9abe85aded6b1a47b912eb51bd3c98b229b54156875b60b8f11b0f725e07ad163b4eb9cb2ae9cc92bd8e45c1c1c6ac5637184f0c5daeff12a420a43ec992b73de8397f556b61059edba3af2f8dc15fa8e59ab25d60867f10ba2a829923b4561e95c5f024c8705e08bd92efb069ea1cd2c503d94ed33c5fab61275ccd58dd233bb94978e11dd9510a892c378d9d3cdcb4d92c4ebb9b9942631311c4b427d970297fa4642d893558dc9d7cfcbd88484e819c709076845a7a76a11857629605e6e81050c9d2bdc6f6eee947c4653643d3c20c5a3b40481563a6d89c7097c53ba576df37a2339e2fa345fbb790e1357a5825d4e95a2e457a5a718917d7ab185b6f915a3d852b33ec8fe820fbb52155ae6d15834d81b4e1a20c52234953ef2295df7c78da467d81a13840e3288df0115f3f8aa263fae87e2422b2c6166522fa970cdbea64c27ff24c957824c2212d6978aef10ef78602037363cbfece2b5243dde551a335b1842d728e5cd15f206a2f30d1fb6cfa9db4e112120576e31f2973f6d5020bcb70d0e94094fc08db59b1ae41987b53d3c57b0a7b568e23ba194675aeb351d4e45594c1e1b2038b09f5d24c1e0d76bf1c0e998ba28b35ae62ae968ccf12caaf9590125f6229a9526413b8627c94afdad7c7e38b1a9703ac8b6e2c55b1191af15c2143e54e40fff6c440ffee3029abd8bc6630d43a42f050ad87327f2fdcb1cc8277c8055f0e4e9c08a8f06d8318402f0cf0742e0785e32c9fc17007331863ae3ca449cb2e0a094e3784c7cf2047daef3b1a40e1fbaf3207f5dfe944038a706433a008ba9bcfb44b41638c82b94e7bda3ef5a3488bb58423b26376513c36ab85bdfbb4e2ebf9fdaa46d36ae27a16a159ffd5b60bb50b3304e7e55b0d7573b91f209d1712f87700fac22f744ca0a55ad68f43f2431df8e83cb6b249fb14df1f6fe40e689e7d2b14633d56ffd1659d3d2f0448664d91da3e28faf3b3d83af8637533183945ae428e0d3d2cdf074388589888b5d4864c316213a03c54230d4503c6380ca1adfd6b60334575ad12aaa9057e655ef543ac8c903e3c93d6f5946d93d6e379b66248527b8cafc055420a0bc1a037398c8489bf3253e3093ed263c56931df0260b92884772947c28b2e3bc2aa21d07f6bf502622b73a2a01425dcc1ec1d2217a73ab53358d8f2c2d4c328c06c22f5132cba417431ba8fe9257617a95ce901e4c8019e0b657d47227df2b8d4f4c21ffe9f4392742141e348e6df352230b962c6ee93f584c08b3b7e3875e3169322371830e9c94677fc067e162c5d6ab9d214de69224c95213cbb556a01b49068e51f3bff4697a9001c60ad906a616004ecf90dddd382f8d8f143d2f9c959cf40fc9279c6021e449d30123396e56f50618aceed3a758057aeaa53d2a1b026719c0a138db3885081ba3a51289776a847d651a0a9123916e35ca3601c85b969f50085612feb9f568322149775849ef5b3113fab890049a5d87e3abea3745fc7790424e519afb6a535bdaf12c66c9b7f988b7f12f508eb9606e784d516571b9eb63d25d1daf35752fb66b019f443ebb7488dd53a81e9ccb7b59f69141c3b20c0c32e8158ec6586b1d5d53f0e237274812e3bab9902a327915751d91b64eee2ecfc49eb9e8b72b1bb82fa0e96ca296bbc5a0fac14409835c0b6d98d37376b5a814a3185a9f09e4ab219d0777285788ff8dd10a023d391b949ae278eaf3cd944c118da7b18729baa2731e0a47fcb5f708239d4164085915833a471af0bc1891b6c0f51034f63b042421acd1830ec258d971489666d731173e3087ae428b4fa54355f893e8ef0b92623b443ceda0d696f01277e5ee46c2ff38fa1c47141a5270a398af9307f783383fe444717c1ce64017c5a886370da442a89e6d2f9e9c60d524f4346dea17a9dc9f1afbb6b0e4a9d494448a76e4dac658a4d7886964c2f21aca22b5712c513f08733f34f66c70987fb10c389645117ba849353dcac7854b2c6e366c08ef01be1acba70dadaebda5dbb7394e12e436fc22b2345e40a0bc5136562a0c33122ead06e30ccbfbea2329eafc5b2bd8492c8ce3e75cd05af297aec613793985311f0650f9afe08d2b0fe5cb449e551f8cb503f15c016ecfc40fce1c4d77e987c863a99d0502489d493aad079cd36075af6e8db46943c6bedaba6881a6e2c70f81fb0cf89bb700c26be51fa06d691632497df6182d9b05b524c99a05254bbf31cd1ddc9e4a1e51ef144e466a8fc2a4128a7b63205c2a9aa9c036a84b5488494890fd694b9db0aaf4b235ca16625488fcd8908afab65e141f43c5ec82b36802865b0a461e4782ef38f027342ae9c0099d6e7166e2782670e5b8b60fb5838ba14677a51f76b9244339f00cda40f262b5aef6b0af17b5e7760d1597ed717466833e28e1bb6bf8f659a2958fde31dcc5e7b0567a5a4c9317c58b9d234dea9fcff137f4c64c107f0dca8cd2929b0eb919a2f106fd94a41a56c0ef62c031873540fb63a566ae99f54378e34c2d76e7d62bec7b9291d370acb3da6bf1a204fdce339d3dba6df135f24bc16dbff7c12a663b88d2a17d5d2249fbca7f44960e5dc1c94a997a774a2488ac27f39e0791bb4ddb245d9a491b5d1444946a16de9be1463862916cd68bf7f82a995101e850177c68689e70fb66c35bab8ded41aaec6934c44175131052b977ba54c733fde2272506f28745e8efd701c7e6cc594d8d15e71a4008cbc260ccbb47f1ad3f596aacff2ad7b58e8a8e2dd601f5fc44a9a2b9f15efe18f091536a05772eebec5622b383fc205d24eed684251114244a37e387076680811e861998abdbb828763d0648ddbba615720b42077cf3ab024d670c9067988559cd850560ca0057ce34c5a2ca33cce8376735e7c3472f42b059c2a6caa99af28c92bb84d866fc394b7dde4451e6fe54943304673c9b8f34deaa1a524e08d55030091637cf0c0656f6577d3ea63f8837dab1546326a42b9ce82507cf2109975a9c37fd291c59833e732617ac79167fededdb5ebc1ffda98d7057b56c8e735e5f6be7b3b395a8a686627b2144084e60c6ce46c99d97da719a42496a52a32c1dbe3c5915b9ccff2eab28957725c5c05e37ea9560f4e237102d0940da74e3cf01ea863e98707f70dad6056a64bd83f8ef8a9e522862907ffa42ce336026d7686af5f3a1e961a5295baef8558926d77510d3c2f59264cf76d3347c876279b5eab78daf1db43919c56d5587ae1658ad297798a7dc8317f03f6c862c34e79a2bda2c1920264b14534af14344e2d29e1dca701e373d6cf11e25228a07f1a173dccbb9b5be4aef844cbc18625752620afc8742011562f89de058206483c06b0a2f723fae1fb3915fb1c3a502ed0ca37e14af785215d9d6d3a753a0f79d4a562d52bb9a9803089a020c7c72c4a6a3410d3064b0141ce151ee558d60645e1101ed3d8060c06362f7bf3bedb17c76ed68be58b95dd58f94ba839c3a1de1f00d0d3287b1b3521d382bcf001f8c432370dc85d591ba85d9081c7e933943d384e20a818ab1c0ffa613252becec1690ee83345aa7c87b5cbeca5eb168b6edde167ce14d283dabdd80fc74c7fc1eac3d0f14438c47d004fbf3b572892d694fbf3e7c9c7d090fd53ad7f3f3a0e2e98fad00f3fd4379d3e18a5974efc077cfc85529e57eed6b24bedec193d45df446525e07b11494e487916b5afa39de35131f07625a1e3bbac3e11622a6b91d2d7fe6c7f6fbb5d7cb9d9f727db56f7eaedcaf7b088d67cfd5486df03bb946b38c7aba353949ce47316061d6a0a1d46e6f825506798ac160733e7194db0439e87e6ba9dce88dd4b0de2e3068c60cca2865dd33db00fac437d0bc0c5bc66e04e83ad269e0e107dd4b138866aa9b46f102e81ff0b177fc79eb3820bac24f1f8ec8d1aba538d84966e2b3e138ef6f3a10c56e23f41ba8bed755e2899260ab11b8fbb8730fdb30b022518fa60272dba6b0501a27c73ae4de819903949acfcea20cf09697b7a8921adda8d0370de7b146c07a06630f7a42d7d6cc139cbbcf87f86a91b8eed817a6a216caf09eff48cf431eb08e52f5caf75e194b82f860c5deecd4506889faa8e3e1221fd656e9b8dc881332cb59f662115350b952f05dcf5992e4f05b137a529e960e81aaa5279a6daaeb17dc9c06895c48209a1de9c919138c4aa9f9d512663342ddfe8d2cd7dd1647e07e4da56d8bcb25cdec709a3cac913143708b6c4a3346b91db9f850d74d6960b4b8eafab746c1129d7f9685c503249376368fdaf2606f29a9b5c028258b8fa76a14905c12f0e2fd8ecf57ee7ad5799a951dec1a7f1f6b3b81adef974bd67680a0ef7698b3f6b01bf83c6a0c7b8cd1a9ca9f33a7a2c5cc5eb9138c880dc5cdd93fecddd0a1a240d81d6a50ae9fa99c2445bfa03fd84732fa31f90843bdf200450777370ef65c79854ef4da16da6d676d44e7ce464ace2bb2a808cdfaa7ef7afadf5ea986272aace6a28d0fffd812917c323680db37522930b041757ea8b80c207dfb89a4ebc4b189056a01b38ccc7e04726da3f3b282628c7baab79d3de0809b7cbca4586893d7da892be204b8ac1f49a58d151424e84fd3d4b21ed359ce5681551d2acf843b9bf26b0f435f7022ad05992e0c417cb022fe1adf9cc5dc3b01f6e4c6a49493a1afda7ccb94e25c26a5050b4fd4169989d10c8d4d29afc1a8b1449ed8b973fe830ce6226b895b7b2110329b7bff88d0fc8481ebad187c5d71bdcd235b4af8db2ef3f910e97933feacc801ce6551c9ba1abacbab576c6ac9212d7db10be055dbf379cb69c5f5b48db0f32f3156c13b95d10a9e1aa82255b2c72820c8382dbbb6b6168ddac4fc9af41b8bd624701a868fc0ae3e738cbfbdc4a6bf555b8b9912d731b8953db737466e6857c928cf33c259906bdb4b6f75805c1df916c14bed14e7eebc03ee48aad2b4e27ebfdda2d68d8040b67ce3ec713de49cbedb9ff3ee3bdabc8df312e7f679764b3a3af2b8a4574a0d264e8853643e1636164989fa08b665fc1ec7c5c947615bf1747c43718b77f48459f237721c9cd4afdcd274c90b744df755cdd7c3b206f766ed898bb54d03dc3c8d3d1b7f42535c5d0ebe2e07ecd89d95395d4cab96bc28acb9ad47965ab1f62b1ddab2142d864c414d4daeb41c5a827827fe0d9eb9832fa91145a4486906a442d96f0295734b7aa750c687fa3d677ba1f7a35cf79317fb4aba33e4d63d1ca190675544604b20a721973d842f0cfd6c4591f4d2c2a8b7f48483956a2ddad7a2f82a1a4b96d79b2aa0a56d1090889f3536782be9e1a5b30935ecfc9005adb55db1c3a0f208453a1e7e4fd3c5554cd38d7f83e65edafaf8f68a92652d9b5a630138b679152c260e17ab6aaa988ec5653d5b60e987cec9003dde82ab1f826ba2669f2a5fb621591f26a3b741a7ae50feea5513f44a57d6cd2f59f092b044956a70beb26d603753f93a20b687e97bd52e3c7ddfe0b984075c67efb7d3d189cd504ad7128f42894bd318724e478898db7fdc50c4cc7dfe584661500fda3c359083db33cde5e37c77593cc294a0b7a02e1ca929c4bf59ce9a76fd337b6bbb06afdc9ce3ecbdbee4f589fbe59d4fde45499d6bc41a01545eb434c45fb8a58733c5b11b7ad56a10c93f7055fab900b064489687f8fd56371c55edf9880969979562015ec4313b732e3d97f88165e572c5a57301d276deffd31f36ec5fbba56b58350c0378c807c8f0f2e849820b4caa463ca99d6aee0ebaee279e54aad4e3fcfcfb7ab4164042edfa14fc820400eedf451da94c348e3bd2e0130fc0e242381a9a7a1b6bf0a5c48f1aef7e7312caf062e8db49223fd20c52bed641d63ec6cf400e0b991b91f556040da9d0544186d486f784af7ec675e7e7bc0a80ed9d42cdb27695971e144ef35a4b351705c51ba6cc220a292d6776a13078026a2f1b6291af5ae7a331590e44aad34d5675026943e372556e353eacd9a4fe00d81c376ee978f9475e70c2032b5c0c1ad2894d40e7453bfeb05b53b7e7434a3993ad278a7219abccc5b50fcd11d6ebeacff11e12807386f049133f98ebbe1256b9e8c6c487be55dd633b464b89a98e317a812074290248d76fecd105e0263740f70b264db3ba703fac1127d818d6e4988bf01cd52f5fc1446c4a3a430f705ed174b68cfd6cd7104e460e582d07c14489930ecd53eebe43cebdbd5fe5e49bc78a9f0e335826642e6c8f5b0c7fd12c2f4c7a5b509966bc68fcdaf22a8371c8319ac87feb740f78c498fb81fb7b222531829c39c301c594beb49400808b385c63cff71cb3134944c8072b232d7e05d41627eea09ddaa31702339e4865632b5c7bbfc414be436c52e56a399abe5d354e32d1aa77bf69d1900bb7f51db0e039a6b2c165d63a0998e9f24cbc9f91e60101af20622ffdc0c43353fad56d9b6ee2dcdad5c7b51eeb881af904c4d0f99e8ec419cb69f28cd86b4b68e45de86ff31587f14b27b4856f5e81a7462c2ef8d104893e020a4bdc75cd9af64d12d716da6a909e816e64c0fd5fdd5a33f2f6bf1d297b564519e8d01c3279fc6715c07b5835824da4b46282672f53d4eba847ba6d0198245fc0cb5e9fd3883f944266618fad7622e298a2a750c507c3a5cb3104fc20ede73e8ca84ecae50a31284b6bca1856000f73839f201d78ef034bf134acc8318e6ab0004e1b233a14be0c204b329844de0699f9c99d811a177568956721927e234e1db076f1614f3b3d4ceb96181097f0a46c2bdd9ca1c9d1e9491ccdb391f0936523f02f7f46247945ee438c69091e795d3ed8e82f8a0c61fdd52eb3138787a9b106df00c205d74dc63fed9b91ba8836ccc2419881c3fb57b4df01949899ff369c56031532d7209ccb503c003e1e3330f81533738be3f3e9a553aac416b52bc7905751e57c051af6430a6f6f4c4c9f57a74b3787c789e874e721a1133f062424cead2df861d38c3c6bfa0bfaa7dd394e4b9969f1df99c003a316f0dac29844de1ce277b3a89150e00f98e4063f1a5cec4f91ce0e1978315676fafdab12b6fa3a8137b8f50f0c9339bd23b78c09c95c83aba2d16044bbed74128f33607ae19daae5e48f53a5977659868c1998ba58a47f21f43467b714a878de7957ae8bc93c3fb59d26ca2181d9c4c103bffab616d4d9c47dbb71260049da8abf287eff5552f99bda2070f71c8157a3c175d4916118a78e4c9f5702dd329cb8f62fc45227d00844e7eac3ab3d9998a3d05af92cb513a19d393f2181dce8686d292351e14686c2298893633e8b24c91114bd8dc4a07214faa84ae75e30d6497e95b17d78324c8faf5a8b5a882452c5479ba4ae7aab74135b92d9c7c570118511edc068d648b8b2f7b36201b253a0baafe47a7b3acd45ef4ceef6ddc340acd1c655f0672371dce060bb83a40c12c9a6155b041dde892ba409288359f817d3285db8871e58faf71b41875109af50d6302d319734d54c52c2105cd959042c537e5bc9c5146a5cedb5f62955a7f3bb118a2975b74ff88e9d3f7cc2627410bb75d102f2cdac12c39fdeacc235313201ad8688f69593cce62261a612fc7d8485564bc58179806f024df8438a1719536166eb9a29ce96291a3788cc2fefee1e64815625e28b8133707c41324b04179ee64cc61dc04d53baf503bc981802d48ab0d5df16e2882f435bfd1f1470b62070a8e037af83f533df55de8b81b87d515de2ff8951ef497b30594d9229e446e3a12b318f95cb18414c414b2026fc1bbeb773ec02bdfd8c8f3a1c037caa7342a35e220a5416dd145bae31b0f36ecc91e76a8a4bb2f58efe626c5d834cb5ee8b8620a1826e37057f0acb687c1a07395ba611142c4707251cb03a9e08a3da2a326c9bea666ca2f14313100adf941779b9d4ce609f84a6ca13ced362025baa714af88507bf7c8d2d0ea50432484dec9477b5f80443673de4c99e3477db691a797ce32c85d61917c7bae4c8c3359af8388c45a416a5f7b028601e36c93c521da335e9353988e34ecab7c16f9caaff34c04641cd9c32dc8b9dd362f0da2c015c2281f4f3c4fb008c1e057f324151a15176f7ef1eaa5e3cb342a0453f790f1e7e583469417a4bab390ed4860b7d6b386139006a8aaa11ce009456311ea2868eb0dba68b194ec9ba5ea5ec8eec14d7c4d3f0e784b843be409804af12bd3b6dda79220114a86348a7b473369259ff1ecaf95811105ee03b4f4bbe937c3a536c63c8d1d98ede1dc3d5fc68e5fd8625c24e89f58762e6ed147d273e899255caae74f9b5076a3ba918caf2bc8375a91f0ce130ed42d280924fb7c918840ab738754e7265cf8f66e134dfceae37edd8028721ee56314e81376bb14e36d3446e5b98919b02b55e133bd2aba335264014eeb31a541dd99f8d1ebe7b5aaedaa89a55db4eb7219b428828d3828d1dedb3f71b184541b1c5a49164992167a631b3d6425cfef28108b77797ee25616ecc67173c2ead15b2496798b559dafd4fa3a698c1d3386aa3842ee0f875924d7576542c293849b3f14cc7041d73bd4e76957e0a73f355b6cb0b1bb35fbd64e8f07cc96cb7e6c05e977b4fe682cbe6f400d3fff96d44156f609e73eba220a11dcdd2a77f182cb76a3c4468e497ccb5e50c677f433dfb225e1fc89c65f4254969c3e3d0c98d8bda96ea0481cc9d4e5ba221e58536565b0a0e5502d23e0fa9ff6285c2792f3256082ac686a66b6518411cdaf5e45642acaf193375b53e9bc38456a8198b3667813f225eb4d961628bfe639ab5839eab47cb27ea1b4097a83156ff20fdccaf58fa5efbb9309ba4c0f466af2198d382c7ca4a08819c9bf66d6e3004f376d632eda729f78948d37de1e428e65471e46eeb021384b7e1a9f4dff5ab5a6a7d2d6ed9fe326149d4876633797491b8e5648aaf89a92eb01becfb347b625dda8af2a1e4ed9c6caf702e075949bb64d70ff3fa6e21608316ab96722ad6fcc0d60d83dea38ef77d7eef24d2fa7983089f798c8c77f631b39c9ab5cb35898fc7914d2869cd6752c1010c8cc43686c7af4349080fbc28deff614d7617a0abc39b059301f228dd6b34e2019937f7b58757f8e542c0470316489763edd645bd84d1c745cc4f4f86f2fc34fe9c2e89f60bcad4e7ec74018a275dfbe240ad222f9260a5e7b50a11c586e7ae51f3a9f28ca96ab68cd9484b2290822b9b5d7f3da1594c7e0920693810f76b4f00b1a1fabf29fabdc3f03c715fde89c78e866bde3d06e64840246622023b2d92271e6581fe27c417ee331f8905e5a23004dd47fc2c09517137370e6da8c708fe4553f672783289abffc7e472ee449eb1298555a9327aaa641328f0b1c8ead03a4b0614cf31d4d0c3391387996f4c5d9e60c61d76ba70e1b989cadcf912abc01e0171939b61af7ce214894e1239346197fcc44ae7deb2479fdd40eea2e25602d6e576873c7c9c4a54c1cb7fd203198b13c6709e83d1973bf2828f3b8ec8c1e40ead7e73ea7a59dfb3469a888c9a750347739422710aea33edb50cf1cc05a9b7a7490e7b2f7051e0ab037c48b75d543328ea75013bd039f414275e743b3b905c658f88c551a3152bca24769b1a72e38ce10bc5438d969a9101c1f1a6130a628269d8aa34d950d82341d57c7771537dbf0463dbb574bd43cece9125c5c51208352ba38623b0dbf175755bf68fccb5c3ff97421b532067d591ce6f7c75388a5bac1b2990c9e67d0f5491a7ba23c2f13b0859f3678ea11a524ad425ddfad38181d3edf09ceae80f699240c24f935d7101dfa11b4894e3061466663746df68969dbfe058889accc1eb4daae618b8394012be68da86c25e5a0b229d72dc0ccc4f2cd14dce84095cbcaac4789307eaa6ac6abe542de93b6da90b1c5e1867d56d34d136e8a6edb7933d7402c5b6613449684f829b184f174c4e9867d521b6e55cbb45095456ff7ed05a6320465c14e1181eb2f14d5674e95ad629856eaabc6a21d7fd0f0f4495231c49a1bbf5d2e324b38f4f4bc69dd190c9402554a4724f25ff5373ce5b1fcb2cede1ecd5556ee72126149c3a480cf393a5ff4222c0b55cd4bda05e681708e5eb1e457ad4309c3c92edf23714b1245c85b43b6dc32ef8a12a16803017ddb135fedfe98468a297791b1188425ae8a9d0b28154cefe47e48877d9a3ef226a5d2acf379e4dbc7b25507e6c2dc1092da4fe1f3de4b48d7eee3665a340c7d9edae017a525b861f8fc6c3d17d9d8c99777e11d70052d1dbc4aec7958ff7ccab6f21b375f4b3f35f17b185995ded716a11260b27f8154f307b0513544a081d766625794ade377c74bcd43247577e64d1de68a56ba851b299a6e257a7e41d47d01caaffe41d4279b36a35ce18af06e6be6d14ded3282761dfb7514695f2fbb3bd2057c64f12475a046dab8cbbcfe4878a0a89ba1bd5cf6bf139bce815c00a2cfcf0ed21f33c243a45a0782b18aa073171bab5d5e0e1508f74c5318203baa7ef4333915883cdcd54a0062d0abdec338fe197ffd4802b2db1ede8b37cdf6ec86011ecca55a5faaaa5ed8cb8ba9823da05721dc89e4208d585fd4fe92174a3a75d17acf511911cab520aef62a3b0058aa47caac7539c74a3cea6af438baf57f0e9cefb72d1a98590a2bd72d967c509b7ce507aed1373f95a327bc76b141559f223edf35557859d9b6c875e7df80015d63c34b7f901535c31472a3cb0681950fb3fc5abed75446db5caf66e9d06c5f1a49c27e496b84d045530337f6ff8e98f16fcc73eae31136f7c61f441291d768c92c6bcdba81efe3312c4c6e9306f96605466c3a5689897b3dd0d269cbf0674214bbe2426e2fe76631c88c1e6f2f9c71a4e5c6296bafa1682c51a4215b6455476558f331f5e4e812913715e92fc46b77eafca5be6efa06a85921d5e22cdefbca28f7282ff637d14ceb2369450a661db5aec440b8983cfb606ba2134f87c4202f060df7424c0d94f26c96ed2e016f0608153adc5972e510e4c9e5fc9655ae0a355cf66d5762200f4e23d168ab4c3a0366f3d2ec6d213bca663c78ef7d12ea17981645ad151a895f5b47e17e848fc226dbfc1c8d794fc2f1d5d56cfd09c40c2ec49152933b26246266d4b1d3d8df60751104a068ee407f56d2fc4fe1fadd6d0a25c1e14aa615801a236238358573bb09ea08a20321d62905eea742f8d5c1469a3a42adbbac3681405078e34ee15e0e27146de8bb1777057e633c341242be291d176d0ca18b85cbbcf70c444777e2d15d6780cc468f2fd1f34718a23baa7b1bfad79f1549a8cd2ecfac492a7dae9704e4c69b067a1c2d0d0158bc51710da7da1e06d6df9e843ef2ee689ac25bc116bb9efd61020792ae1a1fe7ea5e68b8611cb099b21ad65854dc3ce9f6b80eeccfab9830167220aa5a36a69e643c813f61cca0c69aee27efea52074bb5c4f2a6ebbf0a9a1c2a72a1626de74e56b2b211a666d7abb217695edac660422943a85094798472aeb7b56902dd6ac278e1f6ed312acd4a4e715389a9b35dba9f114aef3eee767d65c0c3a386dbfd6f2b1a62e8fd8104666b83763d51d7bd62b2e252a9856820332c4ace7514562d108db66beea51ded5e55f6f3bab113ff02dc563178865a960e560e4f8d8745ecd7a37984829ea1c5a9bb3f505c883f077edaca93d8ab8106847bfa3e583c2cc4f9cfcf01b755f65ca7eb761f380131990b2b52b7013ba1b393fe030c0acff097fa6aa6bc715d5792383dd2abce5dcb4ac04fbd60118b8ecad64090bb78a0ebcd074b5224d3bf9605787a1d9d2c37a4ee71e4dd07f1ec58e65b7071748c406afd1d374ccf9cf1250a2663a8f23f5eb8724290ab321abd1de59a878fbb58e28e7441d103512377b0e22cc4001ca43380cf56db646ff8f29940078c0809c81e591e753a4d04744f0ed1066eebfe906f5e9af6d2ec30999d051fdaa9efdd6e7ed5a1845069da80cbd481c45125c1911c388635bb0295350ba43deff50e6b9122d47253a86fb1d20231fed93d85aab81ce4619036a5c52bd2d780cd430fe28b6212c58ea69ec896e2c69140eecd348187b505b8a126298bd7e20599212568432596ab73d5fbe902d007bc51dfa4c3f6251814e0b386e9744875d315a58c1974e9e8a8178ea496cba33df7cbaa7711cad27f31166fa3dddc18cbedf5104947ebe0613d3785a7c943a21981c0979843e9caeb0eddf47320963a5593f052c1c6f83acb818d92ad839c9464c21c8d8fde4b039c21d3db01f4be9a2c6d4d26c86f6d9d6848eae6bff98d207cfea6d229c604c634c5fbc0c6464ae013d51422a517a8e64fe195aba63640fedbf6fa6368dc7eee8410aa746eb2281cba5d658b8028d8e1b65b13f4ffdbe1821d65e325758dc6818c511dd519917943a5178d26c0a4d55a029d6cdddf08de9f4a42a8b9f9a15b6828db5efc94460292d55c0204d00bbbbb3884e4222c1fa7091906ab98d203ed813b37ab1ed7108706b7ae8ebceb16ee7ff57580e1c5227205f519d75aacfec0188d251f86bf92317cb74711f6a1621799ca5196696f50901262dfc966b8c55c69d0a3d98bd2332483e1b8872648e6583350dfe0a9edad470f424c30cebd537394ca371ea9672d6a71b3ed828a77ef475fbc1113645c1c40e819ee974b1254cc0029c58e356a7f55f08e3c0b8971a570ed0731e7cd7adc756be8965dd2efa1d9cfe6dbe3f1b93b1e2f428a7f49d341232b455ad76207bc6042f6f56bced26d7e285f803e5814eb9d26f00263b6d8b81f7242c0b21cdaf6015387e8116066579990440163313c74f41c4ffa5863c5cbd2137158be01c78bf3a659769416107b2453b3b8f558377ac3c297b917e771394fdec9ef44f3563305bfb3daaa3b4d7b490e3191d83274c7bdaa453f38004e299b5669ea75cd53e23411e19dfd4585d1f5a9af6af5f19f6d87fecd9d0d95921a98556e106eac202f04c14537fa153bef2a83f04f8faab6b1e0dbe17357fa5c939a99954a2857e2cf1428e18ca7405177ffd8133dae779a211d395d2feb73cc2c8d34fbf154ef9023f9d356f7eedb00bdfa32c920877bbbe6d0ddae27ed4c834c409eed28705ae03db43336a136dc96b480ad0d21f306fe2a4b320101642e5543e8c8e0de22769724d3f8ea451e7c797a1de4c00832b17dee374f305db86978a33d6a0b741e5bb96fe2a1014696ca476871b8e02f503cb605fb094f5ab4575a68705c0d58675bcdeebb4ec233051018500ee99da36e28b9dbb15063a159b1e8cbce3bfdcb73f078a7e5755b4301f8440ea8b4dff0a92cc8770b6783cdac884224673e5960a30c2114e76a05d0d0925409a7f771bae69e331c00be203d443d6aea17b33e6b23f5a9ceb8d2cda259601f5aa8739dce5fa16c2d2c33a48d0e24b866fa2a757a7c0ff66f2649fc53d1e4e20b93c4151eaccfe6faa9225a40d6d26170b23c79dcb0f3b2788aca5c0716b760e6ed8bf5b8a5c3917f3dd4df6e5688dfd9c4b17e8748afc7e44cc1807508786a9e6654482b23eacf6612ac996547c8f5e9d67ef4018bba05c28665eedbe955b241604e47a4a656faa7402c81b28ef85068c798cf9c2781f01bb4356e9e25c95eb1a0c71a4855d1d986398a1853ecf10ecb69d9c3891901ff4e4f1c751bb182b2662051be469da62e090b7d0c8fb8cbb3b8d65c9cacb0ebd477ef90ee756e1e741ae099690c75edc32e5788b4276acc4e54ae3da023a3e4ad93f29621bd8d2c1496da7a55ca70685e47b119ddeaefa1a2b59b33918a781b83bbdc75121d8dc96b14071d50700ac0aa7cb8a34630212692e7d55d213d6a37e7f2011d6b3d6946b07027d6bcd7e68f209f9af6bac637c1b5edccc4bf0c2d5acd82bb3b2da28549e2c5e946d78187fed2ccb7b13f94e120e93f0bcd113f86f55b32b99a5ea9757f401609719062e2baf9c60d1989add19fda10aad8693a315fbe3c356165cdb6624486a960d14abf868f5e64b1d75d95b7b75b8e506bf5ff3aed64cf68767e470383748977e0ecaf62b585ea7416bbbf76dfac7f3f45cd30219d61f4f94814de3cdf05049af111219c0be1a4ec968d71117c99da67de086d329f2550420b7c6eeb55fbe7ed0315651a65a40de49fad36e2bfd1a3b9783236957f168ae4574f6870251f58f11b4182267e6cb20f63fd44337d4064bb8bedbe956139e6b75040bf9bc16033a0dd0583968f23c5ac725d60141d52b59637e5781efed9245ec3e7037668d1d55a98bf0d7a35bdb4e47b24a1e64773cdc2d4d1aab0a16e5ab1d35b8772c85286914858127f3b8bfcf9dc0432342b20401b80e0ab3949c7569fbc48f340bf9b3975f9de63503c67d438b9d5951eb81989f50f0ea83f5ddb9f1d9caeb479597a0e73f52888ce35d87765bec2c543ba43b0d181f72f56afa8432be9b8c6cceba393508f660ffc175c8d1e05d7290cd5a12304e02d4843dcdb6377123ed03ea7c2ce1045adc27c96ae1c19cf5d0f2300df9fda1b2a7780f3f289daa38ced443764408c91d3c31d125980dc5e5c800338d6e140d320e13bf6ec5e93014cc5a78b303b2f2dc0ade2cc8d193c6725d8a972239094aef290e3dd28b8a33213178c677325a5dfd1a54409d9e8b9c26114b083c50854baf505fd4ea0f63220bf1a4348aa03e4021bad79518363cbc542158714044898480f2006ed69d227ec84e09c77314cc43f6976339d0989e9155b660958af0c267e5893a6f2bdcfbd144fc7e5b46fc7e4f784fcd76c20c69882e0f8f7001aa2f83e1d26ece639f62efa7a8993efd4a6f27e7f53785f767a2d0a1524472bfba0c7f28a824f5b14ce242f6aa8449bd64ad2309f917c56b0a4e211aaeecacb94f0f1470dad719de9e32908c0f554421c9c8d126ffddd6b8edcee0af17fe2abbc91a10afd655454615a5623f4efb05b275dc9840337cd1b23948fdde95fa89b74d0fbe328fe78b9751e8743268b65d4fba17e367c3b92793f5990c4a75395b5752aadb8d59da394a02aea55355e5dee68f8c995a5fc7453bc46e5935424c52d04162dd62df3cfa3ed5a27024ab2e42fe34428e61c0a0c9a88f2d59ea237fbcfd19ed6fb69847d84c24b92165750ff794e1e2aba1d17c900606c5a978ac9a623ad28876cb3885c8dfd1452913a56a499ebf22c572e3a3c6be933f73f2f8dbe9f4b30d1cc0aa0f47792f72e57c154fe0ca3ea167554c199f28a6f8e1c5960f3e9526b91318f12d64c6d344256294ddbe7811ac053f1d99aa26e42dda1ddf19771cea8cff25bc243b26f32df2c3a49ee9be31cacfec41c7b4c95f49139d9a2d403d2f90d522a8fe424da88f634af7c663770c4b2b273bd41f86ea83973dccce0bc31ef70b372cf6b23a9e647365ed0f4d35e859a035db6296ed3c408baf9558f6037eb31c898e9e81c58e55844f4a7bb8de7ac70583a501eef9ab47ba4f6e405a22704f2709f6790865428bdbf1afe178c55c5b659b576d15c3f4a7aca313cc78e01667b19d8f19de70685ad43405b8c7cb27398c67fdd122cf4d775a1e2f0335035ff348d012f81ed94d0bae456393a4a1e30ce57b611c028965d8cf54341e603443aa4d3a2179feaa54036d46748bb538ddf84b2fa51cf672b5f06d0d71e3172869e5523fbab7992ea49d4accb42a6b60add7f388ddca0629f4df01a17f1e647edde12cddacdbadfd1fa0e97ece1e089ce0b5e7d45384a372dfded6c0fd2d93d4c6dede6246434eada75454252ccedb6f6f6d521420ce55bbfa1428532fcb2bb2106e11664261c045ee28aeda3a9efee67401b65146e7151cc067681cc6e864ca14b4cdcf3115452f512a6ffadf0ef7e626993b3f73eaae2ff3c36ce6ae0529a44cf2923ee2dc0ee493ad255da6c1198dccac676953850ee3e453c82e8dc654134b075e1b015e2f56a8d23bd37990cb7d86c3350000bb4a2cef30f94e19394aa22aafc2e5984681a431b3a18298b0ea2a34804ea98259d0964296de68845dad32fdf4006665404afe2ac1a8e645564252216f4bfb6029a407d19fd3751da166d3f615f5e742a2fc3b80964ecc48d214a33ea4a5ac0143dd941485063a06c56999f9dec21c4752cd30240fe2180154e58ff99a51f8a6b36727a370635b153d3466129b9cac273f408fc7a5e79fb47b0519ebef1b56b88a0d7a2ead365bd7f0c8cfdbbb1ea0e98e28c0cc3246750be7ec09b5a1345b19e4041767dbbdc3d98b9a769ffb440a254428409486edc0313383fb29a5838b77f0964da8922d14d696cabc56f89d02935956cfcf3133a56050d6583fb06df42a037c371748e2a94ee15c9e20c88c89c25274fe27a6afc231c24aac4a06154d701cac8a8832b9672a82f44536ed0f14707fccc4c09b5ca34d22b263cddc8cc914584d322649bff7dad329e615176d8f0b080bc149956397cf0b4214368ecfe58661849e694540e58979b184534ce28628a2e9a67ea773ff75d362fa8e8c02f340a67592d7a830be5ea635b7829832f8057619630b9abfcaade0093424010c4ab83ccc40ac4f447cb19fc0d75a07f4e82d4b3c52ed5b1682d9927d3109ac396f83f405d22f9f378e518874c6857803bae769d5711699b66ad3059b8c18f74adb888550f2f549e897a83171b98b6c0687ba04a52d02befc3ee3b22f05638745bf098c5f98932d3cd477ead66c4d54df0888d47d62043c63c5939fafed39bbf45599de147d8a041a67f8b1fdf104487339eaf9af63c6b11aa79e411196d8ca04161bfd31d8e6f72b3b0029b4f448ef7eda1ada80eade466b85add9d98e4206087b0564caf7584d9167314f9b64495fd18937aed551d8af4ce133bb1cf0a239cc1c5209adc450ff9c72b7d7f452b4972b2072b1bf0c3aea4b1ffddfba0e256e770abe807e1c9541dc8a024b6d0b589640715de3908c6707d323690ebfc88d77768e02cac47096dd993f3f79779416e7be056a799de50ecfa3ba74c4563ed176644545a11892e61abb3d3886c236120748dca0dccb5a081ca3303ae6cfe608d53829599e75494f642a732c2b906147b8fe9366db1fe67c9d4fdb3a3dc69bfbd140bc8df1967840c9665a9afa9fa5ce9a4e399f1a42a1f98c415e75176afa2e082c1b757c55ef059a63534c51f85d0beaa7217a805ff4085dfe52b0c5129961c71a2ac6c4e905b617bfadc7920ed9711b17a88ec8555bceb2583d67457c280b3647c2ac87d193c935cb167f2020b277c1fbdbed5f59e6f59dc723eda2addd66a0f971930bb94ccc66273df92c3937b7db7fb8733ef468f9c037461cf5242d246f132f9e438189da8bc2e52a6148c5a602e36bb9e5dfc8b484d72403918b065eead9444e0d4a2ca0bd949095cb6a374316a2c8f930f8f3430529cdc1c82c351b19011a18199f613566876dc63b9ac698f9cd07245eb9f62f88df641bc6c676489768ba1afc79506bb04b903780985f586c5ed14be62610dfa69cedfd73294487cc11d6b72bda07b03c699134fca5f8ae490ec8179c90cd791c7390606cad4b7bd4b2e440d3590ba57a40bd2f0a07126664ba51953096cd5a66d77a44af9f2a4dfc4d03a8fcee7a835c5a2ce1cd8f09f4f1b62e10072570387bed85aa0d318393f6c7cd1ec91a3d97e5d55aa4cbdc3a8e7fbb3323f550ef08b15de534996792f0de7d619f6711c93ac83109c954e9a8f073b6ed8361555aff6e54d6daa5846fcca531f8329d54b18604ae0344104753b681e1fa14ca86338ce6a14301cc00837dafd0fede683c88bcfc41678e229a23fae433935f3fef61bf158a42645d366d386d20ba25236fa142b3e6e7326cf3a6b12672d0564e87a6f24c2449eaaa5effc4ca66287f000384d055321367a956977fc9b49d7502dc43f0612f12e70881d7698ea280dd7b77cf06464b276c3cae57e02d70070c5ebba88ae58f55004b4cb219e7e8c28c3b713c93f20275b1484cee0691a3deb8c6215c6fcb0b8ca9dbb1cd0fcdf81ee9a2b219b136434cf817c55d6da6608c85d39a6ca79e2cbdf6e29b6bb351c0baea1f3c4e75c84d6c5b1ca84f7eb51b69ff507eae6d75e55c78318293a7e43f5e69bfd99e4a7da4f5c2c373e2e919f108b6423c23a5809873cb44fde6a8d0c7981d3c07959e5b4bac6568d304d1152bfe461c85cde959a139824233e486b53cc9153454422b450d8ece03a616be2c56c8e1b0d3da9a7ea47505c6f8c6ea939f6fe7adfdf0dd3b07f37eba3b680712712221d5efd6b584c8830656b212c13f6ea401453cbc67b4e58e64487e2f088e4c3f62340b0548bb733dc2d6657043486a73e9660870b3dd1fdb53ef1c0793e9dbb3031bb7816498cf9bc9c22daa7ee5e9e7d05017d9c80a91ec2650018b1dcf5818117663e197792517797d429d68b9ccc255aa4aa3103c662befbf9995ecea928da5c9dea4029d50313b9179727423711a9789438061447b07600dda49eec91ea14ccd9d72cce521ebe8ad71875bd5514ae89a8b68450251d02d406396ec56ddb46cb899301a1366ac97f28f730938b4578f9e791af991e4196801594255a918ef8cd910c448e2a41777cb58407cc106ec63ea12bd218ed315fda11317a2d7f93070668155a28225bf500b26bef0f91c9faeff0104173d63df0f95436153c449520a0d86c14a89b3aa8a11389fd5099cbfe674c4c05b2fb5d9a24555b4131156bb24debfbef7846a93da294dc6aabdb1c7c8bb40668510953fe12c7621d4a8fe7c77e93089d3fa765671d3101bd3e40792744a08b2c75a6a0c7c414ce4ee81748dd164bdc3b00b1665a188b1a7a2a3e5e12defea3dc7c4794ecd82008876a4409de9cb8ad5c91df3013e3d34cb47f4c8c02b54d4c4dcbfeb52f86c9ab3e7dd64adf6dec85ca65353cee518be7ddf4f0701d8437bc355b04b1b6366ea1709f3a7f63c9d29c7727e40e4f69a5aa3c26a1384f2622468589c1614376317a80010d4e3b6d68ecca074af7aed707f5ebc3ea04884b2ea14a02bc9698b8d81b7ebf8d6700cf806aaadb0e4b5caeddb20afc9d5d7f10bfc63452c1897f197eb305fe3e235bb34f41cc856e5b9b592e496588d27f7bf59cbba5e8ff93380ab89c8e385f8d8ed619c297e9f3c8ca217a0a92b25d176be56b75c37b31d2861a825a386e9c3b858ddce809970b06f32516f96f36801ae2a39b7f375193e7a6c8ce143d0c12d88964ba527af00dd26daa0f2f3236bec71bb5ee3a5432fac149816dd8bae91973711b9e129ba05cbce0e239f0bb68e8310b5348157fc62d10adec0de6360f04bc2fa04df3b2b33bc9b9ce17a00a52e2c7604dece142739c9c58353efdad8016a6b2097c90cd2b0246dda4c3b9d150e657c55d21ebbcfe76c22fbb664075006da3026af3a55f96839d170fd9da6cfd95201801b97b2b15b41eb3de2c4d2f00ce1574da162bf93a5020df6251fb148b63e9e9a035bf29994506fc4d874f661aff85e2354669681ee4f4a663fd35a53545f236b30f2cfa57d3e7ef31b653039232b34bd7fa9b39b78556d9af8dafc75b185690ce4eef296e1b8d6c1c21f6470b34be4c4879072bd41c8b129376d7249787ef643831f11c203c3fd0bf8cc0ae1785037ba6d83eb1ed94f28fb7ee1a72c9b72eddc260ed56ae4bea881d9a0fa74991cbc4c1377261aab444f39147dd1dbed03f41df0527b5e575894c21aee0185b1e8709aad1da60145d9c9430a62f53e47d48c386e174f43542c767c183f57e59d2a8d799f53ac6ac16787dd54e7f8bad8d6d21d33d9132a80a8620df7c4dea51de200bdfe8ba077e50d93924dd7058df0bd58cc7ccb21ea75a34ab784023b26bcabbcbf436fc8f258b74f0d5c88ab269e461df1e4d4adba559501d2ba2f9ce668717f2f94848db418ce7f022299b3f291c7a66b35aaa0d961213a8b410b1fc64a949c336a77fc26f328ca3cb3f17027d363b4445c09fea0f7c780a9bcb75b2c32f29039e39fe29bb726881afd87b9494f17cb86febe1aaeeba37da9a5925fbb740c31147bc153614848a5dcde8e4a1e1a990412f1ee1df007fb2262f4f4df88dd5e80d133ad7ee32d1f5b85f07eb58bc5dcf0a1ca9a99f017f6b972123ae1fb7879f332a5bb1e0f7a4c62e97fc56ce754a1c426ab8efb53c3f5aaabd7ec82feab9ce944e9f7e2e29a63e133e11b08a1b958bd2f7dedcf4af99501c7c8236e485541dba6dc60df6ec621e4d5136fcfb171dd43a5dc76d5eab9dd7c3180ea0c65e249a83bbd4f38a992919ce690461dfa48f7a23993b1b04f8c0926d6e3b8444688ec7702cad6da4675d7e4b5052d3c7cb6c717c4784691679c7cbe7cdd707a2563ba7284e32f1e87260f28d57176af437ed46ba7445a32eb69ddde11e07c52eadc29f83df8487ae7a6a27e4a84b360a7d1dff0bf0eb9922cb6ac17e90f4081c2115e02496ea0c78a15ec7fd0faa99fe570200e0303678a53e29ccb75b2e7d09bab3d018b2d52e5d774a2db3e344341b7eb70da1c2d2952c713c7e357194845b861ce49294ff074948757139e30082176a877ec65578f3ee3003685ce5b210518923cf46717950383fd190dfdc54c77af75f5a3862378eb4a9b899ea109701b7bc1eee8694d4a50bc48c8c6986437f74b84b261d0545ea4f474f98f7c5dd497c37fb9c4b09f8c4dae153eeec7eedcf45b74b498d7334d186f427adb0d061857bed8db599b81ad2c60811fe07e3230e0e406bc0a5b00d6117bba065bd9aa67fbaed3b0bf130df0e65f0c8e4c50f38bc28c4d4f7dc3487b4e14e1dfd87b73fcbfd7e5f407c6f0bdf6193b213845b5ba10bbf79daad68d206bcda68914dd4de428109136d2f9b8852b4363ad4097bd2a6dbd5afc9e8cce837aa1b80597006af90d220b579feaec66839b5493f45402274a78d8bd674d460ea44ed9a8a5d8675c931d9d5d1141687f0dc1c7d7d85048d189146a51b6ab505a692618ec927e3d34794c5f8e3e61e278518da0eb1b8657aeb94caa8189f827b85d807c4d46c7337a9018f5a678ce28b240c218744987ca1ec086b7f2bd01ed974433e64c6cff45f3c4813ff8b55cafd4ec75c8d9af6e587ac9c5808ec4ea995808a4796c5a0858e84422b4e44541aaea66291c296172c39e7889211cd1abf605a1a7bf9577559d079c8b29fd238fe5c7c732404c4ad62051ddea590d89a2a8d397c925cd8b8a0261476a7962b74cd3af9f4ffb3f4f9a1925cdd62fe8bee7275b895bfe59891e852a907d27371b8ae2f82be99b1e5e0f2de165cc8e0cdfe08d9983404f8dd4b8d018e8dac51fc9276b028cafa99d556825d65d87ab8cd94bf42de6594caaf9b59da91e02292c46e6c78f213b4d0d36d501388590c13e082a4704325662f8bd6ea908235b19d5455b8ddb79af7c79a969f0ab6092bd45797043bff931f1b78763b95ca46ae31e3477e8ebae7e0efd0c8c2c42ad207b54c4bade04d0a27f2b9f4455f5968c7494c6a31d5d007250cd9f96ba087e5cc4948a4b1e8e89987abb13f795cb0f6c46609947585afe1cc7387af52a01e7c10d342526ab8ba283b00d67ab4dd2e13010bfb7fcbbfd170932d8dff0140826bbbae416dc147f800fcca86f1e3479c40884620b7e0739c193c1c83ffa4a748e54d5875dd32f570394b23baeaac2dde2b1dded198c8b26c639ea9bd488997a0e646e80bf0b9717f32a157cd8079f47ff4786697bd8df7c543e3ff1d9599779abc90201ba8c0c01f25d1d7ab5d5b2a797011b764cc8bc1e1af334956979099cdc2d88e49d075113a68967cac3f4940f6f0b241174519fc61a57adf6b8111a2da43f5c35dabf8d27a85722bc1bdfa78cd05a22599c8d971026fa99a2fa368821b3d40111d05589775d600b85f24f11cdead73ec1811005d8d1a37197ca372677bc1ec83146147bd928f12da5c8504c01bf82eac45c49d7dbd9f57f914cc413775441bc7de0bc880740425df2e8028d5a4a4bfea89fbae17565bedda41ca954438307fae31fdd12a8f575753f52d50966efc08da1c8a1d9905c076889a4254458a6322bd732624565b8b45d6069da8b8fcb3300b0fa30d1af731043aaab7477068b0878cf4c389e9534cb4995325795566d0fb0f3a1f50c7a791a2148af1cc3787a7bb50b5440d646b449fc9a03b49661f4714749759d59692c4b5ef3a8354dd3b0f79c03d5e208e0bad224b079e405aa068ef7de3f989a6d79822296b9bc67d8e5a917f128be1742ec9518676449a428991c0f8929ab97c90c627d84ed80c5c2eacb1a187f8b92445c7ce77a42b36b5c5766d4b6e0d85b4f33658524f49a011f1cdbbb1107d737efbd73bbeee57dd3531e8bbf67e4a6884705bf643b82bc6959cd3433626ba46b8cd518b86f5221c256fde07e2cf07ad477d133acfc17258e39d3e6b8fdb90dad6a551aecf60bb1dd3dcc54a4bac3ec265659c68c600c61c5c5e947a9b618f5b698a972e52732adec9ea22eeb8e3b56a9fc6cba942c794eba44b3297bbe24a9c5c66da94876f0fba484550ac8565219d8083238f2405f12d70fe6446856e35bd8dbde4c8dacaefb15fc5526c9e756610cb10b46ca01ac8ef37dadd3cb26735d99d07fae8c5077386161fa0fbc21ab883c9b5c83a76560851596ef5223527b873fec40b58c01c42eb8764bf3e9eab69994c0c0b1b6f1f51586ae31feddbeee52f3af6b6982f4536e019122c4db0a805b8ae94a48b6b2b2c134617cf16524336c8be433850b79bbce84f336136fc95e9e004ba1912cbb5bca67eddcd7a765aecc9b91242f32b9e9e24a34e767c29d203a1494b8d4334ab2c7e593f820d75d4e7ae1151d4619f883859d6566e9c404c61f957d6b0a00197dc71f277799f2c8c0b858ab94c35c94d41a152c5ef2bd208894a6dc3b4f90165e67e443f4a67755a2c72cc7bed7a8460ef183d6bf946d0fdb183e94ada02ba3e478ad56bfde3dd64786ffec3e32bf73cdd769f83cc948128da733677bf0f3601f4885e9b927cf9496c3822bfe8ca5c9d1173fc200c27967e9da7324f24271d9953fc493496e8b25939d166519b8c35e989efaa3c26a51ce903d930347922463521dc7d5f420e9a0abb251af54bd045c22c40184caa229ea667f7f18e7a0c305a382e8057776027c2ef0699c3e52c936d606aa06a10c91297dbda314409c55d9da7b3facf16c61ba774c2f73169ac88e8ed764dd769fcb48057ed01b3884c5b5c453870dc2a186dd18c0008b2829341b72fa120694e57fc806e837fa8f8706f0488c9dd261843725914b4fd7aed6d2dc32f318c443d0b8d7b942f70effcc010bdef167f69e9c7f70e124c897778ebd6efc31aae1bb0f032af56ad4bac70ae848b79f4966ac5424b430eb34f2684fa04c7888fe63e353e6fc73e0cc2a1196b2ca094f46a26075b064f9d754c2f5d2275a9113f5edda13f9c6bdf63ad9ebcb2cdbf6f78adb2c6fffff7e0dc2d0d9ca2b646e67063abce391ae26f02bf1f3d5723dbccc94152662faaedfd0caeb92e7b7a60fc794b126db39deb76c9dba79901e238f767190006a776438e204c86c5c818df0de10585aa67a2c38288e71499746f5579353becce7e6d90ee1cfde985543f3b0b80fb4a640da0e27e76eb5112fdd6c48b95243f01e63e4a6c65814e41ad1fb59b87f3e1a9ecb7d1396e02dfc9c4961d528357c14012c0db1e9c140d30d7130e20a27cb5287dfae3538b18e494e9c6632e398f593e2ef5f95bf1110658701a0458ee989bfbae5b576572a7d7586ef8cf37e97e803b02dea50d546bb259535fdf6bf080146cdb2ad92d1993213b818a2023495683e324d23c7b18f1f8ced053021bf3bba59e5913640b9be52b25d6c7d1f840350d2cae54dcb4d56f278e3b0365826c49b0d7447137fa26a4e2bed9b6fae8a2514417168f48c1d5306edec16a409e9f1b9dc98f5ae42c27a44723f3663df2573e0f97b1df10e9f99223792ae02ad3aa5388e8ba37e942f3aca837188f1fcdc5974297797d1615ec8d479a193ed2f02764780551342eeec5bf80ec5170ba6212752a81c0ed9762cc5dff1e40ba121b8c53934eed288f2a9bd429609ba42d80aa9859b1a64da54891ff568b89ab567d91797436ffceb13955896cbd974dbbc4ef53981e013d701cc3441977a8434d1bdd9e41b429d211fa6653d436b0aa67279365cc066228efdd9b4daebcc51dc0d03488f7c43b7512117bd2b45d10df13311d8305429da18f17300ac0b5bbfab2ca4e168b6facdae79a0faa9ccc08e434ad8463f0965e127cac5174521aec523f6575e144d0615b7bca611a6164d7fef0a4aa88f49e73b264b5c325f659eae68c006f5097cb48e0f9e875bd6a23ed2c6ae490474afb4d9ecb270ffd50600d06b5cf7abc4563d3130b5a1657d69cfaa53f8e76fc34d6a9318f7fa88d6229568e0a804d40ad0ca8af49d89712f4d10c889957d24b583fed6d8da27b3df2b9bad5fb76fad6ddf48148b5e4e896190a34f0fa9f92feb714ab04a65ed1a8e117a917be25a124e5c5fd01a1ce941359782034c238fd666e47182d5e5af780e889c0c7be311d15ec253273e8c2b74fedb9f303ed8c9a15f28d7223a391a343d03c758bf2a75a72994a13c7e4f3705d84c6bd9bb84d24c39be4a71ef7d5c250f481110e945476fa6a3c3c1216477eb29d819529bbd1da1e150787c859c3f4770baeb2de7575911386b61bf7878d43e71f54734e544313b11e084325aa89408a495e02a8b0cd17ca2153eb661b9b3c3136d9519f563c4c7dae97ab4194c99f449c78f4211d989eab53ec2500c01b75a992522f3e7b27ab0e5db7ffa98065da2f801687d445d88d71653c501763a43bd80013ce2f4fb1e8ea7a672710b98f0d70b3f055fecbb46c9807f397e2a9b1215a4362c5b36b9ea7c50d6e964a9f7a95061fc67a49e9207e3fd8d32e06200977cf2c1d3a9cd9c408149b444d4384431fd6ca39384bac0841e20f9a4657a61eca88866149e7593578abce20174b7857c4efa77524624c1ec6bb99b2b170599090be44d92cc3c8f9df0d649928d2339142def00b368eb0831c3761ac6b04cd0b197f4f493bf72c5ec989738e56dc8003a40a0d97f8dffe001118756d67e152454903101baebdfc4d469afcbbe03d8eaecaa9f4f8d83b26ea89230bb9a95db63f45d217166e805a4d2b3e3d65f0fbed7a8741e752ef5918be80377f48fcd12091a8a286a2ef9584a3f8330d1f047a2d0a27d22b371aa55656b4cb2f889abffb0cd5b61b7b5153e3529108951a6d355e8a20c4b1e735488aa496c594ba6d3faf49cf630ff05b7b6ca69901d1de6b4993a8f7bde524b3f45db0dd8d41bf664614dfa2f0eb84422a95c8ce70f72607e6c5f4b9ff691a5eddabf134eb527e900a9dc0e6f6126376758e7cd884a8a25ea5610da148097e9b5d10ff94b902c208358e00d39baad339cc513c8474367b6cc2481db69b3f2d31969504524474983a6ec60b777c07536b733c2a960b164a0a8ceca8cb6cec7164c04d44c13006ec2ab16399d185c5db5c88ab8c89980a3c1378720b7fa28996f9ed8d27eaac21071c0a55fcd859e09fbb64583ee9059802f235e2af75e0ca60697f1949ef3be6562dbfc87b2a5bc70e215a26cbdc0282b419f6c6f78441aeb6583720fc10c41e6a42a7ae3590578f1d5205a4e37fc0d08bc143d42dd767dfa8fb7d66249602c793a67aee1c23672bac6b27b44a8a47543366fbf8d62d21fb0e1a3761f6bf78c97abd606735ba3b70473c0e2eaaf83baddec93434549318a7b34d10d28584cc8c2edbb4c04a615ca70a873e1d71df7da1dbe8c91e24bb9d18f641ec6decf0d54455d1c7612f42b253f4376ba27b49b2229de7dd2b7e194f270a9279225b635418d3ffbef142400c60e8e7b3d3f7d014d33993110c3c6f2f401b62e663686562dbccb9f7536c7f615642d539c1c133f06734022778c1be28dc134253913938d5bfc2c84e75e76ad7c75e670c04f77636a5699104e8fb94a66e8ad3b6789aaf8c5a269e7f6fca284ccba08eac9a7f3cacddfd64b4714f1acfd4d0909fd46a766d3d3d85c4a01377a187cd95c8938c860036cf5c8376c4fb9143992cda2c7ed10246cedb9e7341fa6bcb069823bce7098c9c6e3cfd76e1d8551a470ccbc3707b89894eea1baf1ea9ea13e80079a130e59f5cabcecac5403fc071595524d813b93726086932f7c134efa53f8e4aa381a5040f840b4b57ff40533c4912df08c5378fa4ac152669271bd45d820b09f35692eaf4247876cf57e40e08d274b7fed74e520b4aa258bc84787d60988051aa41d728eef781b6d91ad30fc27ed08788220e69969a17efad7ae7418ff5306593e7f7e2d62ecd69190d43aa51ef9c17390ef2e4f228d3a63fdd501dbc4f86326b88527ec171f6f7ec1c0dcd632e459491839d960017fd292b63e2402440dd76dc79ede0419be81373c60443f129fc9a40c2b2cfd34e04788e08589648abf3a534d40152be9e62214fcef500f33b2e1e8c23b01ff3837f0034d26691fced14444f6a1bc1eeb0ef781476f77d08cdeb8ee51eb0f772203e81395e204aa205e50f44e21783431b535b407c7d62a2ec874bb877ed4dfe6ff009a1012353047bc89b89f515c712702c69c73fb0026955df1b847205a9ce85b08f9c469872ee704bba20ddecf7cdfcfc4a0b0064da4eccd6b4571da6866f1c81f605a6518a03f65d4ef4bffba130d3329b6eb6ca4b7655cd46c8594c1786faffb9174430fc215627021f7ed33f1413c83c20a44a5fabb6d53c12855b6464ab04b26db4991cd533daf07dd3c9b3facad4f15d29ac0ac42e21cf41e77a708ec529ddb12be4bb25a06cb92deb3e4d846a9ca6d22ff7cb2a2608f187c6f675ba72cc4aff13fdb9bb9de8d878e6a7afbd8ef10336c18322ad4becbe7da2f15a99f68a474a0b9295bb10a0761aca27ce6a63901476d05bfb776c7a91398b36dcb9d24c5015248d46cd6b0be9620db863d753a667fb63bf0347788cede33d36326694cc6bd19570e2f8b2aba3ed2ae1d393dfe4b8700c721db44cdd9fe7ed3d1a2b970b64c901851ae14041528a504aec6f5a367f2dbc4382f37d6aed45145122e7dfd15d9d6f2f001843d8e0cb907882a84648924aebcf1509129e1deb4e4170f742b0fa70ac3be37f480ecdd3ce28a32b9040d95888f5e63dc73bf58b8d9318337d4382963b1eb6547b2bc4a065ccb8c26ad1acf931fd7f15c15885ddbb6b96399d2ce3e5941d463ed19636dff5a8e53828f2c5540bc5f9abfe00f942abaf9e80c3471a4e91ff2d40541c2f1a4d7f10773b88e720850b2a3aa334cf4e1466448d03157a1459a8bb5cca2b90f2aebbf67aa4bae9a4ab02ff515f599bf483d09effcdc956cae01159c09d08fc765491d5f48acc266baea13520ff1521980a248ddb03d5000b30a5f8c5ee544dc4337e511cbd55f0f195bc2061ec6dc76acaf27028ced5919210c08dd9d17214cd6baf22bd27eec981ffd6b68b8dcbf0765af3e7c4e729ade98d3c1472e98fcf0c0120bf1a6cf8391f38af7312d01b4102104f1f98fdd72617c823118bd97276ae67b616b36f77b94c88c8b38746152d9810cec1a19f2030b166d3dcad411c831efae7ed93f202d378e3ade9df34b69ecbcd20621cde4aeebb9f461e214db668bfccb6c2a7efda2f2134618282c80d4d8e79b991ea08331feb42583bfead0b6157a780659e2913e9e3bf73e3c1d2235c7a2cc44666f140c5de32c83c2e528ecaaef20502a6840500e4927450e638cf0d926e5e914482695fbe7847d2a2c5402d153c4488680fe443e52a0672be98c89c2673837809ca97b1efba479efabbe7b79df3b6c9d606980033b781d05d52cb2b2beb71c7c430609b50fbaf97a9c41b99382b686ab9261c5a2096a43ac35d4809bf63318d3fa8fb7f4876c0196c0b67e1a42c3088fdd569093f3fc87c923422ebed35666c310f0c4f6520786e49a50bf48fff33612ae862bdf0fea24afcfc2dd95da6f998e8ae4e5ffa22aed4b03e25684b3785a04c9cde812e09c10fd9d814ba6ca86ec43ef6bf077f6c73b1039a19f39773cfb03d994cf4ea7f51b805d14745bde8210942889be1d2580c8f7c022bed2a0dc26b6bc8e73cc1b0da290196c73605b362a5ea06ed511834ee825e13490adab5f2a41ee775dbcf2f40aab45c3329e722395d763f3ca0a5cbdd53eb039ff99000004273af066f83b787aaa7887c6c347e4d086a99b1175938eac3186e781240e41ee297e794d57867648afb80b661d13c319083dbcc8a304606ebd208fb766260d43527687f04b90de12a029c2a070fe87e3ef8bc9dd80f5348f5d907890b2c7fc8b45ddff5115e590086fc3da2f466966db0eb1ac6aed203125f724dfb8d0134ae20d8f3cdd3063b84c40f876f476c47f6fb91b5a009cff14da7119f3da7888b921e320766d17f149893aa7cd69084a766fa56845a12d38dd8a6ef771ced41e156e300637202195a400efafb1c55e1d7fc968cd06a6c3976784c6f0640881bf69c8bf65b5ad1e8b69dd6a02411824dea50580cb296501a830cdaaedd85df2d4cc15205b9c18a64cd139fe602ac9370ddb91703617e6d16951b1d90e1a1dd60bc210d76b4ae3b01f98af3b8f7f91708baacb5816f920032c31f33305747e19440d96f671ec8ea08f23d9e085dbccff70cd033e89d6850f06483c9795849d8796e853fee20564a5fb80ed6d71ae7e0a6effca337b1363e7d59da799199ccd39bac9a1e418ab6f766d556a5072b2e6ad703b1375f77ad3f59403590b5fbce66bb52ec5df5f8f4d22567e4d1194e4eaad10f21903612fed60354e6516480e4c1aa8c67b6d2f821a25741d9cde0c363567f6b73011b7f3e9bac412e7e9fc8faba3368c97fc01bd1745444ac5fb4e8e9c22a6fb7456b7ab627a7c73337b47ce26e7522810bb97e1d577fb91da95531d44bf3f47f2f665bba9262a47a2175561a22aa3bb831ea2142718f724b061b6845cba051a51ea726eed2e0227c5521014b21298594fd771781739e76b71518c78f6ad9f3bd8bec72ed0d376a73c49b42c85a737a69915c0e3e3c741737723e11c6be85c218e45d94cbb09fb3eb41c450c2f7d68ca3da9cf2f2e9755c1fcb334700c9ac09aa745f8f46a9e1b703357738475559aa9764932f8e05ed2583a25a444363688f2d439afbdf8418fcd20c4dc87eb1146c2c3a34c951f4e50eab2e62dc007a3dfcba9d40843c0912a631f586b8de1788fff99757f59e3f43a97c108025caa071ae63f580b35ebc9a6afdb4ce50260f564eb10422a3a97ebd20e9951d786ab14c3e3f64704a49d86e879286bbe2232f1c28ca11ac4b9aa663869dc3dfb83ddd4f468674797ab34d57d1c4964ad64e8d82d27adfaeb0905942ba7f84a7030071137e93d19a41231f63ec13874554a0dd86e82858c79095ab2a62189816f4f8ee1357daa30ff230120ddfb7fbf0f4624b83c3509fc5eb235c76dc644450b3cadc1595d48909200b007b426c36937da0a7ea3dcfe9cdd680c2186778fea3ade3d1c1c00a7bd76c3c9b8008191c0ea847c36d57ad2bb18f36ad0d63ed9484a8e11ffb12c568673f73fdb47394386a6937b6b46e59c124c4c611710bb55493c5739038a78c5246593f9c12ef1d1eecf44911c9297e47d1b7fea12a69ebf59da2e50f1a86ac4716bcf04cc3395d4befc4189c8ba447cd2b48be3d8e8101ae3f0143d8f0e1d2f01bf51edc55e2d5ab16237ccc638997ac13ed879feee80c6ea300a550614709f1c5d2c20a69f156bc5fc674327c914e609d7e602eac8dadb0705867f5454d33903c74bbf1436ae365b3503a6d56d6f9a9dd9178b747627c717fcd3bb98d35411da8ed4b60af782dc1adb47f0a7d621cf1b387cad05526d41461bd667b86b0cad22cd6401157bdba85279e0d256618037b73dced8de446fe6791b9ff2b5ff95f7088391968222ece16712e5e80f3927000fbc3c40a39ea07a91a16c2f285131c5172c2c537b9406c5f0d8fdb4f2e1ee95a1c07bfacd317fcf69f8b12cd7dc9308b5d2630056053a0c79df62349fe2b36fd00feb230dd607a3b6a591446d664a0293d23425a0e84c0cf4ae6c193fcfb1712ed955021affd79d4658257ce792754a568f62a86878e77ba15c41f33b88a74f9201bb3a936dfde2494c6ec759d09d1dc9676b450183c590d7da0fd4fcb968eec92c52776fe32776a776be9c488253401f9482c9f199c904366b28588d75fcf094ba8f047485547053299ce76d4a08a9da294ec7699003d3ad09dbcdb6a63053ecb97f60b1c9d9e3543699da70ba15e1639ad6fdb23ab5b942e3ec650d6b3a99ebc5a0659742700513857c9a0286bb221e473f0beab71262cbbb6a0e8cb035f1d01ff85a76e1c7f6ea570c13af23f02c5dc431eee358e590f4ef0f6041e787f1fae14001d6ca61830835bfefbd110f4462fd634e7fde713a8ab232a991ba01f894e0d0ef3866458c9288563c5b6bf34b1c749f0dcdd9ad26842deb8fa3124d1c97185501d750c9554df8058de97cd1cc0d6c578d66b9ce62454dc41f9869f7337cc70272bed70d1087594b05f9262a18b6b209286efc1e76ec9f1d753fe2eed2d40f336d9048dceebb3a1595b64cabe1b9e6036dc8e3c31c34c5e68ecbad70ce8dfcaefdf2a3d8d6411f02a331fcc3e547463c83f81369b09bb0fae3ea7da22ae232c42605b955a961953b1c37423d9947cef05b7b8bfd3ef8689bf1ceb5cc2576c53a1e12e44f50bee9300062c6ed01498b1c9ab892bb922145dfa1586dcfcd4c0996ca6be55db78a0430fc5b42627bb3e59f7a7f881075d8c34ddee54b29974a69632253411da54ec2095a8eddf70966fa7ebbfd18b7ab4548bcd13d0771a255d4f3c2f8f562865f3ab4670fc1edc669719eab77a88579722e4dfcfc7e9bd3efdebf3c630ea832216c2d594a3d452d86dcbcf9aa1080026538022e075375f10bc84f9cd41bc6408ca19b7bbaeda8b05b916273f72e140f9c9cb1f5fe4d82a5c53babb5b9e994fac3b9a2f4097596a3fc8c641c7cad552022f2a773970c3790529ed92c626ba82938ed29088a4e0955a7aa714cc1469c2645b8fef6f3bbe6b2f5f38bca9ea154f7f4d09f6f260475d82c07a6f396cf73d8bad5b4fbe6af60f7703e18452b8d7245ceca5c02b5bc113d85e516d2b006ba3436e5ac97e003f1b9e67c4b3fcd2ce158f2f2c97bcda8eced149a791c9f21b5466d3c98d83feaf3cc1cf82fc9165f7104e8aa5ae7a55ee62cfed8a4feb37d111bba2b4f71aa20376f419628c8f296e2c7fb81df163499c116fd7b95f9299a7ccb9dd0ce037fcaf80cfc4765bb05b3603714c4600cd21f3998a0a72f3cf564189496552d155e5b4d6ca803d132e4d426fbf7d98e19e2a63dafdb713317cdfd15abe56c17967c150b5633266b0a68502ef795df4cace65af11c41d81275d691a001f35671bed070341ff1c5bcf96012863fbac319bcbf146e16ac83cd4e888b2490cb206687d9a37efe9fde32e8e54c441d4b24b0adaa584f1a2886e17735a3e32e11b197af4e0e03fbbc362f7442fbbe1cbc464eef3bed6d2a7c11e56d88333478c193c8a2d9cdb1faacde9d07d95b213bc6ae5dcaffc9930cfdb377b4b7fe4f9f5d2434ade51ac68c1c08a26597d14d0ceb377a9608441c4d102e2cf5006bfed6720bb20faa464ed6b94e8cbec236f7c830029af83bcf080d5ca3395c6c1267bc70b998e87cad16cbd59be53baecda731170d909a87ce8c90623d943d39662262b02b4dc6ef70128d29c64b8e69c059926f56d239e8a4d61d14401717ec66910718fbd7dc605ae214ea6d6a158d6b4f57930b061f1af4a91dfef6dc30b24ee6a12621699acba95211f7328e8a98f07116d08e39f61bf62b31e8a712c3958529b7148f99d0c6d9c5eb352f93a39e38018db4353a4eb85ad5d430d17f8146c191d970f33fbe680aa9628475013c7efc7c30a69ea95dc9ec11a5311bbbc626a87c9483b05701d7ee25119df847566382e1239359900436ac7774948d049c791893f11d75c7a991fc00e4a3b4f714535ed28071717a3aa07637e5fbebf8627e038ba27fd2c80314c54f26ed2fe5863d618b6e279883442f95d5aa2b1e597f58ce25b832163b8d1275851c7f48ad2ff7568e6d4494563949255f3638913d3abb71ea6486b34b0b16f53defbdd8c555e99982eead2b860ce323a48e96af1c121c35e38b9044d53455406b18e78a34b52fcf12a08397e255217fe790d31b70b4cdf83d53644e6e907d25c49c327b065e0d2770e484b7294565a7b9c5da538ee2b0745b6862e7a16dac5515e24e336ebce15edeaf402681bd2aaefaffe5bfc5544c6793dabe098817c029966d4a027b382595b2fb9333ce3975460aa74731b336ef1b023b115fe11731ec34fd74e1fa35b736d2cc217f83bd5531b279483f696dfaeb33a0eebbd464bcb2b6f7700f66944228914808a15a6d17ebc4d5d75473f179dd22a723695b0ebf881583be12ea5f1685ec10331f00e0a12902e2cdc1d7ebf059860cef2af9e78af78afba51e0eb3a147e6916757c97608a8e00214d0169bb7b359a4194bce043dcdcda335117398d8ce953767d8670c3e780fb16cbba0906681c8cb114efde0a78ad206a7b88666750eef00cf605bcd957ae7774e7632800073343914257040fe7490e60c5f1a8ec5cb04454614cbbb3f78e98e163449e2ea657b16e688210981576c1d739d039c51355b5225e0e2b6ee797edf746045ab6c3fcc791f9a7963e607a13650f937bc985fd9f72bed7279da41e9f007f0ec5e486a05dc2e87d6f201fa93a6337ec162fa9f0a4c4d24a0a70791d3b766b099769f1d40e13080171f0e5302fedd23b5ced82b32ebec15d4ddb80de0d5d4ca9c79f1eabb22f3258f787e8d45fef03f63210f36ed89b1045d1fae98ec2a2fb53944a68774e673e8c41fe82bb2990f137d4bfd0c31b4842da2450bf0ce15c6b57ac373be7c0b73eba4f4a5fc302a81e133b9329545b29d5018d0cb3489bbf7511c71743e7338d6c8015ec7d00797cb07158f1fb817af07c1d482edfd8ac0b930e8acd605e496173722d7832f472b82a429f232782b7e83272f0ae186a14ef9e527fb892ca76907f3afe8dd8ba4b94489b385ad0a87c3de48c8480f3897086af5d60af76ec5b3e9b0028e2de1183341381953721c95cdd7948b4ea8a5cd7b902ba076ffeb3a6194fde32302cec38dd4b2a10a5b9321e0945fb70f8af8ce4a25b029e81da7472808996820b2dd5016816ad67c652f14c7688fa0a4ab1c8ce04d88971a7359c78ad08826b6eaeb3d7769385012d3c51cb96790c5ec66e5d3f15a1ec2017e8a5f337c12cda68127d2df1d591eeea7590a07df55178e1c54b0ace7a260652f8b88f8f0e9a2c92654f564febacf9bbc11867de020f385cb1d943c0909998e9c03af2a175c62ce8c2ba5c4f6804fb70f09b635f1cd8a34a8ff6fed4720dd30e4b324cbf05b6bebac885a53d043f7f4e7a8b516c5519283c92d4769de3866179f42a5f005873763ca70e854a1e890b4bad91a4626de2035e3cb3c14fa3834f45b4c39b543fcad87eb693f7a0913064f2460b861e6b0d86449a377f569e8ecbcf53a4f423da432894dfdb4e9c9772f938b3bb6eaa500e8c65e4fd77f2a0e42504a9b7c2ed9d5d6834334d60bd24f0980f6108e0e79577c834ac6e4f513e914b80defae4b26d76ea317ca19bb6b748767cda42a528095127481759ebdca633985d2d3500ba63cd3dbbc9ee0a7e764dfcf6c7e436b6b2533d947983ad2390d1e02a6adf34a8941831c84166ec293b32dcf5582060d1fc957a42a5b5f6d815a6c270b66984255b14d798337943224f8e7fa2a0c44142ba178cad4b7d7ef6be84753655fdcb54868f80bebec9d659d900d247c938ba0f24e2c0e3ee8011430b323824a48296d9b0981776ad53d51d2d4edfe1218b60e35b8c33aac7845ba1d9ddecb12b4a373c33815d97ae4a8018f6437d127a40d6be67f77c33c7ff79687e27d12ee312ec18e15f44b9da2afd7d2c3c460df0fad7959e9583f6ef7152e068bf02d6a917b16831ca35f633287d5c20a81acf6787e4c2cd3498d8e388d9629f0a885085045f761e187c7fe96347d65f3da58da86c048ff29aa1f4d00aa953d8ed6262d141ea9d1f94106bfad42097f7a7841912358498c40cb43911481190dcea3270bf0492c0199f734754b6a659da11cae965e927edeeb3eef647a5ba449bb740523fed5f8edbf978b66ed408f7f2f32a7bf0d1365345e3397cf00b004ff06205a5907b1e7a9a19e1fa1849ff2c841ebe6657fc96951e64cb160e6515c26265397d7948f12948f1c17084d8da4aadd518dac666fba6eb5b060a64b103843e87a8814910bb98e3d3179e7888ff0b154c51f584ac1b3192d9442cd6071502b49fe1ead03fa4c609f646c31985bd722a828f6ee1fe59ecb5bc9730dc9a80326b74521d38b4a0eedf02866053644ded474cdcbde534a9e2061401ca69e2f22087948b1547de1bfbff9c924f18dedec3309f9fff1f4e750e4d68f290251428ea27f026acb584ebf2af19277d79d666e0ccda4400816ed0cae7338d01c82ebccc2ac805f2b8d5680851a89ac9705a91f5e2cea6749009ec83365b73c0fc0bedd128048b9d910fa3ce353b247b0a41130e8897eaa10180d0e0c26a1f8d69295054e8c8c059751bab95bc261ee56a523da76710a57603db5df3ea8c440125f307e8eaa825ca66819130207cfde37a2c9af1d4ca8344fff3bc4e1c43140de125bf9090ab221e5753d3c63237d0326f40f45d47642fd488ac867d85bab08da96fb2ea78b96e4b60062f4df72cfd5e8622c737e0023ecf8c2c845c983168cee555e0bdcc590f34ae75284fae2bc1c9a732ead4c6b76b052e082b4387509e5e5344aeb0d22d8b1d538f75d8d06d9a8c2c127eecde79d9d2dd723020e717ff783fbfca0afde3a339eb1fbd3527ae3cf1028b5aa03650fd0600c33b102132a1b6d94fd5d91efaf9c4d167f1fd223ae39f0974346ef4d8524c7c78b830d389e4e53ada849565565b605f653de22ec32b856f39b91c416f52de4487a0da011d6250573cf78244e70e74c2f390e33cef019c02431310bfaf1afd44f1a821f986517c5b4b8906316fcf9a1c039fa9d34dfdd43b3beca195f55e64b37d3e572f7a92a6daf000f05e7a2949259eb01bf1872466b94f4267d27670b0eeba506861d02dcb031a41eec2f52a8d11839cd724d31808e26688d055adddef4d81f2960f7b16fe33a47e05a2459b8e32f2111ff82cea2294e0448f509cdbcf308158fc245fbec81eb126423dfb659fda3b94f2e916ecb0a96daceef8fd28e3b78d8ff4f09c0abb460b391ae5fcc93fde431e27fae5d9763d93a1931110e749cf3297c8f5da44242b8650f2cbf5476ec29b6e8fec5169945d02eb45aa3e8380f559792c218114f4472dc07d2b5cb1608a815c58ce0b69c5746307711ddc91173459b5684c552efdc6c6d4d10db490b1f67bf0bb52edbee6f713a625fd69008408ef7aadf2673337c8121c0d436870c814123d0e8d816e69ccf70464cc86b7e284e35d0acf1ed0c6962bbfc91aef9c1a7e6d9bcb95dacecfe9a062db35ed615cd6b869336c5b50dfb7faeecf4fdd73859ee1cba164e339c449769fb8d2289809a7fee4a775a50a8d77b6a5f407de12842c81b84982e10aa0cd70b5a3eb297fc2af0c10855e888e12db50a63aabbe11e9c45cef581e9cecec0f6fb30ddde1b70e9233e19d79ab63afb2db4ebaff5ff97354cccc0893ec15dd349fbc6a5b3a5f360cedfbb3e7fe6570e4c4dfae6fba6f24228ee1faac05b5131f0ad3f3b1c0634935e726377216a4c8b730c159d78bb3715b0e248b7a25ab3e096e845984f09a3a2260ff617a4c66bf26ef79f41e002e42dcbe6dc7cfd64c2f79481bbb1ed24dabfc3c5c5c82bf36fd17780e299ee29e011fec79a9291f49addeb7208d81bd8587ce550fb7ad671e1bfdb322f86aa467cd43862a6602c6034de033049cb7db183eacfd7451e184f9f5a71cfbf0792a984b93e430f9418a326eec9723c9d0ba392561fefcf7bb4bfba015d02c218d207f6832255c193c067bd83632a481fc75d697d3bd2973b4da600784a1f5c81bd6552f9c4ff8786c3239735e8675238d72e3ee6aeef626171600c5e7aad7ac7124f9481fcba4e2ddfbe4d3c752abd92541520dbf41a863092fbbb8f27990316471379c72652d6361f0969bd249bb309182ec6b709fc76698cff7e3f26022d4a7f331a3362a16b4f1baef00ee149f8acb2ad3a509ae5565a071fb69cd7d1af3291a5a0f225bfd7e795296fb76f6703cd4ead301e66fe0a34b3ed32ee9eb11bcbf57c14409c3203ba455df2aab7f8bc9fed8ce5e875084646dd0fd5c9fe2186ad8006d7fd0cf508996d520cbf6bdebd2627545ba5aa65f650c23fdc48d3f58cd53976209cce6d7fe8c90a95517016371c56791518ff73157113e3236c188bc390215455265b5e91bb9435b891ea2970f7a13c1cf9cd95b798f9012c3e7bfb2717b6bcd973a8d20a529e281c2ebdf06d6ecd83ab6b448224825de1cb9012428711e00463b90eeafbce717a33a5023d5d788c27c46555a7c879cd0a24981309784ceb514b3b538b21cf7c059f853ba289f3d93e7c12633d758a9dd54633dbeb72a9cabb9d5d30ef514af71aa8ab6a83ffaa10e6049b810740d5c9b5de9c8da60ab745d22333de7c4708fba86bd6d9e2ee2366fb7ebf4dcd3e7d7455ecb0b7a58c8aa071e61d9e324ddef3e9cc9fc39819ee9afd158a511a32d6cdc91aa5b6820c99313a7db15f5ed6724133c49754aa7315c14d70c8ad8bf34467edede6d52f08170a8db61c01b7c86fa7ac85234a51c9d526b2e0632314b898ec537e2a256d9dd4924c6cd26af50e0fafbc0ffd84b8a568e94eaa6b8b3a9582c24a1c16b75d77cba36357b52c8e6f3e1e10e5e7e4058e87f59f7fd84891557f5d6a2513e619163cf423ad2495bff6d2e59d314a67cab044e432791628a3c7619eab8e4fc540ab2d4efcc2d46e525ff1dadb87a2abc0e64e35c09be8c89e21691510ee3c9b97b1eccd8a71e4b8aaffc6c6b623f7cac141d7ede0eaa83932534aca7f92512eb3f2ba005ffa97a9bdbb32376270a09ddcb0e333553cbffadfa97e0646d5ea4fad467bbbebcb4eaf73e9ee3ba41dfb8b94be15f8976f1905d011959ae09abf7aecd55db3b309c317c30f458477de13bcda5f7b71847944c3def660c36e578414c67edd4e5bf1a040b21d996942b07ed330dc155cba2d707a393a19935f262e1ea46e1d58d6e94677a390257f14f843502592a75c039066b5b271e5f948320074eecbc9a88cbd51a3ba6f1d3457d29d2aa33648557c35e6fc1ee11976a64cd217e793848dd0ef8b9ded9991aa91c6028857b5a0feb9d45113cbcd0acb05dbda0fb5b8777001fea04c7a464a71abf359d5c0fda967d054d696f5358f2e833e6a2c99e2e06ada0c6d4335459baaa0ddffce1a8b8bbc1e2fb0232cb0fe8f448a7d38c4abe7726d0a2d067df2a059513b3deec1ba5cb3f37afc04c8c44cd8b292a8d6350aa574caf18dd131ec5b2ab1ace1294fabb5dc573311defd8ebc727e95cb3306fdadf1ea920de91aaac32d3e33ee6c5a658f87bdf220aaffcd5b10a1e4646c40c13e516eb72ab3da313a4111e195a1285cd3396273bcd9422ac99ed517cdd9905c25f2cd254f52d40ea2b2716224cb3672b1cf1cde1059659417d0017664dbdd92fea9edb4fbd973f10ca40fd7f8553e7f226d8112da2dc863abe0e419f9a3edbbab617a0162eb2d65942fe300bf9da5c4f5e29b3ea293894433b0901452cf0f966ec8371e056cf66daec474937cf68de9337e0898cf1277c10ec266dba5f328774ea3a85154dab1fe28741840a5152cf624e9a95d697275c53300a1c296962d4a8e797b8818268b2d9abdad8a827f344fb00825e4187e62e91a61bb362c63a976130cfee18d9cce7e1e440eaea63df01ae099f3a909daa6158a8536aee0254b11f8dfb2219edf9b2a13aef870d1410bbd89735552a01c6914c3fc8d1093468da9573ec3e0ab2b98f21e6296e65579743a4af2e1fec6da4605e6ff0be917c9d0b67954cc2b3ad1f4fbd93fe0291c8beae86b89fb17c8bdf580d4aba1c05988dbc29b4988c84191d3d400a885093740b28f751960eb61b2df1f9e2ee12696fc67443c59cc1c5c95c92ae49816bc2a2d127ddfe9b2cac9b8bc54628c5470b9289bbbd96a6c624adea0efea5ceaea4078f4920e9f5f7ae7b219a4a31d7d919de5aceaf64a35d8ea9325809f04d9ed8cc66d4655ff96397a440094026ba523d72345cdf7519748296d0e3576064f4bea814b7859501f7eb40b2d89bda0f495169c6571f84f1ad172993bbbf95a4d93356be8b8295d5c844b72f50a9e25f8fcbd2bae591f5f12393b3bd3f479d778771327b3c1b3c5c31d9f1e5ae53c2d058ed62ee1d3a0d53ce34b3b0f7950c55b19b727250fabc120a17b17db6bacfe02a099837fec149bce3ddafa74be7f9116e16df8366f8a92f0c5f0d4b1985c38eb589a6a651c834c3be85685508dddd46f7f99302b96934f8f22c3c32b61b70218ebdce3230d3affc70f1b81f25692e82cca6e8e161ed945edbd58c42c664409995839bfe3d8bdd37de1051cb68f6068370d9a0db930517113a69e33de11bf4250b5a20329970eadd8f3a5e0dca1503abb56c19af31f03c91ad1dd757a312ba76d868f1a9cf659a1a84d3dbe87f50b0f017812ca44b3caf8e6c75103f2677a122d8aceb7571a1db2e2eca2f1f95b480f8e6cdfd2a9fbc31634a6b35184af6cc5d59df55a803e00206986ab20dd40f1457c73e8dc2ceb05bac91d30b390722a7cb04d435553f45f4faab465a9703cd166d9e694c6cfa357db38b76a2dab52b505e6ea309e685c3304f143a84b4deb15ef41b003bf5e065294a003b81a42f9a348512f699b1d5f410f6dc4af4e01068609899fecbac9c84f99625e5d34cd5b325de0d85a01ca13bc06f2c6f3d04aa21107e192fb9cb43c16df4bcfcabd6aaf16785c67be7b016fa0ea2cff99456d1facc451758c2174fac6e63770d9552301aa898ff7b1e8bfc3526c2d19adbb952283de30bbfaaaea3466c30cbb37cf823b4302094cca04444b61023e258a4825edcdc6494df69dc129532b69ad3c337741c5d0efa0aa4a6518e04f51cc8f5b1501fddf3a8c99ce416cd2b056a8bca78f02b6293474bcc9688f66d4be3a10bf709a1695e0f0417fb51cdd5e66925d5e3a45859c868a313c137eac4f9d865b4b19fc464781d89f8a99deb979a14977513f53868c8dfca875af75ba06cf5962d96f3bec2e94c749c10eb3e8a312fbe684689d730e050e653efca3c8d56a1569d916927afebcce7f94a4b4f8fb2df2e7f222b698655684995ecd6807857f480dc0c07de7f9147fbb9846b8490b36987c44ab4d8feccbb11639e002a031211d218797aefe7f3abab45f85ebfc257bdd63c4ae52582241ad9a1f113b08d1c3cbe0184bd700a77e96dbb0fa7b1c159c6ed22734bbce307cda655cc52d0696f6381a49c2bdadc1728c3b3dbacb2703394ba767eb37a5d0c53daaad7ad184ad3a3698249f8859c045c9e2a5596417cbe92c4228ad3fa318a175020c37b6142c2f1b56090aa6bcc5d89b5a23b14e73b5fdb0958bbafd1cd2c37d1c904f9df84fa0931bda1dd60f3658e615125ae49a7c69296a5b57e6b70fd6f5e5a798aa0ac4d67c9b158ac2b2a874daabf5d2e642d5f2fe6af6c762b942de622a2d853cda4e10f9823e963099959e76cf8363af44f7454f7c32f308f1d2ce16600e7823fe0df541d0ea6210f64a47bd7e0e642791458eabe36bd825478729693ca7c99d4edc6ac5bd0358430fa23a55c41037f1962e96e52a5c814793c64c3b4a8c41e1a946bb7ee98470e602ee87c6fc033f36630469007043e14a9cc70ead0ef05476defd1dcec1155a53c3b5ae981aa101494f96d633b76f00741fd30a4ef60d8dcd3716d497f4a03e9580fff0a94f159be164adc894580c7d2ffaf95cba6a8228898d3ef7c3782147c4f4db90146eb124cd5514ebc92db2356eb8014402341157525a4a150d69d3eebbaefda9e2491141612d1c0d01969aa7fff80fdf491cffd5ecc47c1c14f03eff5d8e9a11185eaa58065fe19b8995023b7dd1b5b6a7dfbf567fddbf6c314ca3ad389cc366188d759e7143ec2e7717e0725095c22d09bf7b51a7bbdf32405698b26af7bfd6b7faf3a551676d37bfdfda3193926d0fd5e1da3107e22e731228b902dd1a54e49b3d468c2610265d1bed1224056edc9942821540fab5c1647769a077c2c0d823ef351e22eae06f18a30782ec1c8e1fa718297d505b158110a670950f02c0af33500e6a89a9e3a074e653e6ff89780b180045a9fd293a20ef067c441ec2d8721676d9046d79085f87c1910eba6481804a9376eb964f53d8d4d61f2b7d9d00e429274aaf730ac1ab2cc76c7ee406922bb55a74d2cde9243e12c6e61ec0a09de420f27648d8d523bc3422d4935a8e0684b87b4207ce27552281ac78929c9e84ad4baf52b188887e8f8990707ba707a913981c87a93ecf513dfe331edcf20193db64bc9ef547fc0bed425de3c40d4418e917f7660352784b88fc01df7c5030eddca5ec375510fb78b4779dc83f665330887bd565ec61806d1a9e645f1060281516a4c1e27d57cbc53188da264a206df1862d833d69680f93390a196ce3d5af8c5881f70411bd97b44c677e704f01074f7b2165e660e5b7b430f3f7b7dd7c1a257d94159b1bbe3f18f96934fbc22e1a906a783174ca1d7a1a3b488f6c5bc74a7e1272115cf4247a1e4f072b269cb481eb05bea173e40003ff93e950eb37698033bcc6df2b9d427059721f20848f681edb6ef01a62bbd4ecf980a215575cff93d2211a00fa9a133c91b5b46e034c13e87318b18fd5685ca35eafcc57d4bbeea8357b1c102e1ad5c55ae92ac2dff907dacbd9f0d2942244c0eef57d6d8b3e4f1267b403796617af11a606ec9e099c3b3072c92ae62967c05539bfc85e0e161bed766bf5a5dac81c59457ac89f4d9935af2c21ccd26722ab211147f0c401548d881ff26693d96d7ea631ac0c751e72505c708c108418d5f0a7cca53a114d745bad9fb30aaf0b0d659f1839f6a1e563c9c31e3def4a88eabe932cd2ea48928198930c4f297b6d2d64078eac7bf1bd8b3e202bde53a87b565b2a114f3db8b615da4e12763d4d62ac634eb56e6347480f6bcd0ddd696d0baa5163cfec5b31e1d2fd09242f1d8c9c9f2ecb332ef0ed400be2543545045a4feb65cf7031aad7e92a22befe93eb099043e4022b2923017bbf43450cf610c54c1d6d2bcf98a7de28c6d8850f95023e96f7723762248acab84c7f5b682b2badd6c44be8942b7fc48edb16451385c3bb0c81108c1952ae51a46daf9ee331714385de2f0f11e141aacc438a92f9b9ab779d7ffd2913ba386666c8da92c4740733d1fae1d5dbfa389174dfe9a45bc719fbc7ed9ab8f872dad008fab70dbe5c8652813fc6faa36e97a7806a03ddb614fe88bc50f297814ea83d908b6dde4374ec667a9d87a92ec71c13e12e4f72415da10d9f792803439c12140eefc0596aa18dea78a25d657e9daf56c7633f39b51753deb126b5ccb92e0a50fffd3115b54f69b84493f3469c9b0f958d933777f6fd32093770ec8ac7fa7c39f4af8582d92595c16e4708190814b0fd1f1b0b7c012c104f822f6844376e53ec87b435aeb0aff1be23ba1c8d592754a39ffe584743b075239fc92861173ea51f3761e8fad28bd358351e91f80e685ae480e76710499d4a81db7a3849a3405528d2c4cbbae4159aeb80c359bdb9edc52c0d0ad9fc97b1c947df5da9f5af003a97d696aeb293cf42b93d325fc3e098814dd7c00abe78d5d8f64cde69b3d2d637285c56563bcad562e45615e84e4df52d4c34ca6fc31f86eee271fbc3b262a6f511733935ff7c8872bf81b3f51d3df78b8d31eaf6f7438ffeae70ab2dd896664f5fbaa57dcf276ce7e4aa1fb570105587861aa34adc5f35db4ea8b7a2ef384099fc7405cab7ef47d792cf07054411f6473da24fcc247d5504bc26d1d2db66467fe4b011d0af0b0c7e8e94c6027a32ae6977760a73e0b588eb5fae8e81644b1da811c4dcc6c3457a7ec238b35e4098f2e26e2b597a5febc85d614b80d2ae8b44d45c2bbaaf4cf5c49fa885fd839b8d4899dd4a5723c676e29113dad31bdee89fe63c1f579a8643d201947bf984c8d14ff9bd8979874f3a11717c0be3a2a17fff6ec11a44a627e45b2d5d5bba4cfdade4cd1fc0a06d81fb0dc98f8d519155516360fcec287c1605ca69cb4f701eade4ec5621e3a6410b4611e2138fd8b4c9800a0ecd42a5acf80974b610f42878d5babb15f619881bb814903e6f5a3e8f3ed9f135e8a0acb79366b5b675add6f32d23e9ff8045788f3bbf8432696663a552a9df5685f934b535de597c2dacb44500b72d286b7a67a45be02ef99cd1655559e56bb8cb59ba1a042db299dd1d8e957d6005c0be4822ef0b20fed270b89c4deff24b44d49c5e5fc12c7fc6b12b20ba0447552edad08f2d3ef28e4e8e312239da8cb5dcc5fa986803901ef25e2792c97f6b79fc52b3adefceccc24c03a6552c5e5d34c20dce8423975ac808ae311486d498a1320b6c7a02a54fea2bfd0bc1f2353b4b92515887cd6fa598c02424ba8dfd63c7afe6abba5ec34aae0238bb3f81428220d53bb5a9ef80d2c2dc0dce06dd1f05d526ca48ea2c4bcb7f13af173017f557ff485b779008ed2d5fad87915ce04f56a9a56b753b706b6bec48f34d9780a08b7c8599a613649a5aedc32e7827bb547df7b7b81fa71bf074884ea4b3288b28805d7a280f27f81dbf7688e7476d6c9e71f590ad101b3a5195ef9118ea11806a39d43d612e1b5ce31fa477b1493652b552ece5260d379348b66e271dc0e78aa7f7acd8205e3483eab97984c1918157e71cff537eb9a8f1ceeace6d577981e782d568f9f5d0911e80ddd718b2d14f9523b54ccce2d014463e62a63e640a163744054682fcb1fa47f4a53eeaf7b0a09a39b7044d20aa0275912d23c9a6b392ca3411112db5df7b710ec2d32ea55cea6d11c72858ac3d2749a0860495fcfa34c4035c3268e3eeb7c973b8c3aa299459cca0bd72c9423da9faf7609b6d9c4d79a867385428c4ae8790516093c8af2a0783bcf425a24d06015a8a334750f530760876e949b822524fea50f19621cf6569582a212e44b49a7360e94456c11fc310c756f985412a9965e522e05b8ba6c8b7fdfeea33ee8b3411d53391792c92c5a22e149b6cd3c284b828fb9612b65fe682fdd739e5d9e0abbd5c8fa66f216d2ff2795296175b7738c36c5cccfccb6b591043b3a0f3c23928f1acd3f8302dc95c991bb05394774423aed4d321f8ad615d36a9b78859c81de4841fae0694fdc4cb7ad5ca3eea3e94eb13c27285a61acd5bb46cccdd387dcdc2409c552084a0584d6e8632d430b7fc0040ae9cc6bb7a2e927a3c08b4024056e607c59f0e078eb2fe83c9ea2f03c137437b808bb7b14d6feac0cdc1c98f8bf63370f8889437d239448ac25c6b2250ecc8fae75d793796e3f70a33d7a2a3e6739d216ac39ed98d7296c48c5aa4c5fe69ecdc3c925518880b3053edf7a4f22e1d7e5ba4674fe49fa6716f7e2a9e9381e5cc63aadef14043ce1cbfdb5b62ed939027c5da6b3ea00de885dc79281d659ec32d2dd1038ab51b1a2c9f0badf84e415aad45d4a55853941c92fec119ba28c15169f66506c2a7d661507ed655a09da5ba5208ff07711c78b8c3627ba3ea97b1f804936d35bb1f14987be69070d431296fbeedcf8dded84b28676fe6a2c9d280956155523abd017a7907f5b41637a33b3dc103c4649dd93246089cb44ad4b46f34037d436a0e73a71ea8fee7017564c0f4d0ba70d5c7ebd19b1d32849bdd02c4ff7415a3bab9c9681efc006305bc47c006723101d1fc7dcd1ac108e5466fb5279a84273e2018d6ab3f1c2f1ae9d9ea0607b276c1632e228e1d8d0e402212c0bfbfa60b4fb481ac84163443758981f0e9564f46994863d159a3627fcb1f66eb4b0be871ec7bf7385a107391fd771c355d970416591335a5f2933e5f34694f16eac800e087b58d45627a9aeafb0e0e1b0388b6d13fc76df247d6d07d40c3030e54fca41ec2a3f33db7d10d25bf8e0e8ea4366ad9d4186d9b2f1ca7719d3ebdbfff7a901a575ab84237480f9ded5b3dcc11f0a41f19162947584ca25f6ea8ee09dc85eb223cda6655d85964a1c134c4920d5ae1aaea8d4217bad2754f85ce28af27f6c1a2115d922e42fd7d98203d2477e643ebfb481100c53de531e401547bf9e989417a555d2364d26718759b194d19110b23ae490f5cb9d84afbe8193d93cef5ef6c1ee86255b8c1708eac97949ce86f4c88b0f2a96109e4c69301a6d8fabc7afe90aaba05db698c67668d727105b42cc6386c58fe8d23c02fa8c82dd91d999b2e5c2161ca9f280732e4c46217a03353cc259499c6141fcf525ea14731042b50bb5f3f791faee17511c47a2a8072f1b3c5960ba1dec7e66e29ddc09f8b2bfba71cceb49e14f356a01d5444022db0d63ce92522c92805ba47efc4566e5ac3b60a839df1da4f0bc89a6837accbe40c9c3d3bdd9efd3a2354778c9b9cd80169767e989d74ed1accaa8c2a7c0f907d0ee146ed3e7a197cc9fdea0b984c7140195781870c181b647188519613b86a2c3e7491d43fd6f907acc727b164f2a9a4fa75a468f17d7689f9ba9bb32aa984ec3ce3de8277362b61ea3650fbaf379d21a696ef91eb8619030c380505b1eae08310798ec4aa20c6920434a80783b9025ff591472d8da432e569983c1786505ca1d6e1918f0976f32cc4a9109fa9249517de51da1217fadc62a622641399a25b27a02b623395662b31458cb4a8337e66cf1fe7c97df8392e30f8a177eb23bb1cfacdabd57906e1112266447ac927f98a602e79a97a3aaa35519253ee0a08c0368fa60be358b66ca6f851fdb3fa81be51a48f4c040e9ef0c472474b959576938e192bf963cb90ea885c8f2c65b6b59c0e40c4d44662090b7847c3d1ea17b3a8063f94e83fca4d0915da6c15682d5c468e6dbd11860368c93b83d118453510027e86b9fb10e8b2b42b3cd540a014cbbb08a597364f988484d3c68961b6e313aa8e04b6a66f9c0370f78596fd11ffe169193b9e0df86a025e8a60a84ca5b5c2bbade37a44278a02503fa41e57024044ecac6e923c5480a917808e0b4ec358179f194e7eebbd494b1fdd4c8c6b44dfc89ca866178a120d7f1157892d19a0c6e1c2e7e371972af1918ae72edf8b4a6d962fc437bb8cfe21c5448e48a895cec086b88e8ac763d25455cf860364cbc266b7055b3e23c04a0eb8eed91f9f07cdb5f024c5eb3aeedfda2dabb350e759f8dac2e72e6284f794cb415c6be2e4670fc4005c94dec109c22fd4da76e7d2ce05614e7a25f0af87fa47ba1731859a70ec4c89aac3d4f8ddd8bb4eb0969450b61f1041a3efa55db3fd079d1dd049cf88832a4fa8fe41026b70722905f39d4992ac8d508ef8141d09b4ce60a33367dc414e61f3d37200bf363d34126c498d5b8818d265aa1acb250b7eb866b0928abf88c39a5b99965103db19340338da06df8edf8f68ce3ad0b6cc9fb1fc57bd78927b708756669d9ee012fa8f2a14277550fdb2af84b1d5cd64b0ba020fb79dc73f8c6ae8b6b70f4dd3a3da7d7b4c45a5fc847cea46fe5c06484870d819cf18eae308481aaaa3c60fbec138dedd65276cea3df3517d203b1083ae975849f07870ac9caa6b02cb0ffe0cd9b1cb7b7f6039ff1062f082362dbfeb0c4476b2863e9e2eb2d93eafa4d1a70464b00caf211788abcb00a4331539d0904a5ae08892ab0d3bdb296a375b5763573cac19e0f72e0b4720ecbdccac2aac20e231647276c9c4b992577819223d6d6c0dd0eb529f5b4c97402836351cb5a6a2d04b7bf19c81258e038b30ad0e2c0740dbf560ac43be967ee2bdf329471a9c634d8832b6ffc85d5544fa73aa666a77e2c318fee42041db9402b2cfe06d8be396a6348e38484cd2f4b453ead120a440e8509522dbccd2c67539e56ddd037866b465a71379fb5a15ae1034945af49fabfa7d3106a1dc6efc9e244cf9fce76777a64f35490da61eb76654d45602583485fadfaf4a773cd329872e999db57b9876168f98b50cfe6d27fe7892c731d4d67897abb0ce124130c2d44bfb5632c4125aa098e929a16efdf64349e40fb05e4ccb4b9c3a52c29ec0003ab760d20bc6b3bb98f12257e1a6248a5d86462a01abfcc8d62be6e21991b9bfd5b4340204ed106b1b9b1c6e4e1ce0fc69679b42f9b6d6a440e4ee4d46a9c281bef6c413518d31941f809bb2fc1dc38e8c3ef0af5750636e98916bd5fb46455f7329d0b74d1c4a95c63d4c159d8b3577310b11dc253fa7cacd3fe453b82c3c54046c6e5626f8d477d21aec0994e08536bb90ed276e1a75d92ab15b28201b8a952b3987c21b6d3d84f4fbb4ab0a9cc0019a54e513fbb6bcb0e7b8ba750bf8b24b8a2dfb0febd0b91823f62de0b8817ae4bbc6947da8a8bed3813fefe8c55c1044efd920f41200a35769011a201a42402624429724ac86b778c180050e7ee33acd799985a0b6b3f1b60c04c4b1da0c354d34f28273d433a0857aa383f8e4fee4a546d008ef15c32025c3c2b68426da255fc4d3f54bfcb8f282af090a1d68e80ee0f1bde6d47382b89efa084223ab0df0d4867b70c415fe64bd4fac160bdfe2d3f80902bf28def09f9968ef2d0e6efad1d87e5df20270fed1c24d4c2ecedb46260c687d8dbe89562f728e2106bdb093d749d8d02721f0f61fd8d9cdd12787554c47e41b3ae171da34619dfdc27c8c3750cd9cafab818af8668640acc2513445c7ff20461fe99f67569103d535f48442f22b3724d1084ce10b432fdb3ff6f11629a7d46d9251cf29c6314a815a932c79df27430575728b4303e1a4607e1af1a06f9ba4a8dad6e9cbd05d100085e19cfbf05dc6734af5c28cdc534bc721c2a20bb966672d1e0175da7f3340096bec9d23db096c4369eef445c3a06662b2fba226ffdceccf0fa5583b601f05a82eb4d86c5566723045dda4d9ca02cd0a48d2241ad24143aa84af9f7bd1ef522c81bf3cc8beb30e6fcb26a9dda47346dd0f9c3f73b8fc7c163f42e6b42c6c950e0cbbd25716098c0f9590ed2d4c6a90ffbc205c642f09fabdeb5738d2b7996af1bc39e7312a7a24727fc616ff8b0b825fa43579f30767c13470c3d87fdd4b02fad9f3ee2393a29f1aa6734d221f6788a602bc3f13c070bf2b26ecbd4666cc66f0fb507ca09a1ec38300cf5fe712e801448514ff491948b5658fbfe9aa70aafe11ee5aba2803dd60990c52aec3e571131bacb30b6823c99e2d834e8c14e2b0a6a9d7be7e368a97f97225a8d1d996d3fbc52445ee7410ecf1fd3e2811b12ee022bb6ef24b242b4400a25f924a10bb0727bed306aa9a09f7c8d3d5ce25c680b086625474d15cbedb58835a71db6a92496767f8e08962c2a5c89304e594255ca0348f15b6ca9a3cbee0b9aafa611380bcab84a64f1c77dc8b73fb08c526a7f00afe8fe3e38533a35d5130655b1383e59c60506f7cdbf6cc612227670ebdceedab8aab28da7f9a6fc1bac36086166d9aac413f30852deb233a78933a7d53fb8ec7653449aa935db98f03d6da57f50e21d867d2aac4932662f3175df7dce8c195796f41335d68616abcfeff781aec7b8d6286d06ee0c4b548374caa26988520598d7d89179fb57a7849e87e2d519813edfc726822dc0dd0a102343f13855f89f62b6b3ef79afd0aa84c19aa25f428fdaf6b7141447fefdf8434d6da1d9f5ad57b96e27056e4b0e4e42f9f950a7a1061950d20bbc7e51ed464b993b0167198e46bd5225f4e88adcfc8ed6cdf1f0accded53d9b05782e8063508c2db6e72d1cf87f4e8418997d231b41ff53dd88f33d63b0bf3ed79a27269c88e089e39fcac38be0250840044e69df349d6991202c8075b593e472d270bd4ecc0c3baba18ec5b8393573aafff6823c9e138616231ad687223d76b9ea6101f7ea57a92116b0051cc71b3fb6ab3f487b631eb71020d90db6c5ecccef554636830dd0f5d9ef70cffcf8fc3da534ad6eb4360cd599733ba541365fb33b48ff45dace901729f304bf67df4738140aefe3174bf8bc7cf5ff5da582593ea01b1ba6bf49d86913c9dabd4fb896590c2532345accfedc1ad72d2739ee6282a020c3ce5d7ea45579ba187ac58f67d38c7511d18e634abeda890a79edf85a07046515954131400ef1cd1d8707cfb8ff7df9a54ec16e99fffe652054ea2c1d0672bce2f2ddeb51151cebfe6b81755aec42f1b18fd8b4c028bee6af2f58a28070be2eb24aa9b6107a1fd962a7c5f24c8eb6884939ad27fffdd6c00499ee2a3ced4f914c56b7266ec04847aabf12fdf524a9ccfaa191385778680114e2b9c44d6d539d8654ee5d5b0d6b5d9283ae234dc5ee1793e27ba48ad762980e108f8ff7306578b4f52ca262f86b8ae5bad75e9ae2c1c21d003e4b41f04fa2fd867fe1cf6fe0181671e80079b10024eb1f5ad5847efa04dbeca34be649d1bbb843dc48750b2382a669c445c8a4a16519f3fc7f0f0edcd7025f6498ad8afaf4424f6a497c2ccac94a01c582119aa856e366c8f44f4d6609f01f3888d742a5c3ee2dbfb1798921af95205031d9500bd9591749651911b9401cd05d1e7fcbff62aa6303735be4065b804f5b5eee89842e9644c614bc61ce64af796eee5f6b97cf2ef15d327189321c6e66f0f9cde749ad5d656bec215caad784d101288b96544f705a32fe7f116131e627184d80172d9a3b52c5f208e56b9a2c5c3f2ff6178ad6c69e90208152da6245debfb0bced4db153bf44f9e3077c12614193b835df028f4b30a6b8cd2483f12b0353f37858c12cac4c9cbd7e3fcea0523110fecb3313158d0c11c495e51fde0fe3c7755744903088bbff2d9f611442d3f1371e64a06f5ce3c7fa8467f5d793581f30859f0a06221cec0f3dc1db575f55905bea009ae80001899e52247e5ac5551c98d69920b8758a032b7adbeefe5da57705e6742c031723959f928c9a629bc83402c1f7059cc626d93a88b4e73bf51b5bd67a083df333502336de4e43e2f38fa062df9670df275e93b1b174357248001e541bcccc671fa1f347b4311d29e4e6cbe5db3f8617c8305cdc4b67963b9b395d2d7e5cb201bc89718f4531e51c6b2cae5948e367772718acf76e58cb8d4344c9034e213b7a17d0953da38eb578bc1f6928251cec3e65fd821133258c1063424b815880c3db6bb4b22da10388ba6a361243e574bdcf51cb762549505944210bb373132290eb75cfe41b97d711fdb2c07c3055baf3bd2fb4a053d90b28abc337776391a2178da908df84734e230071b66a4176cee419e7c67f6d7cdbbc1501139b9168cf181096b2ec81ed25f9c751eadd77d627682a5909cb33b616d480c66528522294bd47ace300751c72721728073477c8593fa9529cd59080ee93f62199743c7e198d5dfde23da22b47a3f540637e7d3adb507af26afb6b4b476b58954140efcef1b499145407ccd27d049509f0e3be0f061ce76c308eb2d453980917473197e89775a92780bb949c0ca544233a72a1019929ab41ee4eb5c6b69fd3724e21bde3f1619c020cacbf11a2d6a61c2475859227dd09fad9f8e435a3a962d4c381685721b25a40c8310ce4ca7d41d159b5ada91e269fffc22f88dc52b4a16716b705adb901bd31908b8aeb82a273b2c4b80fd5d140a47e7a7e9a859a6eb6db365c3df3751d73f397816a16b8a302c9b591cca28385e1f166965d4ce46fef2716ca2c6d39a64f7a784142196aab795fc4ed03ce1e22fee66e6429d99a27985a7925a8cefe6dd545808c890b8897c1090825bc794842c563293b908f408696cfb047eaf6f1667bd2dff610e179014b686e173ecf9ce538ced9062526f6e9aa028f3d20ab9a9025b76a8950369eeb6ab0300169a55123a570c62a174047f35a3c4423e5e57924ff52fbf6269189a1eac6297889566b08a00c6b280f7e943b6bf644a6e53da8c9a7faad14eb72b4a7512b5d2d91fff3ff966e422ebfb9d7c3f61376a34065f4476384cbea40d40b0a580ef845ba9c0db28235f7cd2d6da657c97fd98b02f1226655e2b13e4bbb619e0bd7014b5a10cca67a11f50b9956fd28a57fb1819984b696456f1b97d2f6727f601591793b7b95f14fb27de71314d733a8090b3551c3fd4a542bd7199cfdbc384cfc7d1043ca27d5f58dddf6d904ea19146494b5be66904b41b5342b859928937ae9f1832679f11758b1e0aab2f006dcfd80275adaedf1561a306430843fe6f192296faef88e45324d8915048d1cfff38447d18ee6606d78b7e5b033e735f773ceddfcfa5c4dfdc09fce355dae50d3c2f0ec9ce1b5ddf8eb45184cd8878e29d174c5734997be6911a2c4e7ef216486f08794cad3f855567775321db73ed62f55799107dc003fa6f44e455d9db967229fb6fa6349c4249f053f67ac78e30d01ebfe26cc2d1731a1c93276e2e55547fa126e3a72883e385d85bedcc618ac70ffffe2fc2659cd1ab56311a6ea1dda48b5ec9eee7b1a588b6e15168faeded62c80c8c57ec2addcbd687a94a37adb229dfd4e6b57a5ab3313fa4c4cb2eff75003c7e46711906a787e7f101bea23e3db47eb0775978bd41a0181e146b6772da9b976df7a6819fa86c47a9081ef42b41d9438306cf68dd6bac919204ced18a16e95a284110171d2ddaec86e436f9c3ca9ab4fea36ed56bcdaf2bd0057f0659ba94f746d8f2558d8670cf045d17d56fc5fc70c5aade68950c90aa1994d5b49287178f4534491202dd82e3dbb4765cba88a7a5267051e5a71e9f2fd0090301079e94e1f1e438cd23f41da8af26cce135976909dc977c18d7340d90463b195947be1d7d1fa2adfd4c201ce7747b1263765364113500cdb99e710958817343fb6a5dccaa918fd50e594ec25b00978b48643c8462651b4b7dfd1d75d95be45ea7eb46ca6fa2dd189d8b70205eab1eb9f1f32aae79a999b6741e33a732b2504744512bea85f0abd248c068d9de1b0e3924b9caa2e8fc452df9bd69a73220da589920fe9962d89e6c9dd1b548020831e2cb4ae8adb035db68d583f7518bcc075462e49c56d3c20f0b026cff10099e12cae5ae8b56dd284563dfae4635914e281808cc01d9420eea7b56adb50e95e1136764a3ec37cf8249b3a233996b8d4dccabb89e550a969e2f24481c8e41f36291edbbf7599a9501d7eb1b299c2ab2fb9a0c0eafd42f9455f5618fc5c8509897de7c2c46bde2041561c7034e46e2c2edb3a9b258be0ad7486db112d3384cfbc02484f0f190870cdb06b4b5245029ec0c37000f49b477cdbee0226077e5d1fed089936350f21852b5dc6a5ed0cbe1f5ffc42d200ea19205b22d8356b64bf57ae2e31bf92b274a85f5a1d58bf115dfc9e985d343c2d96320e70d6f162d3c04456820501b377fd8668fc75192e76cb61c8eb6461081cd611912f0a8cd163a0fee0b2920090eba33e96bb03dd99ad81627312f39e39f1ef012b4d6f1086b0f1a0dfb4e57ff36e97774ac147fbb3ce453265dc2e24cb8d772ffd5fc8285a922d7de6d919c2112c71c406e0c246bdaa06a2a2a52a634a5c3bcaea5f80880f9e1d4105f9116af8a7b4b233a77d206a2fe2a064923cf8f115f1cf1a43fa6319e75a1d4492c5ba0d8b54cc129efa2ea740209806143b36ff98e13cb701c0ffdacf520ce6a3a89e92dc21d1d0d162ae852aa274b1f3c446ecd1f993ea9be3f51ae8084422ff9b063bcf88989eef9fffef148ff25f33073ae10c560491b25f9aef8778bca8c9a5a895cef236139d9a447478546d15375da45915d95b01ba145c480f490a34bc5b741a6d9455928133c2bbc63fc7e8ec44050e9a01245c07dff1791c23e8b87e7675c7df0562ff8d7f7129b869720d83d8e542e259afc5dd69e48d5cbd22e61a81ce7581ba6a0ab5a2d1f646e8a0c818716a9f750f5c0d3ead13afb56d20fe4c92e00aa69bdf834a342949635919034bf6601c1f4404425c4d4a0d9c8fa65418f3ebbf71138dddc53f84b8aa9d50b48d0df475b0992f5642e39e56d98fea6ea5f240e8d77614194207d2078303a72a89b929db5c3e79f545bf1b8d4109af7501f5af0ee53a39c4d8b7dfa03ec14099aaedef719709eec419f68c2eebe157502d29aeca7a9c14c87325de3228a57c562ed5e118d4da4603a2e3788407bed0fe0b470d8f826b0fcbbb5b0844cdb51d50e2261a986af035bd6df6070a95943abdf4131d875510bb9327890891c6241d52ac862b43c1115517641fd93c31cdae5b0b444898bea49ed95180eb595e8196537936d8189e131dc80424f0d20168a2678845b25f8ff7677ef82bfcbd357c3b29f1b88b625828a44d2180749750fa30f092f6784fca8e1106e2b2809e8bbf9d03dad81749d11553b8699e2eff13764976bced899998894bccd9663844d1fd64d2ada766445a5d7f9383ff1432cd5f1cac8f0a300f7257921b75995ca13b4b1c70ca024bc64de37106abfd076fea652d30715db5eb6376e5f6fa7585ee90cbda293e868e16d016dbde7705103d8100e1b9d67b4ac51f4f12f378d013ab90d798998e5dc35d199985d31ee97476547d5f8d9d665419013ddabb57c145765a690790ccf4fa6138ec2c698b2a69598ae463d8803a8fb50f78002b51135ff5e5f3daff6f61d251e8b998a166eef1708fecf7c1a6c9ad58ca6cde8ebca0659dab87973d005dc77a31f1ff66a5633da8ff8b58651d36182052641cf3e09818e6cf197e2f60d208367ea60147e75bdf6152bdcd2b18d6ad2e8cd7b71b2325b2b2a2c6ddeef5f7b4dbe4b29eb0d9c14a3e099dc872e7a51af104c8ad5bd0d380536db5538f10b07d32d28abff0275af2fe2bbda08e6a85f6544d66ea85c46fbc06c11722e778ecb6582b14d46630bbb79bae5eb516bd80ac45ed40b5aebdb941619d60e1e9848715fa10816ff758c47a318442efe61b7c1dabf89de0925e99c4448b26ec94ff4064e77a88314f50a9150fa8d81d72ed68cccd159dcfe1373cf2c33671660dd1c22d69a701d90624c62b178e2c64def446bc6f8358fb981ef3544f9ae648db85fb06157667c640e95739466e2456eea8ed80f54b970993bec46bfb6fb7000c1ceb301eda4e72cdd29601154d9d0beea70d7cd6682b221ff33449e2bbbf5f8fefbc5461b7aa73e1da32ae8b3ea97d7f7305aca42867047909c36b73ef171e3cdb2b9ca4e8f1b15d36b2a40e0a38f3db20852ece4921019985a33900b58acfd9e594daadd74f2ce980655afd61a2df13185e93ee20eb76005ad9ea73fa68f0c7e66bd7b6482d03773e47809409e625fab79e18b30961b6d46ffc6debb0827f215d15acfb4fec4953c4665d26983b21ff6d22a6a146eb126c0b256382c8ffe7e2a5a3c9794b6eee4d3211d3ada6d2718397d86f5a7b9bf0c53e0d87d583fe1aa19ca7386515c1ffbd0ad0c69d07daa8ec95d4f10c2f72f3a86665327b275d0ac270ab1cfc3a65309dfe066625d3f35832c87f62539bfce6133c3fafb8ad2ee9e37fda5697a87ae6de669f730890ac33004806992bc6ccfc1d32404d135e41363f24ff9b5fab44f2e0dd2ccc60f3d4725c1bc137e38534c63fd8833c0e25f1f13c26f0ea4fd8cccdec0b5a0ec0430f54df3c01b7822e993a2a7cecbe13582840c541f52e260095ba7a7bddb4bfc852c3104a672a27b959954bf4ddc2e88b6268cd3279af426958a2ce7d2cafb135d8007e8a7846ccfa4810eaa93a114c5ea876062e86f84a0909c7049c664fb78b0660c9e7a459a7a43ca7188d9fc53813fd4e2369accaf443cf7c5e7dffef5cf263a6b970c016b032b77fd04d3ce070ba21972495c625105fb9918191ef3ff9e74ad7845765ab76cdbcf8fb5fbc3a145c0be1dd03fd4ff1205d712975ddaf526f6837c07e566d1b0f2bbf52626e5f8fa69db0bba8f689e90a7645f30477e3e39001907916077a83750592f599096a4e89717f0f9d3f02d57cc6cfa1d8ee97b601343e880dbda550299336e02f38da1f63d1e1d2ef4deb0ded08b9ab10e02a4f57b9ab754118258ae4730dbeaf499a82030d6ff595127a5a0981f279f2670f4c197954e851d82fb65c227652bcec5c1db05b46c9e0241b73e67f5004dcffa784cce536e3cb83fe85c364275d9e4957e8fc4964db5d6ce58f904d067bf6284885f919a0a1f566dfbc6d3d7f9a31b9324b909b77ed4baf1d446c5b65fe93652adcec2d6fdd1f29db3a5fe2e93da900161e2515e8c765d9f9936abfe0af3b65b8f1948ad0854d543a0a6882afa215ded61d9d1bcf93ccb8e2fc535182618c5828d5e6694658c9d4aba4164f7db712063606be852cbf41ee0bbbf062a6c8268ea7ac0d7331a35ff0bbdd823faab8962f265bccb1e6127d97dad9defa1c29b7185507b0cb03db9b150270608e1095e9a99074bcac1d1c18980228efc7b1f1739afaa07e6204f10a9544666af9e3f65deafd64605e717c33880e97d04957d64d7b99c6a9be43f6e40e63e2dde987633593c348130f56a34e340660586ac7e952b3810afa7acb38f6f780b583d826e7d1f02b91e920c773a0b5bd7c8f2a7676adf3c777bc0ab37c4f7ef02d6a22882ed8a797dd53f80c4005ec5c629b72429531d02d7a45c05e0a8aa3c25fab6e098bef83493d265adfd32a949ec1c2869c61b99113c0cf2bc54be0f0b9b8799fbb100888df4d9014daee4330d87258a47dd8502745f6130d3ae49b1809d6e22d66535dba871b8478eb24f8d4ec465ac4f70fed492baba7f79fbc359eaa43edee0cea9177eeb5591b1aab6aa4fff484e170b4caafa4e6231a2b6800d8c0d2d1fc38542ad87594ca51ad0cb2e2626c53f687bbf2ef7bad71868562eb75694c840f110e854a6b4f2868fd4f6a92aa7414ec1d8f402e3df6bf1ee8b48877f17cc910a30862fd98debfd26908a88be97b635c1567af1856a65b32838f5cb7bda433ace2ef5883dfb74c9559990299386f8926bf71763fc65319e60978689e2d4712b53d864cb7ae3cfe4388dca4cefac2b619e6fd54edcdd7083919e10f84f1e5040bb4a9a591ee3fb875fd853893918deb75a51f9f00299ab26f128ff9be54f881808261b08c3ac8f679dc63f4deb5d6186065b86f92a74f39bea9a97833323214adacc0c20c32bbede876fd198b77e53d22f4415a3464c53cb01e499fcd2d5dc6e78c51fd193b9f5bb52f1cdf7e28fa537b1171df1bfe831905f2a8e7c76e43952202582ecf0948afd554c3c35b6e9b29317b7e3f25fad8d6738e345d363e71b5d6261d8b122e406ab1bf9d2084cdaae11c06d72a513a16f82e5676ac44f4769d0a0c010748666a0453fc98b0de52e6cd549cbf5044014beeb0d21d95506784246b857951b23de45f54c8e7fa78f3d400f28d277bd96c8f2d71a00cc57e40fb251a36310104390cc3d64a02c3e0b74e04218a703d39a40e54f594d27ab83d3637dc5dbdaad0f55f5d53d76bd70ab9f1722eafafc0be222cae9faa245019ed8523d83ef95663c2a64efae08954d8509426486a10576f8b157ba47f37f118f294f5a4d133fe7fa65b78397289b140f07bba4f458ae7d31745a466dee4fb089b94f5d92247bb89d9c11360a7e8d59bb8eff57a9b35736897c0082feac687ecf7eaae561c697ad5db58489a657f7cffccd6f9de4067dccf65a29019f1a1bebb80bab7de0a1394a17a3a144eae263b9ce1c79ac88b56d522207eb78391550c5f93a991b1081ad66e715fb5f118b0a3ad8ce6eba83538526fbf2d34a6186bc05850de49cf51cffd22a6253a745bf4cccf56b2f8686df71203b65b2a2f83f242ea1b72a60024bf63d71232bddff876d63602ec0cca5f54bcd42c3016f8f628cffcf0b90d859e858f5c7194026cac606d04d7a2eb5cbbc76fb2866f29ce11bf8ada2a1170e0bc652a55ca3aa69939cfdc8a97580c6367e95fbd9d7d21ba03746d3c71271b1c1989ca0660047ba21fc355426570885e8fba696b6178412d6454afa9e0877dcf6bd955f0a11d51edba9730f70a11b6fd6a01e006e8f04a8542834d7fa3ea5bb08b4e1fd0f41b8033864fda2a08ab03b6461e7854f339cd3dd7dcb2ab60931a0bc58f3076aed45a42f6d3e66f38d70bb579fc2dbf3584f94753dff563f5969e525b634169b5044d8da8d449acb5a0ddfb598cbae56999798367461992909e0d50b9655bef840d3020d218d13809c4908e76ef79ed6eb16924c39c48ef4faa6b58c659dadf24db8cd8a2634d99340a0591fc7156efd0a9d237188480505ce0fc330db57b2c9b5793777942f3cbd7aca616ebdfe0e17973fb78b985e1d3a42491ad3845ba197b315d0bf2e42ee2bf9967a0bf35023484601da5d826eb8fe126059e336efe0bdf31cd5fd53373a975b1b73e58769c99e6e980d707080b1df169500b62cd9f3b8e6eccec567958ced30bb6f63e1af7a7dbe997dbb7a9d05cde70fe76ead60d7bfaf8d7fa9401d54cd99fd84c9d21dc4a18b05f0440211a514d6aa42fcd7001f3fdd042df8267b3b05cb010689a629bd9a7447e9aa93de9188fe0c440eebcc3a123cf48e997e4ba528f4c918a46bc34b6ffedcf6d647a3353ddd269009c77cdc8e955ef709df0c534474e7d6b802f1dc865dd41d386081f68962dbee6f02f97e52d61e5ca0c58f1caf84cfc08e4357aed91e75f303edf62d95f7b223b563f623db3417d0a9aa85c66942ea4dc2c236381840c4fab336f6b62fe0394ef64da74e827bd000a195410056464d1429e9d7ff46dcd5708595c30594f6f59d4b1ec8e992cb8266b1b9d966233df3746e4e4bd9007a701aa18fcb7b508d35f3537df5d2843ae5082795db8ec454e668ae60894c664cbf40377bb25b9b22fda663f2e006894b45468525f1bab617e0274a90a39405f7bcc0c425e046f2e0b2d5cfdd481d57e81eb8d0bf39ac6ad3ec55f42524c8e0526200acf5bed4942b67263f1ecc20ea24d83e2cecff26336dc90b86d0019940cbbdb685cc0299eb58d05ea870613972901b525fe24235f6223f1fd750bcb14856ab8452bae858e250fd8c696fe1383136eb475f38a0ff5d56ebc04c7e23f859125f9b7aeb32870142f1c43567cfb78d384c690762dcc7405954157732f1409925f204e6c2bfbd7966fe32e710a74d8b511970708f23f5353a705a4bbb3b0413593c64f7d290d893c324a62771b7d7459fa51225832737affd202da7e37e52c6dfddd18f464ac13e07574b5a51e0cdf7fadc0120d6de8612a0e4996249658725ef63d0ce7355b0a2dab8d60f6372266cee129d7f90ccd75bb63bbc63f33132b94e9211d10b4dd409bbf981a6392af50317a804c1e6b85529a0b100fa6f022cc10c63f69bc08b5f4f00007ebf218036fdfbf6e352b4587ea5d128a50a020fa35770e89a5cd3a98ef7643e6cf5f1ee944267a839556641fd52a587dabaea0d1d3a5404dccf47b3c4281cdc264b554ba1a497660705b0588e5146b080d058e945e10089b6071f761557eaf296529f912df3184a51462369f324e529b39489a23be36ecc37b189dfdcfce2579ba1ab292cdd34a6ee500bdee93da99809e314ea95273d956118c11eaa8b8088633d4786ff4d02b67b1b8cda492fd7c6f4cba5f5fabb31da9b94e04cfd47277bc87e9d732d0b339f39ec866d8a7d85e924e9e519379852450140e78dba81460872ae6be1bccb18836db25392a29c1823280c578da72406cca4d2a7ca0bdbe82eaa03d974ed511ee6df35b31544491479844d9b89f3732df3dd8f2b4f80ec0566e4d3551365739f6a47d7aea73dab42eb8872633cee9b3755ebd4a598dd94e49092b8532149574d84309cea926928df97f7762d5aa5aaf5f90aae243103835f26e92f257f65a97492c5c5e362dd9f4cd3e306e9ea2e5678a3af1accbba8f5f159280e6b2cc8d029b7fb88a3c4ad74639a1cfb1db5443f7103a7a3bfd34c549e1fc02e8cd274937b9a000c546dfc9b43d00ea81c3d705fa452263d196cdf28de4e47cb5ff8b11bce7b2fe0168f28680c3b1ff8f2360055fb557f6bdd8e05f166c7dff8a5cdd025ecc7a52205ced1a1f99a08811278ebfbd6efd2eeabcd3b56be74c937867aa9c5a1b92f140f31cb6c71b03361d3eea9b222e54059cb58f6d5b4f59cfccd8b4157c907b50764aa85667195c29450c7eb9cdf510ecd2a9bd504d7d47ec7f0126afb3fd60a64d5b8d7dd2e35bc192f8b8270c8b94abdc61d973f78aa86bd93b6d2de53365ffca3bf77133f8ed3f6b962f77cf7c74e94385e887bb6782e4b5e14429beb44c0dd5085b536b78c457e119a3fb4a4e7a09f61c30bd1742e0037e90eea36de76a3cbd52123fb4229a204a799431648062bd727e0c1ca0539d18397c84a92ff2ec079944b92b0d1a740f91f5b763a313046a48ec6c765cb9f9e7e91c7e1b1dedc73da7241dad29d72af9475ea4a7e37077ea07150a3db21bb1aed46fe8afce8773ab9e8c68f854954caadb55f72723dec3f2a738025e276f95c01b3675a8e0102ea49c03a96487ef68e3770504374f75e63a2798ee93b5b2c7251be9418b0fda4d9c12cd597dc59a81e0c2c69197796d270faa18e29288b233dcee377217c2afd6f62d85ec0e23ea465d2685ca71986d62f1814a7986418c8121c428b4e8f4b5558177e79492a8038638bbd342fa57e2711f3f95cc3a410e1b4cf27305ded1021042524c3953f17683481d4743f58cffc857deb9602d3bdfb14c7df8db4f1afc9b5d2fa5245e2892f1f1dd29de521481945d30927757e26ad4d0501f5f1a297e8f4ddf6920852386c5382e4e5197487a60f3e05778556713183857d26146a364f0060b1eeb16e67c620b042be382acf49429656f277fe6730fdee4a9ecbb98ba1263f1bbd8b0ea8ecef5f0c8c9e7be40ba183a7631df0dc7e66d14d708543fae337b693a353fa351f98bcbd4e1182e46c4cdfb43197572dd32b8f457d8649412200c1690f520ba389f349628a3ad02f4b2ae0ed0ef90bebfeadab50e789fbfbee348ab7d57efef52a22127f81a5adb27d62d99c41cc81c1f208708130c0c0dbc7a77008b4e36ba1118394e617a4ce4898c35527f45b24cbf373e6d3a1ea272e3d1dea2d80f05b1c205ec37431a81e3157838162713f56f27f04cd68824561710b99d5a1ea0bda8bc840f52b6e96140ed9c5f236d450114d106edfc2595953279dd9ba50084529c753e227f836afa4b5555ad6408d4adead623bd159d2d2c1f531ce555fbaa0dc0b9e88bbe99319ce4e40cf07b1f3613879aaacd469b9063c74e6fe40644226f7c0f6196ecff6bc4b519c8a3396f489a95121ce3865d185ac3e2aaa6dc31e9fa17149fb8e5227f482ef946c1a199d99ac458cd8babd4090681bc1eb1643ffce5fb1915c2f68366d9c1c624ebf09dc610c0775fc354d9b7649a00a4524e78e038f33ea964aee3ce39689c77c5152e55d7248ebd814bd33827cd364280dbfddc7d4113c48cb0e9248bd35175122624b6a2fccf8af56d58421cfa3923adadc3fcc18b00405f775a56454a99479a0fe3357062be24e2d1ce214ae9fbafd6c605cfe81a9aec6cef08234c3c0a4e42d2af0d2a13a5f0d627879c26582a339f9bc50f11a734028248e98029c98168cbd13e2e5fe0b8bb7b47a43cba70e36b04336cab6dbc0453856a134ecd2c44fb34f712abf08c8d55ce97d1121403ca0df27e7b257dc5cf8d1e55b2a86c588f2fef633e5aeb125c36b4cba9e0038cd4fb0c836f6716face0f7cc05bb1bc786fa28713e3453dfdee6cbed21114a469e62c60233bd498904b173de48836ffeb9994ef8fb4514294f9fe16ad3e040d77632142e55943df56268865b774e1de244ae96ca971e89f267feda53107aa1c28cf5e30b62cd15ba528f7cb5e403ee8028e1fd08cbfe5b4f5d918d0cc2810400cf4e49169d1c65e1586d3b20e239eacfc734a595479b1ed91478ab453826d07d5736087523f094056f9a9ef2975a729ff12d97c32b30dcb14e33ca1a77c9a87d2a97fa2f2cb82f38074e26f6f4f240c1f8fe92c3e61272b29a55528805bb23ebdf20314f12f7fd9696fd2ce2b1bbecd9ed11ee0991c624c6724e4685f9ed2185c83cfdc2043865ca55a140a422b6481a3dee43a8dc7085f64f220bffe5945bcff4727d8b0cbe5af84f40333630ca69e1248b6f9fdf68ced5249b79a80997f68e5888476ba4c2c2626d89f3202d82ab90a19f2813a3815546e13414e800d29a297e77802d9665742eb7117cd909c25dc6dc929339b72b901950f8ee9ee858acf07aa52b80f8bc2ea8aad1f528958ab7dc4f805912ab5108c8e5b9115d3b367e939659cf989ad10ba36657eb41b17dacff137aba835d23bfd0029123e562182345b6592ec3e63ba108262cdcaa0352bf093fe7d9d87640090a0f5664984556bdc5be20464c546e2ebc6c5e6495e68b92520513f351c10995e423a48edd361b687f471cbda6d0eab28b5225b95ade12bdf6dee17b21e6666b17776793540b7d6effe7a8fe270ccc6bb8766a0a613f4e5eb675ada11ea94fba739cd138754db4e70919ff6384f0ee2a433cb69161b9bee35bac7d7ba7350966cc94a43c3cbe5504d0b6b74c94509511fa78e59ca3fc025058db8d051577ab103a92f6ff8b871de100b8a1f2c0d90e539da7e2224b79c21c37ac82abe7171c8c42317a80b90a93994b2afca208e884ce4b20fd2e52e5a76fd40c5c17342e27833498a6847bc31564c6e636145d2f83b429ca6f425f4d377434adde28d1f6540bec2bec10e88b9ae82b9e3449418fe9ce820c914d267cc69c31421b14f5dcc6e2b9d4cdbd5d6d79e341f9d203e82452d86647deeb31e3cd956803bd4854cdbfd5780490820ce4e5c1f0ee6d08daf33c7555c5a463342060f45f8df8a3e1c9c18858207027b2c16aa750d9d27d56bd12f6c2ef439c9853289471a1b6ae01806d900e613eddd31a8819b3193feb5a634ac75b4a0750801ea3a387f155b778af8f6dfd5193cb49ec7d2c73b00d49f511e9f62e00001ade17f5ff20e816933c8919a7fa2350f664af0931e5af9739a7dfed340e6e065683068d367115431a18243b27a0665f462aac7b2eb7a7147ec523df30afad972354d989e2e00b2a6baa31b15ec2e3314e84635b1a4fd896e856ed9cb0808862fbaeab38b0be1616be63181042d08769489b5667489d09b9e4cf574edfb5be8659990bb12cccdb41a5b4a4c58302c18a2e1fc10350ef0857a23c9aa79d642dc018720fe55284f73b15a03a194627c95ee154ec2f8156965294af6cae57793f9ec28317dbf10f6dbbab63a6964ebd02fe7ba05d18c77c7855467a1372a2fa66f130cfa308f18be8cb7ac49888c419ed098afaa76fe19308a12d2d8df699ea540991fdd52cc0a1876b5346213a33bb557e82a649c15ca17a4c8c67e1e52d0e52d84a646b9bcdb76503773c28aa47f86f617f6ca0d265eb31bfa41da490b8c61c0151844006e968f97a4ffa98bde1d9ba7a46ffee5ff5ce90662f07a94e3956f08ba212d60aac0e7b911d4ae3ebf2606d522319ae9c1bc8a661bf56ba218c15089e380feeb6bcac6fe3377e6356bd2151164c925c4e444195d4a1e4a6e1aa9a7701e7c4eba545a00d2bcc19a5ec6dca79e6a2c52ff745f01a1a32143aedab923243f58353e2556c68df951face6d1c9825c173e78c5c34f5860ca89b95d87ce9702794cd92ede3cedb18c62c2283cc36bec0e0dfdd0a2bda0191a54d3d28b5e925b064e3872a0e48c0114ab88ae5d281f4bffdc5113bb3f1ea7e03ff29be7ae877756f533c5df7f57b92c9625ecfcdf454f3bb7caa07df393cff09f33a34eba4caa89cddd7567e9dbb4a105d9e855b32874a6f388e445be7549553af8d34f3096abf88c75ea1b6f8f77b504d2f3b2329281327f32b8dfdbec7003333d2953507373b5ebbb357ec475a8c47a38cd2ae270ff1f52ae0d990e49248fee60fc3762953ea3e451247101288330ae26e1ad34efe424d7dd72754f99d690d0dd80d0c8d72ad55ba587fc11d4be40dd08e1aea8b4c81bc77ee0267736ec846331b0688d4288b914352ce6d887595d4bd25746daba1e94b706984bb2402c6695e0d65343da7d70e1a3b954a48c761b47c28af7bdc23f2b474e3ea9536fc503401726c76e3b8dfce0f18b5fadf300ae5a2bd118ef86f48bc94eb6e402412af84a10d085c8192bfa36d99035768d61f090958a4363afa090c36fd741072ac7abfa268ade3f82dc801b52bb70df61ae6e4a984e8c3aa5321ca405df7d1cebeb00f2e43e9eccbfa13a68d215fd65c4553daa209221a37ab91b45d38057aee3b725ee7b247a46ff841cae283b89ed77a479298ebddde51a0a3f427e687b5ab374f852045b26a1bb0f04703089ea3b7cbf65a44787d38ab4575fe135abe9d53df17683f95150d4d2579c65aeba06d19d110a37db4833938f73941691bf1ff403e229c7e54f7e6e18a0171130bd93407ad3626174ddb4402a8b7be1daa134daebcc8bd2b06774393819dd821910b7db251bd90f5ef5e081535a2fa35bb3a5a27c7dc42e6412ecac8c71adc1087cbaf67af965fec5823008805a32f4837b602a0a92a1cfe2f6589da467bd74bcebdc4cc3d8b7b6075efffde0f9ad411ea8efe1211891986ec9b686849709234933ea9e2d27032557a6e4060896f3915ff73482663a7ae27c60ddf0a67e4cdf600f5375196a4fab3348cf7f48e2a33da6c1771f476f81647d6935f939117ba114bd098e4090bbe5de82ca42ca2f1cd551a6b7c8e1ebc65ca247959c81f5a131a64be9e110e76750f34fb53e009a319c2ba0fca7a92d1dbf9b05ff71065b8c4cb01736d5a5ca5bb63571d4ba233ae4b6467a052722476c2b864a193e0eafb2a2175b6eaa0d56ff76bcb52e86f2efe41dbde9519ee3a46d1defd2534c0e2d7c3987f9d3a1fda8b3a5dbde295c0d85058aa712808d3e0064e3e20064d76b8bd41161a8afa379c92644cd5e3c3e1bcb3b44dee69b76796f51297cc2a4c214c967e53094266b1909765c6d2ba2d18ce3118292ba55bdbd0c37d0318df04170ac491a62187507f901c41e55d477a6666b35b7e889d3e010a2ef42c2b7b515f805d74ef53fa2cce595ee9cbff84d4a8c687a6e945948a67864e10f7f900ef73175980185c93a9a599103ac7f68779a8bffde8f53962e4821d5c42ac87603a1d9ddd574384f779a9a2b4dd5f3c7f78bd7c78eb94e3c541a07e61325e3a626d198c665c85583258aaeb12be38b2087f5e8f8265c585048b1b18cf22b78b959ef361ec1ac8ee88c9c2d3fe36411a8f501900d8baf664bc6d6bd2083ee68263c0f395d9a9ec307375db1b4666f2d952eb6c09388366740541eabba5b20b50a29cdb5a84cc7ab9547b854d29a6df25511cf7b701368cd04cc8ac16d6b9b9b9788f6462166827e85e5f41d6cf15d79abaf9c9ab3b026f1a4958dc28a7170429ce11ca3bcb3fde41b7cfa23ea13caaebe78055ce1a64007c08d66df6ee4e7060941cc9dce8afd5747bffc51fda598d5b853f6a456d9ded4fa86aeacbbbf1d2e48e877d9ab05b1bc98ded6d69c4b95a8a8a151108bb02b08fde07a2c2d533235f407ef7d6e7b58f28738b45f986a24ce940c340aefeb250b074d682989d2a4812305e563f48994bc2ca0e9c05332788e0009136a6b196b0c797122c3fec8892dad3cd3509541a7d69a66dff881644af283e2cea9bcd01a152c810ff03c35fa418d7fa8398b0ebf655800d39cc076caaa639b0c465a48363875093099c23d0cb92c908be2181a36788d52795ef8966faae59c3fb69e28eed21d216449b860d7f04864ca2ddb9b53171e8cda4551665751977df257224f125b5de1f482d70db19990136271411317edeb74b529da462304f2881c4d8003bc0a77712c95fa9365da73058a49373316fefca6ece525a270c61ed3fdab04f151564f205896bccb8663b2ff30cfb39c3647ecdd1eed6f9ee1372982b632f07d7f5cbbc74f70306ddd4cd615e96f404252d44e8b60629acee3df2993179d165802fca399bff72999683c24341081c50efadab1a3c687c1f5541eb9c58ac64027bf9ca0bab05a9edf1c04f9e32bcce1b7b718a835653925a5dfedfc34d8012ca2eeecd3e6dbbc4e89289ff327f3a37cb06bdbaacc6d0ef7e84d38e623d85fedb21506cabfbe132b8cbdacb24c4cb3a494df2b043f719afd2c125682e0af7552ad49f676c798bff162d419c5fca066deec1d58c79ae36e0e993021cb1fe8fbd406c7a1a603d990654974e7fd20fc6b9a9961067adbf309d6cdc9c6de9da24c7207f16f5c0dfd7bf7046f16abd02f83b2d02e07b50eef9ab375e21fb930ec5eb991c39ab0af2e68849d01b3cc9d23a2d6fe921c3397d0f850b6c7f5c883067850fb231270c6cca6a9e2496279c955db82e7dbd06b2e8c132ea15a3b777787a82d57a002f84cbb0772b49e13617f8a413f6cf4105c38eace5233106390c1353f95e172d03e1ae02d12ef6349d2c218bdf42d582db1102cd528818596f7a90d31dda5ef3322b465cd997df1ab5f1388d7c10d974125cb3b26c751f7e121fa5144e778eb55f3d69566ded6be29982750ad1c9d5e9ca3173c1b9b116034ce3127399e5579b9f99f2ed6d013dade98379d845c969782dfa101cf0fb0d93a5e6bb1bcb737acf9288e18c9aa20849d40d3e610ec6152413ad79742cc4e946dcc0acc5865d9f353822244710225d1a97258ade231103d0f24e3c2bec696f5da9888292c2283177f8de217b62cf307f2be64a7ba94694032616abdb4df5a6aebc0ab4d1cd2f2924bce699be976f84da1241ceefa4f563e9d4310c82146d62b7b1b130872a7c3f4a228924337413b1596c28aceae9c6e44ad6ecfbc6dbcc63b15f19904ef818226c3c3cd912d365927f622f4e586780180233dd7cef7a688ab4db9813ec19f17670528381b67821b685aa5e2df718889432708784a8937cf082d125692042c50d191cdeecfd350dd5168000c15b6a8fefa2877ca2da604fd33b8d13957d02a857251156d2dd6564a1c33bbaa2d5b0dc55370a46db599165d35ae8f1b609c82969ed0d2a28d19f6adcb88ca74544dadddc6ee84024f5b835dbf057a44658bf29b739b39bce76dd13e9fb30f11a3681192ff3a1eeb8a64b799a3fa7f5a45a5aa6f53aa607b108253ea18b77348c384cb5172dbf03f0a59e2aa12ba25cadcf46d048fbbd27e4f1e0a6bebad09b1c4f1c60b8eb33c3d19bbff1d1381627ef28177094320e650cc568bb1e6540ca89fb4a2e5f69e75c94f4cc4c6b0e0f92cdf3ac9d79aa018e9d474a557f905a94727396b1104bb472d21dbc02cb2096b2c6598eed303a046733eae6d90e262621a50b10cb8e1d4065093930c5a32c288f2a13ce5be0c4a52382ca0774247beca1a177f13ca785d34aacc83761ca5d95cd1932b6b3984da351acce63198e3930fd58f276fa6b9c01795dcb809781665dcb50d96160e7720d3f097ef9acab3599ef280f81df575a651ae4ea0ddc090c6167448a3b120d35fc3cfa07e5e7a465ab70d524e6e160d2ffc28b796ea3a9f9ee4c20f84954d2e760f294d4e3817db16876179fabdd0d5b661a0c1fc1cce069e69262fb0eb08ab0a21027220b448ce65430a9588b5d49c48b46b4b3170749682c7f886cd1e389d558da49a3b4472c883d864bdcba724f835adbe39ded3878e720fca78420c216f913bc8c45880a4ffdc3a3fd07c735af917827aeeea36335c396e79860ffd869ddc41287f1bf1fdd0897c95194a04003aa185120381a2be84320d8a06e41382485fe778c3cc304ad9970f72cba3bb97f249b3d44f93deaf1bd3edae7178f2f3c0f836a0708747dbfd03190218073713b45f460e7f2569f851eacc6fb6587ceed6b26681ad7dfe0113b51a9ec8efe035c0e8ef517d2a82ebbc20b5932e4ecab768db92dfabc043c784d25b621b6e0e8e15dc44ac8829010db4ea062212329999fc88e4f3fae34f6ad9577bc74e8edc013d517aa8de5175469f79f8e7d923f86568bb4b48aad074ece3be58c79dcb96d35d5398d9be3782d7c9d12766db7e8699c5277be9bdd538478dac2705a7849514592ecc74fa24c11a8b7f203ad07c7e4c7338d8787e80220e033a482d9c3f221927d6b029f0e298ac3548a5d304abd821890bb31df135b9c228f1a93c8fc8cce9a00f9c902bd04c50580233ab1dd5f9186180d56375076375dfc6896fe30db40fbda82ca133856da3b5b2824aeb0813b6242ffe1eee7f920a25f71fe823d6b1e9bc03e51d012d9b61f16cb1f70c68451ef9422e60c04a5b240872565cc74377d7994179b24db3197c401c16374d60fdbf5ade66a3ef5a8873c363aac28574e9023cfa290cd2a989bc3753dcd00ea0977e7462d7be47dd6287599dd3a0b97ffe0e7970516c758adbc0bd6ec6abc5dce3b7296f921737bd41c2427a46d2b496cad677290bb7e505fe96644ce3a654757d2d4a711f6b4dae744f43592943ce451f909b789a46bc48bd51f341276ad0861ad3b0a23471e4a539bf7a4b31f6ac0e55feb3c86b5091bfc110d488520b71c9b1e84cfb4b6fa0a709223a4ea62a35a3646ec7bcc61b71470b89a53f22f079b9eb524d767dc192a1f9840d56deb7c217642c459a3ddfccf1ddbe46138759a3cc28f40127ec1a061ba0452944f6735805c2d346b1c797706b8e4147ee898706151d4cdca5ff909824fd9630ba26f10218e298ddafb02d0e9a939c66d210a18f341bfb12171f0ca5b79771c86f5238475a455a0ea4f7ed7adcf9d17538786d0d4aed26704614916f34b9239f00de21181db5ac1331a6277b8a2fcde64900a34df90c6a9787dda437cba6c55c8b3388bc382b82bcd87267fb746f460d81606cae3704002b8f6d4e52293f2c4f441ffeb33eb3933218bfb50eb73387b99cd41149b6dbffe48c0d82d2ade007693a9362cf2f7e1ed8e5ef9b832d8016485a85f9185f32b054317790605a201257fb40ae2c7bf238a57744899804e0a3cfb1fda6e8ff2a9dbe27be1c76780fe334c392140a4d9edf868c36095b072be760fbb2fbba9dc5cdb2f808a8318da8a7004e50297f45d6b155b10bc255c723cc061420c83f6a663de7f46acf518ce643e092f9aee8e161209e45dd4e03bb65b34da07c7c06a6a2de9775a52776b346e03df8c4b9ea9cc51e68c299b6d34b6a46db06f112d440209afa6afcd378fe8372ec609c2ebed7e20be2c48e804877b1487365269d6576ddc818cea8d64d482aa13125f700549f6ebc8472f95a19ebbbe500f774c459196cce3e0e403b2a7329f445904e89b1f5a8fde838c43597287c848555d0aeac750a620005cfd0635ed5c54dcb43908be349fdc67ee3aaec4bc70c52422d7aaec1f4465fb259e649d89364f1381a513e2303f1c3f09e45af7a3c9a1076a1aa25225b602237b9a72ceefe0e669bdebb3fff25a579ca7397a42cf611d97a557e01263415a13140681bea9d7ab352550aacf88e27631abae107291dc371f2f0b90cf9374816c11f3eecedf092fa7b1e021bf16a8ab4afe059f47f44f551bc37c49f9165db5d814a995a5d481a4c00877b2a365b538eb7f6e33fd4bff2ebfb7e8fe66fb85d973d02218cd36f2cd2c39eb7bc428ad10cededc8de43654914b8b24ccda4fdb36b13864ff2932075d7dbb2b63cad1be85fe151e79b352bc7361bbaa28ed05e830e1ad4e92c3e4aa5be5d538e8f0c83998888afec0e165f7cb3575c90ca7543a4ec3e230dad03ca8e0ddc375f54558aceb97ce82955b9fa9f43df8c4e214ffabd38881e132133b8bd7ec05d6db773e458ec4c53e7fbff9a05e3366ef353ff403519619bc26a230720368adc26163a836d8c94b87a6f721316852a4396563c4b45005892e7759040a740a4bfa56a0ee3fbaea7731c11a3534750198fdc017d4bc6c21021b411742f63a4ab96b59cded1f1feaa1adf379fa33309ef05ef35736a161e443748bf322fe2baced3ee5a967fd2348ff58b34032b4b56d8ba3c8a504612684442e118230fd089625349c715771dea8cf7d3639718104d8a529ac51e384708311e877fe1e87c799aba52135a421affad172bc9591dfe9b57bca569b0af9087d1f6eea42173762a29c19525ff0e4f8c0eaba4de774127f0b3991292f1554bf11b9d3e0c5eb8f08a38498624839043d0ce065c7e90e0fce29f6fdb5ad1bf6033094066c599336f09e13bc8cdd3bd2e2a13e68011171564a3f46bdc004f07aa8d1f069cbaf7e4b9e8ca10cfd5d80427e7657b6cfe5a9d0e9bce945ffafb18f9b2d13d6916aa7816ae39d2013dd093f832d9391a425365f862ba94c244e53de01738b2ec4d82979c3339ace26bbe9b210541c2fd7c4ac8561667a843e9eb05512d315205df99d0e261225567f8c7f9e43eec0a734744dcd484a0fc99887ede2e92fdb33be6bcd868382637359af07769757832b36fa26ab0a10aaaa47157f927a2f3726867a33b5f0742c655c74aa452c14d522127d2b08994e296dee7030a8639a8ac8559aa67e1f03cda3d38c41cbed1e6a9ac88d84635fb0cf332855c97df1eff5b0c7a01a58bf679536ffa1b2b354ba33dec8764bb6d3b8b565a5e19f9864055870f22c867b6fa7a18e64945782353eea5447e7ad0af9b1c801e3c679b14e06b32786a85ccd64d3fd0e9fcb6b3a2628fee8af310a64384acf57b48ac3c908bfe0bc884f15a8e188b380e8a3be38ace0bb4e4d7b8e8a21e67e44d7c39822309153a8cd49447cbbb09c378f67980152ef6540fc933d343b4fa3b99f0a9b7a02f968f273f91e1b53f124794eac0ea3dbc092ce015926d8874f74a56e96c1eb1f08f7d5e80ae2d5c48df800bde3afa20db46b1204ba032dcbb10d541ba83a424220c47fe2aec4a3122b718675ca13e7e4f32c1fc750e5796f2e504c92ed5d23b185a827db14134877e54a3722ee92b5e06adc476e515a06b6772419c9a5751ee731536debe6bbb5d67ef402e952cb901a59420dc3576a7ac562787b9255be8dbb524b2ace5c9ae7d8b06fb51be6c521055f511dfc214be62da279c1caae8aed68d544e69d62e624d8dadc8e5e7879fa2e4c7f5106dfb40d01fb4b760a57a14881e7ad9a211d7f6dfff5be5b1ef9230f408c049b6514a1cbccb4605a48b9946fbae6f5b528225a8df792fd3e6b2c2873e5290879a5cde1594cc135e1499417ee7c9da58e13943f8d5be6fdafdc8b8d7de126636acd111a4f9bd5466ce6f0af6aebd73fad6479d5f45944bda30977e6f5669bbf6452fcabac862a2c74f8735be99167cb52e8493d2d04c703c343f31a42941a03264919fbfd51ad21c513dafd8fbafe0be20ca5cc7b4fb5692c2c352db1c24fa65a5aa0dd7314830a55e79f97e9112ba1242cd91457f537ff9fb770e0d45451d79d9988b964201ec3f44898b36dfb766482813bf0a7fc4846490cbb64f13f2a1335949dc0c5e574870815d8253283903142f4d4df0d1ef7fe6c13f9c157aabe95ac32c9a65b1a6eacb1ae53692e419f895a204e1729631f7adf7cc753632337cdb80644493e28e93becb8bd2e8d944c8ef86621f930ee1e195b973884479911403b18225403b82fb1a2cb3f8ca45e6b40a6026e61fca9528973a4ee3be11f258186b2416b099e11cb1336b0d720bc6de59a36da2146d35e71a63c4fadacbdeb00e3bce21c269c5e546dc5a2a0140e788a39032f2c317a77609ef511fa9135cbe4723aba4aab8b7e432207b85917e85c0f0b4f21a1948ce0bd56ee8ee10ee20063d8db32f59b3ce204996bb37524c493d69d6cfe8f578f5a4a0d89593b7a6dd46c11e4f1c3edb25bc4604ffd23d38ef77b562ccb5c9406bb6dd00144a7f0bf6b18cc36d3d392540e1a471a7874abf54d0459a7e4d7473e7a1428a96b729c83332cded394dec467c94f82cf400f06d385e29839ca77b7646181e395403aa11cb433dbe29035cab8de53f942efa4233d265a9f52a449f0af4e4b7a09114c326868d7374aa911ad0cb7da4b3b314e8045ee4cab2f62216bea5a3f2949709fc5d5fbbec106c764ff6de212f293bc81ddca6de6d1343d55e9412318e9ec26fc7e7ff7f594ce1d4ca16b0ba89f147321bbdb472a4fb45a32fddc3897c63fd9a0b6770ba8d09c4d8b2ff4e9677cb6d90b0afa6cbcb658e0034aef67df02616e7b1ff1e76b4c9246c85e372ef7398996653cfa7caf0553c59f683c6809f609b5fc47a42cc7fd1dd6028650b8adead1e6e206908a83b217182ddb775c4f4ede2f99c4eaff1a5a3e70878bd011a3d88b4eb544c0eb4ebb11ad5aa554a09828425a512e14d5e826bc0963af00c3f594c445061321daa36cc70dcbfde3680d6a4d978bfc75132c23ada00f27a6073085ffaea8a2bf6b3626c3249032d93a286e52d13518b242860434775acd0fd271bd303b6d6ba60cf8d9fdb01a4c86bc995f6ba98d2ffaa4d2e4b139f01f8143f8bd143e34f0401f86a747772cea9ec29c5426d6e16b3b875f1cf617e37e56654988bdb19cbafacae33cbfb4746d583f947fa0c376ae002eb712511345d145ac30cae9f2342d819d036dc045f78595d0e22e2eed1806c3f44c41093ea5248a558c3f48822e2388c9ad0719b259f97b5bbf0e121221403f5a36a8b4fc8cfc0194cd5f9835e0f412d21b78980d74ff27069048f486a7d3e1db27dc01cbb289ab616d8ffae0eb73bbfc6e8ea663d80de205f22248dd94db473c8e9926c5fb2903b7b3b271c2ae06277bb29754ac2908e4521d2316d3b9d4817160dd15922ab50e34a83fb5d51ef9ea5ccb2bd61f26cec971a022118b1096e6cc94ae1228bbcf6dc5cbc197cde4938b0721e24c78340489c8f24392d1b61dc045f37d906818a3276ed8b16a08743d079e965076bc676e9de5cf256ef7cd148fc9b292e51a186799a1b9021407c8f395ff6f966bcaf127898029129ba87b5031aebc8298b5bc03c51cef97cf48839438b2d2eacff418ccfc5898ca0c58a5dbc00352a6bfde2fcb1e13a15fdf32a9c255c40155d1968d0413ba9bc5e5b00e11d27006f599fced4fe2501c04b4d48d83e4ed5347b202ca92b0d9d058cc1c9b13dd31af053e2050ae223b5341d128dec89474db565522c3c020174c1b0293013f2c9a2ea6199b4d5aaa235ab983ee344727e84a1056fbf5761ee37556911e7eb7da0acac726146d858877ba1b856d9187dc4e3c19b701d8614484d796bd965925463e22530cfeac50b437fe3c1db796249d709bcb0b1228262e9dfc7dbf44b309674ca7735539d628b49039e9c10963ff6b2e6f8e1bf99c65c88d164270c5b8c03226be8f49df57be6972132907e36b516a96cf068b8cfa3b298923b2febcdf8ffb1632a5185eaaa872a29d6b94ff5a6a0a8040d816f8e2e3340e07f0861c5c9542955b5cef30a54bbf3386b870c4debb0baa3152847e185e82027aafecaa6357bfd43a14fdd2e80ca71f70d90b4149908d09116dca989421d821ec2190cc89fc357c8dc87dbd44aa626bdf4968b05fc65bae4e9f5f223ab59c63b0ad10a94ab3b42686ef1ba7d77f2a279a7fc53749d62853c47a5313d4c092b911f5cdcc3bb4776f1da00b1566db9f723f471927f16107153c385da5701f0c39850bffc91af8341cde9004e76423ceee67bf8bb04f666f102d60c1730c61cb213b1380c2ca6a82ba64565e3d3f743a2f8f13a6a812c6b7a761409f0bfb78811981a60ea4b03346a9474565d95103eea09c8ef2f8a35fc75e42560bfe119212bc31e11083bee4ddf351777d9cc34fcd76175f175f10174b466d1215d3fd3aa7890c0a76982c16bf7779c3a8783011802be0388fba6d5eed43b63cfc5d0d09c12bd5712bc8d0d9bbd7e36974f55fea9f3fd3762320892dc7d0a564539f3f52c5502337ca852e81f4fdf80348da2dd49d6fea25863927b45c02790ed4ac960e66af61903520a57147b54ac7903f11f5d3b75c51de8c9f4a1ed9705a19b79651df0eb2645d14d422116e6071ce13e21aec389045155c0fff6186499ef830c338eec095eef3f7f2d86fa6ce8f08dd43872054d349a76240c20658cb7cab0a478ad145cd6ccf00a58fe7e079885d3e94f5ed783909dac8b04d903aaf04d0af22694edcf0e420ae334cd9efeee7c410d0c6f16f4ba99f9f20cc033dc8a3bcf90e3516bfd5bc452bb1d3c452c99382db40c9cdcaa5439a1a6f65696d9fe6a6df522b3e525a8c5c70dabfbc419087afe90790d0e1a9438b4e02ba619482d42990c58e1a9d86458a25a877dac450922278407430ffb854b3e0a8b8855942ee0693a79caac423029e956ba92771b2797a021e2f841022e4e5925d69cf6e257b9cc580726c084aa7cd20fc98efe4a707e8edc417d476ec31cd4094ae705eb1785263e5f93e03605c0d937aa5ac241b3d73c0d03a6fb07a0674ad64b33698e618c5d9c6f287a907c9b4d9424e4182cb8721062b2a251fcc6c249980d5295115c257a13cb445a2d50c47375e26c85468fcbdf91ad0637368538ee9943bab8bd38e2f1993502572b0189fc433174e8c293caaeb411c8b6f0eabf94c85238434e632c2c3e6530710fffde8f8ba6f02b6785d43bf22c52598fab110ad968f567b729e4b35d9d8d2f5d12677a39f37e848b36efe7a4f7192536ee271d187c25d1aadde6e40c38e27457a57d4c8a5b97960cf4f126b11e76a972444482e724119aeea3a65b40a7e97e467fd6107f044b0374b6204f1c391d067505a8f50dafb16865e6514181816ecc4d4671fe11402e51fbb4c6c5d0e2158becfc48bd1b4f213b22f9e5b90c061850d1e2104688b8a8e003b0ada30b181dba3d11a901f1c6b79d36f946143e6e0ce75e623127534a3c8d5ebfa2dc043cf722b4319d1d35e0d09781d0bb31beb19006a7bd9ec98a8e2eb1cd17ccebce647d4e65a67078013cda70d0e9848a2d8d9b262d068f78b4d04efdb99eae2acdfd945bb6407d0869810b98ef1450378d9d2bf914557dd62d774c2ea75fcac06be0ef7f5ca1d05d803f363af0c78954aa11c19c63c602a57fe734d23e27e1afcdec3deae97ca42384d050456dec9ff2f4932be867951769f9e1ffcad216cb5fe4f24c66cbac8de9808d6f85796adc4f789808d46fb67e3eba4a075d0e0a623a62f76aff53594cf1bcb35007d9e6781088dfa545f97c11d2738465dbfdafd562749212551efe961a18a575d3a0e580e7b15401a05658973f92886348a210f92caa1bd77b3eb0a337977c38e59edaec3a2bdccbeef75d29f2d97810574e224d69ce8305206ad9813670b05f78c82867b7c05e6823c15ca70f902a3cd54adf6aae3968ed8cb1fa3bd23fb4e00e51c57cfd8043dc2376121c7794500d0edc7ebfc24987e7b85d9c0280addb0367137b8913ad03415639f6b949bbbe2bb8ba1893f88a21f64bc78f520914102c3ff1f410171e18a9582d1e5b9ae29713860d3c0cbb97907320cf8b23a8431ef3814395e154b9e6ebf75a72b733fc8fb1c3100b24c8efbaf316409418e68c21b9f4efb0cb9d870b0defe8e77ccce9f2fda0ded0dc88853b738d62ee440e55dbdc0a52a4c510258085c42eae15d43a3ae6da3a9bcb1ab12812243f291298669cb778e6867e8c1df51947b848dffe9ca2dc8c053a226d1f11beedd10486bae0bcb251d599b5d2ec4d745d22cfb069b3723487afdeedcfe1baad9a35ae6ad2c88f81414297ba79e5988f3745d990ccd14d8fb2a3b95bf7ad2065f1de106cdd799851c8df1d73790926a7506e6a67f5dbe36bf47b8644020fb1f3b302ceda38f536093cad73aadd683b764864c121a6c00647c63f3019692361e8bd782e48a7b0d057b5d8f3f091f5214bbf9dc8ec4dec50e40fbee6f20fc807881522fcc1adcef22a78520a51517a6ae0950a03c9c54523ab4885f5934e88be365aca903a56aff51eda264e060e235240ce7324993ff16b0ada1d10fa79e921b1b178ca34c2102a45cd06b532957aa0cf989e486f8008966726613253a81cfacd4ea86de7e1048c5efec81448f852d5aee617fc08e09dc5d9eebb4412e33ef45dcd1f0d6bb2f48fb67faf191ffb3f7ad996357c751d497a6d871c78cbb612b206c6e1a1dab6cb6167eba17f2c91a13c7d12bee95e1e294694fc92f4182b3db6813211ddd345a380936c8c3d7e03290f24e9bf13b5ec473f02054283ee1acec05f425f69e16b6ef7c0c036469e9af49a45ae3a149e1d2219f62d69c777c8d2ae6b59ebd66f7c5450b6e8dc34b5ea55f4aa538704350d246f5992793b484d36221bc7aab1abcb0770631ac39e27578038a63897956f3dc579b61f4207d811cdeafa94e4e55115c622b346515376be18454000918caf674691b75b18d06d4cc4ccf7a3bc8d154b2db77d51f9911c099d8acbf044030542df218b7b6d0442879929e92241c00cf4a7607bb45af83c7034707047af322fdf1fe57d422d4351db901ac2bec29013d3800711c051eb5ca6ca6304a4a64012d57ec298b08fabde841d9ac81402adcc5d770e76b2217bf1d6716e0d32ebfd3cb356a5d2a9c74c1ff6448f4cca887ca126fa5c3387973f9f0c06b94a6f103bd3160cd6745f6a90821e4bfc2d5ab4477b6e3a85fe3c2c9e7859a281f5be69341c730ad076db03e2fd823d7a8df6e96e8252b3789494e504ec814dd6c7e197c9d39934faef60febbfb7661b8d890494f2b1c0cdedf83709ae1155a3e57a36f818f419f4441fed312ac9fad97c2be8f4983a06954cbd2f71280ce13389c0c972b1406b91b35cc048c51b5e7658b2c7a6a259494118535cd4e5d87c646a053ad22f992745e98d5f74c876d3398615c9ebdc25cadfb146eac3f37943ec1d7038af837e8cce3e1a12f3dd4f3623fb5d2a0fa13f95e712f2f7daa2db82073cc619385a46cd0be99bde320b8875e1d1e41bd7c3531760591d5cfeed668786114864340935a2af7c399eed7f39bf4999863b711baf558b0c13dbfef43e01fa8f168d56b3defe25c21693f3a792cb42ee8e23d4d5bd998e26c36a4b2c751ce76213dc4df500be2665a1d38ca982fea8f765748940ee5da7448eb56262c538f4cf8cea9b43373143af66fa5216e165b5c7ab89f4b1f6d87fb060258ae347c95e123fc93a725cfaecf99dcf9ffe6c25b7677b35dbaa032a436b4715fad682fe0c04bdbd6c344cea4357eaa462f74abd8869b9098aef924b89cbe189a1902ab4de0e7951548bd0481ac0f7d7991696387e1a89babf3c99bf3bf03828d8050e10fe9bf07454cbaac45decc87ca7cb61b81059bdddb0509c4022c13a95b18532c8f84d71e5ead6f5a99217d8e0df19a9e763275de9a04cd44d8a9f0b702b1444592e7bbb62ee1188572d5f9a4c70a4e519469293cc9bbc069f8041b7f13880b8b9b9b9be1803ee9f5971720cf5f5de4090cf2c9a7bc0faffb284b7f685c8fb8f6dbdfc96c44cad25b7905e7c5df7c7f1d679edf9204b0c57fa697783c4aa0775b3623eec27c65f4f11868db1f170e9ce734a8da796f53dfd229166e8b38504a816577d08dee14d35800d12e83f7b03d70ffcd5d8a5eee5045babb5e1edb548d71ca7a48de394e637e9e94c13dc9365ff1b3834ccd53f605c44011d479f746f4e9c11e541fcf4dfc81878602502e6a658ba32b8f5e0685f7855daf8c3682dd32015ad4302669d3cf26190ac4c4142ffb2b1e513a671ef7be9328322b2669e9c2f94c9a3ff6b3f23f7104b303cb51c3fdef1aeb0c5acd638006b37dc69345e99ef1c5b663c3d8b5621dcc54c3b7f71a1b1fee7d290569f604ed678767afc3e2690d7c703551f0c4dd1e7078bd0a1f1a78d8b89a4091e0c1945a5434c4bb18e23257eba8df0235f0540d3775e5e7b30722b825411e23f86dab27b96d0d28b1133d2734fbd28651d95be62478b41e3027709f473291262a3f7bb74e600c35f9a3ffadf8ed22971436a027d1f33902b7a4386f64ecefbd2a5613df44e5a2ab70640252b54be3c626105c4c1349142835ccc8ef54b98195931c6777ba557ef3faf0554986da3e1a2abd77818da2fcc911425138bbc05a306749e607a399272ae59bb7a915d2e4da55ae0b67d0b9c7d213dd103f70c3a9abbd96bbdbe9523b1484d5b43349fefb1c0953a7ac1bb4b2e36812aa3ed5d9477cd2f841b9ee37c725952dacd397e356dde67f6427ff1a631c0bf0faeb49bb3c6b2d3aeb8cf9932a45ab77bed1b86294c1a697e973163154ec5a7670709357c3fd9a3babce5ea0c567ac9fd2df39157dd1018c3311ad49d42ddc5f26cd0504df79b362cebe670e56a883755f2ee4edcdffd01cc71536e8198d19901fffbef3cc14c99a4dd04cd8e563f4f5d340650cf46073d4d2c544fe7b3c20dc8b6d840c16ac2dde75bbd8a58afd8bb8b3e2cf90b6d85416caf56f2faa584620cf64d8c41f3b534b04e612ac541531f5c7bdca5a46731f0d553e30e1a0024491b939d6a5d2d06682a6d8c145cf505b7e2347e0aa7597b2c3eb127887523733d81f5273ea509597f422237d88a6c0f164b28619149938c0fa4dcc05de5fd279d1dcdb74f9f03499e791344a145e7a7008ca0701a66225a380e1faa9e83976fa2601a3493ddff2c3a9b592757b6b1feac29904dc4acd5f334bedcb63ac2eca035a9b9bae3e6799a7b6570ab981a488a21f7b07a5e2f11828ae926732c900dab967049cfa0df7339ae3992aca3e65cb57d7ee416ce3ba1cedb73b7960d19d0465c5fb7bb8bf5ded56280160ac94fed463ae20227dc265db4955440ed810e16aef7896ef04437623edbaa00a5b40ceafca65baaaf9f3501711c0b675e846ad67092c81f603f340a1f22dff9dcfdd3c91475bc475c905bd322ae0b76a0bac5270debe2072bfad1e6bc13b6c1cce3d518ce597af8d69d267b36203b4cf7cab953e7af29c002c308dadd564197213f0ae8526368daaed4cff42bf1ba237dab49f077c2c1a686e7184965db7897f3cd4dcaf58f60fe0012111543ee21f1e196dc1e0eaf059ed3bae94ac17aa929f6a9d7c659a51c1420aae6b01409bbfb267d436ce0b0608f974e82f081481bde592b0e6c3a76d2d8d816e7407a9ab86aadcf703640e4cd5a95e4c2a960e80ddbe295d292a82f14609a0b23fac796395e0f5f9ed2dba48702ab28451858a1981929e3a7594a0d7d4c850d0ccd9b5797e383a9c08cdeeffd0515355d46a46ee5bfca6aa488dc0e3ea564cd08e36aabe97db84dace5e24a6d51c1efd85ba423f80bef8ae04647676de4a3756c5eb122144f8cfea13fd54b17b8c0b36a4ab35525036f340fe1130eb7d11a24185448283996dd54380c70eb0d2230ce84c949e4820d3cea95df7c5e981c3f28efbb71b50818ba86041a4bf71d02ca06ba55becdf71c2437c29084be7ea36bfc5d751cf70e9001ad70206867582198823399e9ea811aec6f9b1ab5c83aca7714d0856ee3b5dc52db789b27e56cbf57670f0e54fcdd11a3188317d2f8ddedb73be31fa9a0204ffc4783b8786574b19f504f73c8db8ca9c20af92b7648ae4c606b7b7eac0e74180929941e606906e8522ca7cb26b6b77bf5c27227275ca2e6d2fdee2048c28c3dbfaf5d2047037d71c5bff22c72164abd1afe71ac15459bd4f9e3823e3586e934f62e10f55566071bda8175c0d611f4f3e2f7c1857d108dc9aefd16f45239e0843f040910633330e8d0e9de985f3ea5f4feee0aa4e3a42cb11caf3fa11c82e3f1449228a8d6ab9a4b7d0486a930232ef193e96196584535544f6fbf332008713801445a4f2c9d473b0b24a050bc796b7403ef7f0a3dec5ae704616c9453a2854f675d14d6ce239758263b0b5047b0215a36cad9711a212693f05b4036a9239627bb3975740e764c30990aa3c877de514f5d0ad2a5a9826bd3832b0578f474da44e84552e4dfe87bd691a369fb917195a305fbe23762b0bd9b57eed4d0a600657552d252852c51aaae8a2918bb0ebfc01bf85cc73b4d6e1c9630c4300fde677907c6a0b5edb338bbad52516226a34ea5a2f0a232a8c5d536f6a89205c8aa592671a2fe2cb5f1ccd322d109981f6cc1bdcb9b90d59da93440fc9a5c1d974a7b6675e9561bc5b65d35cf285704132a8b16ad97eeff5387187b06a8c0d3c85d698472d744049c604aa09da3495ec025538e1f764591325b4915739b29ce7747ce789e752191cd623dfe4d7aa39289557d4a55de447a20e8f1707376ec74d9945df3325850fda844b530a6eec43a98b637a1988886a8c2c583951bcab151f1228502bfdb7d9aa8977bba4100e5598866698cff234d748a38ecd951c7da5c6247239245528a4db4c50a13621a1e5ca90bc988d342ecd1e947ffee6b6713c7464acbc22522b8fb64d4cf463bd8baa54eb543d15257b76d0743d99a92b17c6221779f776b53c71e9c67298bdb02e9e4d5b389021b6608c7772a78679192001ba2af25064e0b9d769cfe23046c10498cf29b05de36c5f428af2b6bb93699619e741e4e6d865aec3c3bba60deaf2f54342b987fa879f2525e7620289c05f9813b517fe76b7224574b1035e61b5b81a100f6832935300d025bfbe408ddc3c55b2533d46ef57e132aa5a06b1bdac9043c6670e8efb35a391b055254890edde7b3e97d09be39eee895fa9831871b06bc27b434edc5c086143342d0cbb916fc004bd450a909b7298b3d4f31e44ea08acd9c053315325f4ff20be89a9ea8482a44939983ce214ee22b83c72695685ae9fb51a9a9d09c38a19f6fcca24f800ee309bd4b1aa9d85136f57a9cf7f9ad46174b7509726a6e41e0685df5c714065b89b0c8bebf534efe8d1d70817f048c5b9e8523dd88fdaa0a3804f9d2d7e495653ccac6bc2a39929a6cc8da1fe680bd317748be8b5fd200ac3162a6f81f01d6ca349493378fcf42315bb6392e9f0239141bfcf096eee6079657edf6bcfa76a5334eae7ccbfd5661c7d0861be4be45c4e83ba82527fae20aac077cbacd204d36053c738e4627ea175af03d072d37fd5a4ccf902d440ba2b9ca31003acf7a885baba3c3ca33899c312f8340d0a100dfbb0447a3bf43ba400d8824b4188f836d9e08a72bb9353a68ace104414f5f05b9f8008fde7b4ddbc5e760f2c11160b9b20eceb84a272fc9adebcebce0e0c93489f92d094a238c53af76f1b9074472521927eeaaf3a85ff98b4685968228d07d040431dffa2a485e23d9b69c697d090184f5405fc400038761dac5fd81147f60d296b005e9e1aff684e59f0ba45780ea6e8c98a62dd657efc6c99a588e4e68dad9cc9bf9844d68f5dc61755d96bee98301e68dc460a45ac06759b5aa69fc1408cafa42df398dae67622189ac4497247a94ad2fc89ab2a87a0557be2b8dcd0c27e4f2e08b56621209d1cabcb2836518bc79871164285aece8c49d3af5cabf42b071734ec9e201bd49bea4d3c96c55aeb17086979eff2d792d241d4708aa06d27f3a3a23ad27ffea77621338f171deb04190c63c584f1dc754ec4023640ddec4f57ab98c192578ae6f7602fd27667c41c29d645449799cf5dc7d5ffbf050f8da14417aa973ea352e7e11cf555b496048eeb196dc7159d06eba8ce7bec9ecf3a62979689f3e86759540e81173b43799a7d19034b4333a3a3762319ca131d6060a43d13e37906979dd546437753e50c4ead03bdcd485ece734f7f6d0fd52f5fce78c9c8c0f07fb1c713dcac01394ffa92709bd6b28a3f4c9e55f3282087288c212d0b7758669e4bb62524ab339a27c0791f9def50ef4e74528fc027904ba10f478aaa2be973d05183d7229af6c7c2563ebf533cac9aa6421a9f8779e7521168358c9aff734da0a5ad8aebf0d3acdab196e2831b014bcc150fb52d740012588dcf6201e2d74d7f278faf180cfe4aa67e2f57202c016b2be7f6b80e5d1fd3c0ca4bf50b06217a35f81dd1524303e6558e7332acdbdc4fd963424f741b0e5fa59173676a7d0fd177e50caf70149c9aac322255258bf13d190865b96af3f108d2198362f51cfa1e173713711c8f2294b1aa7936654d14ab097796d07c4120e581cc6dfc207544a586d18d85978356e9e52ddd890c3b4acac0d21176f6ff78c3e5a55c99f17d4f0d42c600022747780c9bf20745b24882cac89a7b835b46f59cca797eb109a43476b6ad27c962d23c6f747dd845426c0f2df73f47fedda5d5542a6b78f0ec060cb10bd06fc9ce53419a5bbf8f95aca4750e50a4318be0e9e5073d605775bec2f351d669903e036b8107294eb7c64a42a707c5fc96e4b0107e25c6f39f11c8330a11aef7bb395731004835b30ce5503776d563d4a441c692eb11f22c2ed65f3aef0a1fe800e63c724dccf1453be6a315f2ba13834e711346acf323fc510528125002f1336e8796f9b008a9a8caede1e135865d2d86830246f54981ef7fea17070dcdafbb96f26d48dd788b23022cf3724e3f0d9445137f827c010796e5c441b3c36236799e7ca99e34d3d0e50eef4853eaf70eeddb226ae2e74d5b130531696002702e6eb3dab5bbbb037e3b1ad75b549088d115bbe5834c2eb19e4fa5761b5fdd815eab56c98145a7a91a94648f6a1af0e8195a42e472af043be77379ce62c64abfc81a472f7822f4695e7f268c19d6285089e56c44b97a6abbc458a1eb86d5450859978e039fb81806c11462a47b3cee3512ad14cec9f71fc16df1a29e7b55c062250e01861d8c8c751df8bdb6a83bd70d697bdfa4c3c4258753f5bd42e4511c73e6d9e4e1edaf0ce3221350e1e8d921470d4fcee363c7a20d1f305bd50527140278bc667b63c2c6cacfcea3a4533674666c38fa150f33ecb46614dc12c290a6e56243f0f93da94c95637247a75aa11f77ae0058a0f397dfce668d2e609e992c210fc0a3d503bd8f789d8e2090ecfbe26e87de0f7b2eb9aecc272600971abd254c96f2a12a04f2bd30b72915601aabd59ef9505ca206b18daefb4a7705202c759454930bbfee69d024f1a47bf72ecf332a2f333a921e9db97bfe97206e5fa925be83ae7fba2528ef562e1d1da2739d7488e6dabd3829183d33ed259f752648456332d7f9dc1b9dc22344c16bd7856ff86890705fef84689b59567af498435074766e05c0e9338b5cdc720378046f716b4e74937359fbfea493a8a214e01329f5ceda0c2c1ad0904566c827dd11ce43a61c90d859371b51a20f68a0ca8ab4375374874ae7f3c93532a1f7446a7c10484a196de334bfd20a4d15275149d0d96c4ac21397e0a20a784451ac81be740ff204fc4a3b279eaef6090f78a6667c8612d00428a219cfb57659a0517a4a7dadadab8b618e088348bf1bf81783b91fa44c67f1482c19f3321f16b8f9cfd1c808046a8001d8aff242fca19cd3ff57e0a894cdf2c67e656fb56334e48a7fd9bad8a2da2715c7245e715b4f39c355749e800ccc7c503d072ebe5785b93554e7d2bae9ae3472ffa96d62a895497e77788f9dea30c3fd0574341b87e32f7c808b41d1acf850be3d8d9784897dd9a8cd817f7db16e77e37f5e1e5f38f0e3e1d8aef4a7952433f313358a4d1dea72528a696d42eed44a0e9f1b5f3e1015ec606bc3127e7032a523c69b82d04ee3a983b15ea00e463569b95d70066b52fb37aac89f45ff965bf49dbbd90dfcd418d05ad534d7ad57f51322106c19c12ef9e371a0d558595a2f6545c681a627ec54e2b6a26b906cee1c482236cdc0435c9f68a41a409dc90157e43a093e78ee65a0fd8c39ed9eb0c2032b563fb31d245a222995093f0a036d9b2d807b4b147fa25aa5691de6e3749e8168900a76a83d91add6452767bd02c7160310992dc0900471a6f4b9113339e145ca4a9fc6836bf07af416e75554ca9f51832c44eaf0754e8ac7dc9f820003c48f5b0880497a14ba38affa0c43196035ed9dbab1b438ecfae715f75b3000cb5f8bbd52810b0a7081c0af02bbf548d22de5570b6eb3d38e70842410880caa59e88ec36f848e70431eb7faf3bbbc9e57627c3b0c32188352b921b56cdd8b234d149c2d35f93aa14fb28b61af69eb034419d7182b4597ce151475411b42ee7567c2759db52837051001bca4da72afe96da3301d41f8e901d8c0b63a6645a2bdf50cfaac5b9b53e5706a884d4d8fdec7b0f5de082b0b37a237cc120581f48473b465a6343ea575e1584c8a92c4022952f3ed89be2f9e25446ab2fb009394a9b1f29f5c069dabb203be25aef298321681c1bfa9173184b51058fbe3fb241c6b691dc1fae87b52b1ec47443e197df262cd659abd7d6534bc3584f3ae37d66c339ab2b0f141f210930b40e38061ad6c31563965cca3ca5243e8dd38946bee91b2cdbed7d14a3079689eb2bf940feb964baa1f532c67559013e0f5d259a7e091bf6a2ced6ba0be2a86432edc924f4da224c4f8307815e819af1a5934c629ad075ba47a9c785414da6ff9c38ebdf285ace059619b46a70b741335bf5d7acfdeaebe9fdd7ae522705dcebfec836e32822ec4fe49c99fd923c9cbc08cd3570e5b0189523fdd79bafac6491a04fa14a4e09d8c22acaf32fe86abacb8b087fbdc6eb2b176713e3a7f3ef3adfdf0c48d4713d42f919a0881e6431a2d81a3a3ede96b13688e493eda96f86223da4d7598395c3f934e82ad5d4aaa2a0a7256eea55f50d44cea6cef9eeccbc6fe317b5fd602181a26c92ef05c23f9396a24a44b475f47669654dc94328a5a5f861f39c02b63f2e6b5e214c74c72dd0c60ec7b8fb735c096dba64d6b29502a06e36f2f1b9ac536e64486ec53d613e398b41372ad1559f2ebebe61d36a16b81fdf610135628f7f28cab66233d4aa8be6eae0a080b61451a38b7c3eb944437748936edd89086be903f7d616d18855e366f52734d886c8756053d7de0f8a5b05e87d3c5d31f05b77dee28d33a73a8854054eb4847cd9aa401131daeeb8ffb7a2c2d62efc3c19a3fc15e9c03f336b2ef6f7d505fbde3eceed394918d2bfa0ff925e2c5d1aa89e5a38bf1b67eaac887d2c1af645d431351f40d7aec47c12dd96386fe5066c202a7200821536762eca58927e72e5bc955e83d1173677b43c74ad5176925ca3128407e49b10e5e1596c9cfda3197dd42b0477ad942dff9c4af6cee6359df8831783e8baffa0420d5ac0b24575a96ba5549f6e2b9d620de767c1d34b27e67b823dc3ac66780c49034ddd159d205ecacc1f29e8e86ae55a3b52454db389bf3f64fa6ccb701e716cec878b48469dba11cb2a26fea599454258130bfb4b3f165c67310eb55975497e898cfd7849f2ff6e27d04ada331a931f84d450a82d3670dc1dad8956489016cce51d993e7b6597116b9ac6d9b3e41f1fe0f1736dc72422a92731fa6a7239ccdf333cc80bcf56959180d80c06173232cd337be54878dfb760b847f0929cf0f98da7881a9e3bb1184694cc8e86f0925786f98ba99b59a8fd4f4a36dee234ce21db34cb612ecfa2105be582e56b361aca267e1d3972c70bf59baca8ee049f49cf70081ac8706badc9f0a98d342214e9cc6e55ee48ef62c476cb5d14db7ac14f1c7fe313dda5bf948ef1402a209b5534d31ad6dfcfab3fa8993d9cdd2094a62b454d6cf618da7cd346841fc232f1616468fb6b76a7f54946eade821914c0a16f24e8689e25a793ab97f78bca9d6dd936b35e2c1628994eaafda93c081b8d222096bbded2496a7cebea6597c84065c727d62854c780f79e5af70d44f58ffc0373a20ef32a877decb1677ae5f3b10d328e221e0905526e73e8f6033d00e6b64bcdcccb5da030a488e2966e06cb13b41ecd8ba90037508b05e9841b320c47c9c97d51c0c46bc41cc2158294b712e813a7c9f2806dda87f1b79e46c8a00f768fa879bbc5187b5f5e5021f9b2e7f599c59e1521eb54e995bf10a9efa1aa97d8411ba70277d66cd969b30e4c15a904e694fa255bcfcd6e310d1d8c11a56d95394a57d28939b0d0bcd7ee7fe03fabb6a0743bee916bbe399c61745e6ac73d9e10bbf62cc9fb4875addb6c925077285774572c9a3ece10d8024e45ad8881ba5e520976db8ff1585f8aa43f7f5a94df378f7c445f735d093374f6bd244c4470b3442202475fda257e6cd8320987c389239e4bd11d8129095bdd6d1721829e1177cbc75a2a8bf2c9b376a12a5faa4fafb8413e6ab53cf42ea24907ceebf0b8d49698904aa9b1563adfd18212a1728fd101b3549188c24b0368ca7f34edd768b49fd95587b896343154e58440761364512c7403dee89cbdd16bbbb7734a3e42f008aa1e58e9334aa12bc3eb67886df81f32b3b8dd4b79083ff5e134a76397c62aed7b7ba91702a26ea67644cf3c2ac9afac222492d2003aa7b1d9416642c9b9c6d882f4674b513e48a69e95ee3f36748127e708a6713fe30d7b81dd8e7a0485674aa60ae4463f3bcd3bce34461348d61d135da745dca8ad610dff1f8b6815d53166e73753de7facde49cd14ef894dd2d70fd216ee256b2f6b910bf710cc2234abef7c00566fde56b64e7a9ba8f8d3ef3d95090e778f9ae458ccddbdd177701ef89746e8ae2a51b0e598f2603474fc75480b0585ea06c8ee46fb6c19383a3b0cc1eb5d76dedc59aefd644e26bada610915009bba34089f2fc3462e29b6c24096e86c8cd229d5035b6e42a943701baf01fd050fde72e0c03553b6dd3d5b5b036801af31a60a70defe86400dc7e1181d3b7443a7033ff3469d3df07485410e6580062428b7682fbdb95ac1675be18d33da77919810b905610952c67f20016879b051d6cb3012a34c75ca1a76dda6a63816680e4329ed43cb6f0fedbde1a96c39c47a1a47f59f3a6c0c310b1b5e2b2eb6594cb52af12a30cb8618bcd044188786ac453f10be35b417ec9e9d6ffc982b3a1de89204e94e5990d17f0866dcf242bb27a16e197d8d008c9bbd19f1f32b9c63b822065d730611e1270d14cf30f78f47f8ebbeaa9192d04de06bc71d69ed177663c02dcd9bad04f1784308a540fb7bd6e8396c17f81a45bf9e5b4293cf7c9d64c5066196851b8926db9444cc16d5475a746bb4264c4d81e6e1eedeb4a0d0f8780c8ec9e7cfd7a0b314461bbf416b5a91746912fcf76367629a86c3ad31f5ac7044c06eb1c6e7826d30bf78b3626df28c66727f14f711816742b4985c9fd13e3966c671b009b838696800d66db913cc39538c0133773b2048590f0e530bf232a57d5ae6c76704a589f1f6ec04a5e9d229c5c5e3fafeba401f087b7858139fd15f01685b999ae3dc316246b43c27045a474a19e97bcab565bea9314971a0021e7e54bdd477a7831d862e83d9c0463262d6ea72cc8b81c638b5aa6fc52840153de77c319bf60658fddc20d5a9a9a60e542b3bfd654391a34451a963cc495a29903aa24b209e172c5798597b722f17901f7d85f311756d283ad54204221c9e952beb83df162ce01efa753e89bf8e539f60e9409bd0eeb808a47f36da0aa5dfe56ad3672f79f56cfc466fec749f9adc0f5604f1d4890a0a1320aa5060d29bcb5695a4e51e2b2c73c707c755072715e2dd99e5aa99c978031528d26f2737357270cd50bc1296593bab42dcb5b6add54fe5c71454b71e3c194a9adf190dff36a2200a9a0635800913e869a23769f1ee32edfaf1e6f2e65cec2e89aaf24b237080d7748e06b7f31f80f7f681a384485ebf914484879b26a05f8d05ffcefa1421bf509746827f84ee9d4c2998354e1c23e98fe735c02393491c8a819680cd25268e55f2fe2d3f1828744d20e9f0c7f811bcce7041448510db96f2adb73c6698e1807692f34e51b820166a3484b7605f5593fcec67fadd5dcd6f1e5254babcb526464f62925b3f89b9bc7e580dee6e3383f2113e0fa9a463220a554fe1002f94cfaffb1e2ce11d5b6f3ad5d4b78d0a6a83ccd81f6cce658b3ed6beb159cbc6f45d23fa27832d6ac21f21ffd3cc9b1ac7511bb10ab2ae4e71f03deef6f765833a2194ff212d081712238debd18bdbcdc20725a15aa09a71c03192293b529b2f2fde5c0b2de7dae7c4a0f79364299fd062817d2eb02b314e71b7081fd5f4e380f3d4314c589edaab2c2ad74ea54876e8429796e3cfc6d266b9ea687f9347527f09536ad50ee3b0c47c4474cd71497cc5aa98bb8bbb90bbf207c7e2c8c57bc58384ab0e5e67b0d5b0de48f92eb421f77c3c7a20d633b7967760e679928d790a0348806b207cab6d251450a1fc6ba22d1670e873ce8ce19618fef2a588f2b59f59b09215bffad3112e1c87bb5a12c54f96478a85c037c6a676cf4bfd47494a0385a262c0202ae80501e0a24bd5686ba3578500bd2cd9f8a2b900c1f4da75e80eb8a0b87280faae6fbc91fe375bc3388b510116f771362a74707092e30be89b1363cbc6c97e6277a024b5470a009ecb222bf155da4aab21514afe85a2439b4249baaf5c6e642784ebea013861568f25d1a9da63023c7ca2902dac8bdee75c5b6669504167bd45354d08c850183d8eaf18dd81d822a683fb7748f800f131c85786211869195988018362d78efc4eb43d0f748b76d9752ff5009d291795fd012ec9d3888fb4d9c70275c3e44f26b7e320e16e4170667e4c84847a45042355705764639fff70749f6284ae48a8620c6c17cea3e9d342a3f75882233701bdfcd75873194642c80f830c1a4e04f41f0ec259a60511143c434f4f1cf9d04e9fa736be745fa9ed68845e8f6675357d1fa87c0a8531872f1fee2ff9d531549b49f0104388febf58679509983551780b6177c6b45a3385d57a0e9adf49a6a0692f7b74cb3d21b67e3a5be9f87ac25020d3c936e9ba7cd4db03ce7b32146b1fac98cba1f707b766a74b8ef1283b1d85c9e4510ced31bac7592d17c3fbaa797704a5f51c0f4c8bfaf9a26e585b6f9654d250285b54203c382a48f741b43178d199e1b555ce86ed46733c710989bd96e7705f11a37825a5be5500f930c20d765c4fc77f57d6ca18fa289844e5400797385008e4cc6d0dd7067042576e2be9999f1c9ebf2f1e4ce8cb77a94cc1a95fec8ab95f14d53219626c99e0d645f9442bd5e371ea370b58fd3e9862ed4a42ebe49d89e2ada237389abb47d795e6e93aa77e349e873e967fc5444d8c623bc4e497bfbea918c9c903516b6e61713ebc9940241e5cfbbfc4ad5715e94759a7838b6f3a55627680a6e7749b170ea68166e869f205e7c05caad264426ce2f5c64c3f89f540a1181c0bc84002dc28a77e8fbf4deced09293d60b28991c6bfc01146202efdf36c1d7369d600a6c81bafe724be8a7ca4bacb3b7e7adc1ddffd556db327cbcb9dddd7940020d5b91efc2151a42cbccd9fd21dc69d21a547362ac0e94b9cfee272fce4ace4888cd243914505e3ba23bc671ee21d2fdde79791da465e14381ba5b183ccb2cf2dba4628eb0cfc1245be54be8eeac04a42207804200de88cb498e03aed03ac9ebff175444fd841e16c9ede526df483d8de5a361b57258a80765316d575a6077f39e739e5c7384c14998d05b04210a6441c96f5d5cd79ded73bcfafc762973e550f3064bf7ab7f9251fe309122fab93ec0c7f6bdca13c9c5d5a51b190f68c6478a6db4b2253929f7a292f14bf5e0afcce3222e678e4a793299bb1ad96db12e0bb4cb4840e6336993371d9a915955c353a0114bb8c2bc97cdecc6eade5f6d8fc28bc81b3c1261605fb942d9bcf1de28a4b37336d1bcc78a2951f57dd2c8368dc53196d3dea92e9df54faca2c050762c5552120ed00ce761b49405e5bedb431488b23779690024c5e5a9fc7f100690c4a2deda2566a8a8d7ade246d54bd07d85b762a499b26ff2838472acaf55687b206fd99327a877873449e6205b42f4496f538342a1ed1707ad3b6f3bac0c7f15431ce8060aba446f8ba6210d32530a47c1f7666cddc8c91583327f8af48ecc16c6f730319293a54bdbe9a653be857b5d0102cab4f4ad5de6cb5bc0da0fda2136778fbc07cf48db9d4588d3c6bd1b3315d2f90850d654965124aafa3bb8580e7c53c7d438a46e2c9070fa99257d57a6efe10d24ad0b3bc4ab8639f86d25a3f421e1d4756a789aaa26e0f713d2a80288b612008119ac7e30396d0eab0f645a2193778539c839fa7e0522504597f12e2d00b547d05fc7e6da881f24205f5ace677a958df75e33c198f87961232cefd8eac42ccf26e6d8f8220d95e842b946d45a2a4f29642cb2d4b589ab987a643db901fe2e6929a330a06aa701620193d60c6969d0121948c292f641d8813015df0f2258f8d6cabebe8cfa5dfefc4ff08f3dadf100c566be677d403d0cd923fb3d1c0f67f5cad3c0682a8feae957e5565b736cba9465796d8834213d61a9cc3d8b6d519ab62a76b690e23548d03d96ec39fd4a2654f464385b237544887b736f0a969ded42f444acde1dc8c9e75200220bec5dc4d8fef0ea8efe1235fad04bb7c14ad81d1dfa28b4e44b71cc2311c9c47501c1b5b51f7fbd1e7f02e14451c6a50c2c00694daa57a8e7b51c89a627b77d8d0d4002f41d421698d5b70eb8f01248144ed8ad2cbddd2b1020133fa146696749cb491ae2003a306c9c1ddfd060eae7fcf95e11e327e7155b4bcf1e5c5506e4b693d97480dbc5ac25a6161222c9e34afb1570571cb888a20607556a4870ee2b222ff32ab0e2e3b1542b61a4408750f2fa4965b9fff909290c5202a49dc2a775f1b5baeb9930755d01405b7662fec8a5ed7b0c718c1ad3a4b640ede5a8aed920def3c6e93c0ac13479833f9d6f68404ad1c72bf6e9b44b9eea4674f9529c227c9c67d7fe7430b61607a6fa533019f5ac1b6f86db4e992d84907c35ce2fab2d7fa7b0000eb85e3cf19de26ec4b0af3155c050bde9a28ac7f749054fff56bcde5bd7c1a2adc133265e0b67361eaabdaf0b9c33c444ab81209bb2f3d2504ab89a8e8de79fe78877e88ed7b1d92fb49506a6f7c78f7bc50da00477c59034b3b81051013589663ef997b49062d74ecc928b88a6c5c0c01c8d234f7f9f951c469fed4c2572840f4d0c671f3e6290912dfd74d9a9977b3d6973a1354e3a8baa465bc51c25afe4a02590fa36fa2cdbb0bc8ded9c2f9ace85c67c5f0db0e4da18666d86971849cd7bd3f273eb765c10420935e784910145ea87a1cb2c09c783219597e51b2e8ca16f51051b0199914a0cd90cf67194320d48b5d53e142b10c3d97c481373e8cbe853ec3c0cf317c2304e453eadf8c53d98c125db40bc0f09a53bf5ea373809a2a5f2b288b36792bc5cccfb0ed0d6570766d6bb0c2c1d4c479c30dbc1d886349c7ad96c2b2b7a235cc936cbb03fc5cd99fdf1725454e382de1c2c7b9c59f5ed820b632588dea5c3956845b22c1ee1c48c3c26ae8c38a794e520ff8050d3b5b080759ac737aa1795ba7f9a10757eb611bbc47f6fe376d50c1ba9093c27f124835c21ad5f396033dee38c8a9d7f2c3e6f5d3a02c79cbd5227c88819b15afc19708e860fdd29152f7fdb0f31ec2914c27e3726ccc8b22c74051dc43ebfeab1e19a13674a591d7e0c5d835cc938743d2114c02c6427f53921b687d35019a116b541316dacef6cc475d6efde1813f3b33ad78042a7e2c36bda931aa7fc8dce87e66af62c066875d9e741a5bc06edef41fb0574a3d66bd081e6c48ec5dac812e6b329efb17a734c2605aeef70419ce54e6f2039b28ff59bd4be0878db8b7354ac9dd093488ce56f9599f6e2f0f98614524b1bfcda093d5094f2686fe1afb063cc2c2547f85253c5f10082b136a120a1b74103ff7d695fdbc58edf125e5005a49b73da171a553756c182fb7e1c4f3d965674a7811fa5a22cb02924c36639b3dd0a6bd2189b6a00a8b9a0ece5efbf8e1335ac8932ae5086a6f0bce7dad750ae2afb72b068f30cfab82b699d6802dc933cc0cadb1012d7ebe1d7a3362c285c48f501047e20c901ad6e02960e59fb3b1346597e67d92433ca2869324dc2c127410cd15d04574700830e17d56e5d04424cf7d4d18dad4d60556266dd5ec61449daf300f06c25be8c2dc243ab0cce52d23c404c885ae8fcf4a9ac2c3e10205df126fc6bb559b3049e7f12d54c53e4d6acc15aa18120380858cdd6cd5294193e8db41592c0046e21564d8b98b3f7cec7432865c2c90c68ee60b072c1091bc4d3913ce605aaf1f9519df067da7d9ae84bafbeb978386f1e963a917663286534616289e765da26496f03f9d27558af95d8f3cc48d1792df01d4ad2db653aec2b7497892ed2ee03acb71cd5c6940d61ef7c9231c29923c3571fd2ce218d07c68924eb2efbe5a15c79600c11acc3ecc3b35fbfd1bc5144664409839f1c9fd4d0081f6ed937ba90dfb8f8df1dbd665c53cf93255fd897fe92303517c8f32da6a869c5486f22cfeec73c58775b145d6d90bcfe79dba61fbf621cc85f2741b519e56fb1af458f42d66949f0cffcdd1e6c42cc8976d710258855cc5031dba6d6065a050d88060cdfe8299bf8f09ac06646aab7e3b198dc4b92e3dd47964830e6063a27134d1ee57f8437f34fb9d48743924c416ad51118e81bf02e18c8dfef8fcef17b58bd55fe18aafdec124405303a6f155e4b6267dc8ef339a07b55741728651a9b6fd738bedda461ea356509c63dc39f4bd2f0e37323e5ead16a5211930bb7fccbf8487056c182b2ed1447efbb4cc71b32cfa9c629142f7ff0d9f4e69b8b0cf3b0750ccdfd599460f8af3cfa03b367e9e8ec14ec733a4f44e05af62a3e706587e7ec5c47060dbc2eb35e477d28360b557824152f1af141790deb1dd6ba6e67fa4883602c4456477163e66b29e50db4badeb1eea3e0e297feae0e36c4d1f78df8154e5326226484810baf361e2c985da5b534236d802901611481a434a40f0d1b12f2b29d433d112f493d2ad299852e9567df2e7c57a74ac2cae11d0045e0f205cfa09d58fad3191157cf1d90789101429a8cb62d7a9a7347a1f306af1568de7076da5312e53de2b25731ad9ff10cdd9e822b8f69e40ff288262a32d2f2ae810f5200db6a57be8e6055660358f7c99c58d761a9f2d43ed2c4f9e2e89030aefad7b0f4ea7bd7fa4872457e628a1550a9400b69e2ea3baf7adcc0b1829a1afc84482de6f72d919c0921f970c7f561eedf7afe84698e14cdfa822a840826065354c14194983260371da3a5eef000ccc04ee490d75c9ae84fd38f0a8032cfc7619b4c0293b803fe34a715f2626a4d37009ee4db2611c7a9de09df5681d9affc93821cfa28cb2ccda5275712bc6db9a0086cd0d6209c759004856cc5a36729e7f4f73f530e7867f3359ed6f65e3d597417a7b80a93e17cf104749b2509883982c46e1eb72d1f0e9576c56028c4fa630ba9a45f4e65a98b63b6ae465f0bd7fb9945dba3694351a9dcbfb980070b032ba12eb46a8d6927ca30568384dc85c6443f8ce60e7d8b2f466892dd113cf94dc1f0963e0fb5ddfdd210876648f866888d0e563a883a613591a671107b04f4bde0f2acf205dfd204d0efbe293c5f3f64a61def3460369e7417f8435b86ec956ee49737b1a35e9a506d34ba858f30fc18c27ba5f9c0ed8ce53c91abff9848303fcbae7c1f37218e23000eb74f8f1ccacd72f0f1b991722d9cfa7ed014a5b86794a5de2fdd732a48a3ec06635dff0edbcbb30e7c42e1db4e32fbf0e0d9dd73f2abdcf0e45faba1e5b20f8b0e7b65d994aa5f80a1c815a408823706a4d2917b9dad6380443f72315cfd8fd24fb8df075a98124ea689848f7ff3588d0659935192795e3a242204997dd0d29cbcc8d70657431060e7d0a672cdddce195f65a8aa4ccc74cf5c8cbbbab113c16a159228bb9c2dcdd3375b5d6d6eb2d45555547ffc68c61bc58b787dd71766fce001519409a7afcab729d05f06fc6ad8a4ec4f7370aee95516038de93c1b5c9e60112f29accda56811f1104f73f51d7320274c6547e40898899a67c4570fb2b7be496919a5b6bd604faafc8fa9323c3ba5b92cd34d547055dc56ab023ae46c82cb8dc0481cc0633113fabafc7719e555beb804bcdf4e9c95f9745397a8a7fe1f93183b63fdff75df74420982b893afc261247b1159ffeef1463e753bcfffaeb76f8e70426922a86e3c1ac38d4516011cfd83bffb0351dbcdee61a2b01e89d79ce55e44ceb1e383051384f59d9807b0ed989f6c8f78307eccfc2fe9dba33a0b7199b24be410359e3f99b58f73f04ad14b512eba154ffea6ac3d961b0a9455d450c461228bb51f9161addef0e1966cad955929a11cdb8c26d4a82cd217a37800519b45e5e9df237893150b2d3a597ee9fc226fca8fe131e5cd45dbeefc1bb051f756c032f32d284754f13cb68ea371c1356efafb01dbb381417ac920264e4f3b24eb6c384fffe7e9dae314867f1a8c195a1fa4b4da4d79970da83cb69ce5c480da2be5e3fe4b04503814fe4b3b3a8ee5fc198272661d842430b16e1f6681c8a50c8c7ffcaeacce1c5853a61708e12c740ff95a1aae80398f9a484a837065f3ecc4bf71d944af2044376869420f7b8cb327daa10851bd266f21083ce3c17e518b46ad48e1527fd541468a409f9ecf8f2e10f4fa2bd4a229591b2314fcd52cc3f1d6a5e3d66c0a9321ad0d5882657c29d9287615552ba999eb8368dfa7b402db36038136ff3dfea6ddac5bac630cb26ff833862f66c73ac28a11912e4803dc02b5ec4f14a5d63011b273cbf149c43fecf800eda284e3fd301a77768be3073728afe3156135a5f18b3dcff4e7174c4e596f3763ccf1e4fad4a118217f9b491aae5bd9925c87ae1a80032329299013d075c9c2c89dbb3bcb05312783ee916cfd52b4d58848450bd4f744af6bf03d5acc32f3e05fa1c339e73a7ad5dda872c70937bb9e1037cae2c29533a1ef6d3588861803595a210b1d71a0a2c892b5cb3d21f5a1e59733266a4edde9d5b33ac6f8fef97f61f37f4ca52d6305f1b254037527fad6ed8888d7e5bbcf6302394f520627590a79e4590352a6fae1635c85829fd1f764ad35e3d039463cd1390ec7ad85ddc0b54480d332f4f773cf532d13b2f59c7f4e531ea54747555c3d529bef8446272763cbeb36d44fac5a464e3cff266de60fc22daab976c0c94f8a13acf3307e7f31ef581d80e453b8e1cba074cb56d710f65a66595c7310f11659ff047930d84b2758a3e0e1c20e6d6f76f24ee5693cf57263d34dc67931a2bf4aa32cd0fde20bf1d4992da4fb998fbf893bedf3c38f727474f36a8afe5a42fe6936f08f468a3982cb1a480b45bd2fd9c0792a766734d1e61edbc6045309166b3fc1944a393cc930f35f88e2bfb2ed383dd5f5143b1e5af141e45b69512ad2da233b882099fabce92f9df8ff997d4ee25cb3f358e1e245a6e0db3584ee6cefdc85d144ae0c63c27df7949c7ef5931340e33f3eee1743227b377f4903b1a3ede58e9293e80ff1c9af04e3fde18fdd3227f2979dd960089f390369514f0c92e76cd2ee576b6ea70386a468b27c1f2d0156f1edefa813582aa0b11c89673cc3432f5c3d2d00a6943150799188a77c1912a6e6cac7e84986b4b4ac0607cfb1117d1ccbded02d4c326c4fa493aa7cbae5cd018bc138cec0414b4ff252d0044cbe201fa436e10487afcce28943a39773adb6813fcbacc03c72642e287ae8d9d9cac0d455d10f9da69cfd05c27b6c3d081d3f1fe304ed3b76ed55e95a2416e212cf5d60deeae341183c8eb3594dd3a33579f7ad4fb8a1269d0db6d412137faf48c96a2d1418d091ff3d485039e78864f9c431153400d60a3aaaa003c7c13d6a3705aaa27d7df39058eb7c649a456dea347e44abe689bb7ef52eba97e6810526293358e6be303f4cd23d8c9fee186a629c417e70aa0f34111fbf2a377044d6fa6f770cc2a08a6991e00d8346f006411b424dcea643a018b0303f02a3280211c8355caa1c0258f56a37b3bdcf1ff71f7617b21f1a756da0535ca2c0b8e705b425e55c85bd47a4499e8c60bfda197f9f46a879f04b2415ca4d5c4585665a021804ccb7d82b48ec40c7c29d6392169861a195745228b8e31448e46485264288c17d819f20600b9e7387aa1452714bde651a061416e145f201776bb1379c12a975f8881655df2bff0f6710ec0dd000470cb295b0ec93578b123529918358630883cf4f5053d3824d3694e52aa75a1bb3ac1a6afeaf06fb422a6f158ff3b23399a359cac689087c3eca90c99abfedb17883958739b3a587f01f53a4eafd75dd1ebff0f359fe0c57b63c8161e114361df794d1d278256bf6e06359ffadb786574405c82af91cf49fb21e5d82e7179fbc3e7719b6238a61e548d607bf977badda440e8ca6757dba690a3a02d6f4c43ef4b934f10cad1fe4bf8bde3e68ddae4835301cf4508938cffdf13a399ae6846c6c9aa5968fe4da72cdabccaeb62a7decac76e23aaa3e74b5bb51f25a53559a1944f97eb7539bcdb19479a347393e764f880db30e72c23ab4c0ff093bd655f52e5f0df047bcf59815fceada556a90adc0db13e7f7ba2ac2489932a2288a1ab40075fb93002409938f770b687f67816f8660218d22f5cf3ff6c592cf7906ad39480ae77f2d9ba4cf0b2939e876c5c988910a8b51d2a8c1fd17b7ad31bb8dbcfb4a604b51ce97f38a45ea184e6f52af8297ef7dbf56edb6a331b34db01fe8c9f6a66bcd6c2fe101a0dbeb74c8242d0e13409d02d62e2f38e95bddde68c5f06a99bb750316cb806a500ea9e7afcf8a733ec20eb66aa5d97c6083f0ecd8f6ffcaaf9330765eb653920f63a300a7df8bf36ba3bd0e11d02fe099da69ebc69026fc250f00051d669993e8942414c9f19c1ac61a6b9a650192d9142ce58270b0fb4dbc00a8308fc7b5e2f2907aec323451a7ac4897636cc5738d26dd1b3f397cccc341079a31768ecd0448df81f46cc2df1135828ef928564103e28132b07c93bca89720b01dcc1aa5bdf2eb67ab957c44f5d43eef8cbbbfb82156a837dd6cecfde7f43fbcc2db2d71f776d2d70fe216cf8b07d0dccef6933e1a0b9a80ea42819654fc42cf88e4394d15cf289e291d73bb3bcabfa431f7d9256535151b8184490cebddc1fd07e09bdf8563159fd3bb34ef58dbad272ef8cf90345cac11ced75fc2e355c1eb8c6313d770f50d7ae5b131348d1a378c7b157e7f984df9f8bbdfaee19a74b9d0ab559392fbe96c24c60e1ea8d1fa3a4f7eb93bc092b8146c2803d92243457b92385c7c883d70e393c1f7f79a9c7de2e753dd40cff965c0dd8c01f30eac1e547e98b818b7ddec29d8692fcbdfc1849e0fbae82b9f86fa323ed5ca632c6d5926482cd9cc368ef45cc629a9ee067a7052f60f8bb1a42741e47024cdbb98e207778e20ea8de68b21dcea8b2f820921ee294b93f2a8a57b4045a9edf27fcdd0c7a640d9b1df9dd269494f455f261f7b9b6622be9ed33cae915399b309029b13a50b2ed1ca73f2be4a711660480b89a79642f2d5896979acb99873c63bca7761a87d1382fb3f364edfb6878175a3a629f93f6b76ce49394895f690d2a1d8f5207f2a5d16a4128eca77f2df78b1c5dc21228f45cc974eb4f6b3de8ab26db8e2b91d104d63469d6db986e1f1bbe919cd2743c836724661afcee8ecfb47bd2e1aa51bc01d9009e1fbe4b1a4ef81c77b950780bc77207a657475d63311029406f778f044b8475501b917965ef099a05f2cb6ff930340e38670f971eb5b2674611c59ff58311e192822801ce8b7730c4bd554e1436d06cda049aba3f154b19735bc4902a5c731d1a802a6e9c31161c05d5372342de08a4b4c13f2c95ccb9f86c8068183cbff9a9969d6e5202740ff1ccb1a8dbf2f62558d9132b978ef0255adc81ce7b2750ac49e959555b3823e01b6f1f353929254157842ed064b0c2802f34e269f76a912f2b84b02b0fe61c810bbceb3568b2efc10faa3903e430739256519794018950aa7f0dc2a163670c91585f9bbecfa1ff5f10f7ea26fdf980fa1d9096a0e790f16434131c4cb41f7c17643256fb2aa35c42ee5556421f3e9430a31758e3d74182ed970660822c170e51cbe9229382fd7e45e4d2113b127dd5160b6c73db31254e433a4ef97e2e55d4e82dbdd968c451cccaced7e820ce417653b2308df3bcb4a053732024d7fbe37d987c5f3e9125ca18366065763fa464378236910e13f4730035e0d3e21d65a31c466a7789784e8785e4cefa785304f00d18939c297fae7d366c0d526ec514ae00d0649dbde29909b81ca1d6a13ba2e0d0cff935a806f8e835a539016d8413fe5ca599677aab24095ac8ff3401a540ee4f8cb42c188c0abbcf48fe3c9968a42930cb5927fe8017d3ae00b4cb623b30c077bba4061121252ebf838810f29b2408e05d2439c83885b6ee5cbb6fb2fe1827801c7b88641368a93590dc8c8e9eaabf5b5128bfcf55deb896bf16f53ea33bad6912a7d21956f02e94b46207b62e62af051aadc36376ce38dbd7762910c04caebbde0cdc930e9dcd392f167e69e63f88fd4ebb125752f07bf46d03663482b46f3c034443388e830e604066f0a2f602aaf84dc17f891350316afb8962714f8f132d43fda2eb3c0e009ea096c1d2f31bb1fb01c549411cfdcf08e5310892a83b3675d7d6fcb5bcf0c4fbf873f6e55634f92375031b7a49a394549e23ab3332306c9ecc8decd40975aebdbec0fee332b690a611b07ff4b964cc908fe1d8771bb83b4766c73cce1ddc96d6e246ff839a5939adb2af9881b63364d22bd2efc1f49656f97f3b898c71dd6d2c61621e74606dd5163e8e8c6285c54b22cff5e9ebdd1235a1418dd154f8bd8076f0ba2daefd4adcdd6f7a311b30f014757cd7ed2091b2a9ff16ff0f28fa2f0c6f7894c50841a002e76f6009cc98bc3710d28cbaf0514861d3b4bea3a9495cfcd9244cd03fbaaeb01d4792c855cea569cefa7ee5bf5facbe54952479de69ac7677f515b78c9482ba7ed9a9ec70ca60f473a90f0e6c6c743ea0d679a62ae56b1b7dcc3135da8e074eb85c1316192bc810cb45eeef9ef86bdcc41ea1ddb094221ae162c376c081e763ddc03c7ba64951a1bccd67cc87f32baf1ae1f4f7365bfd61908b60a800548f3dbf61fe49d572047230920c4a65b62ac65813a989e654b0c760524e5f2f56214fdcd4a324b10d49d1ede1cc8e8770fd62a923ebf14f66adc93a003e5417f58768cd23c31f49e110da2818b94b3a9bb85c9623fa9366504fd4561846d9d4276ea46f0c1b4b9c103ed3d4af7dabb75835886f69b3519f3b7f811e8d2a58560b90ada5d4981d67f985712c0d63c2fb437da5e7020ea620b12307af87884433656e77134b473bf4cdfd38ddafe2d7317db904acab2b5ff0d1cebf1ac9a34c075de9d6a9ca1aff9783bc31c2317d06826fe9dacbed5a6f81c4f8cd33a413b9038020c5afe3eee7cdec46a2f42d3beced51542ccf9c33a1bb42f5e34c68271a2f1d57f92c6e82ba186e6f094ad5529c45f40e6a03fe66aad3fdf7ede0e08721d0b6b7043b37af257a45be72b6e024df48f76107e52f838f8ef437a0b4b4fee84fa13e8e5b23a4ec8d786184c481d7caa22ba1d2c741f9d4797dca6e7b2c1a41e7e65f6d9f5e3773f390be95e06fe566fe0bd24ed9432c586c3d41a015d0e11cd41c8846b39edc33234d00bf13c12973e95a0f07c0803bcfbe6c6e862aba8c1e997c51127eec4d94710dcf190433fcf8b78360e430015240aaeeaea4a9000e6069f5d4d59601b9fad3dfc5c06947be9710f3288139051fb7106a733a91d94fa56a99b928c6d0f3dedceb76f5d444d3d9b28679adb70af31ebd25f9d232e32e8ca0f4969fd6d1f61d4795487054bd84be8f04eecac319cd345c94b10aa220a5f5d163eb549fa0c86d401e9cc42b3c8203f8703aff2616cd5b225c2f8122a5e959ad81c506ff4a1100b360411fff92b3105d60bf916be5caa64d4c4c0cd50d6f1ec3829f2da43c788206f5cedf46ec6c29e7d190f8c3acfb0fe705c9d2bb5d5b85198a1f0e0ab7176f07c3a4dc745351bd789339797d1017fe6dc916a6bbcc07fb7416e9006e732e6f3ace7d238d2cc10fcb28b4f88ae925d1a2017f80f59330d189e7a05c080536d426e941c19de42ae773bcc5c234a682c213f7e4b0c238fdba0b5bdada5b395cb115d838b8421a1739146bfb4b4794867ed2bf002823867d588d1234237457a827ad74190d2ded41701eb850a64124c729c1020e170680ba923bcc64331d4bdf2ac9f79d7e51c29f51703901c4eb228f98f0de14eb21d3e9fc8cb86f69de39b6351c99c1d8bcb7e00336fde6eb390d881134fc5e2e467e5ba04187efe9c3d50c0c0b211ef221052871367a7ed1074dffc27ba1e7d1e4696dad1ea4de80f8b4ad0329f55e7b8d37ee2bbb6632f9e00fc91c9e442d374b9462b9eff2fc482ae7b7e58f495e2ef74f192212b092a30bd8fe8c4bc44244cca9afe443488a8531ce3482322c8c0bfe53538e11dd268fc32fadbfa90c362655975256d1865a2b9ca8a80b429495bb31e1af958507f3fe7fd31da96f5d7b7032f4e1ea0ecc68d3ba589a2b4cad524de303b2230d4b21427fd948d22ab0514c2be7d39073a963c46659e300a07fa432fd6ee65c2e9d843e6f3508efe16104b8840f566560747b714c2b12d543f45d6cf931552f26906b9305323aca10ded847f904c69132d9b76f41560bdaf721634b33eabecad5320e97bcda435a7b5145446f90c05182a8b610973d6ae341f27b3a64da17e0b70f78aed8b33132f98e8ec56e09d31a8052bd009af28e22761d09a7288d2176f7c59b1245fe90df0a8c658677b6063996ba1fcba20286a395fac3e332e344b2d32dbef8feaf7e7c9f74417f674d43fb9d7dba8acf258502fb1e8b0a86f5512756591954e2f09676cec15cbbe9d2e5cbb816e99fc8c2c84e2c8a5f7829b68c028e2f11131a8f19ca4f2399b6fab88053e2168374fb4d7f248dfd13611d0fb6376ff053d8107dc853fb4feccf8a4dc0282b8f25c48fc3f03c7f9569ab5183fc30db3b647b539a34df090792fe5f5a76b17fb0659069868df2434578e3d0262d55a7c551bbb0f4956798f534c88bc72c1290522b417b102c7724c1b428ed38d0cae7426ee2d9af506f7e651dd435be8ad4cb9c51b2347a3dac8eb275531c8658aaf9681dce84d9f2a06dd1ed5f0c35bd30d3cb473e8134ac4f012a00276e966b872dc5144288fbbab2e0d2423b9c7f5d631c8c172caa7432134e852460044155994b841f5170337ca6d85537ae81535bea46fb1ea21f3b0482236edd6643ff284010b3fa21f575a1a243430c15dabb527eb19732b74686a12e3aaa73749e428deed52fb96928a7e046c8e3710001f6f5ecc771732b6b372a2b3aa514958846763e762056ba36b822ebfc23bae284f7ca86e4075f44d6d2c4d80f349b8a8070d0fe5a442c3d63ca9aff6710207df7e249d2da314dc92a53ad1162b864eea4e45b95fe3a1b663de735aaae21454dd993c710d03ee2d62444c4dbbee0aefcedd68bbfa5b4e0d7d48ca64cacb161a2c24c5dd5cf6e66592a3b84e70f75a3fd0516911cbc372ab5ccffc5d875e9c596006c54128b6798db7d0ef3a61527fd6060c49d84b3f88227b0e83bf6c580c396e297edc6945fde65fb2addc37bbcc3980339761c104987fa2dabeb5f27be6343d2ad1beb296a331868dd47adb664ba2a74b10679588412cbba2afab2370b92256568a30aee9155f5fa0884d4f51420d3df725556de16bd14a0cee95ac15f610e2e73851423ed00be0bd4eafcb70b3aea751ccfeeeb8d1b8a41ae9a2ed946daeb5d6a038c74db0c6ec6a46f4d7a69001c69354481b37799569e068b473f0b597fb5ab8bdd92464b58f5e943e442f0b5d405c8a40e3496c079b2208983dc2ebadb4ede41ebe7c6d1289d7a9904fcee5ee7a1c81eacb148058a1652c05c8734ffe61057f891ab1ddad307215324118a1fa36a8d3e1643f04d7cf6539e9c0f8e4c135b0593b103a48317f166f2c95056043105a2c5539a35bad092849b971a078cb8eb11a57bcea2d56c48629335030355c5e0e49aa5fdc30e87a48befb3c2e72c4491a75b6075b4583e84f289d323243297cea2d26560047b788055e730535ce2470dd9f84edcfb6c3407555b51f36db08cb6e2c47080eb1c5d26459845b49ae44821e1040e2e0ac103143eec5395dfd2d19682c55bc16e3c4388b2167633d873b4aa4f587c6d56df7fb458125e3c9c6f0179225ed93899c23b4a348cab4e6c6250bcfe563983450f86a18898a2a968c641a487844e07224a72d48d399dbeb4cc9dbf7a0e8120672d1aff66adc252b78579b285202d890cff18f539b3d9ab675038a6e9b3835bd8f124b17d6d7a66ec27bfe6240e7ffbb527d092556c4cf98fac209043a1601628f8114613089d37e41a5f28bae09d3f9cf0b38a7ac315e226d8d59c800dbcdc2f7aada79b1627c497dd232e0dd6c10ab4736ecb27c1d5098c51699f429a019507414ab73eb4ef64cadbc792f6246336f45eea659f01962980c4b20f57b580d0b4097a16fe4c5bcaa85322bfe667331382c84cf22d65aebd8f95e0a812a5454e7a6ff019ac869519bf29f097a228acb0361722d5f5cc830f6e6b1e8d84c4fac36c887fac56fd0224d7101f81377b4e276dbb5dbad8c3b947d8eca753fadd9fa27dfae072c0f8d49a469b9bfc4fa5f73c4b910ac0ee24a139045c20e40d8aac82e068cf9ca707dfc7084e93d31bfdafc4a9e21347023693e80f5f6455899e995eee1bcf316bb6993881047145201d1099beac06772dce176c62871af7bae7015534275b3d785465b965f2ebb76dff877d4d4f31d68e503cadf23a65ef14f3e20783fdaf9d98e66ba0e6eb9b034e3f1762be41025f46a2d6177c69a4054a558310b83f9228d19d5b20819b6d165c007f4a5e9648976d2bf8c34bc3bca5cbc7b7eb0d0ca9e62c708d83845d4bffc1e7222fd643461d52ac0c7ee093e5cf77a058b8a6f01a485bd54b30df4163f4e6bc5f4456a36971725b3e61e5107162a72b580dc9aaab7f329c29327ac0bd9e6c3348c2121251f79b06b1f42e1aabb8dd0cebbb734e56b920d86ca8c700f259b234fcbce2112e925257a08e0cbacdf1cd7a8fa06e26c7c74adace5a737892dde3fe90bf7f2cdc158dc1f8729d65e652d1b59b27ac9b8ff98dba5703bb1af4e9b5608c3ed49d27e1bf62bc78762e359849ccd99a57351e11ed3b047ce31819a8f275f72fc40c96abc9241cb704e2eb7705d43665ed66dafc0a2dd8a36ca8e9bd96d80f633f383a3733cad3d859897fb42df959b709f2ca875407dcf28d2323ce5f373e1bdae7c73e7b482e103e1f60ba767579ed88bfd286531fd070492b03e7fd80646bb0f7ec6c69eddbcb1582346ac1f735273e15a586fa181bce798f6802cea67bccf4bfee5c1fd18c75bdd53a7860399171ba6cfce51720a508f458229ab84dc0218926d4d3f28d02aadcdd1b39829e97a593cb4f15daa5572fefa004be0471e36f6c1597e679765fa5487ab3248506a1b0853df459d74da007b66ef51d711f37fbea55bf1fe998825b69cfe1a6ca3db377e7bdb91ea97ce3d770a1a695bc7a6907319a7862fd9714482de0a7e37c1598ae85e173ebfe635d35bfba27b9887f531314fd376b8f90742869e97acd4f5113277757e9d7f53ff0487d25918ebb485a27cf5723a2777a096563680b569cb2a67adb998bc08e07c1ba55aa9b78f5caba9518b8589b936b968bf6c92f9057124bf7570312abcc3d7c5192ed7ef1691ccb38c60158bb37f062d5b78e35c5c4d0f1753b7fbb16d5863ebe2d11a9e47a1afab03306781bbc2e190606dfabce19dd4d48e7437d756123c603a119d060e0f0b5de084b4c22ee0ef84ff707de39ede8b8bb4717c721548425ecefa3dc8419652cda1b8c7572407daaf0026ab0f74fd9597133a8680e7465443d36bda44e60e6bea31c207ce3cf5bf6ec570efbaeb84ce9c532eabfe5bf63fd510d19bdcee8f2780142dfb5df15eb9422c5065c744f70970bafb7a99f859ab102636a7cc6c98258cfb9bb71d78dc1d7351f49f6328c25c512c59c504ccef5568f8136dbf215ba947f723f59f3c7c25e9458fd36c9278079874cadc6d0f1ef934843aa7d7f464c52cd186fdfd6c6d9e00340d31107163694348d77007aaa874d631598dc30d40791dd3a95e6ef9eeea7965428ce7e50f57acee22b71e083f2ccc973fbcdacb3f4d8362e52daa6274a9a2aef5a1f36953f40f2576748bf2c04bcd691f080b24734b11549b35270d7b733a9b6f997de6950c01046a343322d272d5657ea77053a9475bf7d4fa9bc109fc542ecf9521958a4f664a4cb80749e0b0b969e511150d820a8dddd1fff34b3ac13fd168ff9d3428fc4653655ab43d8460a2a427eaba25e5d63a0450865b98a135f0f613597ca0d2dee559fb9cb5116471548b9c75503fb3a5524c9497e5db6d179401b4d739ca6b11da583435ba129913e017d49015bf012070bd64326cf885182bff6da1dd516e44da02c78ad9b18391cdd3c0f54c0221fbf7f8a9346852e917cbae31e6e6e2f87b7d470529b774ae6048cb3883ad4f1b46c963ea9d07129a9c147aa73f87cacdf64ae8581fc7df2ec4ae59d82f70c59075668d9214f254381c8b98e11ff31bc6f03879448a05666afb7719e3ec25f7c65273b77145fa562d4e9304255463cf41f86ac421006da8f7992fc177bd5732d6b06286d3b2f703180aa6ae9ceeda7d728429d1915ad58fea606b1ada8fadbb50c02c7d27771d24f574d4e83dd5aaae250bae35f9e45aa2de1e3926b92458fe024d9264c6d530eaae46cbdfb71bdb70d795b6d4e56de4b0a13d8c59504ed37ac637e7ea919d133772862a31f013afc2a32dc51a51dd38209d3af33668b2d417482859aa120b0057e0ba813bcd00c793fc7948ed3c8fd1e65b6b99f996ddd44c9ad9edef669c5e1fd5bee7de230c468feda8a93a2e7d1fad33486a140f7572a2007ed6fec5aad835b64f57ad35ad883882e3e29eedc9792e60ab4a4552c58110da3b78eda16db890086c41396e9c7219bb01098629180c1bb3210db0fe65dcb1100cbfb52634eab4a86aacd3bd7cf3806ab9b7cb3a2a210d07fb6ec3ed9c5d75a3a691ca99762f73a8e7c0334c5f42ffb6c6886e9e6a4219db8ead5f3a6520dd52d3e51ddc1fce3ca60fe98c7875d5a69490586764e0090fdfd9e584c718287a7d718998a9da012d16e5674547f27be329a4a743f4a36392fbc8fe1a467762a071cdd73330e014c57aad4c07ccb35690eeba80937de65e12079c74c8bffd3279bb275a979cd877ad6902b82480dd6df8b98cfc245ddf1af917851a8e75535fbf2dba4b21c2da633ecb42973da5349940179eb8f215f6b763d849352c6177c35541cfa8b434a44352f14c037449561cb2f84d3bcf7792e0b4d3bb721bdaaf77ba6ee52399ad79d90315335989aebe86be6401f7b4ed14592fc8a1bc70b40b4854ef4ae753d08fa08d558073db2ea838c0134d0e2b8fc85eb19ecf71a2079e29235358525d2828d33a310ff5ca0e7c4209721491e4c60222167b4e7509d58046415dfd8278036146e3a32f370fe4cbcfdb52ff3850d547114192bbb28ea4180473d44ac9e226b3cedbe8dcb28e5f39bc0cc968706968b8aaef832c99e1f193732fe1594b276104f76041695d6b29cc6f1681202d8f4013007bada9ef9476365e6038479b08189e62b2854de2952b8bc91100acdc9b7a787e6fd74eed51f5bce39933a87906b1994f7835777c6afa7c4cbb14b8d4facad87535df2a05fb7d59eeeb9ef6deb3251685222be9907d23db5cf568d8defdc5db3be110182b398421b8485ef61281db1392586630381e82703005d545e99f34534ff8a5483c1304a32369f7d38d512d5b786ffe424680fc59ac823f7779caf1540c38ffcb954560ca32508a963d965a3761853e03d6675281e67e4f489fbda44a79fe1b2190af935597f471d6e79add9849ea642100d521fcae830bd3d08f788fcc296da805a175b65093bcba84df58e22a047a38d6d8769c6357c1af860a9f10812ae2824f3af4cef05d76765c7d625b55cad50b135db3cd21afefe99db8d3945173dcece11acbb2eced6953f7c474294c26f394640ee3c55d0eb66747e6fc5c95413ad0c1a3bb02a8f8193424487366ccc96a8bf8a0912fe6ebaa480578af925e1791349df5bd5fc015b20a629f0f5d1938707f4eeba9c4604087d20f1fbcde136131215496b51a76d5dfdcb27c706d1dca4f5212a2c15d43dd7dedfec10aad294f61405eaade887fea364185198e830111f8e686219ec6d46a7c276342188a9d15b91dd35b6995b4336104edf231c69a48cef508b0b669e09b6f71b5128b3af14df75a93155506b3b333e2711bd8b02bef172643ee4d079445b292a4673bff30ba7aad0135b94efc3073772ad75f8b938c44df356760ab7efe37ce0800775a70ac8558314238006d053d4137729753b1a8d04df9bda29fcf88f72201d6b05b64cb247da1a65f23b43b60637824c0c9f698688c05a1aea4b09a0c49fafba5ee3de487b95380e104cfcc5e2541cd3988c4c0e8a894e71596d16e97aab7d058183453c3ef713442d14b014602e1cb78bc9b661382e5c502c853070a5c0b7b0c39da5472b0374601c4bfc466e3121e8798f4ef71248b442468d52c54f4f967bd97e08726091945d33c2528b176fb2ae822d568bbaee6dbb27c9e9c9181e00ae8817a61206f9897234bd15b5af098598439955d54692861e6beb241fe7a37cb300df75dd64b28ba67723afa482d618af6680f3be857f049498d8eccb259cb9b287384db36efcb3917b13fe0886d87804c42382e83ed8a0fc210ca0ba3e4ce2ce1a3143802ba48076cd3bdfac399a46d10ad6cc53fef5f2d3a6198a9387fab1276ab949f088e928c4440d1a89cf89a425c197852d763104b3376db3b9a57f83ad7d17f2499e0da0dac5b9d0b83c543402851005ce81bb6493a5ceb25da7490c1177521769f1cbc7b8702024a8dfd76756e5d0a820db8f4e493c872e4fd67d5583130b620a88658d0f043cbd6a74b5ffea5546cd43263b1622fd253a7aadeb8917a9324281521ca07e9aaf86ac005b28b1abe55a554d79331be5fde485b0cbece1dc59dc6abde593f9c62239cbbd1c2f69b5c8c70d246d7d3718a5e01dd8bee37a9bf8a047abcc6e4e52238beebd88fa7dfc7faa6d679a9b3bb0f14003ffe38141386c1fe1187522e59b3b5d1ba0ba78ee1b9ec1038e8f8ca269f9e85f5c4d68ea6294acea63301efce7aa4d4a42ddbb1d55d6c3359686106f0e8790e0deab8a3e6ed4332ac627d491ce2246a3f3e179c0f17ba0449ac8c4d886675589c85f29f8fb19d4589b87ca008fcc13b46537344fae49ec61fa6b2de5e4e55929b2b295b48352fe409022d3c724f58e14fe0e67c834c0e630b260a3834d11f12b766839257bfdc38eee35cf53f6e7ac3ba5a8d92663737a937b3236068faed980553ec3a87db32942e965ad6b7e46f103988dc76fb55929bb1294ac820e47e0f22a28cb9a0089d17f6388610c07e6f8490dd88327b0d22e238d8745ea5af93aec93e317514625b2374486037d8f0b9de994736f3f109eb4ba837934df0a6c7eda381ccbbbb9f1f18b947ab657438c825a8f68d4773aa231fd6616e6f080d43b6e495ca4bc1b52cf245b1f9999cff24353f2597c8b30f7cbe1e22773ecc63a01976b2a6ac87de97700dea0b8ed5839636e3b027c2a98006bb9990018eff17e2d82fdd4740caa1b3327ecbc5023f3c84476c400dc875f67dffcbd8cffabfcfeedc2e64e00233ca70e0cd36aa93f6eadeefff45b783d66bc64d513091bc1f5611fc838db885094ecb24e5287856fcf1faeca8b541248319a84743ae37e0f724939c493c7332ada056d6fe52bbb676741b67196b85d28d6fbbaf85bc27fb622dbeedaa1e3866823cd382416f9c1e5cab759a1d9f819b550812c19f51b80c6e92ee3d11aa7251261e9440e28e4ac3686c2a43c214db6bdb0e9b55b7d437b62fda019271e66aa33014228881004bf470b1a42b0c9af4798aca7ec6397e0979bf3179c51b94bfbffa94ec272797967a925c882fd9039def14f68d9bd207ea15201f46a62cfe9df8e4b8dd353a10245d10f5f9ba6f9e389d38fe3029567d24e284f0905431837f519ca0d6ef2d5b9a8abd820e044eb4edf0a509597ce46d6fc2452491c44b748d407e8dd0baa621c52d2261a3c4cb17d85657637c315101fe201795950c55558496aa64c66f9b30961ad3a1bd35b35111d094f51342df081be2f410f03bb6325ead6bda62c703af603084b01a70d52bd84d00123ffd191467b5c08e541bd04a8c95374166aa7f460fa2c0c63918d7c81f48914249ba440071f9097eebc7dcb377dc8789edbee9258dcd00e5a216889e712bed659fe50ec525cd5317e8b2680244cc3629d69193bfd87c71eed2a866a1f3a590bc014427db83739802fe519ebcb53cd2a7ed221f0bea31d2e2a0fef2832d6d9d5bc7d6cc2444d2b930a0ddbb056c799f2e5c358920d7d7aebc891b599065905622452d5464f511487824f6b726480257425b9a6745161e069d82c59c4bb29b40cd8a8f1cf9185d4c12b3903c1bc6f7666fe6a84b841f76ef4c6c6fbdde169f07a8fd5d831184c7c9b190da4712d68d9b63b0177c234b6294ecc0b140f0d5b30d4634c2bd3ee8dd880537d097d704b0b9860ae25a797ab8b7a549ce9569abe386f0cc1fc764bf9603912befa4c46f56febdbe3efb0a2d1405f363db0f8bdee16cd9217a28e2ba8fb358ab07026cfad19b616bd1670c3a21150850596ad6eccc29d380573cecbfe93433a31e75b787348a90ec9b36d5608bd4fa4527f95b8d08f5d4d74923f3398c2b80b3f597cc27f4f9a076278caec752a1184af979e067377450bd5b8a136e1a147b88a5ce877ffca3fb13c5da7159117c51ca8394eccafe9b1c88f510224dc67ec28707d6ca8308b445c0a65d3a19ba68d7664af4f5b811828e2445ed32b8384829f008aacb2e003f1d35f7438b94e47b611c75d45444a279d110cfcb3346190dba1eff5ed7da1bc1005cbfda970b25adb6fee391862f95641752f24fd65ce6bab4e3c395567426d7aef6a54aad8825767f373252b28bf5a11c6e253079dfcd0d2ec34c749d950dc68ef5547c12e828e073fcb05effbecf6f565e75c95460c77309c8674c3765c60a8a6d1a8600854d068eaaed1ffa58882df204edabfca0ddc9e43d4c4d6131be2d91a317058265a26ce01b6cb8234bc0a1e4137715892aa3ba3161a3ba4a64abb88ebc2b23e12830f299ae09ec09cfd2188e095fd5076fbefc10830ab558ec41f22f068f9cae3aabe3816aa7aeefd0a3e8a29000c8b8dc566873d708ed6178a67064ed6473bcbe0a28b8b041c2b7bc414ab36006b1a7d0420ec6b439a0fe049f4daf895987b61d8280373721848a28ae42be106dfabb3cfe0f2e6132dd237005d9f0e9f0267b2c30732841c35b9788fa980d8a7c83add3ea59d5ef626823406beb7b0da1e31ea8d8f069ffe3523ec47bf29231b290b90decbadd88e531cc3a9b68ed72efbfe77d0f3a8a301171ec16bf677bf8f8bd1b5e41deaf53ed3296fe611426a9532b72e25fdef9efc0b980eda18482995528b2f2f94ff68996ada4dce4550ba05c27ece41a651f5af40033be9087171b14d971e315d4d46a0729640f11047440b201957542b527a4bef67e9da7a6fd2cf366aa7ed50981b487a48b20590575a1a81f01faeb357b3ddf4262ca81c74249bd3a4c1c5ba951039ec0c42ccc533ce93a66fa0ebc492f5ce9972be7b5b3a5f322b5a03f9998a31eec35985954dec500c9f96f8d3f3e0f2dbf6e136d285a62df2dacb0a124b000b09d05e717fef280908064888c949939313d3c10a87560e431fafd441510ef18be5b979ac9d4ab431738aa564e90832d0196001530957b0dfa9bf33c68ba86e23deafd9ea02a5f147efe7762bb3d1647cde5fec4b9fe641ce6ef2628a29e69931dd7d2f4791b9208815fa4effe3eb9413bf59599f6f3c967c4f1e1ef1e12705400bededcf123a024d3d39fa777368d3d75e9e31c4b0a4eb2b580854b993a85f5fc06510551bcb6448fdf2f9660ce4b6d87cdd8d5348f8e28b104dd257a5a2aae8a612be60f9b3b5f09e867e3ff7f695cea3b8e01e2f975089176535c969ad20bd3f5e38cd62c5608543f25ad305cb5f409c8694ff4316e20f3a612cab42d74d2efc653bb884e79f65818e00c89be1115a0b0b769f09a8cf97e21168c42c17c4047cbe1e424397519ccaf8a68101897073b9a6e047660af8d86bf7746b22ebee75956d44b4391e1def568a0f4c31d03e1aa50ceeb9e79ea3071cf9074b08fef3de65e105d2106b9e1cde64c0c926229c7144293d6cf59fa9a750fadb0cb7ace3dc1911feed77a079e649336d9a8944722989bb826d4d7fe0423982d59db6ba1a621cb1825d4de33f840c355e134f38735153baf5796b16af01332aa73fee7283ded54e7f8b461cb9b3f73d9e31ece2e558e20a3bffa4deb9fe6c8ad0f8fd960ce583ecdd60f1e1a927f17172f3327bddec601617f764e8b3da1f6f955ab045cf31616d65d3934957074a4d4174e1bc54e4b3904928c1fa35ae63c20920ce63f33078aadc02164f80fb44c79b024ff6c78ca3d5478aa855505f0a1876a7d7a4fcbcfe12be49be21693b81846cc1b9700a13a1aab796741c94ba952dbaa5a3d0b76504ea6daaea8836bb7fb14afd2b74a82d59a4862f736346aedd989d046fd2021dc1de5b5f9113b1e332b9892098bdb4f587e31f36b6929f710d28f56f22db4fdac81f396d26ca56f7dd2cf7b3eb2085483275726eb766c57bb722d65fd565a401b5dd76e64f66fa7345414c996462e7c2eb8d6f2294b1e7c7ca93cf9cf519d2941e11c9d067c172787fe299a7c1f38b70be55a47180cf73b38f6fe300c822c5ec99161a7d16026495879453b24032b7c2e07405ef6bba68e8fbc7b78e0601b7dfcd02203ee7254b3475c43fe5605155b70be9895ca5d20288888600ed2bd99438ed4ac612412e4ec722e1343515cbc3e916f1c12817b652ab2d7d70b56ebe379dc53fe3ebacff47edc39a769ac99b5e82156864ebb3b29b403868dd1ed33c3b21931b5c60a202c7b68a375fd88645b9e10632b6594e9efe81336b461bd48bea483915b40b9fe2eb1e13bcf352e562357f2f55f5753cb091fd9a04a4d858cf594481cb7c41f3d965de3633be82b5a66e837f8344f1c2b9c21f0f54e775c4d9c8e2bbfdb407c248a78a5c38c09658ac8d452a9ebc83c4fa390193ca60782b66e09d278b66c906d50e108ed406e541466b733f91d8cbf5db5ded714cab0d04284711028bc3b233d0afdee736b8ff05979a2a55b30a80acf2cf4e4f00c8f326ff92834359a68ce03f4a49e9801283865b49fcb6bfb9bdcfed02e4156349712ebf26a7a317da5e71c3cea2ff64d874001678d668954111a8759d73ff40355d46213deef2c3655955d82e430e32f4b04dc66dbc5fa6532c196a61003a5407ae9467415d9dabd736a28b07eb1ad4936aed5968635afc9b8e4ca520d33a7202c311e7e44f3ce956ce1a5dda47a66a08941e5bab3e80f55f094848e880cdcf02ce06199264da45379a2fcc2e73da09768add752844338dfb7b08dd6d061e5fecf73a461e663dcf2ecfeebbde68ee2322628d9b60de10780fd74aefff3bb6a8c8b513c1de87b27469cceb45a70d51af49d6dfb64afee4417cd41293c7a71834d4fe6ba07d80057f38d37d15c89dc17023dac528e1c0aec7a549a7e9b9c4dab5960db428e372868f041b780a8e1f56eaeb2493ee933d654842d79466bd89d5add774a38c4b8d01e98d7ea5305d48fe3c61fd8cbd63f60e4620b60f305cb2bc3b4b678193556676ffc0d00aee97806c1abe22473bc0764ab6c55b782c29df1f581b3749b801a5e4fe0744f1d004d288e070206c626c6f9297e8294d7bbf82cfd6121d0b2face492f1723fa00a80391c8ef795c82c6cb4c945d92ce389688197558661f6773387f84da4c0e309fcd8f523b80a7616e55e73a4237280c06d7b7557110a7b554b10cb228864abf12d5a8c5ecf376170a4dc890340e3c88b36f8192698afa3eefc766c68854f0e828c07d7fcfaf9fc110c3f6bfccdbd5fae42e21175bc8113e89ac04aabb14f70a8d4b06f5f9ba4c23de76c525365d3912abba0a4ac93449523559919a348d79890ef6cba064ff2113aec43310b260b70daa50140caf5d7522e1d6fced2b6377d38418232ddd4017fd987517b78d44729a8aae29d965e99e317869b44519250f67c39be2e4873b0b5776ee717d4bc05cfb9ced7130579a7eb6aa40ac826cd7c5b60aaaeb7b8dc43ab396876b62731b0265b941daf47d4d7122d23a9623b483000ae820874c983363d64d4c241beceac9896e0029a91bc5d21374e2e9d0493905a5694b2c3b21e4aaa063c7633c5ce506cd1ac10a4bd9fa936cfed2e81f5a0b9e3722d2c1e2cb16ee9e81acc0d8ac5ed8f2974b71f91aa0dfd5d1b4b96d89c046a2d2fb65318d5ad48905752bfb0f1c05608b698d49fe404bdcf323ccd9d8973d62538cf2a569b26a1f676cabfa3b35e8449dd616d96133599efad485954b54b079f5d53f4acc0f9405a6e879d1981f714787395918ef754ac79de3cce7926038e980fd361198832e33a6153749481ba5677ad2d99b4845f08a416a460e761126d50b1f398a325bd138f2c5cb58d3b9226e721761539dda615dd3bb6b62ef710d486935f3696f5869071d49e3d90721692a7c98fd5e5b1b757e6f656aadb63cb177fb9c113b7016082764308b22db375fd7024cbc9be12da41f9012c967e19fd4eea9efe3b8691ad3cb10b24a40571cca678fa521475d3213845a5423e4b18b8f1d5b2694d5d4d73a7994c920c375544615d392a5ea9e729b91f0c924cc7d5626e931e78d4036f123ce5a9468d9928004f12db5c30f65d69f140f77021dd3059ca82202a80d7f4906bbc1465e54da0f964d532eafe170807e1f112f911195c293ab52a06545eb1bcc77c6a9192ba0eb62019a2e3098265698be94dd1a246552c2bfb5488b9b6ed82a27dfa1c55b9a5ac86542f1d17c2e5886c796bd86795b97c360984d07b236141966f8c3beae401af407dc7f5199d649956cdf97af0a3feaef19d2e3bd2229497372ea4f69b1be5524c56f0db2a152115f83696b9405546ccbf83cf13c3b781c99afffc0d898c1885cf1ff9f92deb21f0a519a0220f90f34d73c26edf7ab68eca6e6d69bf4930d6d40ebf0419ae94f8f3ce58a3ea05716c597714a4f663f78019848eb9d07ece635d05c543e4b1acdfae38a8a7eb1dbab7366f7a168d852d360f54d19c8ea5de846123064f01d39673337929a3be1aaca44b2ee93974467fc7fb4bc193ec7cb4a0accb5b6281a8fc46807c0a236d7fa9f48546a37da234b0bd75358b3c5e4d108c18ed2ecdc23f58da67d94a98c070fa3198015febc60785eae944f9af05a97438e2a49530fc7917e9ea7f6869de7780c5cec1dd2ce56c6f0930ae6d383902a355717d0469bc6275205eac83666afbec947390527856fa76a7b9fa0b62ca6f59e447c7395896bb6114e36a61d847922fa9b8553df8b823029a38525f336bbcfa7bf95d86add3996962e64b7fa548b316b9c9c28eb556e636415d00a85f3e5186dab89e37543c84db83559be80a8209d3abb3c536912beefdbe37363bc88e94185c0bcfcb229b5dd0f6038a3d04b2eb022d0489eba1039ab62d3dac3d083f01cbdbdb56ab0224d1db19650367ce01825a4a4eaa1f7d1ec8a3d1ff1bf786de550d91488f2e91566abc74985a718e87066fcd3b4c8c78e335d8b6f5a7ebc038f8dc676d70714344b2defc316a2aacb7eb5a4d7e11e13e722ab283e6aabf587ccc7bdfec461e372a2ad55df0117a048dd03d5075cca842db7c83a32d53071c20cb0d1508b36edecb3dba2bbde33e7b89720828fb2dc222380bf7826b0524590f6fc280237cc0314ae95c873a22ab90518c44f7e4a8fbdd788ed759cdc5622e945c9ed7c64b0b29fd76257a153dff377bb940710733baa6f53f8003e3b4f04e41139d2167e0eb65f579ea72f5a21020c80d1de929c1652d5149ecb0af0ac35e98f2710039260a6836d8cd050070ec65ac8a12b70ba104a275506742bd41fc4cfa9aed787fb694c44728eaabec8fdf67dd7b0cc2ca6fb81277c63ac08f461a5cea240c2ae8fd94ff9d33f841824b6d0ffc1887c8e5fa729aea68d05fb030c15bde4ee5ca44805351b9272c291387badca6502048d311e5c09f530ce7cb433822228001276d0a21a90b9293366ca9a6ea5fdb910e3549da5f6138afc68b8a3b38b4725d26adc06c74488e42df3eae8155c8b61ac4ecb661419bbe47661d801ca169eaa2935705bb775d7669d8faa169bd0cd6e4bbc800302e72682f20fcb6eed8188d2f9aea37932c3e96cdfcaa4bb3701a34aea16a58f960af3ecaa41078a07e01a79bc668b34bd08c61ba61fe1d1db255316b398520eae254b184d21e6afbee6def60e24fba9516259533c4174f8155b7aea5b98a293c68fab117510c71cf69f5c4f461833967b000bd60a632c00cec310779aac57fb6e3fe4b26ca614451d5c6f5f647de56735bf094815597bb650e13a103247e92925d4bad37e12f278efd544a96077f7a74ba53e44e40db8014b5aa9cf641b9166dcad38172eaf2100d657aa06b6984ed839845e886786944636f32d33416ee7d6d4af601db6eaa25bd23151fc2d937a9fe139271cf539a8d12004b8722590a8c4483db262e26cd99f8e4494cacb5030baae6ba70f813eba593c70c0b881761397aee045add92c7f62ac25e2efa1c4d1521217c81d7489c9a63c7d1bd4109b2717bef516a2433d0cfe0cfd39f61fdac4cc6bee6bce3e14eeb3a637dc2e52280598094f723820e2dcff5b93ab805e6ed26f4f045afd6a744ef98f8ff629f4b3bcd30ce1c16373d644cbf09dd90bc6475e9e20b680cf7e14e062ccab2ca6783084d7ef3b7c53ab2160330d3a2a3f754d4e71500bf4aa32abd8f6bc30bafb17fb975144a80fc0233d71261e84bb2a96259f006a3a7d050831b6643544dbc870aa65c1dc63253398c3da095f6af12beced69e552b4e2d696a8bafb3b72d1a4b770ce8a82b71256384c69b29610902795e354ffb3512aa6dd7c93301d2fe573b64497948172c7eba5ff396ea61e73afd0e8c7e187e1a6c11fe4c21afcebf2cc6c89f29e3fc6011676672fc12eb59626dbb368fbb2ee64dfb9f01bf27de82521a606226737a2d94f149b568a7bf974a9f6b6fe6dcc97f2fab238a83a200b115ee72947eb24566cfd831ac23ff022b5d122cbeeb0474c64f9667103e6f0295c09f3a2498c26caaba6e49b5f7357de4d2684296b8d5200a2821b461c457be26685d7c0d424bc64a87163e5be9f621f80944129090a48f472548e3f0509e2ac316e0651cbd5df19943191f0135e3dee7637a9e3c8c6137904371323d50b72bf489196c9d24115f3d9a897d8cfdda05d4bd187ff17ae4bb64b9b904dabca54ca6941840804dbb6cd66cb683757e0c55d9fdee7263903d7817f4244701f14b25fe558bce16e72816d0fffd65d8a966b3d52f0a50a09bb5f2a9239398790f3225fdbcbe3905c7926a49c059035a3e05e4c29698d22701ec069717e20a994a535364fa3a5f4bdc7b6938575e9d161863fee217a8d9014777e01d9dba4f412f19fdabd651b58e21358c6fb26a822e86da861b54207acf97c174a27a46bd639ac405f79fc7d85897ab96159f1449f9c4aa33722dc4935e1207d7e83d7ab64b03b78d4fcd48e3b8f28b768a7d1d33fa386aa6d6879b778276118863512f43cbd7922d6285e1491d4c9215771410ab9f4970766e3011d5c26535f2ce0943d9a9ec70e3fb87be31e982ae2c6824bf86d42e99b572a350bbde9c3702642f3a719cf147f737b288b60267e0e77da7714903370e7668621196c27dbfab0044031b567a3f22e14286adc407fc8ad7685e6c755f92d95243b37cdf987810f64584a940f87ea50978087789adeb949f859ab39cf0d59768d4fdd8651e20bfe69b0474bed24cf027fba24270540740907f1e30addd78e17a47f3e20990ea9d72e48795f43cb33907b002b96ca0385d1b6e875fbbed8ce710c17c4ae4c7a1fc035032985084a45edef2198e8aa7801afa667475d99ce1b0bee27b3b818bb726c50aaf72b7ca6a7cd77247be9718ddb6b1a73e9abc25f83218c2408c2b10b2538864cefc8e743c7c2fe72f7353fdf89d0fb8110035af28d8e626c8323078c9ee2e132a2be7e676079879ce9693144a3e6791d42bf70183a67ef0da122738a2a149261bcbbe6db88be856965160a0f750957f1f65978f8b5b5580fc7343a6a23db1e67d0c3a632138f5d1bf70d2111fff88e0b89bddc6d4a02320855ead47e0101a2fbb23a308c29545fa3fc899f25d24eb83c3964b33834fcb3b92c2e9c43e53307a86efd9fb61a428d91908def58e7dd91a4ef5f3cd8ec322106db2d8f04824ea62bd42eb9d55493290e5884a196b2fb84261565e14514352044e91429a49cc25f542c1594726314cc8f21ff8c55ca47049d381c5779c338664f9d6dd5f388dd1d89271f82f0028ec7e014328f94c5c907b88e9d1587211ea6324e71976afab29dc7665a27a93542deed9121a6310eb7c58e65dd5bce102b6781e13cb68dbd1392d1cdd967f1f8c8d4501968534534620a00488bec37a01e06787306f6fad746bc46d58555c2e778514ad2095dd3061457e3f1794d0b66c861d278eae8dd1c05ecd60b2ddaabc0300f6ef0c621a2d182911538387501f668aba2b18f6070c7daf9171cf5330165ef961b57e9a26c2a21540539d32a93460eb1f855c6732455e2c1922869f419983c2c211388d78106247685835252619262ba4054343355853d18b93fef8cebb6605b30b72b45b5b4725566c205cf07352a4505dbf51cf82ba7fbb4a97c4d1487198e874530eda58b4cf32033dceaeba5e8c8bc54237a1397ca19447dd454912da0ac21bb16b3f1b6a1ff5f45a54b49701ec1889bab7001f5a654cbccf9b041becad51ea53652b6562aacf25806131f47997953c78914b821da780701245be1d86ce4dd1042b9868908e8a10e00039d3b52044ed9912e5317080e68a0c787632fd986fc2bfd7a35b50c66dcf72633921df1e801926666fbf408b3bfc98c4423b86c4d2d1eacddeea7fcf7a2cd741fd644acd59b2b77cefbfb7bcd5c5a60eddb29baaa4a0e437e2b9623a88c2230755639e4c73a0dd3533d608c6d91935aba3b7dd177d8731e7a2fc657745aae24b1fbd0c15c93daf0e5a630d5dc07248a6e6f8ca3e42049c6f9ef3da6cf01cfcfff9f6acce6326714b5131a9858e22bf8bb4ca0a6309d27d8cc7f1b43be44a1aa8d684565aad37e35f29586d7d611e0a8a917f44dc016e48a3306d7de2fc222812511cab8d171b03e76127e3752260653f736de32714666bb792c8ba08d19ea6a199c16b9a6f4394a9952b434412ffb2fca45376bdee1e8f81475237278b2432426592d7283675d71731249f614cd646ff055a56e7e132d29a8794cbfd009f0c5e32eb2e1b64a2312deb4c6a963f0012816a49361695a35416cf43df23e7293d57b3c23666daec4c462933ff451d26bd8df3f9fcd2e35dcdc36a947312b9cf243644e2f832f1f64baa394f8aa5a2b2cc0f13e75bf6c5d8c767b62d2b0dd0dc89571853161959a76682f53280d53933faca848f31374d72d7d52c58e5a8bf59feafb487b72779de33132281aa597e1092cc07b6408c291272f605847cb62145d19148aa1765b569b3b2333a697a2c137056e6f473e7b0981f81d0f9797f3e56c53197e2ebdc1b258bed76d211d5afc3ba45a0949fde8b3d025faaa6f72d2e42386e3ae9ba2fe3c95131b4bf6a993d3f7445a2f1fa938f92e4089e6ab3cc66c00f187b84a3a400ae21068ee293c573dafb291639153bfafc27e309e07f1d99015e13cb8b71deefc783b32843bbfac4e815e2237598fd1bf28f4b1d35fc3d8ead2cae1c025c8ddff6ebe2af94f4542654ca39fefff32b23fee5baa26bff5130a1f5a89443adf7064c3c6ecb2aaf53d9be746eade6aad78bce59b9906e7602b5f03cd3b4165cc6fe6698dec7ff0fb62a820cf247218ce74a7550af1743f1c6c6b955cf06a4098cb7ee60286f5b7bc70dff091f94799b055b91b9afdb236448c7b3ee060452ca8506027a715a991517ea68169afc584449f130769143c02f9f43709d25f52d229aa2803457fbbf4d4c99188ccc10300af28fb32f938a37b08a6fe502c49e2c3f28ca459b6f10b577a3f62f78b9651f05c9cf5a577d095ed4a7d163ed906aeada78c3b4b63d3467aba1018c75875aaacae405f27ddd6bea638ad3cf08f37a52a794ba6fe2b78e26386ba047e0bfeaf58d50eb1913b2e702336ae70eff7c7380dd61cb90e5efb8e90188be46883848610fe3bbfd061ca16194ef3951f4af1688dee792c707fe88af96d2e17a389692f6d2d47261ab7c7e42c45515b52aabcc282469fa1aea32e7b34cd83c6a8aa43fdf206330292950969947ad3754cc5b613c778ca4a4ab02195069ea476748f9466341e269f30b9a1cf32afb70d9b104646287e8d29650c17ac401475ffcb68b6c0da5aeccb894c5eaf4051d85006fa1539d3cf66136f7ba3c95c702ffa2620acf2fd7348b4a06b6b3c1f527344b9b8b8356b8169335e618dae1d48eab1ec0ff0c7d833854d39e0d9051b786d427a3fcf5a6106bf3068ebdbd5df0014c5f0eb3154c0c780926b726103174c5ec816f63f5dfcb99bbfc5942e8577f6d485e2dbf5f950a6391e472e6a01b98e3fdfc2e95509289026d5c7ea9c0320d3b3ac5ee1662742e87706bcddec06a6ded74e073bdde152948fe3d3a43ab384498ee03ce8cc16064fa851d746977aa2ff99d8d13fcd7b01e7aeec8e40b10d0aa825a045c7bcaa6a25f02a2a91624db39bece67512f7e66ed3aba16db4d9328740509a6afdedcc650104e9eb062811b23c45425f1eb9ca22c3fafa240f6011bb81084eebc02415bf7cb4e5075f3028a03554d0e98617609a80caebb5bb5b262d27e43e79309b69c5bcff849977e1b366ec69f14f30b4aeb1773cb1613f288342e4a380a8a6658f6cd8243e28026bf46b80ff2133b2e4d14ce523ee086288d13c0eb8114674fa75fd2bb0df214fdab09715dbcd4ca35138d25b4642d03f2febc9e5243fbb5f4d83dc0aa890c67d30dc9cb75841af83ed838167b110cb452c1cb255d81a5b4c28cdaab8e877140d9238efe69538e388dea33e2d6b58a50fe6f47acd4bd756d1e1e9a4b6bd65be4d60448d70ba755a37ee79628565d42699b3b6a75c0a3855edc4a2ad0eaaf2c835158090eb171414e3388e6b7dd9046c36d2344f75f9c87b7a40ad9fd6d07976c58dbb58d7fc5fdea066b672efb2337149cee6c6932de903bc10ea9c1802911240c1b1047173b39f7644b642f56f7ae709aae864f4a2073c0159bd7ac97e989da874bafe677c6727582b7d20956b399bb35234a18de5c5681036b5dfaf363f39147a3a0314335459122c7bca13de1aa6415b35f301f606f71d6c02ce9d46518730ddfee7ba52c69183d1f27c94eb571f002e50f893fa50258200f0d043c5bac022c1bb100ed2bb1570ab7a02c764402fb488e8a7789095f2cfc6fa03cd25b1c6a57e0045f4e967c49b9ec08db690b4e712f3f62033ff9155719c068b265f4ccb8114b8a5f1b816fd7cebb34ec7d6e13546392519db8d54254f1bd87479b06fcd80988d209c46b88106fc53c130ba18163b6bf5aaad59788e68171c4072f27e77545546d1e615ce266bc944afb49927d4576b46d9e62c10fd3a61419cb88d4f4dddd5d128a34d2dfc572665558d0368465e6214ff985b3022ad0b2cda15fe23dda1c0018ba62e3912503743bc6b036cef19d77d348f6eecfa622ffb168e23a53bbab31ceeb55ee4c0614e8a8033c32f25dab1470c7a7b3297d0fc1e88bdea80b736f3a4adda3a358694afe7dbe8a60a68cb0cac562feac500a406c6c21fb1b63094575a65467eb66c673afe04b56c8f3de4f4e730e1709c4330eca5538c021bf4de1b1e56798481529e6cf15b194ad31a0cc7f028427cf36c77942fc61dc22f7f8023b67a833f7c17c8febbb140974a35bb1119fabba564ec6919cad459f940029e2a2f44d59a8650e88b57e8f07bf2cabff6c075338e918f3317233dda8572f89d9c0c0d404e086b760bd408bfb533ba15b70704d4889a54c38fd1070ccd4d9cf0203e18eed25f88b692f4e5e312bcbe2a91e4198aee1593c7aa94803c024b57c78093e3f1cd87333a322a22db8cfc38ed17a4dedea8551b6128548dabe673cd84f09f0f1c3017789f1d92480aa291f765e7a07ebd62d1c0cafecb5ed2b275034378ce76a4a8f11f34a338e0e034a13325677525b0af554a7c25898e2d639b7ec1f57fd0d3c369bace9bfae0f2c864ef5388761fce6ac0a37b62653f3dc8f6d28081b71d7cac1f675d434c226daf3ff4dcc9564ee0205763d467e65ac398d7a81c5a5d25ed52aa80acce0d945b9cd228426033564aece99115b3e89e7f2aca541e2ee8fb29667f31dbddda832af204eb2614a452201aeb997639b4134882ba9c67762fc69e8d30ef87d65d997a9423a3e343c6423e1a06326ebfe461df0ba9a7dd9f8a703d9492040f9a279568e9a5581f7036f514d5e1f18b9c991e52a7a5a8d348c0839b5c3791b030c6db25812c32c24c373c18f6863b67b719760c52121c0a2d51287a5c555c07d81a3a5ae561a0eb171fd0ef3058da8422d52cc05d5e20fb4d976c206a2162a010d4c21741e0fd5590d30c9fe9564ef61b1f74403513c0a239f89a664193776117c50424d3db47a97cb21e2b1f5782872077cc299a1917077c8755633be824364e755a784225982e9f694452dbc6baae9148269dfced3b25beae1341dc103e82e48aec0133a386b9877917007c78b6754422da26d73522f41f496ec9b245b57994e8ba585267934b5f69f8ae7344d0fe2af8f4fa5b8abe93f3739d48e9a5bf4b909e5f953427d39290e2646a8291804170a0f41643ea28caf5f158325b5300d3670907982fca05c2f2fe807a6afc04348c1f00cdd802565df07abedf4c778c07b2d9a934139f28120168969cc6f90489e4b04f9ba8792d0bd6890706f26bcf4e608a41957729a2668014c627aae37d3eb013fa903fcc51811ce8764c363c5c367c3de59bbceccd41961893fdb39ecc1abe43166a3fd2a19e26f4b40c76ed5a1907221d0fb075fa11a9a9f357c372b47a9792579ef2dca11cce0fef0e68a67a2f356b25e76be6e017eb374c1648f97b3875332dd08ee363c5ad0d82dd85d6d8d1aa9fe107eeb752639d06e2be13364c04a9c1f1737b4617ce8d060b379531c0374d703171e87453529402210514fbcde56514234050ecc20bfabb3e3616880c3635640c2a706981e7316358266560c6abcb7eefe78dfaee240220fd5dde7b4a5af39bf56ce07a507355355151ae43bd22d03980acdc5df1ed1e32f9d0f39f6674e6d7f48c80d9a115aa6fd3b6c2ca0615a2c5725fcf65f72fc40dbc631d79d0694e2f551fd001366de94aa86b8c2cff167eb9a2ea235f97d8516e8b3cdedf21c678f69cc5ea51ab3542725a0a66106f4343d82e4c95e4f74074d5cbaedf59e0b0337d1d3787792fd31b1446046fcfd7bcab7e5e809805e584083bb6d0033086633c4cf05606a3d8aa9ba8418e0252982f60c94d1c81ddd90656154613a1a888179575d30370309881f7480461f5a354740f017968e26f79a3453840baccaaed01dc6845d1eaabe775e950c7fce16859650977ce72b0a9e73ab58e7ff3985f2ced94ab50fa71c7e062bc51a0573bb73a82e35ea07f34f3e8f4a5edc9e604a0ab7b470a7884fd98b6e5f5230f280fcd57f105b3bdd4b84ade03e946d44666c158620e0c4cccd391f402348bcb83a3e60561d7ba3c851b1413eddd8ab25919478a5af37498a2450169870764f826fe0f9daaa3bfc88156990d282af9c12759af44e0de9b06fb47281937b661d13f1b6149c820acb2db0f5cef6e886006636f1d6f0574836516694f24ff819a7818da1aa4bd2e47a437ba224ec50798464578aebf8658efd3f24fcece001f6bf1fa843aa953441182a55bf7ef38c081236803ab9342eccbd282e21e0b6a9a194ee1d5618634c4b1be2e7fef0d788093c24ed9d5bcd2c07dcaad2c814fc06a93ffb8c6051b39810cf83c8692097430db4045fb66fb8caac72c1a9e5481594ccee1cdfd721e8c6c21cb7e7686ba9198f9908a24c78919ce02d4e87a6c185e0ad57ace11e916ba635052c27b96485def9ca23237a70c0e041a51a7f8332069a7de566a86255348cd79195d294d46e4d9a101df25d209557fbabbbda1dadda94f53739602fa3aba6fc8e41a46713d72835aed93d0136f224495c3d80d4cbc9e63f23fdc9f3ec1f15391a5c7d11be2cc0c95fe0c690175e75736ebf444f8e0bb5dd6cf328fc85461cca6bafd5b6d3e62bede48f384a8e21c2d15967695833fd0bfdf96fee7c6cb137a7a5ea420fc4e5eeaaf202fbf7f9d84b12a39ce6fcc32bcc9eea284e688b1389a9f470be1fb1aad7621d33e309aa5a0a8c1251d9d9c6465563d213c0a2b243472c9a1afd686be819954d6cdf1a23cbd7b3c17e6f10c55ba7e9b6e6290eba957f9528da22554b27d1f2570bdddb668d94689fce67e92ae8e41b712e6520245085d942449d5dda818d21c80376b0c973d15ef316446117e580b6c013a07ec0001040c2c8d80f893f3a268dc8b4fc5b4fab0ab22cabc4b785fa5cdb8d5f5ada0c8af3d4eea618c68ad072fe8c9f635ae6cb39d9646201d2beaaf455caf41b879ea08988fb8c14b0f4d292847340461d369f3e6b980b99c14e9bf60f32283220f69f5b20a4f137c0430714397efafbaea240469766986ff37f41c4eec821499563478d8fcaac9727e3fa1e349f5fc79866d98fae2666ba523b42b331c002b1df7a9c6be665e65b31416fe377b3b4a777c49db2642bf442ba2105aa3afad916838ee8db6e22f9783b49a1a76761ae2f90fcd8f1bca30ca49a6762a66894a7275b4f393c41569d8dfbcc7c7ec46308033f5a3457eddb8630000367d1442fa0695b4130372b2c8afd884b5a7fa94f786a771f6c11a7d60ea93437f13a26e75951ed1570797f06bbf24a95092779ed94f2ee98f1e069f9606d763984598bd55f8d7d47709712dff8f86f75a6316ee0d5bd62c826e9ffecaba1551516f5c5176e7cb5f5c4a0cd39e04e5c64a00b78a5673e8fe61b31b3f0b6afa787463d7a838d767c36d38c031a08fb9d4f030044f6162ce4740ce5aad5bc67d81f1dc69c2c1dcf21413b125ed78edd2f7496f089c283b6fcbce8857919a10f47cc0f7c7e0f1265bb7a69e94d7b53974a27e2d900e44808add1f8ac2e76a62a3753e28f66f8fda21ca103a3430fd431278c9604136c5a646a0ab0f9437c3f304d81932167a255aa8b22cd5c16a058f74a4d108edc5f9bce089bde4092c7165becee86cd5d9e796df77a50eff416d4a5a52e5184c5d6b0652d43b255e8db89ec5a2a7e47f9c2b144e57c8d3dba2cdd320392037e7d5b962c1286c92e0d16362fbd96f3e15b0bc4206d5932a15818ab307be4199fb911ca1879ed57464d909c7c75fb17cd53b097852d57d665b48949494872e836b07433e11547c1f06233da634b909723b5d182176fc6224746807e4cd264585bae528f1f73755f493d5bd27dd07930c88169c37bf0c8fc2894a58676cbb1da0fcce79add0954f31d334c7e8f917cb8c6358b93c60e65c2c0306a8b43acda8f6c742d38fc1412a1d9cbcf1c81c2dbfbe8487f2bfd089e79d16f5810eb47517a10b30945b58a094b82c714ffa11ba78bfbd242dd8e7f51ec79ba28ba66e9a737105020bf1affb3fa4c4de778b7d0e6fa0c450f42a4b98f3505ef891fbd77f2c849707869762116246953bd95397239a4cb12bca577f33255821526be70c4947492daeac68c62f40e9a7da8ec0e8ccbb22b104427c27b96c1209b5850bade4d6a86373b98ec2079f5ca61044ddd6c1d17054a47ffb662db6da729317e2e4209ddd1cf276e64820632cdd3e3e336413e5639e94d75b03472b58201eaf1f64a76b6f2a95bc7174eb49dee0216651db9ccf726137ee9486ee29558984f23ea6356e87d5f6846bdb176983f2752f48fcf4d76c34e3f1eb3da7ce52a08b6b5b346d6a49eee75b61422cec8a9a8ede00d733d2c63cb45d157ca01cea2a666dc973549490433f5b324129db64871807ad85a4b1e065e9a284d4e573497f70208a4914c15da19a2a48b76b0d23fb2f65f3694f3762b1b27819819ecf378bffdf305eb30dcac3ff5ab9be132d8afd696878c65dc5b6d71ec0209b97e411e36a70dc2a8b8eaf0503b388b27be0450243a17e232893613d04485b6b3b3a948ca85f877401e68fd2d836ccaaa99b3a42157709fbe52723898c8838bd1532edd01a7987064b0ace3c3e74971bdc96ab094f78c188a4ef99835a7739389d2cd97ac978096fed05ea2f4dce7df18e364d31fe94e86ef744f09a1608538f69747677f69ea03d2ecfad5a9dc0329000692984605a24c60b45367bf92e869e58cf238c6fe2922bd3043d3c7b73ad543f87ee4685132199ad9472b0d6d6826b30e6753e5a0e8b7626db8794b71245b7082e66a7212440438c92f581530e594de9285bb834eae3f04bb333fea8ca214bd170b6e49b421cf6d43f774702b8f6be22f21758b3087a0e1e3d619d0dc593510d7acbfc75d1d4dbdeadbd27c69b12e5d3e679aff185ee5aedf512c5170cbcf287f20240bef92397fdf695afb8aafb88dd61c7d8e3c1b8060207a3f104fb8edeff0c489f88a3827dfc17870553785e7b22a4f02feefa29930579bcdc42d95971347d3d80ab8bf85a50e8fb597eb034693827797d454a6cae44addf03a5ede42947fd22f84b37f2af9b8d343c8ddaf04aa240cd1bf03ba57bf31e61b13348994dbc14714f942f62ce486a4643e478419180b75f9d5c859e4c0c4b6b8ac492f288ae353d301e33ab5274b082c65a37c04dbb9221160ff2ec5ea0bc243e9ecd6bc2fb8a42c20dc74116d8ec0ffc1bcd8a46968ca02573ce15435631e562ebceb520c990778d6f2c93776d1a03ef0dcbd8193c083d22f7eb2f5ebe2ff7d8c89eea12bc8d73e8bfb11a30f20d65f8e564e252ac31d14e227e608e7f63427f9fda6d11ce7e93db048348312a449991ade0410f2debcacba04dc8abd1d04e962fc7433bf5e49d92e6d7714e9c312c8d594011818a5c018194e29bc5434f52ecd80515ada3faf5fa46ded1db49019f298718d89fc0cc8ab6d42bd6482938cd4eda219b10b7e4c6b9cf1aa6d98ed96bfde2912095b28912f6cdb76e1645ac1a6a73a08e5086093aabc2ef4445df2c21ff5dd8e0dd6b2014581e568616d7ed6a227ebddc2ced0a8ba2710b67f8f35bd7938a17272a143dfe67529e1a4a54441faadf6b129833b6efa729fa1e7ea34e105149f6eeb036dc9ef28c68b02585d76d7728c47e3145b883a3d6c0709762cfdc30abf8383220b559012af37bf9a4322d7a42c856f51d49e373c5f104015b0ede66762c3cd900bc1e0d19a9c5f4be9ca812843a7c222fdf316cce61131b1ce0335771b5d30b751f6ba16d85fdeb5e0e95fcd5534fc7b42b76d13aae4ba11909d8926f09e4e6ea5d41b2f829903b590c4cdd4c9489cfb724c065e164617c3484e03dbbb6b0b0d5d475a9dc846dddee363ae9bc35fff0bdac28fa86e1851f5353685b367401171190ce03cd4a82933d50b2670f65038ac2c2de9bf3898d3512adcd436fc0f950c2b80c07057a896468191c467f14972f967d69c17b5445dca8cb985e971c6167ed06228f1d60bd570ae7b4a090b4a866c9a1217798b9f1e2cb845b66dba2cbd0d6f7103ecd424cedaecd5c6e46093a970f3515954e6c6eec87d0efe37de279a1cbbb8076cc559706c4c3ecb6f209d09b73c6fd7a4ccc6cad4c2ef7f7ae2a5e9bdf930cebd4c993dd7f85cf3dafc8e2c31c135cb9f83aacc343885036a4d0d326bff188c89d9e948e48bb8ef60d43516af23990934d67e3a92e36a63b9c7c8b3f1ef05edbbb0fcc17e760d3ca83ced2a1ed26cf088072f8a1165565bc8bd060e6322153b6bc56576b256d8d968f5144c01a8aff412120443c48fb0a0e3352f58e91488dcb42f773a4c1fe9f841c802eac05ca6eea6683312836baf63aeef59b084ee6172d33fb4e237b947b2fa6a5bbe51f5b1e711420cede8b9875fb875fd7960972c6996643456170d75e255c09fc66bd9ec34678a7fbce8797dc0611ef076e5712f957a45af8f61395a6c29ff4e2c98493eb78d5c5ae82957f352cca587db4a85823ccdc4a4f30f96777fb6c4aef8ab7ca54690bb41b8504aa355edcae2364789437016fd2de33d08898761a15f70efbfed94725222a4170fb50f112384ac47951671cc59f3ae98f2398d29e0603830dcca10d74fc95949b8c00c9585a679d908209cea16b95197a695e6c7a2b87900c87b5476f9bc4b7f794f6bb9f7a467c153d849a267b4c1d53694e445dd668584d0395400f84ae9a52454dc0b358425b439483e1bf65488461079952519bd522c462b121b5921e8c8e2cbbb25f74e5018cfed03070d4b6af36b326a5dc5a5c3c924c2397e1edc81023f88eee0543a338e9deba61ba73e9662496174b5b059f68d4a66c49b52dfd96f478ea0d58709305460e250397ff177656eb1e558c08f57d8a6ac68c460a622672f5fe1b1a6c0c59ad2c9091d3631636e7448edc248c7e367e4ac6a0e494c6ed98cc7a0e19a0c381f6ee3e7dc98d728734e8b0dcb45108ccc8d9e67b3f3dd8d81b47ac3949abc8cde4958d75831b1315748d43055e5cf11136f109cd8bcd6c2d1e4f5260ae8a1e1590462543e3d81646e948bddc6280606eabdc29d97173fbea4959ff1194d3acccc47eaa53aaf3d41957dfd6a3c32387aba6936dab0564957a7abe3c2e71974ac54ee1571bc3fba776b15a5cc9d96abcd7c4e5fb143656289325bf94927b70a854c7a8c299d97c8b9dee7574fefe87063ec82ca03bf1451f0de0c9e0ba0b8201584cd8aa52e3842fdf37a2894c137e687b3fc98d7065694077b93aaf932872f0df6cfa6042f6871c87f082f36596b6f0afc61313f117e9b34201659b369033451b5ae311b46ea6bcb45dba72c342215c4af69b0c3d33903f337f573114a7f6ad87a906cfdb2ab657d31973299aca002c7f7905b2904229c27a42207fdf1544427a8fe69b9aa745bca93ffb6bf6c3bd4a89f4c838a4d7f5284b99ebc6771f2251e941595f696414726db98c5d74f57e2dbd6f43bd6a26e8febcbbdea5291caf42a0addeb4ac89c6d42d6470c627f9ef27575a994cebb9c17f3b267a3df55a069337c2adfd01efba6c036e11918cdd90cd2f0c75e4814faf624344b6dd74d8e159a7adbf901b199a51d067815bc46f62179cb7a53d2d65d9f587f2e2ba74a47e78a01c1cacce38e02467c11c29446ba92da6b6c56740ef060d966f80718d80316ecd7b6d0dda939cf3e7608ea5b6ec26ebde4966442408814edb2e34ffae77667c3e3b9ee9f8aa597d4196eacfaa8b7b7a3dfc56e4e1be329c818eeaa2ffc084af271ae4e1a5fa964a799d7f9539be64c214875e5cae707b99d5a5d7d5d777aa097ec57e5a0cd07fa4b58be889895ec06d11dd4f89c03e87fcfe491b24c3f5c2ca5fe4a0c73cb4947cbd1127de5d1fc87ee015bcb02b0bdf73c88bc0cdcf7de26dc55ff8afba306af78736554f37ec6f9c62582e50ac8c43e9791859d68201b4fec92e2e1ea4eeb16fd1ae6ca99537b2f83d8145681608ffc0f73b954caa7027e95385a6c3c361596685baf800dc2f6fa0719f491f77c218e44c2a51b39860383d9be894ca7606123f583f76ec55dd51dd131a5d6310044fe461c52f779000df7bb36647e501503bc9646436c1dde7a36e42f5e7def8bf89e8fc635b8662d183eac956f651bd4fc81c69697bea222ce97a6c879177dac41a969132b5907567a9a7a18c3f317f899b7d2734662c8442c3a3d6db8daf6704f1375467c393d31b935f430a3e49ae4ac6b232cd2b9cc9be0f19ac88b4fb9d05424cc97cb2e41e7b7b21315c3a66fac9524ab8c0e59b1d5eb796ec72e0447321fa96f2cabb171120dc1d85d9513376e91d025cb5b4e626c5a4a0bdb4c6faf0521624ff88e12b5396a6fa05afa89497e1cf53658c6103195bd0fb22cb51ba16bf55d6c4ef5fb546c00a8c0efb719235e44ce0ab585fcddb2e9452d77140965c1f676f736dcfbb780d5df8e5b0cf5766c38f4d8bd5db5dac99e9365c7ba706d0bf4d0cad4cf5a5765cadc82698014c72c7fcb83857598b76e0130dabf29c87d104b38689afbbcfb5bd343a72d2b4f9e488be70a82617b900aeae451489c9bcf83a98060f88f31304665dc32bf49fcfc0bda9e22d47d975d10094d979b9cefe0b1f1894768a99eda86d8805804a9e049d682c281c4309eeb964b6abcdf986a9d9e407bf88fe04d469617021e68a8f8c18bbfcb5bbf5da2972c3552a553f3e4f3d105a715bc47592b3ee07d2fc42d67a6b782fd3ded01df400a3302f43fc1951d9432ff7b3839fb1511b203bf3d39eab2e4ca36199e311ab4471133983fd2973cbf80ea67e4c20c08149e7027ab13ffba5a268c6a0f278121bde10f7ba6069683a87589ac957ede456d32afdf1b3be1608f36fcefe43375f6543ceb77938d95af3e548fa859c9d657bc9d91a58f45ed257f0ad2b22baeb5014425f83ccaca3f076cc7580850652bde9d503dde2a7c11cc774425c4a0145e116adc4239cd0a78be44af09d4ac9aedd33d170528e2afb99aca739ad2618078f434feea35578efc6e6d16d1c2cef57b89d7fef8f370edda08ebc295c7be9841f49fcd06b16d08b618c4cbff603ec59c7da4605dc11218e8821086cea01ba9f7a6b5637963fb073c2455a326dbc3cb62ca0c012c3e9c074ea9f79b60a8e5fa475ee95a5ec9b1a88184e24c82ff8dab2e000d994a6768f39db81a0757ab11c38c923f3fd257abf6235510d61ec860a51f5058401ce875d6e5da9f08f2feb4764a41fc6ee6ea45f14db4a676cc5c64bd61d326568857afee677d2c11a7141e696d6c22710ba5c81245e09db5290a72d2d3d67562ce52d5c432fcfd921032079f2fad72b86c9f2c1316cdb353491907111630b8dcc26bca6b380261a165ce323c0c3a038e10ba6761d205692aa0c30ea0e4b6904fd6c69e2ffa16e2bbbae4f1bd10d6daef5ebb8e877f1b39df110de99bf784ebaed731cae8e330a037d46ff75ca4f1c1b7de7f1c49b3a40b1b5875f42c4a38cac0094b342281df16f301a09132421925cee39cd68fbee15636c773593e773387f84e9be8e29ef2a12777e25d4e67fbde1d4f144ebf743fcfc5a9746fade178b2fe6c723a8120d11ed70981f21354932063fdc0c72a6fd8abdfa8be7950dc074e6353da529c97c51862c5c4fe5d32318a4a7a44513c70fb4f95137daf6e8855d956de6a1d0db0c850c1447e8395ff01b1dba1c127c3792348e8e8897891022d77ec85f0e3056a13afae42eb243f163ef959f0f53cf814dc4e845520e6ee62e17f377e8f874ddbbc6b42d47e8488df17e44a9ffbd76554d63a3832a322b910cb9e188d0e0144f06a242cdab036fe968a8e07b7af6dec85eb642e28a0b19ad65b145c22f3f5db798a810e289c21d920ce4d7c780b135c219a5d4f138fa382d3c48388a593faed0ad91210c95a20de4cb79280643d8131f1d8429ddbdf8b85f8f409abf072b85bc8b67135de2cb5cde20f6b42cefa2260a875ab8a080f18c591dfaa43c2faca1ac8a66db3c9c976c99e0711620aa644ad935e9010b17ca04d97676f6c81562927dcdc9894c7042e3da47a7ccfd08e0a5558ba8f78545307a86db6b379aa20943d3a370bcb4029f20cb46d1e7fd2a9fdd414871b0f5857661a46f2adb91d59895af543d55128ae79e0de43ac7a7b68205ff4550cc1ddf1876012be64fdecca66f22195fb5c428c829d50672dd8cd7e5085f73c7bb347282f5b6526b84dc518d2ac64c150af46276bbf348bb58490bb01684b97e49a381f2273baf232d478f4d2b9cc85e80d32dc049fe07e7d412ef90d187853cef6c04d8919818331cbcf21e84ea87f6b0fb4ce94489fc6050dffc737cb86c32e660b0df5b213794243f0abb372941f1f5f3057c606b2e72ad1f7d63078fe1ff68cbe609aa3bfc90cfb14ad3a5d15dc9e27613e29169419b2da86b0bcdf3f9af6be5db741343b597b5f58eb4e2c4cd2469ee94e34de501ea96af5bd7d22490a3fba180d49603955ec40986efedf7c03fdf52ac72b2c10b9d13490b8dd0b04cbf6815081324a1398c1b942c7503445f995e6ce33a4c01872274175c405481e80cecd4438329caa94006190a4f03b534dff036511e80def7ae966054120ee2b68e60632bb1011ff9b9c070dea23d26810c19b04e292eb96603649abafebb3b6c41c13902613983e8d38d33c6cd66459464d412c2011db9eaf81b916b49e57f32d7f8d059c2fcb3387f19de38b31eea1c8158ae1d08fe3aa7799138a2899b2a18b4028412f028629bfd57b62823afbf17cce85c03895403a7232cb564156264c44e500b8a8d4aadf4200af2263d14b4834f1aa00242eb7312f08173a6e37606956fc3b7ab97817852af6ef07cde8ed854eb051042d5a69d809b562c51eceb513c0b7692481276a93828a6e37ef457c87f35eea9b0e5b0d4c2f7c532f224db5ca3d524d5bcbfbbfe98c7095d366cb94ed1602e0930f8019c6f1ff145e88d4f337d30b125e3afca231e23016d93d0c96c42b4cd5528bdc75828bf7a0b34ace4f7ed9305ce1b456224438e55ea9e494a5c49eef78aae7f4c4509eb119ee7b203254e2d9799f6bf323ffda9ad64309368f95a8e2407f552aa86a5e035dc1da259d0b341da3c29048833c7f3e7c40553bf91cb95a27288a3be3bcea492effc6898ee3929b7fd74790d32c084e45c3dd930f61f25dfee8323c0d12c51dc32053e048e74250d310c9953c16be9a61ba4843f2edf6bcfb31d202638238f002df447e54790c7ec9bee341e72315b615edf008786ede88cde5e721e3784ac30847c2e7ab804ac95e2a979484cc0a39f0fab1f2bde819ebfecbc7866b34c739d694380905434b7e93b8694e8b73bed51d5d7c1849bbb3b5266fcd8533cb4fc4bb5739ad1adc227cd2f42a6bde9c1c2152b0cb1870772c837bdd0afb4794afc56a0b06615c41fbfc6bb9d21af4410b6a69aed6cbff0de7547b8a97100a1e70b56d0eefb6c83e0259366535d62e8efd9088f9fe940d976b27c287e11638102a994cfdb9ef5eb3961eddd9f7aef26a7cf26ca8ce8a14325e2dc6be49d954b2baa1982bf8938a16270fdd08e270760276cf2f2d05a2de3e2df24901eb9d06e03029d14d2e036a4b087e49830d3625eb26c0d8c64861bb1e4de9a25d79f0cd507d861a67b0336fc526b96cad713411bbe19c796f04155a01a3aa8fd249ba723d7c5b254238303032a1b946da49607185032f69729403f703b400c297c19ecab6be2c3b5113a2d5d10c9c2ce97895cee8c921a49ff663b4a98a39083c591ef8c0a18e6cf137e1354d38fe45a0112c6568a352c043447c777cfe26873afbb97c86e1dadbd05e80a12fe819849d6b77e3ad32568b32be9e4b4e81566f20ae1c9b604d6f0534a148205ec8448001b7a5f7f4aeb29e3f78e8f39864c4002a4161bd95b7a6de76615b885a88b8e89d5df9fc1c3ac09f91cffcdcfdfcb3e6761f3154d146aae371e7e811dd269a07f79a57668417b4d50369afd9dacb53e5a668014a0a5265b8eb812cdfa6f5c89f4fbdf1b913da7ca5269d1381a4b0191d9bc029dd3d8c9924e30a9858c7f539b3303636f1de844dbf846bdeef741eaa53c8f560558443fbc00f4bdac14ff778d84758a86b4dbea1d564ebee0a10229fb3903f63b2a8403af6d97f2d9c785ad8c453b9bfac0aa4a36fe703399ba5199b0970e7c39001177821fc0848e843b863a80068ed931c1339e35af4aa04696ba6108c79400c7229224f180a772272acc52f6bd1b6737fd2ebcc84824ea83fad7f16f7e2b2213cdbb24517e826428b6a061c067f285ad3e4b2466f5afbe454e36bd68e95e3d7081b2d6e9ac2f19295bac9364a8df3c56a79a72859066cf37b1421ef7aa11c3b2c2031ae16cd07c68c810427447079443ec52567e14cd7aa3429ac1bfa16a43964db7c25b33c2edd63c20988bc80e5e45f05c5bd94944d96c4af26e4d12d22029139d655724427964af463dc6ce9fdf93a857f307b7a2f51ec6b8921d704b06f8326daa59c9c5e7aa0ce976695d0685eb97a753f8bbe84a736b8d5bc4d5ccca998ab2d55836d40b388f90f14a0ae95f19dd5e9929f17cafade9bb0ea893c0822eec950923a09919a4a773f4e3f28d3a30de13cc18600a1bcd500981ccf4c45351a00fc4e40a742f576e9201249385cebf20069cb219a52854054e9993edf1adede9a7774fd1cf33580dd7400bd8ec7782dbd06e957f8b20a6a68e4c67bfe427d48133ab946433b1a8fb71694ce4c390a580205c744b70b7f5c389f65496af997ede5f02eade3160c21ba8923b2021c560c3e86d413ce306e363579de6ede57ee2b26dca3443c1d60e1b9e1e52a96a22d29a9e82e4ada2a14415c73cff86b54594e37d4e052d0d56861d9fe5160c3b9c0c7641761bd80f5306822a8f238792f53b09484ab7e7e35185c3ee207e2f251ced7727b40314007ea29462b1bc12aeccb5cecca122d4d87e407af63b14e3f6bfa5f60f661b488e48957f998d6cec7a8c1aaf5b709b091b874828a802358b01cda8acbe19f234b9598564ab46ab45a928b93a51bcf2d574fe132a2bcfd635a38ccd7f6933876c0f3513c828db4441144aaa729cda40af445da351d56287e92492ca837223f7fa9fc761dae40c880543140f3215ffccd28d28245a6b141905a3590d58c407e37246a6554eb6fdd4a7f0faafa7b7773c9c03f2ca2508392a6400972f78d3279ec8ea625cfe044379a6532fd11618558db069e4e251227ee0aff8909c887607784fc7f08c37a0a95e27410e6722893052e85c6bf830bb6777bba4c5b9367c63ca53d97c3b47fcba9786ac42076ed428546b5b03f1c46afc6ef22f473d74b5637924431f18f8e862269dcfed3c91ac542e6ad8cd01c9da6f63293c81da3645fb6b099e57f4926fa6cc4bbd04cfd0ca9648b3382b0032a78dcce3197d9f0a82ad52bbea1fa3c13d95334a27bd3eb8b7d6444c16440a1fb6830b1e36a4174211fcfd4ea9dd00f5b0fa4d983d5a7786bad147aadf0a77a728988f0e15573b3c45dfe2b99ccfe682d0ec9dee7d440a630e86a68242622800eb1f6f986f682b209518debd2799f7c72c782c55a51da9448c538901f2f1627afe37a348b6f540327d8fefcadb1485eedbe18d23ce076a0e9e9e5be6dd828a375cbcda5d168c8d1e2362b3ec52ee51bba18818fab630842f873a9e97404f91629f20c238556019b49c67435fd968c23214ae824d409cb05a7dcdb0a74a0ff63bff0e387d64ce4e330788105f3def5606e8cf26f8ba7a65aa51db3988929ebd7936f49fc6b9d11f3f963bcffe2d8840dae0e58b8d5f3b0f2d7f2f3e321dac94fee9b3e2b345b0f24c6ab33d1f6ec6e024a9e7738b6031441319f06aadd60c6addb0821d70c4e4ac633a3a002c3a854c168fe6348204079fe3fb5919a6dd0f466eed2e6feb2266043e51a1fd90a153f8aa941255257b44990b15594779cecbf93fe9dd06b3569fe28f32ff896738196e07d227be9a10e6cbe02bec910e8c713a132e53a6e1d0586ac6d363f2d51a57749b5f03dce961f943e28f602fefe9639531079fa9c8031b6ca923ee1846bfbbe698b38519cc98f9d7e8eae2655e980eedc6e37d012665e3bde05296b26fd32a250cd0e2fef8362cc586a97afbf24f1a46e1fb6f8ac00792fd172ea0afc49253fb35a5fdd2735edc4f9c8af81b0781ecf44fbd949f1267c3aefff40fe05f841cea258ecb6457f44a78659894174812ab0cb20b77765328e4e8dd2526f4272f73a5832d718f329599a10b43d3fd058fbb9882693b5ca4fde2b7adb9e7ead6b7459bd6367c3a59dfb985e043abe696c0141f1dc0cdd9a9c63cb0a74b0074a9cc9c59ab6e818dfcdec5f5932a44a0045706ecefe368655920498da4b48971000b12790cdf46c84c6abeed76d8694eeb2eee592a59b1876613d5a211dcf0fc5e0a07442c7ad3bfd0591960f5f7c241f9c03baf5583a99b51069108842f0bab6c9a56c653a8742b0c85fb9c0cab45c17cb6848fabc72fd09a5d947a02e3c71b554a2be59b99d49edd41f0e33cadee5d4992fc05a78b1c576d124b11d357f33c1b25f54334c13b76b4645d1a9239f5c743fe8aa02f79ae3743976c178a9be7074fd53e1e271eab4fd689c9e76aa9cc8130f1622628b1a76348b4457476a5091aa993accb79fd289406e298969f5bc074829ee03ceafe5ad897fededc6025adbe7d6d0b5739104bc2b9ccf1956f4aa52d4686088249f7a594adcd76eacef38685891166755e2ff712a62ddeeb22c886be1c4fa1e2dc2866a34f081c78f4d8920e68e90d39b94da780ae56ec9c58914e43faabc903437ee84c68bf0074db34a9ac53bb04cac6c6de7435c9f573664fa6e4389f48e067a16dfbfc7a8d04f9a69cfde1ca7011a55c1e7f26eda0709bee6c59ed0a79332c1faecd7a126a1fd1509c4a71bdd0ebc47d16f06ada73a859900808b1a18ab3efe10ca674449cbe964d3836af0ec0522ccd8d87582f1418e396df347383f3b10c6de2a8a53348225e9b0aa9c6f0404eacb1608b43b44c52ac4b924ec01b589b1a40d54975e65cf2a7e6aafd8ec89c27a11d54d35d14367d61c179712e38916c8f7ddc2fa9e405d8735dd442a2cfd3061fc8d9a1f8c2d2e6ff45fd30e54fb40412a650740500898c54540dec6ac0d64ca3c428da2082a7beb3f4dadf39655e67cc07c2948f444ec41390e6fb13ae61fab8ab07ab5995c25939d7321522035de0738aea80027721bc04e2ea325751c667d82ad134f5a1e845466b518c6487559c62d3a4962f5669fc45c6afb0add620edcdef98ba1bcae15f3106321733a765b9959c47bcbbea2389cd9ec037282b3964bb3e9c7da4f7bd83818d8e2819b4410a3227a07af47598e67135749fc9cb02f6c500f91512a0ccff7c396a8d57b2592a296fd5ec955e37e6c8c3a238665161f2afa17b7a84ed599d6d41e2e345251336beb43ed409656dfedba2a1d29d9d527e6acc1264bccc058dc578d47c7ceb411923bf2ad84fbec3ee7524d89d4e757bc200f14d5f2f3298df3e4725f2aeeb349a89a4a5b35262d17076470a792589a1681fc2b1f16da6471dde5d5ab2d159cf1e2fa75851be5776d8308bbe22ecefbcb11d8db8bc7b41b47d7fee9f104286475d6131b59a53332f277e2861212683134fba1150f6fe92d0bc388bd80b92549474addae6af6c58aa39e78f17524b0ed7f8635a50a4550e1ddd7b7b519d1e4dbbc1095e67121ac7f6d4c4621845d0f7ea794f2cbdeca544539c8f377e162348e0ddb2a07761339e18d93e34c2163d639c7ecd194691b819a02e40b5ffdd3b648f5947500f7223ca38213dba58d3510774198a80b48c123dd6ca54cfedc151385ee6591861ab79c8283053c9efcab9970bd5b3e89ad2cac53798a18bcc8e9eb9392396ddb7585ef09b1520a4cf742257abbe69729b41321546f9b5d87410787e96cf5b6ce1f72ac23fb6527d9e5c8e0e0d353a46624a60bcf4b01bc1afa3ff19f14548f6df99e1d0547406856beced59040423855af6287dff4b3784de8a70c4b62a164969791b68b93f2dacdd8dd65a1fc3d6f8172d5fbd57c8c3903851df3a18bcad579c190baf53444ecc698cbe20031fdc9b6a6639344d5de4d5be9121ada4976c55bfd0ae4f001c73c0aced8889e56010892c2b28b342b9d887cca30f74bbe4fd3cef18a0ccf5683000de72ff4e23eb1d66a92e1dc2da2baa657206ab502461d8ece4b75fee2afdac5e071bb71f9d80bce088bf9d217c7c7492863c70529df8487baa0e085ea59ff49e86e03f0aa65a6164ae419eafc7c08b26340a35ce6ebe353bb5f0b470aa5b2fa286f02157fd5ab7de06273eb5c2825ad54b5ca17ef55327ce4550b1b4783e98a8d9484c7e455c0a9573445fcd36147da33aabb329a5969e1945ee9258a5ea0b3bb9b8c77a3206e6faf4689bf5df00e97aab2c0cc529a36cd0fee4c9252721782ebb417053804ebfb0ae016dc0f06217dcffcb027a137de03bf3bd1a7d0321b9f21149d49f951c69d376e26d9110ad702c5e6e61a29c3874d5891874d740bc5a34bcb3105ec40163d8e29dca0c05987ba4ac0301c114629a42748b9dabd708642fdd502094084ef67f50d8a698aa6a7a2ff109bd6573c72e90b4314b6eada3ac3643880b04a8bfe8c0cc19aa9c8674e9c8a4a08ffc648cc1eee74a3cd950813cf5fb5d66beb93575b732c49f77d2cfc778f71b9f218084b32269852fd9640945356b06d7408a28e525dc2b240825a440113b93dcbf209ff5af48ffca42285e1f9b63d6ea2861da90bd782e71be77ef48996e39b827b532e2c5196041752faebcfb76cf06fd2a795d3bc1df3b8686605b017e5b9c3b0b3e2f1fa9e6f9220587e9327117761b92d2a2fb733c849d000ee74c45fcdcd10e67ce1067c3f969a4efb8a12e626682a7a46ee33a7b3dac802c13cff9f617c4dd4aac7d026299467138fa87e9cea179a79caaae540499bba048a4f833ac34173321a1d1aada227d9c7aa15e8a1e7c44f3becbcc5168fa3d7388b89b9ae6900d39e9f0b7f465e267f24581b1517780597d5c7f0c90ac67877add830a3328af9c09946cc8b1e91e0d2f91045ca2913ea82a169a26a04c66a19a69ff823041a0cdb3ecb2c6b32487e3358c17f7d6dbe91170a5f92fd70419571c163d63c993686cfb7dc0864eaa50192b033a6aca8cd62c496e299f8df85bc2544862814c7ebfbb4de4837b234578709211004978709cb19c78675037bb8a9a924745d33dc3e90e791195b1355dbd9d21882c63ece63e8bd9ee7de061c8a143ed8dd5185d96127715b56fe9b6ece9f27b96f7ba55c3c404d87634c1d1a5ff24f9a7418abb122d8759a70bba85138fc99ac81c04a1dc8eee238bbd02bae50e1efa70cb692d330ecc75a6829d86aabff32cf8bad79a01ffd952ee8f3ecfee533ddde72679b0805936614010d5b825f36c9950001381ed740b54e256e17a11012ecdc5b385102771928faa437e7175cc2c39339840a9c0f93fb5850bbb06ce6cadb27da9055e155b5285b5416cdd4be167efed3723140093236e3e291ad4afa2ca159ce4944421f4c3066e690860607f8adbbf15676a5f04b8231d3f30300bd2d287de7ca98e898ed99e9ed55c2547cb4f55b700528c25f38873808c191033ac464f3e37e476541019b10df216fb03d6626ec0dae7b9d3a387e16468cc8a665f5dd187a854ef8dda95f5947051d0a7f59c989058daa6d9437e54fbb3481c4db675133f5571e2e8db4f4e1aa82c952ff070872c196e11b33c3e03b39bebca115743da6a29bc42e2f71ef4def2c0766b519fcf52934e8cbc47a1ee1a22cd7e1014208c817b473d7cc99c53303faea2a6ad27aa15ce2f325e8c83745c3227cd688a58259bacb1ffeac2edfdfbe9de83565e3b81e313551b332a4897feb06086008ac00ab53063190b2cfc2661dcb2c5ffb0e56b18887bd4c34a3fc4b69ca2e05795543fdca17f52bb221f2a0a9273669a99aa913e3908886b1731cda813a5d143a1b7eb1f7f97ff066bf200ec51be75f3e4d174317f41d92f636e1772d959e7b09edee38ae2ee54c7074bb900594d51e14575b9d7eecbfd0f8bb06504a8f8c8806552309dd38b94fdaed760d4aa47f8154e47888aa4cf80f7a318abd63125b8d51c9ff0ca17f3067ba50de105408398850935f5747161210eefb297f18e88640adb620cfc40075008ba32745cb963926b5650eb96fb4ca3630323f87f6787094736badc22e3267a5a02134a6c5e90416fa22143ca99116bdce6bb3916d602a5879cedafd037fc1556d5954a1b5bda1759f02ad7b5741b8c3f408f910bd362c453a9aa179428ed0c1b9aa60531a96eef5326a333a5cf30307e4815895fc1fa825b58375387bbec5ec84e1c262c7fdfa9b5f7c4a4931f698feee351be4e88955a5f1fd4d57d92e29c777d331e06be74b54b7f425f407a61b3a60bfded72d54facf9a9a468d74e52eed72d5732c90ae54b6a02f97d77d4567686076f2801c734cf3725e082ec619c3f782f29528935fa1d03f052a2ce333181e428dec6e7964c44e13d1a6eab8d2cd69e395436a24113270e2308f710967c365a22db9868314a04ec43a1a6de6ca1a5ca46a74d1e5a59eea52564897d7c1222008f83352c0e6ed2b71e134c4fd3b3dfd36d5bba928a5f863bae0c81dc4c06df95a267c0df5f89a87609108e385eef00a3b9964febfcb9a1b6c2f1b7484222dfef8ff61e3d35aee7a87b834c8408d45c90c394cc4e693354da76fbdac116b7152ccd22cf844a78b57362c8ed9a4a84257eccad9da11132c6865cfdfcbbf4ef549705c3b3c3abc196e5ee096d07bdc4833eafa200f5dc4cf9c40f093513b89cf40216c25d62b16103e368971c57031f9af5e01a79f07af6a3bd5433879296eb948947ba99b50ea79b38cc27d77b7f61cb46b421dfaaecf54b700e5dbebb8bb7e27db213484cc9aa88f8ff0bc468f1a64e640d9294183009ebadb5a5c97fcca5dcbb841bbf9a8756997bdd92b6cc9c36f93ab1474689641e79693de78163406bf37add83cecd326ec6754305ee57e0c41d2a82ddebd66e725d333c816dd6ef41abfdec99d2deefcf125d08261a7476f772aebb5e8c45f95dce3edbd1fe4b782b2360ee76c188c18aca219132aa51178fc81540cfad6730071db551a3fb71d3d44509bc6ed072318656793e8eab4dfdf040ff27ec3106f761ccf7ca0ca2de967218ba1d7f74ee22845b64df59cc2c0bf3c2711ac665c05b15d93c90c2efeb192e683ee800edc0a2be9762bab9aabe812f3473bcd8b2ffc2ccd02c2f1a9dfcce34e3ca018319d4173d0cf1fc999fc5ce95456cafe4345d0148dbed5ed0a00e901713bd5c042ae5b405596c249226644e18d70e7efd7b8474d71f6d3c6dfc538c4046e539ee4901c827375f5119df08954f83c5dcb407a29a4608e517a217c42ab4716a6a9c7199d2ad757832b0aca04288d8fb2c2446255764e9cabf8f9862e58712571a9d30817f7cffc4a9716a9f22a4e04f68dd910e8b8b5f36e2d65b0ed51e6bceba2b77b3cf4d11442047c1a49b02eb7508e3150056552a13ddb1678bc26bd5cd1120b3d4ba5d81eb71ff2c3e9a5bf5669449d838fa4a5fa5f0aa994876d8709adbbf537641e157e173c3c1797502afcaac3363e023968934440a20e67ec61f6e5aef2bf8cb93cefd3c127424c8258f4cac841bf38cde656131618f261e17415382594cd5d72600f953bd2313c3d07d95486d853cd96b649ee4c537da715320e90904ca34acea64cd729bea948d62202869264e632cd18bb7dd2c76cd7c57f4e6631b157aeb70e592acba86c6ce72f47a948accd053424ee252102857eb8e457b74aacbaf4752a2f659a2eaca42c5fe755124e775199dc7078efd4786bcd1e2e02d420118aecaf0629b5caac33e347749059b8c08a22f4dae49ea56713f22c36d92fc66554b0f4cbfaa7c8f77e65d4994936c2d63f7048291ee2939d9bb0b361fc40d7513e527cea58e35828e4059b15aa954240b01d250452a1710d8c495faf80c4cbf5bb94c7581e933bb78f89283f002b77a44e1d33c23769b13e8381b258603aa4c215ee15d3193b740382c9a6609b82649b895c6844078c8a8c74e5da383af7e9c5af10ab34b7681c7f3925086b6d9c2fae6ad6a69f9a1fcfc4e0c47b884428a044f52bf6b648abb6520a70a91f130670f143752c6a99c02e427baf51f10c316575f73360eb0e92b4f21f2746c32f97b1d784c6702d266be611f67801185c7dd1360d3c3ef6cefc9e554667c2f575aa5dc5345bf4a8af837cdb9f8aef1d64720f6ebbecd149c18343973c1f5e66e2a151c5e7ec67c946c43a5cf7e8e879a9d542f0607a18a50024c4c0fbf8b61e289fe471e939a1d2daf95882e32648d2031ab8de67706eebd0816e4588d46279eb0e93c9bb876bda938a55eee7148960773dd3babbd98fd4eb380e4d089031d75931efbab272196e0a612c0712ee5d6e34cb53468773b40ebe110b3f94e9144ecdd34fc28eb71f920b96e87f6e5ced1ce2e58941fbb0ba2549827d48fb22fc884b179d208c91b874aa8aedd9c9bc1b0ad4d6112f104418806241efa701075ce9099ff1e216eced169126c8e87f38ec8a9467130d314bde2d30d9cb27969465978c41fe11c97211bb852ee7fd182be80ed01f986446c29fa48cbd2cefef638de5b7f0e35570a03305e8e24897993a2bbc2d773d95fd8547ae1cf6b2689ae676fcfb9cdb9277b823ce48b9c34444f2ffe70992addc2f1806638a7e7a420a58441ac601919872b06f82d629b25dadd8a11513a6229da6a8602481f886938e84b53460112c617c9b81fb9458d423c65736c39ed2680ec77e8dc0ab4ccd6eb494c75654e7cd3d557e71ee2b76cfe06df58a40fbc88c325e1c04da8077b3ccc1bba3c46ae0d4c685ae146a2ba5e096929d80facc0a89ea3d37686f0db5a341255b59ee420a7eec5a71d39cb59a34f1a598acfb59643e261401fdbaaf024e4807ca014de0a270eb8ea3d20a2938fd722e308afff84c641b9a35a7dd3a1841251b54a7059f998884f61b9475172215349d480b6353d143ee0a4514ebe0660f0c735e03b431dc709d20a390c21d6a4822a88a2d9512db927c90dfd4d28c8526238d84e94f6a828dc60333d89bbc8605e20f6ee678100cd4841bf3ebd94100608171cf7b893f8eb11a775442551b2a8d05a0b8f052970350c9041c4eb951b6d31cd087a14daf199cfaf7ff99386286860dd3140999f7d3777b924c18ffa2b521e3ba43c67283f81854dd11a0c92a553a71ec1436f901fa0a6295881f4251f40f9481a7d4795eeff07253127c3b26d295235976a1b498679682d44a458f69c7ed9752c0d9d1cd69cde8366601336c592bdc08c64f4c120e2ed26a72796039258502b49ac45b1c0aaf7172f0533507887789f12e00884b374372107a9b6a3b02cfa9ffdf9072476c8a9436f1e0772509eb7aa0e7c928839c84b28ffcebdd9dcc14d4433e657fce0772ef04db1cad94b0f0c603183920f25ae1bbbe9d1b6e7782c88b50bbbe97b127229bb9d5bc0c3247cb3428303e5c4cbcacf14a6883a51c08e6be325f98435ea2f843282ff31f0b266b720e6d1a459686771db30342d072b0901fe8340aecf3edf66391b47031602fa6e53ba3064ea6b2407543f71dcedc063793a56b0190f5f295fcafe234d81a64495139e2c7a9814e39c1d5b023f305d568fdd944f93dadb925baa21195b6a3032202946da51438ada7853578037d8cc38cc68972b2486946bd380d91607dc13b8605162f53638107923797cab099be899c29ca3362d86d2ef1d999f845a11f98a3d070a6a2fa70e2c6f1747e5a43b7597f94f1b2e3784f3e059b09ef3235159e299e5bb431e79108b2253389e3ee8e6b1e0e1c65b635a38fb81bec9cdf680341a1817ffdac8e8ab6ee7807e803a027606041402871dd3ca619fb92a59fcd0fbeb1c11e184a10d8578be985b79fd827222cf2e27a7f7cf59df2fd1e4b6363f43e20049b15cbb5d89757f0771cca83b41b0718cdb0b32ee4f47405c64c212bc677e21799799e1ecfe8c6caa3e6e904380c8ec7c3461c016f91ef50c8e72f404cba88fce5562284d5f0f858ce3396d74413710681c4e9451dc46c48d54ea2307ec12e04bddf92edfe43b8393389de3d7c2d5bb4bc8520ddc7b1a60dcaaed495abc96b096b2e69dea8964ac98fda9df4b0e110b2cb2105ac3717c8451038ba796e2bc8140fcc35c409bc7d0bd6cc14248b87c3587224d90647f4387e3985605ca0cc6655a8b46b2b89d40223c8e93cc2fe047027378e53330d17afbe72a88eb86d7180a5e4517ff7a2ae7a4dcbc7037b2bd2a40d08531b66c936956341fdde06ba0dfd3822fbaa8da8160739bfa21f3f68b7c312b6744fe81790512f8c921400bce11ff5b08199117cc4167fd53971ec9d092d2642006596f540fdffd89bf6fb192f1acdf6743cae69b907112a4b7d46c5c7a9f9efd84d1fd49fd2ede6ce8aa9d26e521595b07b92347a17af48e3e78750a797de07be9d3c7c193c6a34737868178c2f8c97a1618c1cabf1f29a7a610f81e542171f7e2e7ed133739afc7b53ec232b8f2dffae0edf880641a9d1c2c519261e0e8facb30215eddf6b5664b73c6b112e655295f557aaa9f24966029c30f9eaa00ca0e56403b5318e836e139dbe01c43e7e6a553b5660bf43f8c4efcb8090ae7a28bd897335265a43bff4e4dfedc108423f6d7092a0c04ece9d5c4915abcc69bd6e76098e2d508a0528fbcad321fcc867a1194111cb3ffb651a4a7c4ea7d67bc0892aba238b95551948c2f4ad22884018f71051a9d43be75ab7ce6c1476001b89336c70d562ddc48f5aa6d9a7ff2f6ae9d1eacf5884e20d1ae25818475d9acecd2f1f6c6358a5fa0e731c1fddda716fc7456e16baec2b3793a9020c48d121990c4ffb2b5786d9d9ac39d0b51b251a00e4862c4341334edca50e496660e6d291519077e4ab31136cd80921036a47c795d42be08d921890667ca1e49d67e2dc4ee29118914f2e824d68bff92734f039fbb4257ada24872f9aaf5ed135653ec2d627426495088c4f1580f6604b984010b35758d54149d3e47313f37a39d0f76de02e9cb7df217620c4eb31338dd1a874b2017d029f2041b729c24836a3f129d029c54d1d51b3858106b26b48212b22658fd522cbb861dc7599698e0304a5e2d37b32de3045b34705975429ec6b786fe436fbe8d1b87a96e1dc0c5cc87b9f75714b24c0941ff5bfd719deba0bd56d1eddbaeb733a1605aef194509d72735a16892470e69f459d371317e84f56d44cbf181ad524a2b8ebe7d82445223ddb59a0249718867bb920875bbb34069d60b816ef72e8d3e58d2cf78be2ee837560bc573b0cf87b143ef34441abd8fa26a143cb5f69b8c8fdb9b2e939e5a30e0f44769a090b205e814926880c035fc37f1915832c3b3c9b244b749d90679d7627390a318bb996a16fb170b8fb5bbd48fdd6ad71e98f33f595caa92d33d69e82fea12a2880e9c6bb0bc029fb325a7ba505db90c26846e48723a97092a40630841ee6ec6524350305c06bcfd083b8c912a001b614d47e5d5abd6fafea89e47a04c1abbb035c0fdbcef1ac08db9301150bd89258f065ef84262c29d582cea996ea9c6f59ebf0bf83644668486fe0b7759fd60f44374308ab5b5d028ace7a70331e284ee2cd75517f51464e640a2243a3c992e0c631435fe13df7d8c521055845b5419f26e08e93081edeb05e3a1a1e5fecb5e2a29b24f6085d1cf917c9c62ba90c5efd06eeb82f9cc9a3e131d255dda34011acd97e3e06459cc16fd843513f3a6be90061528595a2f1cfc8506314500446f1ff98034d70a2215b07834ae6c265f7c23cb49391b5f6d5a7333c8f9b1a8cc0a3ff5230165efb4f91ffba9167d3514c1812e31f26c2b29ae8dfa82c2e4029ff9c89255f2609e72c8c5101414f18faad913e1d0c27d3d30bb4d0b41b9dbef7c975325554e6455f9ed4ef7e06c7916090297e28096b8369f712d8b354f959b1f6c584a18da2a58d0f46a7da592a00b66a26e7461dcd3c0448b2566fee58d476b3fc0bed3c2ede4c3d7bc52c615e35485da86c7be050b72aa9d5873ee985469019fbcb3ee7ab9f67b8582d0666651b49b460dcca4c9264c139f8ef9ddc2366c2a8fe5f732f83524a76635a56cbf51b2199e11270e0e57437d1f314351be5a0d038a340cdcb0bd6bbf4a0ba09ddee5de4cf499b6bce0f8db4db1cec9318d744eb1145b62ef4c838d6db3704eae0a518f0e38bb386b591c3c50d06a04904779267db8fe989b65e508e493e8963e244ce5203abe0b64c7af939816df82116185fdb3eff9276897596f9c735bd138132351636fa9ba0b677206603aff3be1e03fa33a215b6992f77211e45e3afcd497ed715fe2d26db6e9d70c2f54fd8921c51f5718ac92ad137c51293cfaa1cc9d001cb9db64853dbeaa80b609c71f3fe1bb197b886d96cd9203534d17da68210459515a34c2664bc6510831a1fbc65a47708d9e5eb1437481fc891f9983d00f0095cd725077ea9746569fbdb4757a56a129960eb371c10a0c5b6f3ce11a91dc53a4425189b3ccec041715098d2bf5e7d0751581467df6171a7683919d21d69e5006ae6838c98955c664bc6acd8325103dd7b023ac2a4bc05753d09738c1ae781e9b442b6b01ef66d7b0029d41fcf03df347e1324d913a9fb122c523ebe7a3c2b7c23ac4e9fa059720ce7e36d5a63a0364a4e58927d93c1afad5128a6891c9a0a67044e060760322db301851aaf21adf25d27b91b90f57349c251c1db6d4eb00cef05c93fb4a20bb3fe224d67f69be4b6d50b89d4c9c5bc135aa6217b62c229899238e553e8d70a766efe33644de1fd70c31cfdc7ea3e20554c95cf874169fbc1fe042b63d1fc06d5427c36e6c943f57c337c2f99c5445ce0d7a8a9414ca46235ce104230e3777d2186ef9350796d18ed7bc0adb4ca3f9e83334bc683d0cea0b3c51edd19261afff19b29d4e06e06169f9bc76998347514812b506473b0d0beed040c09901091406c5b03ea36f8d4294ca38c6d81feba49f9a0b14b61e7b074874dfa88fda2bf98f84760c87c26cecc5fe1944cdb7f95dcf76dcf3bf17b15f16a4d86c89e9422c3b4b4e747ebcd0a7dcffdd5fc7bffbc1dadd34e0f56c288e1b9aaeb5fde2df04ff811a4da6fdd4bcfd3b1c66df63b8e3cd6ccdbc0bb47dbef4284d0988942ed307436238d6096b523ca2f21e648c0a26f5c2d2124d1c95e1897d39153bba5d608b26f153bf16d1e530ad8ba83aef1de730f66cb9d7c184422c7d8670a35cc930c81ab637ecad80b3b0d9abb4a375f0831ac0d36b4c39e3996e0eab44a02f30c9960e9f4ab206a201986ca1e01ee872adb356930a7c045ffb2872e1a91ab7cbdaae1fdbb9738e75afa7aa5fecceeca31da9ac359c3faa2fdc4a000f3bfaf5fc0cc4c8a10eee8c66dcb118dc5e5f954d1b9b040f82221691d0992a995a286f63a25ebe5506b4515c75c491d33e5f407a5029cfdd1f349fec8ec5b203c8398ff536d22e6d96f10e14a682e9bbb582683114ecab8acb94e1656e916d346d5c932b5abb327fa2091290f530c65a778d739bef66206e9b298871da8a65a920ce705b4ed9c7f872620256da0418f22f778c57362571d6828da7aa44c940712e746d01b7c1a53e32b4f69022db65fd82d8bdfe4a46a549306b4a996fadc9f326e018756c1683cd6073c83c2f722f0e73c90fbbc60e755fa53462b1bc000863a3ef46e4011a71f2b1ab576ceadcf46c624ccc816c74449d6a375a84d7b3494d36df2c2857affed68408c05b00a13e13193fe2f2fa57d97b8a7c7f786a3c4ac0e39ac84d9c09bf04706d81a83df581ee85aab07144883e64e736b3ac7545e33f07389f4ce7fbd7498a9d2738daf2eb12a0cc7585cb79a3fbfc410c2137fbb9d9ba6f4804038bf90bde80252a5330ae1523c6060be2a080d7638e14667d93af5181102275fdb3ccff0d3bf7db56d301701061d9b4b56015c2fa1757257b6c00ef1f05e6b92eb3d56f8a828b185f98d6bdb665b75f8223e916b9544df08f7e78c836ee55ae668c67668359e8a2c1d7de4d32b1b4635cdb910fbdc031dc6af8c0827a518942cccb110fcde0b4a83e6264dae242d8bce8de73f86ece24e8cebd9b4459f7af05edaa01a93f115afd4fad5e04d97f2bdeec54b0cc2ef89dde735d0ce4b5fc74834e2052788ea468acdf4d2ddca0fe135a3a067afa6d9703df58f28de5fd3142fe76af8dcc07ef421dbb207aeb6bb05bd7135c839876c9ed75e4f365f3bc8b2d5996ff08b65602529a3195df3995f29ce6edb8ddbab459e95366502033e5df8a5713dc368ee642a632d200a83c0c481e0f2d1f5e44b604cd48296ff5e92092ee845813dfeacf848920482f7e27cb05751d00c2e4ec77af58d72cd2455624eb2b74109028a43b116571e68932d3837c39b5fe6ff536bed6a94655710cef260bf882c9545fcf47308590617f9a8bf4c30d1bd19145feed81b58a8e48bda2b3f5032f344f0dfb32fb86b798c2dc7ee7e2b21d5bc282240b15b2ae854e4cf81b7d3cfa4f2838d807a83efa469af411463fd6da2e04656c927ac8b6d961278a8ac1cbfa22ec050c2ffbbb4a17acb587809f0feae52dd39a9751cd935aa99da604b82cf4f760d9db5304ca48180ff2b580540f689343cd94c4619d88efb09318477e1ef21a6903aa144ded5ee5f9c2d706ae164c06307927732d765ad4d26df0b905d639244af23bc927417f285a56a719f1176aecedfe1cb1d228a6b751649e18ad8d0106a0a7fcb18dbc4f5f3e3d11c8ad466af66bdb2c61d83f1925a68c77803e9d1f306fd0c1abfd2721785ab5e9195433192b65a3e55c62fed3ee76ca6bcb2ec79e808dff5557ddb96671ecac09840e98a240c800a6effe85e26fa678c5013f60a75058c3ec44d993795fbadf68efe13c4f3ee5475cb7cab936500e39973bed1b8608ff52e55bdba9a64f33a7641878ee63970787bf679bb596f48004354fa9a126ccb9dd2c0d8a7122a518d2b3582eb1310185e30de7f42ef88dbcc97d9a366697453fce503a959099fbfdab9c3f2264d3953917e8875bbbbadcca467f298160f83576bcb53a01c0f5f4e36c351e29917eaffc3a328c1a6f52944ff183d25d215bfb97ed26201079734b3e8cad6a310c7c1023b24e7882a92478d22bf378df9a068cb27a32d8f6705cb8f184990318d432625e546c55856b17c4ea726558ee7c2fed432c4f4cadeb8c6d54fbdd60d747659e395cd4aea1b8a26e2c4332019585e7ba70869ccd19f3817dbdb536e4114d73cea1c17d14f40915d94746e9035403d15b7290400a745066331ff8349dce7a86742d11b9d4f6cff0d863afc392df23faf00793896298fb7dbd0a5686d7868b4d86b31d352a5658a915568c2f49e2cd8ab42bf501d06966724a33fcd2ed6dce55eaa8d9881c4c37289f0563e65aff839bdadc6d086708476a696cd075a9380eddc5f14286f3fe2c1f54947243778108bc1db8dc3f95de71ec6d295c6f9113acb82030a739b8ba1cebceb120931db94a41e432025b3b54d68370c0d43b8da92b3325f7631fcb49914d3881427275a4acc59d46aec90d7b1fe8a815e56717bf636a232c7ab179e8305559753e655f027148582fdac3793b2fecea56e2849532edbb11b665ddef372bc9186bd9ff2372e91ccf366d74245443f25851a0d0fad1f3dc7a56cd39c1c73cb63bb75e657169de4f134b2c039c75a4c2d4a6dac4ac9fb40281b83140b025770164fb3ac7016966f3327fc35309b577a1a5054940bbec78681daab1477ed82e4da70776d43dc009c1aac83b17da3849039089e0b4a258ecfebfb80adc8cd9b686e1d2c51282bf519028e5269d6de79747a52bd0e95f6ed1cb3af46c270c6e3b571a15ca99cd77b65366635a9e14c9e079e364566048d1a2e13ffe90b41c9b0bacbccc178f128278e0f80341bb87ec9f12549d3073b13eaf3c147abd14c98a767246cbdb94667227b9428c6d267418e9c7f6d67500ad24b603cab5a2e7b4725a5581fbbbadcd08414e80e0fd7fd3711bd5589fa303b2c923dba17fc918aca6199197d72f4e06c73d2a7381f40e3da357d68c35f80563dd20f9c97491286134e347bdcfc7dd7471a6633d71ee10bda0b3d78186b5a0a1faffb5bb64a634a7226695163b4046d6aeebb3134225b92d0dba844f8814cdc904725592e45266d65bc7b87a82f8b888ad2a3e69b4e099722017afb99de8f20ab14091aeb1061e91b8fa87c33001ed17f032b9d46460faf3f5d06f3d700df3d5633ad6d9acbe33520b9bb8c00d1d7666f700a20d01b298ac2a686a67f9a0bcdf986350bd84d3e1c6bffce6a1cf83d62f1787ae7f37307e23267e54b8d8958cb1830587c1f7b6cfac50d60a0bf61125235e3f73633805b3bbfff390a352bb879b28194ae65a38f17df26f536da4ade20b4980634e6745302aedc7e68c8b2b3e45944aad08b95e1f5be7db9ade7ec26e228705fd8461073e196adcf67d4ded555b7afde7457f4b09e28f72d0ac6a9097f65a32b8c017bbc3f7c1d240a285c816c98414b8cc0a7682a98b763da6e43a249b7e08a0267bfbd3c833b02ad6c2cc32440fc58b22cb889f2d5ee320a3f2e9860abf102cb7339249dc9c0306bcad064e59580e8496c031cde5b06f6a93cc6ac4d0cdc1319047c77ca5dc69e7b8aa5327744faa0943b3882dfb1ce97951b6c705c481ab5f7a25fb0363de18276732e2ca34e4519050438b19eacfbb1400bb4bc50960f3dca3244d8803af14da5ff15cbc1933d2d8f7e294f70d2ecef2b3f9aa8fe83f16239e383ebc08a2e55c0f47e2048a7eeafbe8b401cf1e4429003763bc03a85affb5edd73ec9d77d9309933dcef247f698ff399c56d877b1508b162646e24a2dd6b73780105527cb106d87c2191fe5d5d0d5d3ea8a4a1c68a200286a8635f2924f7bc1701c4aa3c12b5efd81da6c803a4f5f2f771c0d18c976196e39628230d0329c45453977021e253cf3121b6c2903c3070dc7d9fefa33847767360a69fb44ef22087fde11507caf579cabd3a35385104cb7062447ec4f9908f7136929c6307be37900241d4bb6b6ab5d0cf02f8c2b0325e57813ce202f8e1075e4f1e6944b6dd0899cc722cb35c63567a5cb5aa7b98719a14780f724bd4ba4e7d6660f2a5fb6476a50abec9f4d4e860ad8ded08ddd9ff17d95eb91ca6a0a8850e6adf6fc94fbff504e95bd2d4dc48366c8428c123074a52b1baaf40e2bec53fd100493d32bf89dcec15ef75a08eb1b369ce3dffd999abc3b9893fc1695b8b015297ce9bc186b66f5cb01c38fb51193b98a159f1ce8e9087d8cdb14844ebab5aa453a1581f8da65877e826b0579e50d55b8bd6886840a027bf073fdf4307d1b07a7da15e5ab85cebcf3197d17522baccc3705aec69f334c50b4d0f7addc7e251f882a0c3a98113c7bb3a8fcb41b24594e796d895c3e4bf26f88ef2d5c157e2584b777a0b17780ea32112f7202caf65181873ad22fac70975e0267d9984b4789404fdeba27a65406292fd1f7974d2d0e96ee24f0032312f5abfd3d0a95ca7a39df3c41502f2270941924c968ea25aef251b619b60edfe6911f1d740938e593647470891f163d219c36fea9d4877b93bb239ee3047976996960ba4d499053f152e0bfd38e71ad4e0d70f2fbadb0898b378f39a7b35127c21e4fa38ba59998ad79502f0eb3f1f686349d285f6813ec7263b222864258b9c9f2afac752e4cecab986862f754108ff4da16e4c81ac9cbcb8e511eb102e7d7f66554e8c265fe8a8dd88c74f23b6e21ccc160207d6ad08dfd261a97f78445bce76e6598be571586b81869c9d06b108a0305e3084e36996045cec8c65b17500377700a625af446ef73e0a6028cafa7b7eed791760b32be86cf3ed09d9fd1c574b50baf8e7f1feba49e337964ed94880e7b217737f6792246902f8e57082171c0c503be39bb5758d72710b065dc3af23a03303d45754b4df1cfde87e43368f202986ac35807dd65d8c44035e77aed3c04095fabcca7128f775ced020eb9a3d67b5b67c7c42d3d85367cad433c816ed83964bfd8e45f2f58f1af8e44b0254902955a83faf8415a7b9989297ca5e45f2c31a64bc179a2a739206ca88b1270a26602cf4cd18d618d010e35e8a1d23bc485b80c74b3c4871b69e6700241a7f5fb059cb95f712206ae6bc309b52d2bd6f3bc78d577ffdea44e98708c9a00c1303a9948e16687002900d670f0249c7bd8a6d7e7c0f9e5399139915dadd645c87e7faa93544050d8f93e26b20f9465855b04a06e41beb32adc1ea2d8e28a897f2a450ebe4777a85126da47d9a6eb714386c91f4dafadabc1f136510c145537a8186a229f1bc1f9fd23b17fdead7d805d31eba0bd8c0f2565e152ce33255faf7b2dcb7e1cb82cb7e9f85c2d9fb724fa6df5c57a308326923f06e6fd00012bdf31e19fdb91ba2a1b0ecc8c7bd6bb1b9bfcd31f39e5f1b3cb31f90cb7de948dcf66387d0d9325e96f99e76f880985d2a6b779ba880ae261b08b867f715845e0cd4cb5b36bc07b6aadede7f857a84fb83d8234c04d27dd3e946f083764d1a8e1ae1b0ff1fc39f7edf027fb7e1d37e75f8857eb14f69ef9ac00b8003ebdf0bb8f973a138a36a7c725523b21090dc2fe8d84ef2f07e6c6f8e09b4e1ac9c70786fcc867d9d0cd9f4a0bea72f48bd1faacca796c1ba78eaf5bea3367646fb9eda8ce89c56a0513b7d23ecc4a126e1591ca16c86b1ba5e8f45c9a35e225dca3c4902b3939883ae070196ad8dc0b55ed68f40add6ae23ac28aa736d16aa3e696a45c0aa622b34ef8419f6e49783e293e8343c63ed0997d2882d3b8ab10adc7a24c41c54e0778c197660bfaf03ed4d58870bc87c3a28e3a7a48c53d5cd2f2faeb989c1cf463ef84e240ee7b9f5570e3504c2bb77c88c14ce76d40a91dc675e9544c84ea6d31676ab8418b17d54eb6ba729f650b3a9dc48d66679f7bd371517c3dee732d0c9b92d4b2d9866c0a077e5e042000bebd22b12c582bef24839f8411cb26f9992d7ce0cf80c81ba35d47622c12be628a3650ef8b04ba282de2abebc670b483a1871348281866fca65660d33cdc6481cfe64845fd5650574a848ce2d841130d0978867513f4a0d992e5138f64f11d75fd0dd67d9b9134bf8fab74d1e0eecfd7b7f7783e41bdfb5bb1b4a863b3f053d12c58ef8913779f8643a4a23f764543b7d0a5183ab5fd7046b70b11eeebf119a6fc77872334e6c2fe679fde35e53fd025e242259176bac0db83b6223b40c659f7926646ef66e3dec0fff79dfb88d6aae36d8ebb74fa025d199f36a566fc47ded1d7413eb89367c5a1e2bcbc6c08ee0f758315bc169f1eeb5d9d04017ce6cca2d26ee9c9a574fbc37d677e61aef7ece1e8f94ce707d2e5c285ce3c2faf0507ed996e8a5d13708dcb3b40a4bae471ddadd943254994c9f7ed069cf44c5facd4c2a17e24ddfd49b973c04bfc7413adf450c700b385bc9d17d30e82aa07b7b301d545164beba1a6a45e28fa198a1b53fd4d8fa345f45a5f88924849a4080a815a725401154b4194956a2ffc5487ac8e7abcfc884346a10a16c839dbb82f3261c5111ef5b693f3b1d14b3891d332d4278b36bd5802dd7d248c6b99273a725c1658f8627169efcc2f85fd9fba7d8f0dae246219d80448ea854bb1fdb1d4d721c2821c3aeb062f61617bb6be443c66f660a2cf19d8feac84c7b3f3456cdbd77ccb70cff34bc7ad4bf8a026cd02801b23e3f6ce4d4974335b3f1be23164d48515117877d3036fa9034b68bf28e9e035d7db6a6417d4d485781ac99bc6a95294a5a2316133e05979aeda239dd97a427b30695543b78a6524877b1308c4377f10fe58b1bdff4faf1d205dc79e8675f1f33177047162c0e201b464ed8d920be2a9445d526facbf63ae51088a2214a7fd03306f33eccf87360810f821efaedd9d18d6b3aa096e71322ca44bd56f5b75a4ca88aadcf2edc1bfcd9a81ee9df025c659d417e6a4ae52a5e12ec0259e1f93c5fb077faccf0a5f9425f6513c735b20929630f2b248c6570eaf0e313422cb958f4df7247862ee4e97574112fbed30386ca715794c3edd345368c1e8d7d0c5d57f85178dc69d3b6af8f2ff61c7f07e94a66ae3fc32ce6eb5b2652b9a97bd5c6836d3b72544b4c0a89956d08dc9e5fbc8bf735b19b0fb1857e8ee964f58b5feb7d62372c2154373ecad4ae7f66f6961fa2610db60f124292820a8446b2cedac61fa666bec439f8690fd77bd26e82a6d1f5f30f6d54148dbeb59535d23bdb965c8c761d01002b6a877396fda66640ac19ea15500738330acf75c1b262d85f928a8b74408a9a11c0a96af3f9b7b79e30f6b346ff3239f9b344a2cdd04ea966d329fa3dfe7db1c8d3d9180a0f7d4d8d0d0b67442f954638791a6446e97bdf4924076fc7c87abd502416515c7f46cb9661f8e2ffc6fea567f8e34916de975275476181df9948de8e5b01f7899afc14fc48ed2509a15ce8332c6ff69b4f448f547d1d4c98e4c0174a894ffad681650ae5a511399954d8eca363b9be986799184fb05f9ac29152c9391f1bc10f348d943016e23c2df544d455f591bbf0c3522c873b76c4e837114a90ce0c2b6d9ca26412c22782616affd8d0eebfeb10c27aa072e4d2ea19d8b30951f88b7f7e5f4c8201f8356aafc7e52aaeca748991ad8b6ef092aac1b42504536b32c72dad7501c84f0a9ff66889eac6a83eb2752ea61c9466b9e9727cd01d7db0433c114dbba9a9b36439a4757351c735b07e2bf5c99c1eddadacd2383ff35e04eddf5bca07c4a08f0db4c6ec62d200e32d57be2f977f36c8ffbd00444a3b52069a7ddd287added74549ea9371f66165b927bf7452730a39a1ef7d19a81f2c447cad9544337260aa93452f687605eef35ca48f6523381d76e93956d7a93549fe3ba2b27a9767260381c4c851ab6ab0cd04109d7e7b064852348e2db704cc75e281872421c18aa8f04e06bc59e791aaf1d5db3a4762c4133daf04ea163613c60b49cf61003ca81bf6ec6f6c8d2ae5e6882ce036e48c8afe41c7a1f3da91b2311d92ba196e5e6b04ba391d63805c0c1aac7de41f087f98762f84edb7bf3527e3f1c5ba376e2efc97c5c271d7a198b84d96b52ea2f94fa2322030eb0aaf734777a7827d13ad88a60c901304a48e76ebf42f0633e4756ab69e86c9836eb4f26d50dcda3906f74d22e22c0b9142b10398e07012a62dc54ce3472a03e6e30f7d730c2fded6666d38ff2b8e57d863c062f9b4d7975a9d02efcbf8c858d4d267fb5b929907242c2ce1b66f76f8a50644d742b24381decfc1e55a14270106106d40517af13ce0f326fe7ad3a4fad1b44f358af964b375e7a2c59c212d8b44769ca11a813b7ab082d616b6cc83540921eb2f57fe83416b762ee253990b2c0f72828f02eff99aa0662c8f50cdd27d3b42658643e15e0c2de44d9e2507cb95812cc8da4380871c853518a93a073415f1aad97bab4432400f4b68f439eac7d7ca0f90fbcad7a7f2efecbc730c5822fbc8512589a280af78891ab0e8711a7e2e151d137dea1e6b58717967113d02e47a56827a9d2350e88bca768a611a398f396f379fe349685f46400790976316707b8110e5678974f575422b85871b712698680ef4f2f40b0a6119495e421bdb26e6b441cd003ef6465d371cd7f8276a81b46a653defbe801885bc1a0efedcfe09805400da19f8685170ac5b55ff344bea37c09ee06158bd1aa6d12596eeb31a90acd104a65dbd5a8ad8a24eef789953c2cca64cc5ad2b43eb85b346382a35caad6cfe24a4597780668148de6e5ecfcebf52d22f7cd7e30068e700f5046d4a68602fcca79ea39426b5e36ab75e49655b455dae981afc12376279e7347caf70a1ef06f4446b30daa4939c1f2dd198f306bbae019f58ed87c6cb986ff59a9e92282565878a771374186aef00aa0ea7510200c81584456218cb18c67c99165c4baf5dbea7d99cc3b9c8df4ff4316d3a54a49f984bc9ee29a0fa245153a41a26d9d0f525f03f2969fc79d57111613fc804f946ed406c6aff5d07a1b61e17cce7d7ca0940dd412b024bf131dc1650de872ee15e537711cd82362b4d0271c376c798c8af638bb62f307121fda1ee43ad9e5b4c5198413221d054957f20b9bff6fd0edeee8b16e3daa359a442c1d43f4ceccad55d18f536675f01de23af5f9305637c7e2658077993b91d61867dfce43d4f27b213c63315eda95a08ee6d5fdcf871fedd500077b0baf97be1afa4174de41a0eea73757f7e4521e581e0784743c128219b073dec2945fa4eec80c0ca41493de29650d76cb0d3b4afbefca3f7aa2752630d26ed73f6bba7b0ff577875cf7fabefa4bc4aee81c6d5390ac2ff516c9b570c4f47c7b1de58dec58635e628ce57c94bf92d4f6d720b5865fb2c8eefd7e3145894d794005d7825536284a0dae373df5470e43bece49099fca75ca5994983832ec89e7d4118d58fc3954ed7657d79608b85b1d7f4267861cfc142a3600d09c7c13b0b6264bdbf2138409c21a617df32b954c14c372beb8c73068095482203b2dfb0286d8a7d8d9285fe60d5a7c00f18846f1f81f23edd1e3d7bab3e7a608e04cf44b701f09516a6645497a00d89ce556965ea1c78b9f5290fb9ced10cd6e75297f72a77befb2e82b3fd12589a58f582254b83d90cda53343ad7ae9432d70be251f0e9980fe8d6011ddc738bb6b328ff0854e2ea063e8f4d73e7eef00dc70560f5aaabd3ea34186f8d8435531772887db3086701ed42ce0f023a65fc46488dda386b65c2e0ce6cbe766182cd0549a0cc40e5065ef8f4f243f82f4917e551ed88ea18fe9e0ffe3c51deb5cf141d22471b0dc232290dd7093e00e0c608476da27cd667d05df875f920307061dd09928dab6525c88d4378a169e071029677c2c2e6a9f49bf95a1464e314a595eeaa42b1eef848e85cbf86b9e68fbc4f4e9fef05c98769b00ee5e10ae7eb649876a815db6fed429387c115cc4b1502cafced423435720f3c1f315337cc5eb07cd9561e5e13767ef4dd5ddbc89a7ab5f8d4e504a1ebb310970c28d131d6976aee02021fb1100c226f39b92d7473bc8035297e3549881aedd1f56de37a7a77fda63b420ff1fe0a8d3a93f86f8e93ecd07dbb6ab9e77425e2e19a3bc50336e82379c7a9e479faae9cab70e1e84adbfaf46360ca0c328476ce01ce59c72d87dec386e8858a9a9cb91dc9479edd46d66309f5aea49462664e93336e48c80ce4cef14930943c88af7ef49f94f169c54954c07e6c8e7ba28883ff6e459a22ca8ef9c3b01c5f89c41896601e71433469b3f7f6fbd0a2ec4b628a9a5a4a0ebb594efa8ea86f67535261098ed68a9ce15303b7f376cf6921a69a0d1a4cd44c2d81910c7da50af060f66aab9973e033788caebe84de40632f3dcd7376c778fa93563b9f1071a4cf8f70d6cf5753102a1f0609369ab441ac554d48f0168e5fa02814c3e89bcd1f1c7e041861dfcc45ed74b0514c8bde3985b42a313a54fd3424c6fb071d1ce7bb3340cd9c02b35d011de2b6b9aaa0140221f75c7725a77e8283736fedf38b873ea502251ec7f9ad995fd4efd50d36c833138fec607d614162577b8f4f9db87bbcdfd962aa18f427f7c9340222121278078466d706b8759a2de35a1a9d0305015d7fd53eef26e08699f2c6cc7b8d1185ddb2263ab1a04dc5ba6fe1c6d4d7972ad2d58fffb76a81b4bad60c587b26a9f79eebda7c4c0a9b7fef2a7d6128e94049837ef33973dfc1ab5c0202d5e949f2ef57616db95e3a57ba1362dfda2bba014096d5b729778e9a61368e34c3520770a7327ecfc55e35fa81a93baae9502148fa91343f97e330e2c6642ea56fab9b135c49fb8005b5a879ebbb3f379adc97fd3cca7024564c07de9a84fbb237e0fb6a7730a5f5bbf2e9e960bf129d6314cfd5d74d611b957ed84f559435bfefe45c3d0fd33c54a6b04a630df072936a8f56f41b8893e5193619f695534c07a2952da3993a7a49ed9760e9372051b35ee42594720844b83c2650025363a4a3b566ee03d46a3057852c8c016deb88f8ac3b38b8266faeaf4ce63002e49ce73d63659e446f911d6d9de4f7f6559ba86f3e660a9183d707e75b1e12f2ecca19c18e7cba0d4935fe4a5f977bbc69682eb83b7c7e3eb9e82965f30c021d6b4141dbd1c1b9d9bbca4fd0b46a40fcc49b004df75ecaaa1295db8f449915775ab8cb65c8968b2a46ccc1bf5c6a27e742a2362536b3941d8e51a3d0a8162175be1901431d6a49fd366903f886163e53c505131f8a5aad1cf6ee8cdec41218b2b3e79e18e7e7fe9051508ba30dd392078b91aa3653fcbb6ffbf142023327344be082bee1a67363d2ec6b2bb6693c8947f4d9c20e9a8b4741dac83d55b6dffbbeae27fcc39404df182c3a56c6767509f5f58f6a034ca561882d23af88209e4f38874f413c00e0e297034537f3b67091e39c41910a84712970cb6e94ae548a51917cc04141e5fad19784c4401c2abbd0cc234dc6720309910d4bcf661963a13da32f3dce6036ac7b0e4c6bf7ec9cd18ffac1df7086f948c4f8bac51b02f64828c1f9566809bed2875b14a951ef14ab12c6ba89741d858d2a3b2031b66b1425bff0844cfe3e796ecf35397f8bab7f14b35ce12ce3676382c1e473e8cdc137fdf8058a2f81d2315b8466fd3162524db8517bc7a4f8ffc8bce93c21af1f6c22170924e3fc861a30dc401cf54646ff1d553032bce45a6920df5b0653fa76889eea344148f5aed861c23ef3cd3e2ca2704e1b478a6abcc1fe74517d4f570ca5b9218a7305b202456fc75b2f6746ae5028a42f02c8a39f275506be48f0b9bcb57812663adb561d937d50da7db1044d2c7451065748012084f5d9ec6bc510d51936655113a05b545d745d3e0e691949d725636e6ddd3d3899cdd9d8b9ed862830fbe24908cf67f450cdcf3291b36fe0b10c90066ea54751afb82652bf74150a024a3307cacf7f8bfde41fbeece51bdc18154b7af7fedfecd7794ca85b28a84ab9d2ba85f01e9792c540f91cf4ca1d35f75bc897707a140b491b0bcfb0f88ca477c1928294e69697dea91ed64fa3cd44e7c93386c997ecf0dcf9d477834446c27e38f2c2e5e90fc759ab48601e14184d8d4a437147731801ea1ae6b8ce87e2ef4816600eff58c1add1fd7b757e148cf8a4ffe74051bd1fdb22a441f1b05e4054019b0c76ca674bbf4df81ecbd1df4e42544655f3fa76cb573f06d27d70462b3a4f02a87bfb630b4d400e0b6469bd7d19e830cd0b1e80dc87a3123a4cc80190cc36752a6f21c06fdcc81e0731eaa5c2395655f4d568c7bf7ed18282a62d3ecdc73371b252315f27e063908ef372d37bf4391029019a14d7d56c6ee42343b33f39698b114a7416f09dbbb8948cc7a51cac5d4cfccaa532ae10771f785c08357f21cb4cd708ce5edd96a19d3c16d01efd1ad07be1b8d7a1a47f579117eb6e7d96fc6072abf2d10ef983561d53308e0f5b5dac6638d8ff61ddb361d1f4c7022c11d48f7035beeae84296559b8afa4f319df657db51c1eafd8e27a29e41c25a38565cefad1d98372e293d9a69e434275ed9db8fcf803ae2663f2befde1ed2a15d4a7823127161c8e36913a20c5ecd95b40b108acf8bb6d8dfcb5492d25e83407760a765f3a9d61e7778564edb3284bd1c26286a210651e2350fe9783d6cf34608758fe43064cb6953f135522cfc09d915a599f2e54a01fa6c91fde13dd8a1a90142181a239f78ac206d35239dc65ddd693d425e5f4e68e988b9217da22a7e00ed6ddb3c2d7130c56282a955b00ec72993eb0d62ccce99cd8f8401345cbfeaf019b2b4559e2d520cd1ede1387513c2ace39e71fc9072917f7872298334b16a88dfb00d6f00cf93e40eaeb56e54bab7ba23a1b2e6316485f5252bcd01e6bc1d7e5e55722cdf6e79d7549ce8c40f048fb8785006e2730dbdd4d34a5b0718adee285806638695ed01810a935391b1329d03148b55cce977dc99114d406dea1fa3a13d1c933c33bc8328a7dcb801865d2cadf62b6c3d397b2473533e9a24522f25c8ba51c00fce56ce29b73780c06e4bc5f34fa0461ac80c14516732abe727b21e50d782517dfcccf068cada8cb472d27b2c110c7f63651c82d4f5ea421a09976dba7f7f9f8f308123826dd7fc0a1b860a85a20ba5492bdc7f676b7d0f4631d51c471796bf6e96d76c89ecca0000b2d2ba1d755eb18512eb8ec1704cae291a1ee982bc5428bd14416eb6b56628be0955988c32c55455657580b40cb44082a4b7e6b1a9972fc323f5d761639e6c962d73a049063059e52648b853fe7547003b682ce1a85348f23ba8d1556a22c9290246d912c4d3199409c3ec6ddeebfe87e0e66915b28ecb2a7db3f814e18740a34c731271370fd68e73180f565a087b8a659f2bd124240b4c15d20f590f39e46b86ca5003e445930cc66e48bbb1d3310d10fd86ec7b73ea5823499086641c972eb937faa60bdedc8467603da68975eb2f700fcea07d370058365a4bbb438e95ebe0baa2d2a2b6bdbd74ab909bb27b05142711f4f8173c2bd2a06a0c3660c7e1866e2f767ebd03e1b0255a7920105f16630d0c7221e0cf5c527047eae68c52889ba848157d8e93efa9fa116b1d439ea7623e1a251e7d4782c134043521c99207d2c5c6d36be0e8ed8473440d73ec184c296e2de027e58acd934c7751a156c3ee52c0986a35964ec2987681c08a7f7ad5ba4bef908d2f7089c3714725ef47d35afab70d8a164b580173672980b9aba28fe60c9320aa909ab28b0082f47c50163cc9741d6ab84c98cee96a58c53f4d6186ad4a1dc00711966d06c033b3244e49113798bd2ba9dcd8cfa774141d8f20b3ec6db04512f85ad7e414dfdf487503ed9f9c47faefc16ec5d1d4aba741c086bab69c98d9f54d730cb48e2429ed25228a77fa9408533d58ba8e31e6be515b95ba74899366163d8101c32ddcb9d90e17fa65fae48b2b1d65742b511c8bceb3a05cb230e8f0f309bac485ba2b54376411253455a15c91f3f21e883314b66f4c9b234074c7ef1d9455d6dc9a488ed9a42b5e360c3ffbc145e090ba6a50b01e9676d4fe5a5401790096e44134976ff1a6510b8e73ecffc2042553494ac6b5cc140e0e1dee836751f5fa38cfa42177e171767e41e62064ad412449264f0021cc8c94d64916e5bc1e2c7f04447b91623a26d5f4a84a7822f5e123941706b0e3c762655e3657d19dcce0462a26627a109db15af7629f5d963a8988d065a0013f789567d23d2a4a51bdf2ba8a81d341d5151df4bb02f12958f5f8de9bc46f106a34cd738a0ca33e4325a8fb4ca9b88d18d3155be6e02868399c6b9d67c2d3ba56fd5d7719d77d2d9fc3d5e3a01e6a9b86bd9263a671eb3fb772106bcd256b8c91bf68f3a8da6e12c7e21efd1494d3214a8825633da1d460414ccad0e8f2d02d3cc9cc4c70ec1cd5f5e371f8ff5378c2d20c018ce85b95281b5e8d473f7e7ca8be9c0f6decaefb90e8cefe7a1f202ce4c7147aff8cc2a7b4caa3d69a8fc15438aa6fff031742583c1f7c1f4dd6c2f7896def5148ab9df85472b559f99a45fdbcc62d89ae2bf9712dd59bc4caf4d2311e2ee99bf6b8b5c4b3d8379c10237c2b1d7a79cf8bcfe430ab5a5a53e060c9e42a33888cdb47024e65cc4f34a8128b22c13837f5bfb47847622f15b01889024825183f5b18d3e6d6df4c4dfe1774ccedea2b847defc68f41a5fa28abf6f29128d50957ef355b4cc2d0ab8d555acd46c34d225ef3cd7ba5cee980d1699c4370aeab7d45cac2007f86c74967adc476833213b6e90ee278cc45f9812e7550fafe990426dd6dc1c60eafc2870e2ffe7c7d401466c98e60e7022f27ec3b81074f9a409d2f62f1c58f4e83adff6c32be16f61a7f74d5706959a795d4d60c222349eacd2aa83a8623c2257bf4a3344ca3060f170d4ca05bf49547625ca85ff95c1e8df694cf73828f1873c3e10e929ad4d2a926e02311d7d4351ab63eebb0f56bcda7fcfe1e58c50ba939515a7f84d077b480bb71cc2769b93aa6c50bbe99d98b2e57aa4f54c8f48f1d418426e30bae7aecb93c50dd22d6bc9224947f9490c8d48c23acbd7704f8f88212fdbc1895ee57265d1fb8fd81311220985fe45beb5ae3d40fe607700e4b9f8f3141322c49ca3e01b57bfd8679affa30edc1598409164f66051d8be4a417906973aca76ccb0383e689d20eb8b7c9c83dfbe4b63929c16ce3a4cb8d95b19ebd3807df6904be3fdeb85ec8448f92b4a59deff02806fb0d8e8d7e53a6bd8b5bceeb504cf7bc60f2b991911959f2fe2e36308938fbeeae79a0d9119bb056b0cde944efeba1da0fa5c5817cce742b2b77f8ad2d72f75401818b680330d09be9a7ad439a346194de4be78409a4cea5a88073ccbca24aa2f66f8ad6ffc0921ac1caf05bf9e807ff24b2c848d511ce67df5da4e6db039aa57064399404405443096d22efbbe93cdd8329b5a1073da2421cd8ea6609e71a46d0bd2d9e26dc327f9864af85e4f57189339310e75782cb9e3bd387c90c3e0b691fb3c21c14a9a5f1ed151c827b02e1de7f6a7f9b90c62fa9e0bedb8798256e7832434a21ee981aa66f729d9189e03a50fd1907ab094a7d8e10b1c88566fb817d00a170f7efe5fd61edb991bb41fe31093edb0a72f0cd374359d0ecda6220f64f27e351d62860aaa889298347052fd9ffecda45cf051c693eda459daa118a562c2c6d12bca1450cf13faa2aae0f9bc7398554d0e76167ef2d7276f15e8ed549f884ece59dc5d8dd1a13f5f8f8dd19574a542148a6c7d3f9f94325be038bfd78762d7360f4bddcd72759943707775f6e0be1ac9e08debb00293265cc57336ff43b4ee702d44f276f4a3555f037c6c497507bddb5f5b5907000a26ced6cb58e734fc1aaa0e7a6ca334e478b7520add3b6bc816da3c25b8b39128ad329a4f76e66c3f3b1e7ef922d7074052ce51d6f49491343bb86812604e1f8b994621e811aac53cfc8157e29d6419e64ff72794512bffcc42ab75524c6c0dd79af082eeb4b02221714c466b77c54d7c4521448e9d6dfc4bff321861b98665652b6eedc6e4535cf9f9251fc027384d7b73b1ed59feefa160081371cd2884aacad89ac51c1c8e805f9193f436104a70ecadf8d2aa59cabcd74b6d1fc89d95093fe9859ce7bf897f396caf9cf2e13cae409b68127a7598edced8916de7e575e55110e569b370316a2a973dd3746e42114a0d32df6aee3b170e9c4d3b72c3096b4fb51e213104ce54badcfe2bf7fef41a6933d29cdc1bbb4332bc9fa775287a80e82b1ce51fe6c4cd4116cd04d4d61a1b324946a534dbc4cd04e3aee7ca2d60cedbcdd400933e4c6d5d7498646c6d1e3733d6a7225107d3f356f9a6efc6f974d1b2b68c07be590f0a5d192e1173671740d9337a544db40f392ab60721a6bf2e76f3e5e7e90bdc6584544f024ff24ba544c081d71f1b3d81cf40c78b741e8ec49b1445152535fff1792c690335f3994d89f2488dd41e49f823c3073a78748138a486f9bba0d5265f02ce18b5fd1eb246f2ba92a43a147684712648f66619245543c4ba80d16caeb919a960e4d59e1e11b0837adf86ffe9d3bb050ba485a75c31f11ca5e9611f5165efb125533b9fdc3c86707e557b397db34fc55ecfdca82d122076ff042b4032f6b52efbded52295a07050442c9c3b6942473c0b270536496a87af23efd00d050861693fd529054a75141c38b7936d539a1cbb071226f0921b0684e7ddacba44a7165623d5621db6cd0ed461d926c3e8d9429629ba23820621655336af55db86a3a744464e108ae97be54cf4f9239d0e35e261ad961eaf8375b1a849fa4f25ef498af58acff3d610d45cb4651489d635124b8b1a7b76f4959031d04b3da3fcdc864e892e86e29cfbee850e79304a49207929ab767f541b074e5628725a381182e65b2b884271111f0be35ec304dd7fa65a709271c72523db0aae2ff9a1a2ca56267791cc71ce5333bb24489d85c79ec2c1738d7d38e3e7f9f54726c7d1fcf2a249df32325c882a2eba650c01284c8e5232f482e6ee3a2b166fc379c3b8436b26bf42b1c69cf9bb880fbe09534146055ee21d3ffafc75fa76f1398065ddadaec498bc8812defcd578bb07222d93f7e546dbfe8eba88419d0d36e52f65c59c7409778e90e0d1060bd3e3cb31bc45b7e8d8d3f0bbbaf53b464fab6153d30321aaab153453668d74e47090cd584e87014507007469388411255233e062cbb0bd3350f9292027d14ffb2ac3e09b0a02070263574731744813116016fb08286cb2d9278c953eda73aa2714e36e9958e3f156c83b0ee9b61ea35fb6ff4134de4ce0855f637234830fbdb6aaf712a0914b3a501bf1bdcff9750c2534a58cf30eda410713aac07db45af2ad93cc4d99e6a3ad7dd197405cc4266bc179151d1b8b847635255acbcd437582f9dea48e3b4a69f616c0d9bcfc77f6e4b096fa39f5f44e1e724e8e5ce8da1014944cc2cdb7d2060276e68419f930cd2e581edb15f5957e7606f3e5c9c28a8ca10b6ca67878888409a149dcd1fb340e894447d4d056138648d6fe172384ba3d6bb6f56091f5d2f48304157e14b596f5150917f9090e2bfd62802ddfa274d1fc2353f6fbba330c6ff5daa0acf62656a5143da5d5aad79873c8ad7c911e79c3d735a64ec5349c1938065610acfdd317f024c459c7fc6f081b929f2bcf23bdb99b301d03665ce01c1ea9d112670baa652962562618b368c6934ed73cea396b2bbc9b82d7edcbde90a243045381a01b3debd34211860f7af80cfc306db1c784f8e936b5b70925868b4283c79386249055643f1c916101d800ccbde4b9d711275474b3d232f559835076f8b7bcb8616b83cdd4453f1c1f748f0b54cf9257ef1e23785cffc307d79aecb064f11dbaf6d71630ddb56d80c5258c189189e710deb1fc7bbaec805ae1fa26267c4e30d16ab7e5105184ff3663262409bfc7a81e0f4419cd7da2a30775dbf6fc89854c9df110b729632391c1e585062de9d98c52cd96089d1fedfa964ad5dbd786645a2100865fe59bedfb85f3abfb6e7a7c4afe81c68ee24f83f9438221cf8c2c82a37946ce036b981c56428e3291c3444d985990fdec5a87d3b1912a6858d96f0872baf08e08a04c03fc54c9407272bd5c4b2ad45f9e13c9682755206256aa3bed7edaa44a011fd0e6f8938fbfe41a0097cf2c955750e31b18b4e18f994a2751d77ba3c6376266345e6678336a68df1a9c1217633553271dd1af94a26dbdbf495d6577ecc743e1b8a566d2418ae71b39f6a606698a4b3ab778a45f06e138da439d0373731fd5ce02b90221bd37bed75353de1d3931a2a34f6e9e2aa55ae66f81822674f7538a071f8ce25aeaeab4eb890aee9f15dedbbd505827c53e40cf9e464765e13d01b8681e3488f5ad9c5d753b47f17bf1b58b6193c3f6cdf3142b3a9cb09db4325e0e4414c255512607ad98683a8deb4b262ec6219780e605ad7a5cc4b03486ad8930f4b1d281c0e36518bd858694a4ca23846880f4028a78f9238efc92ba558609001bf4e580021e2176e86015d6a022725f44fb954905164ef553f73f0f6c701d1d56f20558fedbc6c1a7fb25d5c284e8300b7ba6dc1795ce2d23f266eed8b684e8160cd11f589e3a76f8b729155ffd2f5061707b52af3bcabf6c0a50c115531f683928cad1762683402a8ad158df5f19cb36b9e3ff0f30d95d17f4064013bab2d807bd5096abc7edb6b32a75a8928173ab6cfdf27085d5e4798e9ffcf56a5fe9ab687b992d737ffecc6363560a8b65ebcd7e3ad1cfec85a166fe38267e527d3ec27aa523de7b864fe5042b8d445bcc5b8e1a367a19a9fdd71bc0f6961b2fcc0f0e9e18f579c2eb4673ebe439843eead100192cf4759e9131a4b3dc7348c3e0fd02b93edb3e8b947d18de40f5e8fa21d6cec9a124e87bf8f2bb953c09db64ec3c60ca278e196fb2fd0737eb960553d86925ba14e7937e18a21817961ff2852fc06d670cccdd53abce0b87d0166c40155d894459f5f286558e4e605722717ad314074c3875a268bf936c2064b2e0a09e93d3b3aea29ec7be8f7a759298f6b5b1a0767428df0dbb7b716a202f1b817db3e2bb15f67a3012d1eb5be4644aad9bec598e6ee187c5b47662528a543ba941529912530b980b8375f247cf321062643e362c9bd9d931f128b1abdb6364084c5a8514fd98996d56941c7108c577cfff6bfd17267dc288168b9003f6772bf5c6fa46aea7ebb64cc251fe704439caac8033e625e5b0e591bdbe7963c7a1b2f3f6e0fe08379077dff70c524f583daff254f8290cef3d8c06ac414cddab084a2b75d278d553cbc5107346ea8dce5a1a2ebec000e17178f5faf6a01b72011e3d751cf6bb774e4ae46338c0fed8c447f3cc85b496b553fc1f6f30fcc94836dd62b63e46184538cda4aa6b847943c713e76e09b9e22ad11338d90cc00b71a2da4a95711b565f7bebadd1ea7dcaf5216247fad61beb59168554387de8bbdc83d51096d3d963a35a23eeac6dc6681385a78cc8b57c6c98d34a1a7af4739c8101c8c33a7b72c0150000d9d226eb31798e8ebf9afbca83ccf75c5610b8fffb364ca2b2a65172d77977b0a516d2cae2a3e58cb9e83aad9dc1ff892b56d74fbf76bd2f1ff1c1d9c79f5dca061e01f41eed0a7313ef74e1a8f9ceeac121361c6cb22e56a65944cda5946808d8f2a332eaef69c9c8156fb389bb03413750094be8bce392e2a9fb469174e8bda6949ef3a8ee4f27018a49664d4f9397c8f454999b3d0871d0aea85b7c2086d37e376ca54cded1cef21083d8dd2267c30621d96a1d054db659cb817dcd4c30f29ecbff9ce8ccf9c619f9c972c319f5f89c2524c73151a4682ba9b37124319a00877d789f4f626bec2354be11728a64c92bf8117af9a9593684887e18a5955216f8ae4c3778368d04999fb9ec7d2ff88c3012a6ee224427386a62fadf123966a065d3ee99fe565c8933c3f2cf9a7e20354befec0a0c222597990ff98ea2bc8133c0be2d24c0096d4a95e6561b4aee25a6fb91ff77581b58efee4ce71735e5149165ce537be7d83c20511a32defa05c00ad8f067b7e0d558fd6d810bfc33f60c3db2e94bb60ff9511f0c1b1a370a980cf8bbd163c7634ac03732a2f588379d660e2c5e40c2540bbaf63c2f8a82d214ee55ae8710494c189a6a6680386012e93663956c878a44469becc4b48922b05a2ac1beb34a1e297f9f25497e029d26307262742d0a619adc20cc55dc1d6227eb3dc9f4d37f504d6eb2cd72a3f1f45c43796f0e7b24dbf98d4caf92b036975ea1494095e9c4d0c8c618ef2b7c58ce8affb7bfd10fea259ddb37a87df9a3491588ec366859c5b06366069c6b4ef88b013ddf18b0609ccc076e83417ccdeca2fd314139db80b5315f93fa861db4ba8db675b1d13f03c5bcb411f5d7e42ba78b82620ebb86c9710d103387df56ee2b043f9075078bd874d09fc39be8e1b5e2613aab16d150b478d8975a83f74c39fa30481d0c94269b1e2395a282035fe060f4b282cd5925d1caa4c5307a745aa601681775e60059d29356e7e9d3ffb8653ace77142666fe1387b18de70855e486daa4658dec32e02e22dc00ed12936975d914230a80ffcf8902f6e7bb418a1688273c2a6f24d9252d749fba25387bae90cd2b58ded310d1c6cb4a4b528f8ead7d973dc6adfd978e42313fc3e778d806a3a76f631dff8adea31cb75b7ed905d0ab340329b2a0612b492c3be991b08dd7629b301d361fe3d0f7fb290bb8180d761e95ae0f92eb4a93fe5caf986f72c92bdec1c7ec1788889dd6d207506f1122a4487ad38a07ca49d7ca3885fd2d5dea70d992ad42deca1768d3a4a8a33ce9a11ae443ba526e98ed391b1e26b9018608ee44d8b32cc20e870eb8c6e22668112b5f2211a551e2dc8838e0f7cf56f31dc4705128c41702525c47150bb19a6b496749d5a814d797f3aaa87f3b1a4ca5315679fe1a30487f7d3ec686060cbb0fbf41573eda5552468df74b227f27680275946d8b9187532ac249c7d3d19cb99a1e2a7386178fbb881e608a62fbc439d19093b771183e1c1d69a793d64a27cfc0cf26f12ad8858e6ea06b89a75db2111d882a86153fe33c4a4b60088a3da8c57b0e25fed1e076ae9a6bfb3630b84698cf6fa7f5488d733b27fc658a7ceab9fc987d5c27dc018597c7ac9eb461d1ae7c222d82217e83f7507d71a411d08e4ebce3807af132c2a933bd005e19b51b8e19bb71eb7b6bf165832b8b030d235f20d641f35103cb43cd04d5d0a83391e2b8e949f91c10d8eded6c8bf7d3508349d6478fddc754ff199c44c7989a8293ab1f60ddfa7471c959bbd659e2dd95c6523296cca9e17b42c00561d70bae54eff2055477cc7f50a3a5c43c3bd4aafdbaf06d7bda82cfc68bf08be98d71eed8b70e2e755b34be26c46a70fc25ac3f0eb4b400dbd214323702317d0cabe72f79cb1776b12bcf4ec7b24344a97a8b42c83203ab5b41fac65daeda732b617d109aaddca37482eace81944888f90511d07b9c262646e27c1cfad074fdfc5cdd209ab19faa054b0625ae5a7f6442335ca097987b43957b5491748c05d0dc1c3a7bd2adc824c4478a400f8ff08bdf41a59e07c5735b4cabbfa4554dd7cea6a05dfe183b32aaa4b073e6f1620e1ae665b5e60542c935529279c65e33a1e5881f7103f3eca4f210fb880992fdfd811b7e021990656d46b4631af6b0057a7698012192c8391bfc7b91cb3364db2009dbbab0d6e84cda59e910d1a5a9a4bc16d800ad7cb08dc2133dc2e13c4970b8e0384a09ecb27331757c65a0834d2c427cfeca938c74468a24c5a1298d9e0064935a4894348ff7f9c9b4fbd27a4f956bae9fa22480d20c93309b0c89acaecdf6ff1f5d5c1507f0f07796c8f7d71f6c3dedff7f672697deb0e55e05ba5a2d390caf550c60352a79d07c8d3886b89c32c2c90723419e13083157223390026029b2a68f55bd0ab1c1b329b1be3dccdf794509713f2659c77ff34ce75039055ff553215316e3c37b483215b4a2e4f07cb452296dd40415477f6d7444de69f48e6f9906ba8bdc47018a5f781064c6430d9e87b3f10d5c38e1b67072ffcbde50f573b53cb34a2e854d5df676335181954cff65f8cdd1b8c1f98c153b3dd45656fdcc261e93119b8db50fa006cbd9d2c13bfdb8e4847aa9d0a9909bf6e88a08db56677d6ac72c67f4b0271e0eb863649378aa8acd0d0af4149c3e79d453e7b7f6271ee1ad65df4a57712a27dedc0e9e11110da1a352328879c8a2895578229ac3a8cdccf370b641e36a1ba444f065e601832143f59fe92990afdd81f79481a3fedf26505ec0380b9c3354537122cd29c6cb6b8cf1dc42ccef51b306252066bd22d2d617f7466059e3693deda0ab10efa42ed934b25e3aa9a21acda7b349f39959485b5733d29c54d79a57c2312c29d97fefc6bd5d073493cebc754db0ebd90853cd9b1e237403b399de385ffa0cc08bb01b5f2f6d4f0524632b2e009bd69e649fa90c5ad1f1faab62e9466267308228b6500807e111db6a6b84da8c9672422345a9f19f2fe1ceaaa16d85880125bb3602404b567b187381e2498143cf4870416b0f70028a88244c5089e627dbd3f17245330e88f472ba9353d6da4692a3578674b51015521f1de8abbc3ddb053d2cf34b802130ff74fac33f3ad934a1556302b8fc166847dce5475bac250165342fb8892e4d268e756438d4e08dd6209fc673101670f9eb37cff052efcf3efb351990735170a5ef3f1a132778ed079a818cc159d4f4a2e42c9a377425535ccc64e59cd94ecd366f6270cfbc51a2ef704881ac6c7cfd28eadad1f7f7fcd0842fa50a29400089f716c713a446bc9b59941fb8ad0808fcfbe1618ddef70fe8dde7f0325b3e5eb0397daec2e50f9241c996bf6a3ef5b1b7e766a5cb4b2c559dca5bcb20bc6640d56289bf7fc256e22d2d1682014a5a2aa54c0568021b85bdb16a9f89cbf98fd6774ed5001c8cdf6f7edf559aebc64017e48009a56520f9f27d7128a8d6fff9a006539be73ec5505cb6662ee82421936cb2711d340c9e490b4e5c64ed08fbcdf59f1777b29479b7425d2a08989ec6db9d24f008dd2e3fe0ca983c2490ac595ce84cca5a67c2a16dd6997a6daf1ca7881f5762bbd4c37d59320a740aff1c3e8b0eb7e9b2c178d2798a18a243e9f174b8c30e4359cd873facc046b49f59982dc573be421311b726070269ec358baaf940a908c1e5b40f04f860ea57827de9f2808c4ea851c3d6034f51b3a8b1965432bfff9bba38e5d2a077f57c7bf41e18ba3054d54fb99a3ceaad8d6731bb21a57fe037d2786e6b1f54f31c383e35bd955360732a7bcb99eca4e3ccbc18a9c64dac9c70a921866b4b179c656fcc06aeea4a93d16d4e2610f569f34e47721db2c2f43010a698fe8ead3b8eec79c06cc6ebdea1c2744801cb9486a86d057b6b5b2ac65e81f263ff731775fdcac1fe2ecc628faf5200dec44b521eaf12203f0ab0b7c799b91237fbe8db9591bf9f0a486df1c680604b4b08399652ecb9ff552b4298926f5cbf1bc0eafae95b7a9fc5983f337f12cb924850b10a516dc551e4f4238c44911dbe5ad6a119b14a8dfd31f2f038c09d1eeef57479799485104847bf87c26c288033bf0deb0068b806fb0cc2cf383574379b018beea50309719c639d38469400a16ae2bf591fd8152338a2a49a236d211d413ea5257e650a03b3eec2a0876263ac87e0f0d5a37af9ac6c59cec6872631ad84b17c533703edec7e069fa39baecec8ae82738c8dc2a0041bf9538242194399aa91decb7a50136532a91dcfe71840ebdbaafe3962ddf7fb57e13d62afa1414ad0684c71663639cc06d6467f30db46db15a3ab21c98dfa8fd849de5c14870896d4a4c39a25dbb51495e1fe31cedcb153b99dfeb643004e198256c3ab4f717273e5c3585d282d1d851f6c9c6c29b96238aa48ef0b19a51588f7bffef6a50c8e2f6d9b1f41841b06cf414fcf9e9b5daac7c88e60d10d808151e7b515890d62ec5fda9318e00c8d6b8ec00da17523e7e75ee65d77f3db0bc141e1ce539effecb206420eb19403c0d1a28cec6a690b22b9b25f6b4dbf86fbf95550356a7e859511a3ff124350a02074880182df374240338fc33dd666e7e98f92005a96f2245ff1471e86c607a1c609b3afe1a7ea72e49eef577acb5499d5558280356e3fb0bded1fa332783b8f7c224036d9df6fd1238b62d4d06d4ef54945361642a6d1166ecbcc5e82eb23ab2e9ac1acfe817d20610824d5429fcca445d32d48590faa90fadb6bcc8bf999b2a63215454a154cb630d53e94a8ebf06ad16ee14d9350c05408ff752daeb523e46b80aa9ba0390ceabf4c199a75aa7d23ca4b71308cf92f67be4c877e7719c53522dba29d51258c5475bb91142b0a24eac7ad94bdef67842324eb9a481c56de0c96bca12664fa53ed0a5ff8fc55354b916724a75558836ee8a52b613b114bf249a8061317321db28dd3130a49b7fbccc4d1cc24ad4561bb724d5a0e8afb24b9896624ed8d6e6970f19b948e25c9d9d5d9a94c5169d79dea7d3b4e194165dfd22c2f8fb68fc925b7a8022846ec0f6cd11f84e360b394c382c56f7b5eada2ed9f9e4260b49269f3ca2cddafc42466e921764b6ea88f3a3c03526a71098b96d4175844f0e52028b81d5853e0ff124f009bb28867d53f2cb2b08eaa1bd6b108ba954b593fb7d151786b287fdf82992159398d31e6b2da3c1f9bd9ec779d09cb44838a5fc8b5ae5726a0301e6279cfa8c57a889506a4d9418d884a47c6387506096328702dc50e977e1f56cb1d796f39e3547f22b52085ef78036a8e9f73fb7787f5836ce0a5a52d84c87c7751d1feac95f4cd79d0767e12657ad7b7601d40e5832d3830c85bbb0721648e56a2c08d622423b98920c69125c2fdfe97fcd608ea776de9f5ad97f019a76d8c2ea28323d4f7e441d14e7d2aff384b7d6ec46b13859e3f327718db98b023b5b1f09c260a1eacf76df3c0d766f1b348873bf8c59e29863c41c7d118e131eadf009feee12aecc725b53d0fa4ece5f13318a8cd49fc4897451dde213ce444d1538d22ca6734e7e1c82db9dda10ea2423ba2ce1cda850a2b0cbdf53bc8a334ff9ed92f628fc168aeaf7d9dacbaaaaa79436d82cb7fac410058f4290b3267e031d2c2db5195a45ad0d2e0fc1244b374f71710876f45ff8f9c3e2504a6a9d9b051f028ecc0ceaba8f72098abbbc944e4411c5175708b2243b604290451a04213fa3db08970946f6ac8178482ff74f43e9d9a74ac476065bb13914b3afc8963bd22081cfb6836f8383f44802883bb60880803ba261f384c4516231789f8c813e745b2b4b459eafdb1fd4ef682176c6571fc34489c73de1af4d584dbbd89a720da092678986ddecbbc42a14f5017fc57063817d354e9e18a7508cb90713cb82b9d882722160b9fb70f8047d9cca2d85ea10b4c537e6af9044dbc6bbd4801cbf6614873839ec1ec0ba16f72e183051c5f2d63868d5e789732d4ce309fa1bde89995316073de943d18bd83c84ea45733cb45f06e826b3b6ed861ee30c0d555995ef04b114a7145248e255edf9f1b2d7cccd3448f007b31dddf4a15d50a5806da3dd18f5fffa98b8e1670b9c8025e50cfc2f0767de7bc3f0d4053ef9fa5a644fc3a0fbff8a5f9bd3741e3ec7eb342ef396b247cf7405c6ea06b91c45cc7ece739c8e08428d7d7e558b67c1c526f70b199c39d47151d49ff8144660e62d5cd834b0112d3a43107c6fd0c6a814508cc94ffeaff60051ffdae5e390d7f3880fff06f1126f74edb8717d09a2b33416d0d0eeb5988abfe48e3950328b7ca047e6abb170e60535ad0616409910d2c664ae98329c30c81f6e85c18c45e91206760ea02a7d27ac17fde8708b45c94981b34c5ee4b1625034dc9f7620a1a8a3755eb050d9de9ad62fb83d32b12e6f49224984dc3e5d6e109f4f83418e060d16af02cd3f29d6cdb25e482d1115be25852d51dfcff87359e53440b9ea54964714ab84bb6d80733e006be6305bd7061ce6cf3e2a69315de23cb3685e35ea8ff44a006c904ac31cdda004a00baf75d70d63558e8ef8afe681f212d77257292dd5c2d2d80ce3e507440dc9f46fd94e28eccaf753ebc18afd04280cc2d8a370c068f129e1097ef6199383ece0c684264b549aee1bfb4b7c19d8aa113369655307f97c78bff86bfda1384caa9a3c67c7f942f002719979d3ba6de0af268ee517ce0f9d140a3887a7ad00d3b49e5d5be78f4c94fe13b96dcca4bab6a93aae69d9ac2e572424b141f56edaae4b5311a2aa7d2bcee3e5e2f731537765fc50b609ee4822cd699895e92dd5121dcf49219d12a9386bc59122b1f79f4bff83d264a0731eeb8653afdacda8b20db0b23407efbb66b06df0c2112890241edeedbbc61cdf42c28a78eb65e21a71b43eceb6c5620af91c286c87f02c56635e210a4eb91dad430e207c4ed16c8bd9cf9c6db91e8b46125d23351aeaa26d93aaae4eb32aa4da0eb4450cc611f9ee5bcd76bf981d358632d3b55dc09a8252e3fe896a5715e6befb1f10c35f5ad9500b6b97c9b5f211162bccfc15cad6096b6aa80e9110953ae33fa15d6a73251f2ef403146e54e39df7ed9dc7286c0e79ca188d6d6b056dc79db0da534741297747af43f17cff664fcc583cec553cbaee82b42542a0648d7d592e285c4df164e31d8c936f8cc9366d096cba9b97aa09f50f215aa0078c5ecad7234f88a4df763c126dc5955c92aaeb3b8e0a862bb14174be31fc8fdd76853abf3ea4980b961e8fdd3ce0f40d5725cc53a7de6550effc9a03763d1648729cbbc3bbf16ebc53eda66b09c183ec68d375b11e5e713ac25c4e30fc37c604b809a0f56c2f6b2540b83730c6fff1dd75efb626454cc9b71d976b8f7aff21c722bc16ee5ec37648ebc526156c35a016c08b93936da806d741f13ae3f593904b7a19f47f7ec775525e62a96e90bc3aed3f6784b6a00fe63f5668d71615e9f0fa7911b7a9fe836298e8d93ba82730bd12bc58d1baf6a1ac4db55bac5b1ab84d930a71cd376152a0bc91e56ee56da6a3f107387759274c281eaac1f14b7597ea3c55ca97cebbc54ae50a233adf9a54f7805e00fa245eeef100a620cba8db788a754674438d1b33a2d7d5a2b0e4e51a82018e5a254e4af8a0e6a1a8e59c8b51de6439465523ad1cdc00a756501c70028ae2691b55bcb892c49cdf956b48a464e04787a3b33ee8ed6649d769dbf280e42bd779754b971da1a4bd9a7686fc2111aff17c2df86b53dd02e5e560323c73dfe7bc6428251b2fbd785c265f36bd344123115d87edb29145238ece87171f6139d6d8120ac1cb2aa7fcca7bbd779af0774fbeb0c4f991e21e9e33b3e614fa9c5502afa03b9724556194037e88bf8dc471dbc75ec82d4cfb796b5897afafab6b2255011b654f400ca596116ef86102559784c4b1f984f43354d573434b5d50c4414fbc3402d82807ce4eb81aa45aed687210ade1e5576708492e9a93be2b4759ed87de51b93add6cfa51e364cec5e458f11d8ae4e7a289d81aa00b4ecafe8d6a437e5e42360f339055be415936723ea71c3b8bfdb2c2b1f857ecb797dfe44dd1fcb51a9cbb2f653d796a1bfe7f3341a7983b8081f80c9e9cf310d5d8c57e1b673e1a2276697c9ac5bd75aebb1c13075d624797cf36022d0230b06439b768efac715c678161cd13235ba83741d4da10eb24a91f111d5259f73da9dbf8c7de75ef9e925989cde347c6427d56ae187563afe078bd9ecd0f326c498437559cea4fe13448aaca78158a6b9ed9a030c311be21ddd6202de52e20219d2e81eec111facdfe4f2e0f8aa7cd341dbc8d68488ef10cdc84660f31fa02338dbd57da599efbbacff16f4b66e260ccdb1f6414d3ab1d071832cc78710730997829892efae475fd38dc32d5cd2a40004e988098c5a0f88aed57dfecff8a898648de68bfbaa83bd5cfef72ae409da244bb936f30387e44e52ee8de5407d836be64c94211529187a6d95ceff0fc073fe9a934a902be326ac4022e41ef5844f842b6be2acd93b8abc279a64c9255153b45be6e9eb913020b7b4fa5d09571c851061929b1bb47175ef13aa7ddbefaf10624ff69ba0e64d4d75fbbae0d22b5e0b9d61129a6e3a59fc4aed693d9d86ee69674fcc31a0c99ca294b7a420d177e38aee5fb6560fb81b2763d4c78281c2232536deef2f0ceaf722d54c1c7a71bc7f8f4ca1e461d86e0daba3ff1118eac46d3e7badf939b29389dc787c4bb96af6ff03d3fac20c241b60c3918db047df3a62c1c54d35dba74dade0226042ca650300ca6b66d5d799791779acfc5265edda3849e9de06d2379b018bac3b0456dae5a318bcea311352fbdbd337b67d7f2bce37d1287347b4be954b5351c7d8f6911ed1ae481a94ec15612dc53238c96e83fdb716435e8424caa219828e00d8514f0c40b757cb9ca1f1bf09e4d07bd8e59861b69e2a8641e3dc2e94a92520ccd9a264643b9d4fc81bc96c6645060870eaa056d5cb4f67d3674dbe872e5cf6d685fd3a9de24b85e0feef6a0a75afd5db1dec4358f9edced1ac68c8961b287981f4c07661109e5c1a2bf220377b85d84d64bc52bf962d70cdf3171cf173351d59fc95ded934e85bab2c54847cdf388a014c63c2bf38c19fcc4efc30c47a60e814ba3160d991d1c0e84511eee7685128acd8e27267961f167ff5737c61778efd51caad9020342f5c78a86b9446203bed7d1f4b7bb403fbbfae25f9ba0eaf9e2ffa49b25722fa3c93ced08e66bc0595161faa6e7c9b70023044eb75ff8497d9e4b152aea0b32a0730ea0e3ddad4f78affb095fe58fff5d7f7620434c18af104d50568ed62c970db23127dd8900c15459ffbfa6092780f7b266f21abc15eb1047fbc09e63734f4f0e1ddd4cc49bb625cc881369c63d6a79db88d6f2fed4bc9e29e9ce854a4c1a6a806ddd9a589e82cd8c8c370c434bd6dae742f706a0ff7f59c6f30fc884a25996aaa5f29d91147a31d77815c38ba451472f671273255cb4482b07d16bfc2eea179f0cb94709c9a8d670c1259ae5a4aa464a141a0b481b6f13346d3ba33669ed6c7ccc7dce077c22247236c4d99147bb5427a48203ca266501a43a912795e3c308e071801fd764751e60479888945c5d3c6b39eb8215995420885611e2cb58c03864b4ee1d226cf89214780d7f62f68e9d03640f2d833a22297559781096d677c8587a7652cce75652536e0b7ac51906f99a5bb0fb3097b1c8ec0518374a1676fbfb7b65340c22f618d6e4627268b2e80ef240e27fd30de6171f0a4faad88cc86a0949fae53e5c99096d3e41db169a67c6d8b9690619bb2ab9b82d9cb01435dd8a5e09f3eb5be1578f6b3ab45fde798b805ae4c7cd635e1cb51636af85f5174d9b4271fa247acf934b29c63573d3c82946c8014248cf1336934c7d7884a482a8c1c46608511a79a1b78c1802948c481cf60f8f97b7baded9c85fa053cda38bc482997de35ad3f20057b1c20639aafddec37fd3578e76d2358d7786ac58536acd945dbcc080eeb6da1b5ef6c774947035a6f4a28334c6fca2eba6d35ce5d149515f5343b368a7f08be70d4031a00a9e25a6d658c1c87632b7264faf67f585fc6fc3682a678900f47f7d0da4981955ce82ec15391adc326e59052cc2139d1b6efd0e57dfa728c799fbf9818952822c0448e2ac2d81a84747119dc4f5fe69f3e02480e6111ab3450378cbc695874edcf3fe8d327b22ea35b039648bde8e5828afaaff3ccd563c7006af5cfaa2b15318e80b529e7820e96887d0c9c0677fec18e3bdad480be0fdf0cba1b98c9641f33b918aaaad81afce76ec5b76b5c7775afe8f6577cf936060326c1d5e2e9457206acab6c82b89161b28cf3d11654f7db50f79f01c4c940ba0dbca741bd5dde913ca1b470344aab7b491cd17e9c839b85b7698e89b115edeb4f3c23d671a92d8e4d1c4de4c4cbb243259bf5be94879e21c36938352adea5b8bb55cf16c9f75cc0baa1c86ae9dd818c4b6510510f50fe2451efcf7185e91ed570a028b229b2bc133117d321e7053e3f4311095262fc8463ef1b1fbf601e950fbf7ae4754b7171219dd09b9b2816f3495a5245bcae9341224d5dea8c3a5e1afe13dc6b0bb4b0a2e15d7b9dad90ddd031cbacb0cde81bfbb18c0122bde303581bce13709949fe2581ae5605cd11ee112f3a851dbc295603c396b156d599dd64ca98efe4fe704b64747258e7a05b3974909212f3b7f0aab289c89e76e3a9978f8f60ca5fb96ed8f8c8cca20b327c7b716571cfe90e9ae1d89b84bde14c9fb8c521225314f5fee2be9fdfd886b3e03392b2e405b20a6d09712b19acc16c3f4eb3d0de533494fc9a25ca450c2fd4cd578cfe4c75628b950a6a43d184b0fd2e5a9d76bdd5654ce7fda294fc4dfea0d1a030cb7c0bf35cff40c339c48c738363d0ae547c14d5c45fcf12e939c5de0b39f57f6fb4b80ff21214d9e3387334719e5e6c090ca110e74437af02ad9136a07af93f559ddb89e68370b2ef6a5bf284db2c87e335659908c6f25705dd6da212c54facf2a1f43e502b030d24a6879d8ac6ccb9d66491238d34bafc881e62befc86334b684cf28c87820c96c8e96da37ef03a988ef5b71ef4a780ec13d72ecca009d1edf88b5218712500c556bc8dffc3b9355e8a989fccb38ff5db6d572b0ab15246affa248d755197ce7342895a0f0dd34368cf3c350413e5be7db9c3ef65d1fefe9c23f8b6900fddabe4e25b01be8db9eb07a0c2c3d61b6680c83f71910946048b8cb2b844f608ca040353af8d846618797b573ca7fbe6df930733d4884fe209d8168733ebaf33c6002a35028e878a9537388d20edf0af6d5c977340aa8ab1f5421afb11903993ad07ce9bd17490eb66b7144945b51993e520f7fe1e0b1bd9a1afc011046c4c8fa6240aedeab03fde4ba951a38c998f697e7394675f1d202873799cfe528855e8267aa95e0016fbae66d36cb7bde3f43707811016898698317d77e38c0f43e6c71591cea1c991bce5945995c79b5ca09efdb2a9c86b20205e43e756847f7cbae9d5b11ae73fb342d1ffeaf63fa269ff1118555c7f4794117732947982db5f50af49f31eb366887b778871eb5da0cdc9a6402d6d76aa62b80eb1d781264aa550d08c74e9217458aff766872064afb3db39523e07212f951f0a9dd6cb4c01a3dac3b83411712a1e3f306f50843d8a5c5da705b7c05a449366024b1f17e010277a32f2b64701282a7514dac1f8c4948d4cb827952bb6771d8b152143c57566f2c5c2dc578e1b8c67041c7f9dfe0a9bf69bbcb9b5dfaaf54804e0ecdf68f1c88a52ad992ac733d8fb2fd7d158947028dfe18b79132f26dde38afddcf7a52039e55fade07f0890c7c1e3522161b222fc30d4406a2a4c375041f9808aa1e8987337b6c103c3a0ab6d4b97b24cc235e1d523bddae42eb72116b7c8f30acf6464104ae726eb87d67189613bd1633a8dae5f93995b1f24eba58b7c387013225d32e99c6248b50d55b9ff69c99806c5c39977c9f336e1aebd198cc7094645405dcfa4b59599c32b01239f86fbe04d84ba1e715a2b82354a9fa4503906efbd87a21cc0c98a2efb06e9959b90621711280b7eb08cff5a59e2ca23de2493a74149966b4ba4701f99f79053e2190367aae52584f9a266b1cdad636d9c819a1e09deb585028e6e1701434444a37ca5efce68eb9ef7b4d1d9d0a3bc001032149d2ac0e46459b376fedd211039bec79caf2776bf22d86878cfb256f976a7e3ea82c334e1b072423acaf220de3c3579691abd91afddf5ec4597c3430b51c8470648562d7aba4d6946bddfdaa4471f137d1ddbf748315260c5fdb4b7f4728111f3ed70a364fc1a38c4d6bf470cf2f7826ec4399256f60fd6cae19d9646a62d2e78edf2aafdd6851419b3837a23571b3c3976fdae4b63c97f71d283c03c32856cf96363aa63cf73c57bd45cb83e0e878dd5b424b9ad91d9238fa1201240b1796ab3afe0988dccd4e36fc8e9fd4d4f006c5a319bbcecff77cfea52cde9138a1bbc0fa4bde9150c595ccf7c22f271fa3787159a605e06a949613b750ca18eb827b623e1c4f6121cdfca785877c5c46d922870c79f090b781dae9a45f71264e837b9167e3ce39fa88e2e99124c321288198f1f07b247c97191ff5244e6aaf831cd109d65de9aaa3df47e623f056be0200f04bec8c880627e7afa2279737d8836c969b6b0bd2eccb2d90bcbbbef64516653212b5b8075ed03817a653b32455200cefdf49413d19ade31db9955f3859132712e6df3ddbcdc56871b8516d4b9037ac70431b062b9bf478fc892c708332c35fca6b6f77a71d616acee8a334c7df01ff980deeb7fe76fdef553865938ef46f16caa35506b05876778740009550d1a26415f7259829c37148d353dd14aa9575f059a6fb3f781b7126cce031198260edcea7a2a07caf7ae2e3e45b0012d4029faf736faf1a168d9120603fd4f913b14afaf2586082e50e811a3f5211a5e2330b7df8f27af58f281ea2ca55a10084c1368b30ca0118b0d12c74a9da38ca60b204bf612cb357d9401e74ecf1b88dcc14f117853bee916db0c6ab8475fe146af55421914f11f9972174cdf346d56375c5ddb3c2776614b15276afd9b1efaf96b5b26c8136e72c30c27b4335cfc2bea2adc1fed874e2c0c15da694696e232f3728d827e79a792a611ada2bbf760243b7d5859c948fbb98ad626789b0a9b3b3dec2f8d61254986e7077eab92328b202ce2cb4d07afcae7a273d7ffc08a205e72a41ccae95da0a177fa59bf97a8922bd806823a54c2c8168830351aa9faddd6b89937f58761078590b0adcc72a2781e9ec063011087c1ae3a60343f03fd97cb0206ab4b97c65c095a333430971d12188d55e3973ca347da736cdc91d2e4c392efdcbc6a28b3754b5074c99da85533b70b0079debf3fb875fcb78120c806b541d0992600ff6f5bf62773ab05cc6e636f80a9ac810de915a294eaa3a9a1272133f0419fe8a360f6977ca28d01adc818c901934e4a72f790013032f89e0cbe679a0de44c4dbbe046779e5d4b0fb7cb47e03ea5544704e3e18f412dfdfe7fa2591f1d1ef3ae3b79706d1491f8bfdb2056fde51e977009c501c7c09bb9681fe80d17ab378896681a1b4ea624f4ed6e25a041e40a439b53c0788d97c4f12dad8ecd108cb0817a38d49515482e3fad198ccdf0f094f78b980526f0e46e569a4daeab2bb46e33f06831c6511818ea1f2850f032ad96201e5b6fe1079e6acc3261f3ed3e14f67abcdadf77bb7e6ee395fdd663a88b4da773a2f35bbf98dfa8fe6e561e9cb01c4f7f8b0de24ec9ee600a860a80df8ad355a092fde30e7827732b08e0d19d079c5a354f81884df1ba593cbff19edf788f674e20535c57255fdbb22535d1c410da4af45c4535a62cb640bb751a521fe36b1f36fa9a86b3d5eeaf25f635a80f6e15328d48a108e813a0c00ecfcea4b95fa78f7c347e2c51fd8e0ef4e047681ec3ff0a54e726a3781dd1f6d7e1d883e3ae16d503348ad6f49334deae1ae08e8a81ba7190fd02382a3e9e44faf4e1a738d63a82df60327925ca5b04b1082160c1a5136f3167b6329a59c8871535a6bf2b4fbdbc277e26449df0bfff3a79e08f431a7bf2bf6e2426ca7ca0d17e46e994820bec83c0d498be6ccc476746c5d94ef7d173be278991d23d8da11b8a593410a15e26c0a2db3551abc1fcadccc53267f055078eedbd1a1286950b1de41e8b4f6bfeaf326a4366f912bde0474befde8f625fb5906856d2bfcd876f76e2120462d7d21bde1aefe5c6166a6dbf1e489f00aa3ee428a4b83805829690b56a2748065d7615470e464102d0a65d2f62f98e2466cba4f6dd6e3927ef8563941c27caa620499a170ad1d5d90a1f0734547293de8582d9771bc781effb1a82337da70eaf5282300a332cbc8ac99fd02231624e76984a7a0bbc7c821b6837331dec4242326b18d382b125b8023f85bff88ed8148f7123e6bb0e3a672cae1fdbaa533f1a1f663119d0e06902cdb8ad84bb10ccdd06f360884c77df5b4f92714f3fbffba1fe4eda2613065a7d262c71268135bdfce00ef51fdda72dea2682dc71d380db37f794ee9183e02aac3023e65778d38b9efc7d494d6d023b887b4f2f832f103522b00adb3a56659ec3eb1966cee2a3e56563b890ae37032813966215b51b74a1fe289d6343e2d2ef7a56994cadf773fce6a005bb8e92e4f0291cb292266a0aa96725344f922c731bc8c4f45ca4347ce0d052e9da90903a8b7dddccead54009edc0e6a1b27304da6bc8972cc5b66f5dc74a24b09ad070971b91e58266013874168104b8530748140e8be94f8e9f21387c4e597b64f2b7db077db8c4b94807bb9b760e30217d75d43ce37e01d7cf86ff362577acdd639d0e6070fef43a0fdd5099763c5c71074483c2a74c706e980edd367d30413f64ebc8dd812579da39d6672434dd0366af2d365d06b7c2336b93698a792a082dbf9e903aa5366d30ed6b4dd47a1a178816be7e12e19242908a92996c65967400bdaa17ffa080dfe9342876a1414037727b3dd97288bdf3db749aa1f69bd326b4fa40a1aeea0712bc384cd9d2f26f58aa2c6ace062d632c6d6b892838427bb8152b0b999503b5182716bf09fa1d98243c7ef0a2142952b0fe4bd869b7cd3fb2486cd91060b384eff03124c696cc4629186b0133d11dd5788355e2d04b8d6eabbe091706d3b55c1a4d4c181f3e1b389c2bf7e594188b34e12f539c2dc3f091d81d7c7fb6bbc361aa54a3f9b4826361ced3e8f6c4096ad89ba1cccdefbd24b69655dbb27d6d50b5f6b6bdc02c45fa853e08e0ed70e58e35e9bdaf2dfd48221e7f4a61b9a0fd46996f2d975d92884715b37f0a3e48872086e91082ca17d6e47367e3d955c4609b97c0dbeb54df3d342523dc06bf01e8da7f0826316a0a7e873fab5b841f9f5a021d14f58833d44872024545219c22d20940dc9f3c3ebc0563850fe97eefd42dd2d9da7c611fd771d59cf1d647c011c69f156137b78041991d8e81c314701589638dfb36c744c2af5715b0ffb91fc45220a8887d3d97b91b9da1d3a275ca1357d29731e5d9360e7bd1a9291800a6f263b257de79b4c8adfa583ac27f1c817887b857f2ad156cc428e9c69cf6f4b9a54ecc170251f1796f2d5561685836747fe4d0524bb0e681935ed35261c345bc9b381f27340b3cf95c11111e6e10c151606464d72b6fc62024ec0d00310c6c0e6de9442e227df5b707329580b0483d4e423e5f3b216af276e9720ef7cd729174e472bb543183500c2425856b6b5366c7480716588c3b62b326079e59c3be9e1000480e456832678d2f454ca68d01cd6f63f441d5c9b6ab11beb8add8636648864bedc3c43299a85962ab2bfe80a76a8f38000d847896be0ce114054aa3e78873e88487d52af4356775eb7a87f38bfb660277b6aa00c185559625babd785f79fd5b7ef67e1d05e78d21e3f55db9b8c452d7f45bce9b3c040c3ac4cb79a5aa2cd96519d61a098ca708f8e45d6c45fc232747b5c5f806574a6b082cf20669d5f7f7f7a430f66e009fe23b75ae6942fa35207b9ad443af6b645faaad45bbc067829b009b7a31bc37e18b0cf20c9cd9650fda645e13437a4faa01a01f73a30484cfd3b1d42e292064d4cc61335221ad327853d0fcff57d56d1ca8aecfa4f21ec91dfd9b7fed8016d2c3941f3dd8ea31d078639a99846eef315bd041916871c9410144a5dcfb8797ae4a066a12a249f0df96fc4463b0ddc1ba778b2da3db90105de0acf6494510349e75f85720eded91121ad0973ad7076921afa68286a73acb638223a74764406ad42c3a6a28725d96c5fe90816e4428daac7cc6183e0a0d27d6962a2bf97e26c756c1fa1f2fcba2c8768b412a69db09d6b740d17839f0201b33475e5db996e15f6cbcb3d9d9c0cce84597fc035b0d683674003134d30c8bca86cc285684855543400d72f56b7df7817c01e7ea44bfbbeea4bc53fa1bcfcf2ae46e0424957ac62cf17cce1b46c270d76ec920b35865f4ab014460b6506f0b698231e7f935d1143c705529048094e35bc889efc908268c63c6bc3f68d232a234d73abbaa67957504c3b231ca1c7ba5fa44336e0815964ad723af7f20ce2535b9f2a64b42a9caa7a1c01bb850f6f788abe7638136f3031011e63e04148cd2190c341a0ca1e96146e07d0677cb2b948a0ba81533f418f554e635b3a25c65fafff569ce478d2d31a008f72cafe0f876ad8696945d768a24e1a8d97d3a7ae469118d90af4939979da89c55599966f58fa969299959c952f64a62b869e440ee594aaa4d53138c3fcbd9ecc491d8766894f7e472265d02a7c345d48a96302218e68d369a945ee1d92828a283612353b0954b7fbca0240ebc55c45c64c248f05e119dd1dcdf329e09f5674ce0ab9c373b8882f309bf7abccefb5c4af81d5bddad369e3ffabf8b2aa8437cb9d7adf8f96b5d9b8215aefec35daef7c3ff97955ba9296edb3f0475b63b7c5c90bd21a24ad1c63ac110a3c3651b8f3b2185ac8a8dc7bdd743d44da1199e4f4c3bfcfa0bb6492ae825292c3b20cfc4e9826814139daed5c168e813e9d7027525766f83067e2e460da773dc716e4b439687f1ada6f40305f9fc8b07a998b4e327cdc7af2eb95274d34b18dcc79d97a1845cd39f55d0188cc48e5e7668e8df1c274d5522dfa3ca13c8e736118f54aa0a9d320a1ef5d9d80ca5cd8a129848b947606ed0d96b89438565f921d9a055033baf7cf7e7636d5a6cb69ff6241acbd634f5522eadc7ae309098035493c37b1666a01945cd0e294a431c5dc30d45cba52dc74fa9ae41e31e27a0f8f40c004b35cfb7e70be9522aae56af09dd853128a85856e793598f57823a2bce584d819c080cb5c6fd5824a41f758d87f24c5a1f6fb48daf942095b1b46ca1c22b8f8a27e08cf5709f2a49dade0142e398c75bf0ae26d5a070ce49454aebc51f37c8a7e5073246e1715914bb0d765ab62cf21e4edcb74b8e1cda7c046aa28ff2703cf95a43c92d88c75ec5b54d0470b5f1febb574eb5f97cbd9aa872c6e3465ae58b459639c59740bd1a221697e6edd49eeab82883203e6ddad1da5394afa6864c4c5fe45984c834eae618ebce3d0334097e304753ae372552d2f907351898d2417d06642562cbaa0cc6a4c2676bf856eea9a2368f151212ab78e14c8a50834c30da508985446717f88b88342967f5dbde18f0a55cb5fc1eaf32644160f95d259291913bee4c9579ced3e716fa76c66f0b5d5a1336baf45257b650461bdf4fa8d63f5406d1ac0331fa15bbb2464467bef13e37fb04d31f69cc77423d4daf60047df81f81e8f19b8137a3ec853877e6f041865cd1f8fa669edd45193bebcad5e4975a64cf28ec401deb8cf244b1538ff55d60d78403937ef28cd5c6c45f48e9e7794c043b309d4f12dc78d1edda42b4082f18d5eadcfd3398438e38099042e31fa97577d70ec3cbe8bb8b093f8d6a016010b6daec9421a7a0d25460f4289658f2d7efc599444b3e4f7fed472253a97e0d5fff66c70a0e538ea3a9ee8298e6bd6c9b360c7beb711e0f91981417019970aba641cfaf77acfae4453eb43ead0b3cc7229f01b8e14e2554d2be41351ef2aea29d5698de2b5d8bbb13fc2482775c2f7ea2a61bbb419cc7fd8f937567aea466d5797852ff65ee2ccb79829cbb34aff4b5cdbeca6a0fcb874fae34665e4d68990a726fccddb3cb9e0b6c8b4f502b00cde677dcf36dcdb8767d5deb3c6bc3acf04c4851a0475fe6e52753d9612232972addb4095aa8461a68244bd7e8ead5f7d26ce46177f6824277b4f42dc26e4026ac3fddddb5fcbe534706704a7c3851f70103c15f8af6b1d651bf00d1385673ad78ba0ffec061d925073915d20aa3978b55ef8a28495afaad97c5ddc976874bd63741fc16c20dcd2273c64105e2ad4abb45cec05b4b27d70e5ceaaa48bf0c8cf62386fa7b3807f66c85f95068f5a08a83005a57eccbf704dc35f2b66104d84f2fe082665be1158e2b5a0ace0ba863d8dd71572a8ce9e0bc1ce88623bcdcf7ecc57227417f501c053bb8eb2c9460187e25e60d66e9c20948ca5ada8ef906e1efeb096e507c42c8d2ee053254184fb32976807180b7f8cab650aa01e38164e8ebc4ae729c5842ae430518111f34df447d223d7117995b21c06236845f98ad775d9acec52605965109d38ec409860ecd81a65cc3071610f1cd8cca1d4f6a46baec98e63dfa160ea19d88dc68041fc3adbf4cb6921aca74981a1929f9e30a63be441192fe52ca5490b198cd39bfc990e6324299787388d7ec93b0cb334a239fb1d0867625d2ca832930ad12a2c8cb54731a174ccf9ed6106d63212a1af298a49a1c5031920897d4a3217a647e34523afb8ce5e6f116644ec3f599c4104c98564f549753355580c3d71b96c3bf85917f8331ea3b729064a6c384d44d693a10dced37afd123439da257be2faba66e6549907a6fe3938566eefb5cb9ba1efe015d3b9c11c6d173fc6588797135fff44551fe79726ce3489c0414f608c38f0df98ec6ca03656e3965878240d1dfb8bbb73562644fc94f706967e9fd586aee1300d30fa022b575e1e16e428103d5c0ccbe9d440652e04f6790aaf930694aa83d14dd4e222eed097a81aef13ea7462eddcb08d3d87af5d98bee4281d6f573e92cd824df6581786d81b922eb7932eec79ee88e6b329958845dfd4f43dd275687113abf83af8c4c61a1c8ba4eae27e86b0fd1b60635e117742cb5a685e03b3b34893ac85b8a7efba68302c93b2d77ab50711baea2e2c6d836405faa98ac2f5421b02acab30a5bb4a4f07502c5916f162ee610a829b39afa8f556cd9e921f1a7876be61dc2c234214844fdda23b111bf08f38a8aee5bc4c073e418cd27e4871247e5d8116ca6b8e999d8c20f96832772ece194a020f41afc9c1085dc0f48ab2c591b70bae2dc62e0830619c75510a3f9982a959aaa4acb005c8014839a497c5cb6560a45aa5fb29d608f92f2974f812e328b72eac05d58cde323d1c358f697a72b689607fd9ffab63d36ab3119e49d3be62aafa253efeb26a3189e672022cbd1e9af89476c61d069acbb446d1a2638d62a787f2ab7e2cd9d5ad5843be1f5948459a85164c23e31692560d5aee837e524557d3dc99f1db94cff78b7b5c3f9b800a81869192afef5a920b134c07c6567e3e0831c8c139c6c1b1c7ded107e5577edc563f435074e299521b701094c698fcfa5bce3b80826c8aa68ddb0d35b2d1f2767406a21323162224a02636fd80913bdc76a8902c3b13d488b647aaa19c12773356bf964b6a00859351590786df66f26429bd860e02dca08a76f01c1c2deb60982df620671c04fdf551491c8ae36bdd4e7d8ba42d0bc2c8817da120bb63e19541c98955a2bd268e3c356f949911f37364a8e47fa98aaa107ea723af80fe9ba579a1e725e39fe3bc1eab328217fe824599f09564732fa31f6c82ea9c2e6b603e0fa0dd0968e17891542625602d38dda0f68da46140e4fd3032451384e8ff299fb44927d1bf466738166caf0df05f5d76efc079eefe95a9f6998dd8996a980b73e4f50835f078b3cae0a41afa8b08900877a3158134f778a6a69a38c10b1f0a8185ee5d38bfec12dbd246461316d087b61d60d93001e0bbadeaf0a898079854db1c9adf9eadbda4fbc253fbdaa4673845b63c21a29ae2b1ff81cf4b8caca7e83e7aa480bb83ae4608a3b6e1c40abd4c5272fb1020ade1ffb9a1558bbc96d60fb8698c3b52ef9d0f98b463c153106ab21e599746ff0199e90c6242b63084c2b6b2cd5068b73528435fa920ddc4433a20b6b4cfb093e33a13737fa3f9a6bf928fcc16a8eb5c128a5ceae135da972910b9349a4fbb3592364df7c965da8fff4283176b56d9b064b8df7e30bfc8f633f55649be8e43c4694a429b2dc6f01d37c3271c08c5fb26b18f2342effde15b58eb0cb78ecb50fce32b98a4df54805dcf3c0a1e2acfad108e4c91d73f8ce5feef1dc576f69f5c3975fd8b7616fe40342981faf08ad9f43d8b67a145c99a866a5847d7e3aaa0c4575722293e6a2e5eb446a37d6fd12b0c094d247fb50e30baa6fc03e9fe3353d8be396d969e0c866f293e57f8aa0b4c3d261c536972d543c17aad40e864bcea5acf5c6b2bca0a4121972f70240d88a5f3218073530d72ebc8c59df244961e350c4222e7ae99c5be7dd5023f307631574a7eaa94ba96ee7ce64505e33eac0b131c8af541cfda9698279472df3cc36329ccf937d354a18d9c2de4a1146350b74e21d115ef9febfda016a3ee2e418c5fef82f7c986dd5439af183e85a6d18068362e5f4d00b27b8a97ff8d02a88eb0cf850331bc46770c75988b98ee51763fae9f7ccb3f399271c7f2b7d93753bc771f4338da95f6b1399d43108744d170462bc049982299a23617036d068b2aaef9ebb7e7041b18f34d1bd8ee8cf666fe4007620ab2d4a55e77535038480c7d52ed54f14aa97a83a75f5ad97a5365bae4e072428e0104d03a6c45cc48d08a6bdff7fef8540e6a6de4fcb66601a6565549a8f0f37a9c58911309be6d16ee2bfa833527e1ed65730efa801d8deeda54e11325719e30242bd0665488d6ad31ada2a1099c4418269f89e8473bbf5e3358c884969120194de4db3d76b8cb9d8f41823963623339df07ec2672b28b2622e28fe387da79bb33a72073510a4252852ae60bf1ac3e55c35c39616164128a0c9f370c8f52b71edc7db64c8fa41823ce8dd780c82d15a19df9b8401becaffc8adca2a9f11c71c0391c240174493552fe1b453d4844eb0b1bd76b178963a5d0a20e68019b47bd1ecc27c35f20bd7a7d7f4c08578dd9afaa1f6ebf675e8223f2d55be65a7730546805ea83789d9a7aeee0213eed15091b310d6afd4c92023465a7e410a172cf9c3a24f274ac0c3c2f593b371fea89a55dee71f86001ec12d0a780ce118e6482bc4e5fba8ecfe6b29e62909c74397aafdb7886abcf2b9889e94bc101705350863d38ff70f9e8a025b334aaa2ce33354d8294415be4df7427dba19baaaf9b533a3a552b8dbb319ffbed94c89623fded66ae1c49bcd1ebda83ac3a0c34a6a413ce953e0c999886b546d355c91feb15eabf2edf65980817a435975ac6053187b7f0edb96ff5af25f370716fd9a8a6dc43bc830ee89738a482f655d4b9c9cd4cd58f46e57ea12da8c606555a842311c41d6ff025f1d99addfcd996efd52a50a2e21fa3db9fb70482c3ac415ded110808c60a7dab794bb637e80278f708f560b834cb511053236d8b6819311ef13eec787aac94c7fbb2a37bc54aee42588efaa3034e27e52a33b3b15e13412ba9fe3d3147fae3cd8b7e9b0cd384a48a78b697171e01a44d40e69085f1a52a93fedd094069ebe4f567304bcdd2575ccd02c199ca23e18c9af6cdc122ca8149b83b671776dda5be1a136c220d7bf0e072cafa479b509c4a2f25d551d46853f65c4de2730cab98aeb07fd7483ab3912926c8674f6ea0629704bf498ae38f597f26e76ed54520e2433f6a4a4a1634d36b1dec44ad554c24354e5b23e52f316be4739f71d6bbeb7ed1d0e5fcfcdbe00b58339464e25362c9fabed87275febaade18e3e618523e6e400f4256909b15b16194b585743142b64fc848ccc521849135e46371255a47fdc018b5ca0091873a09c9cbd949df6e44894ebdd69996aa13bc67850f8eb8b77fec327731dc6ded81fc5bcd1d2879664844e69a0b88a349134b758c79019aa7b95ce33f31b4b4a1180578bf21172c7d6ad90da285bdc9debba4318ffc2a6873b178e7d1e35b05b9313e2ef6c717689c22ddd0ec6082b3fc48358669bee33ea5af2654d1212158d8e99581494005e78f9cfc219dd64501e4f0a02fea910af58ce3822a1d3c63fcae8d7d369707a6cb34b76371b6a0a242e4cc907246c482ce19bdaceac579594ae930e4e09450acea0a6548e13b6c7e3c810fc129d20a6c38dbf4ec54af6550cb9da910e884f8b4a83a979655e87f0aaebab8a0a1905e60b8750645e7c79dba36a84f9631eebc37509f8b27c45c76b52a65deec601ded39cafa719b9ea30691201ff11f3cbc25faaaebea27d1f45e84d22ba680f25f96466c6c6086047d4ce28a1ab6f8344dea427e81abae8411d3b4f3388531c6424cb0af704ac58f071f5c8795ca246b1d8acf6e1b83bb08349369f63ce6edb08620230868126e3a75c20848a5f3f17270ca8eec847b5533802b332fe0312430208fcb5f823f068683e5e3d0b7b0bc4d63d77ab8485696c88fab9ac5c8ab9a62bf8d5dac0b31ecc48ea92c86addf19496752fc5c3aafc06b26eef0e7f52acc208b8bf42ae2a66d7b6525c49b0edd2ab224f3a0f1cc7410ea32174a28b271141374c63d6853bec5a6dba8a2fb11f3a9bff1a42610d98e3159c30860c2cc49afe91263f342cfccc7e33f2b26e494f0a8794bc28bfca8f2e1dace65945b75dabe95e0467721c72789fba13421f17abc0038bf6ab38336a9908a9c74def3a7e1e9fa1874d58e01ba879e5b1f825e2feef7e6c6ac1dc772003c5c80d6cbc6d38771c770642c19622cf35c745d71ee2df5a394e814047f0a0f6a20651463f6abc1694d10485c36141330cec2eb65b96ec5040cee4a6394e010d4c56797e584197d707bb241eceda598aacaef1a60658df4672aad5f45dc485e4f7bbe41f69613bad1cd220079e888250fdac3ab53ef174a538768f0f64eaedb419f901c36d68813d1b4dc64627f3ecbab71c0670e01fa0f8b2408b2c88029560e82f836777b66f77b2823239c1c2dcc419f5336368ac8fd7b6ae04738840f794cc9ac4554ba5654a476a4e14bd899af6fa7bcfd91158ccb950d7c67d1d8b6890466352d3b9f723735329e727ce398601762b7b70902830c29f3e055be9322fb6b08be301fce3d8033a88ebebae3e9b23f60b332800bdafde6fee33f9ec644947b12aa21782f88f45369c06fb0216e2f2c68f5f14abcc81f193e7f05e17210b45ff10a6cba1bdcd22d36bce21e2f5bc5c6d1a640acf7d1b342abbc8e34cdd5e593dc425e969ce61391b3b77ad25d8189544695f94cc270f5f8fcbeaa2c0b6f6827ae3edee7956adfccc0a687133fe71f151f1512c3d1288dac8888dda4069ffab9f60519ebae5f9612273498d29e79c9b757f4e64406a51a45d2933f42f3ef439219eddb1e85ac5c23bc03be63055d1215df4c4f72b0c9cec00e3b98e049abd5c9730f56e83d74c0e6c9fdfcc8af7b55ef04ecca0ff8b638fe92b5fc358cadf5adfe584b141c8c8ee510d4d998ca927cfdb6993435b60856fec36939562ce9b9827124444cce009fc42227af5a434c7b9fc49eaa2f09c4ea4d05af821597eeb3e940314fe676b9f88d983b0afa55e3503029a21fd7f913acfb8c9f4be92e91c9b102f2a37c12a5c6726e31c20e19bd6426c8b89ca25e796086c87432a11ac4d24f9230bb03561de95e8569dc529de9e7b371d0af38f501c626e2e74aca34626ece9bb6dd8aedebbaaabf34982627d69e49d5452caf8b157fdf222cde16f94ae3d407856b57e70cc373836d98a37a50cfa1d413ec5c64a42a5e9089ddbc2d27fde62ab27826499da9ed7f2f1fddb2776288c2c87b771b959a6bc87b7533651e2bb24206c12319e05e9abc0a9ec15c8a2d2b7ff0697bc70e3642597752453dd1290a01ce53c12e5a743e96d54c0d9bd2470f2e8429bb71a183a230faaa706778c458b209f38aaae4a8c8ea8c7c47eda51762531f56df973dee962e78835b5c0a54c905546ad171f585aafc91e30a4207ea9ae1444e1d0dfdd548d25c6b939fbf6b21d5b1e162522a629c9425210f5189379b4b3e4007256c4be69df18e91a94f54fca8f7576e15835f08878083d981a6bb3902a8f0d89dafe02ad23fe8dc7d73032cd8561547c061540a4b4c7390d1f526b4ba4347ee189115c35b2c68babbd14181d7ec187e0416509af6fa2da807eee02d2b33e8905c3764f56d2891f0d4762e90570ad9a51b4fb8ba7da355b92d0b87a6dc9ec7bef414f4ec383568904cff22d8bfdfe30a9c9c0accceb49531f38f94161308af2ffb906bbab1892222ad370292d0f914404e63767b49562eb667d9bfe451defb601c4ee5f8fb7e529800eb66b8c8661d58a47f62ecf72a362a267442c5d305d1ba0db433a1ca10b2c923f88b29c8d75dcab0dd9f06a0bf985cd6225fa17477c8792bc3c24e462b69d60813dbfb453100854d04756d5526aa4c1e8e4706d113eca24888e19654b2bb22dec070cc6f26fed2b6ca65899f0c3985254192565317bda62daa26ec8d9518003f7f0593444af68f5a1896b2c71a9f78178c0659de454718310d307cc56f8d2cd8f927883c020c870ac381463328f6347d140bb6ad50a6ec8e53751a0439450e66c84034042ccc934bd3dd3626a8bdf1b69a482a691116401a99b24b03de7891cedfd2eada026fc7866c70b8349c68e53cccd81df3f9e08706c1515f7ead46db85a2824384a278c884f1863a86b67a6d83b8b149d5088e3168342cbdea6e875ba759bccea7a7b401e833d78f9806569c8af05fefa1f8b611c4a5d05ec5c0214ae510fe453efc15541b564f913669d4af3a0651b8788b776ece2a3f47b14638a7b9ef1d43463888060ca247e6a319a2c8eb3e936109958fa29de26e838af290f8eac4d5ba3c65569dc7d4862c4a9ff10e46d2bf30a01bc7efb4cb1f72c463584b0a41e51bf518b949b2a67bbba562d0ad3cb647c0e32838120844030513c98ff519295bd174d3640c2e844896ba16bbcb067e8b6e7fc2388cec5f809cb4a69ce857bdfacecf65fccad52a83c4d513d444aaa19d2556eba69427fe78523567a131f82205e15e7a80bbfb0f607639c1d4395ee5143cd001e7b826af79021867205df3744ee90d42517151e72fe57e75ae948ff8892e9096efd42d22f4c720f0167e58bdea7ef53f190b65937da0a6e4b366bc49c7949850f718e7b39f54d05270631d1638e90d96ade08fbf03e8e6ec2f6a69fe984fbb57c976a74781fda2ca76d6c4b956631d9c5ff6507ac6bc4028585f9d996f0ec04935fa73d8ceb6ab4c3d0bc907438da8e8d7cd72679c84c103bd37c35380b066e401a3ea8c2eb3a0ad3819ffda2d10b3a5a634be43afd058b8e68c85df8568a86eb513db52533bd35d3c9f28a4da72aa76a5da5efc15ddc3a793c2a14618886e3a588dabcb0e7c1bdcc9bc7e0302777e0aec1fae22d3b86741dc55c37e786a9e3a2476995b13f8f9a5d67c6ab39f5b3bc0963f9ac6ce2b7f031f0556e25cd45418f50a18322c24ebd6c99cce860231b85fbda268b5acf319f4e7efe8956dbe9d43051e5019935fc8157699d7337cfe221938143f1071f40d4d3d3dcc94b26c57011f297010e258ad9e23e0087bcd6d6e6ced439f510d2d8e447f4c060ddd1d3ce5c9d2ce69e1662a3d351018a576d0a063b84b67b0acc8339b22571260d1b524872b6cd57218ce4965d6cf9e9b0051ae7cb140db14cf80e184b54a12682ad833be78a495fba69d7846017602f4933b18d6e44d45f18f302abd06161abda226fc1b279f1b1027034c79f7f87f5fff8c74d9c2f1fd935a138f6d013d7d3952a3e2b69d03c6ab844978e20b77f653e807a850656d2ec9a9e87d6db02cb79ea9dce63ec453178eca85070f0e6f881cead8fb229e7d1595d8d98a085b2b558373c804f7d93da834cfd97285c027d3f38a2884ac93d259c8318c72187f38f2f59761cf0ed09bd149d0db3731530f823009f4a7a5f402192a7cc3fc074a27ede89a08dd5e843e6dd90938f156ef123bf1e451b838da7aecb7df2825fc82d3d82f55fc917415651e7a2cf52bbab6478b0674a0dd942272c418321c87c398443d07f9d9bc920bae88ff50897d5e4b563fdbd59deb4701a20022e146821de47e1ffab1c6ee4fa815f4042594b2b506c974e3c8673a0e39be920b6a15adbf2fb6673e17262643c0dc1ba220388a294843e65becbd964717047f448f7da15cda64fd8cb95c118e401b3ef16c7024c0df307f569d6caaa0ba6b94f5e7e3c5b7a60592264635f03c94da2472fc4d18ce7a4aafb482bcf237ef34608535be2c3068d0cf87f404db170d94ccf59f70145ab6e92fdc89f11a95db31ae98c5c4e3b84fd1b4498f65721ebc858939a40b882c6341cdef11b9ba538ed55e23939904d886d8ad62cbbc62db1ef3464b25e5abd15d14c2e1f1ce17f63f4197319c785bf0170a30b7b61d8c2c672c3a9e4dc3e37983f565cacc952764abd074e1186e45f9373897c21916f392ff1f1b037968fd4d7fa74c3347a1b8027ecc223d469796b548e8ab2a82f1f76e5258696467ff20dc4d0c4d4381eae2fd203e93da4a3ba5ad022fdcfb85e57e507c685ade1bfa84cfbcca85b08585b4d006cb13b95b379d36b99f8a06cd7ce0a8fd857bf9330a414ac89cfb46eab645797aba5a2f3c3da7af39dd90862a8d51f5838578560b7964c9ff15c12f5c629c5392095f79a3761749520c43853a7fe95feac080a045b44908af4f1be5970f7b56e4902d1f55c9de860781df42fa7e34c2c90b7976c5e6148176615aecca15230281f30841202ea81b7ea85a70f3b8cbaa8d664c8cdcca69f9fd6305d1b3b3a400ff0942da0252b83cccf28b4a1146278850be9fbbf7adbdea02eb405f363d8b3b347ece53067c6ca0547daf94b4bd369fb7ae126e8a9524cf37ce49b718c8969ec5926168bae3f31fc0af7eec3e8cffa6e4ebcc5f0c0ce85e8783ee22e40c7a3d997a3852833d8a2358edd2b75608d831b92a8ab6ba8e5b2ef4e7011dfae2ec7fdbf3ea89bff4e08f18ffd72cda9066051733701ec8796b9956d89981987966d3e3a369d3027885acc15d725ce3deec5b806eb2cea7b84083f38b5745c7a51918f60252ea9f2d3cf2443bfdf24c17cc416e487c95014dc76ec7520904f65e072bd6f6842b523fc8b00ab5fa4fe697cc2789ac7b628e02df45ef515981de6a4e5375e75ff347bf2ad4c44a4e92472d331f481836a6d100648943059d5c5f71dac034d245211259d1dcbebb1d9579430120a9639f9ff607b24edd5205b82165677f5e0714be3bc1057d5a86b62e8d38675e87ccff194e42a9bc5ae496f7b18bdfab9f19303a01213bd472892396842c01af7e57dc236104fb439875ea2d874391d83b53f073d8760f49a34cc30a91d1efdbcfaf1b166a699effd5aebdbd174d77f52bf51e2bf48f0adbb6c6ca3c14834aac76e36d1975c5e3e7938253248bc9db6c747f278bc07f2d052866841e763eeebed2aa6b60149acb912588430ece73718cdcb37ea862fa7670dc10f71819263fccf3c52f4a495ce685893fdd8e9ff049631c23bf6494424b4f414123fafb3acba260be79820315ea9ceae855549090a0565071ee8fa305f9f1bfec617b3987da8461007887b9792d211454eb56cdd37627dcf003627033f67d447d4671ba2b92733ae2db76c029fe47a96a372f805476c012c46e3abd1d3a805a9743661060113330cc3a45694c2679bc7429e100631297295b66e8ae63ea655d2052083ab2a23ca3da93fa76d02424b71681145356b9f2c773e7931e0647c7d0762f6546e58b718bf0a17836a91855026ffb8dd582eb8716cf9b0e47118c4a798abec6587ee9f4a426c7fb298e2a5890e445a2c202fd7a9a66b606baca20a65bda8c132af6bdf6f5a0937021ab52f90cd904333e20c0e2fa4233839f585b4c5ffb61a4e7d0b7c878468d1f04c7c59b743618cabf9218ce08f07c6fdb28174735b4c391734bd8481706e9566f994bc910802e5f2e1aab6247c03b5eac74343fef0c2edecb09743b4cf7411a7738d2aca08a821e6040340c186734129d24813407719780b33db3fec0844425d182691e8650dc3232d148bde9ae4bd27a0331763f720805c6c7a1363af321c7c95a3640d1b0f9eef7353864784276ac20390d4cbedbe6109d276b699d44d0ce2618f74cedc4915f6d5d875ca23d3565404d0e240470501a637fe6a69800ac406b667060cde1edc40ad2e47d00078f4a353323c0b756ec7da849bca06c5fdfa0e8b0c3d02c0094e6f6d9783c506ea760b9ed8f6c11f8b855d10fbe19dcfa772deb23c039fd93a1386594cf2db1d632aada215a50cc09b9eda5dbc0501a8992971f77705d26fb08eca5819258c28d8b6994c6b0dbf160498de5f0d6cebbfa0e4e07bddac3fb5db1c6d06419128521288348b24268fd03ef48fca8777a3b0f1cafab5504cf52d604ad3621c60b72e77da179528d048d3eb542ce91cef5e34253a881b226102d018f5fd62334962e7a4332b724c04f41b9a9907b0f0fe79d7eb435b545bde5b3cf20b3b1ee7d8bd14a48335eb4ac986fd85b63d2cbfa5df580be4d86a4e7b11b9ed9e272497faed8edcfbc1a0577b0ca88009ac6e11248b6914abfd0434968707c0f71977c1d9d7fc763e53460e9486df9a65f56f933d3dcc871bb0e1e7a9787018886c803928e3cd9dd7660f43787ca477f640c3b2306b0976eb500a728b7e178cefca5ff376b1fd24ab597167356541aae75a101a768a9a9f31c822220ddbe5e6e50312e84947c03d17e7635961c4a8939fd87600eb5ac4fdf12744c78543f2e39f670bfe78a503e5d60b7dc093bb55d43889dd262f290d14b39fa2c37d43fede1384e03925b2122733dac2ec9adfeb050d609e294b979a840ae4bb78d7013daa7179bff1f794b14ca580596e0915179b6abd5bb56cf8cee2b2fc60f09d9b83ea1096bcaa8bf7a03604aac3608c567ef23bba88e43e011ab8f3686844e5dcff0bdb7cb66cc25282b8e424eb5ed7323d73ffb299e8019dc79b3fb2194e44e258b9aa16a7dc06cc4e4f4b22756c3819e63b57a83b10cd886c6b25a4b74c89c861ddc5200b45f5943cc924f32e89ce2486142eb5b3672485afb05b51398e1a473bcaa29c06a58aca9985b29f63bf8834c516191c0538764bcb38c3809c52ed18edf4adce14977c4d7e54a520871863f700fccfe83260ccd87b5a980c0ebd9c87e697803cdd973c51f273e61cc218167e41937b08dfee78b9b3b13ac7f37db82f4ba9de861d7e2c5cfbc78f886623f9ef1b351a131a178eee79abe5e6cdb2c00f14f341672152420f3e8347862aa9e9edb9b1c3253cb67e60c41623212ad3d6baddd3fccca726984b1c7463ab2d26d01666ce0dd699f969407428a0e92e24aef519aa518b33a38219e6d1d4dd8ecd33ac4e17853657ec55b5c9876a91424de7dd97eb58065247ae8fa310653325ce8e205fbb141db55755359b4295adb4e95b008e8525a040da13545147a2719e371647f9e82058afc0a201af1b1b15ba6e55437b85883732a4061f0cb8ac8870ec3cb1834a91165dc5123c00cf069cad76669d23f5a5c9093b984b36c6675a71b731d7840fa33ecc59bc1fa44553cf9c4a60169314827ee506b8512252ca5431501da54586d0e5d1b07a92103b5b1f9b1ddac2c1bf6a9cd5051d74542b1d0a989b9e1bb486cb977128414fd33e19e74b2e9de11fb11e193b2a3d1b75a85907a45af74491d9287619114cb05c3413509f00d4d3a18c1930b6543bde436ac6cca6206ace0d5e65be4f2f9d6722bd7d124bb955298db65c3e4c34b6e9e4f65a81b424f4d2c17576e7df3469f342ed89059394f7eb2c5acb6df03bc25295d4deb5d04ff12293b4e36ab1d09cfdf5bf37b92f7a2589d5eaaa34c8785d6fddb626dfcb73d7b34dc66672df184ec8a0de220f25252faa1bb8a053a87069450694d8352b4415073f5b2454b36661597c5cba096f27693392ce9e9f99e2c9c0d517f89b530dbc0fcb0f45e4d9aaf34d94e327f878010038eb55088f0bec940f4dcd3647b714f48593b6d61f11f952482fbf633ea76d91cfea4760955842b577489ad18c0c7d7d13a0f4436c0b22e3d070bba557d636018db16cc333f8916449599f0ba8f23c503639ac3f0e873ab003d9314f4f2f37d5cc6f9aebf8a5ba761fbb82fb4a8912e7eb9f8b032b9f011beb5ddcb6c7d4ab59e1aae7a1fbeb21e157d44daaf803ef4a62cf6a0383ede679430966d723f85d874310c921a4b86fe4c2a30279396c05de90e1cccff52ea23e29252da6b41472db25c1129a9f11fe71c3749a3839b8d13441c7ba1b9b9e5f33cb5fe851522d2c34619bd732e08120ddbcbe5256e85a0f9302f3c562ef64c22b7bee6558e94d4c925f68dc5f60ba8cf789e302ba5905527f82e955963e32f527c127f1fab98114a7d6a715d6af3c297ed39bf3090d4670380d5c49b4d85672e170dbf06ce4f6fca3eda90e4893dc87602efae166b74a87255c8a593930d2fdb8ae98019ad1e63cf69d225cd34bb3c31dbf59c8f973e1842b2d84cf87d6077e057fdaf638b45276623235df1eb883ca462e1392f0fc0ed6409aa4a5642bbb0c69bc2ff0e6e1a300406943956dc37e17d131871d4c08108f9f290729233d09ce17fa431f783e5beb202d4a7e3bd7b4c0fb7a98eee0a2bc957192c7dd222ca495d3f7a85cd8d25e280e7e05b0cd9c4f4c6cbba46ff65ce4a586b8d43f8e124b68d23dc061780fb761080773769d3569e9f411effc9567601e50b8b0f9fecad59d4e01856ed87b3975d643a207b4e3862237522922ed7a624f62efee2a361ef59159b665875bcc60531826ff02349c3dc28bf39be7c93eea16a4eb43eaf6b3f88ee9b197d677688760624ca3008296a631f8ad96ea82ecf9d0e4d2bae16e079dcd0fe6575826494cb17f434b0617159ad4def8eeaba37da25242cf3eb48812df15ced2891a4b2518c0001ad2df95b4b07707328b1e7d243746c11bff7da6d272c9a012ce38bc5a20decb8c7b490a858cf4f05476cf5047b5431c97a2e08ec21a5002e4d3b70137037fba2c3ff38a429556cff85274da7f5222d1b400a93738b8652dd60658e737e888a033a3eb56025ee3fa23d3c4d2ce48bf1bd0b23e380c3ca91499e387880a72a97d6ca270ee06dc161fa4fda78acc6f2d3f5315505dbceb300ccb0b73221251f18a9c16b9ab8eb45813b0a581fc9c785b64288a4829e74a5654363a4bdab4ea2021db1a2ab00f209a1851b4c08046a9be0984ba159e4d1b385aa8c162ce5fc8d32ff6604c1dd47537f2b370089ee7b9459f8f3051303c3cf18943c96128e580f682e72f4845c04a7b9d515a1a42373fffcb583fa84ec9e0d173f2058121be04b59b30df823ccbfe760c3dee83bedf7c9db206640f1695442fca984f0bc4b1ae96c65196baf915f5de4e3d9b4d43e6f7bae6ced6d572214682ca2345b26d55936d0ab4e37b0046a86203cffc091a82b6420cd14fa4b10abd828ebf9fb0d78bbe028afb04bcbee2688a01a41ef22e584e5b1b69bcb6b29085a0ed36cb36c3aebed772abe92e674b5c07276f0dea7edfae1719da698a13b2f0f37aa47290db6672df72da90c6d260f52bbefe20d5efb56d8d0a49074e13cc23110d16ecbb7c6cbbe971cce5c678c953e27b6e8d863fb0f28d81fdd6b179a4ee6fbf4f24f4538002386b0c925a458321c1cc9449668e71919bec1ee9c5b533067e4c27b0e0c6e07d613ac0ec64730d8af0d74e2133e21dfa4613f2416ad071419b5253ded8f8f6ad1cf8b8e0dea5bd9859f0a7bcb1bb168551fac3af13c4a6c9354b4bacadf3292b4d0e139577d1b7cb75a976992e1d460df27a689dfd2e4800167d278e75aac84c3e72e4ea9b2433fe98424d8c48e022d974200dfccda3caad104a531aab9c1d4b9387bac2606404c30d410a02767e59b936b4e589d32e818234140dea29d4647ff7eeaa1f62a86c26802472539b787a0c2c7a945f13d138cab2f7ca6adef9224263f6b485bea43a0acfafdb4b04ff43549ab00998c607c9a1d047048da51d9c05b62ff0442f63e77838aeb564033c9efa1383362266baba4028a57a0d628ebd21de603ad2d7638c02bef4721aa4ce58780c544adc6839ea886d24c7a5708101903780761e1d4fa095c7d7d48fbaffbbb007043b8a6dda85046878cbd89a5a2c2b6784b831263e4a5d5c6c6b8feca0c82c814d5fdc55e6867b73fd0f8ecf6f47b25277e3b62e40c1e286512e352f4de94bbc5cabfcb908d9a3fac4bad873018126545029a3a3888b436bc044afd18e24c8085669fd8cddd06468f924a180148ccb270a0184e32e791da661c43b08065ed5eb658322992e632484cd75a2678970345177354c8c93537e889bad9ddc588a7c328e05479e81c971f7a6b7010b0de69243042c6f39a87beb8357b83f34c485f38da9b3e179fc93befe80c12668b5e64a7591d61c86573d226d157d722386b842c2c7ffa949b93d94a5baedfbdadbf843f904f659d75c353d2fda84fc2c3809e9a88bd4d00ae2d2dd3758977348e8b45c35141d343d478ad85d6314b1e78f37b1b9ad9c9916f6db8dd516a72cbb93eb66d2d4e8b2fd195077810f13cd0bd0c4fded35f5610132162c12894e3a88e50a08ad57ede60b4a7e6cb383f20e1ddf0f974f2d3a86db941103c0291fcb79b3ba6bfb6de107458b5d6c198d1938bf57ffef77e685c09dffa244da8c700e9cb88c4014408dd4462166dbf940fd48f7c95ff2324d721e05b2667883859a28c6a5e09e8318686179dee19d90a5e51e73bb1004985234d6df4a42a8a1a6d4e8bb81364ea79ee6f558022880896881abd43d7ae8652fbc48df44c5eb5a1e2859e2dae2a758cdc1e18ec2ed323603160c7fd511cae3f2a157749cc43a74aa680bf1dd2f42830f8fb70f8d404bd72bbcf02d5e767c4aeb3b2b5cd7e930d515199394f3f98db44d27f7dd71589db65888018eb8131a73cd4c11aa173cdb47cf69fc8cd547dfbddecbda051ffcb75936ba615817ed98a818f589e09b1e03172c81753b1c72d018f653ce4e63a4cdc909be410e469a3d45a79f76a82b43c66c3f85337e68bbd6c176f5760b40ea4600845bffef00571d12b5a4375432ca031ca737918685218f7bf882f08fd0c50f8bf87ce1709a740c4bc2e75d57bf761b1ed5918381918a41bf27f78cae10c4bc4cf56152bc670396718fa4fe13a3924e8440368e4a8657d88467f3f189a0f7de282792b7e1c9933f680a0708106c5b2f9ed157246fa37866aa135bf6ba5e1583ce19811385916ab4ce059e2e6d33613befa5063dd436a97269ff17f88928adba8a32e7d37f6107039ebecb6469407cf232ab17248119ee72bd0146c3ab23723cb1bcac619fdc591e92297013ca3f44d97b383b2d10297652f7c2921148fb8e2fa824f5417601b7df3f90b03fdd3dfd5b98d1284f894cc7cc724483c6f23e01320f623be5e2c98dc8557f058bedf293edbf0a7bc58e7fa91f52bdf1fe567e9c202a519a7d2c19433389f46936dc9bb2ae85c62a5f544a3e76cb201e9b03d179a1667406dfb41b6480d6e5cc4af8ac8ff2d967f4cb2feb99e7ef6a9a72958c4715cb69eb493604e0fe442b544e426e9943396ca75743d394339a00a86f18e8b4a8ac16c379e0a4f50ea0d65cd68fc1725e92ccd9212880547d1eb3dd6d6fb6f71711f2c9970f0de79de6a0648926e2650db701f4f8d465cd3c6ae217dca2189459b845d6d4a64ea3608e4230763ce0d2c00c3395982e51e502416b0b6672480da498a7fed8003817e53f93ef19a452d3dae4964147a1657a4f5f3c694c13ef45b63c34bf69fffdc7d6f50aadd38b88a9242086669f6878334a48d3f2a6e00eadd872f1ab8b747f2844139bd819e88a196ec8f9e9b5c7ba3f62a23b82efdf2a6276bd41af799f9945d658c6529cfdd00313260e8878743f1bbb7cc9bcdee6021ac84a107bb96169d4a951f2a239b3c261d9b81d56a3a8a49f57811b601952e2a0b27d996a17f8c8f694b6c6dd0aaaec812aba665e69ff5b5b1dab2a81a7bd94da159309ea9b63ee272908deed153077697bc184f0f50ab55b1c4ca190c179563ee57aa4a85741a5ae9098bc847ffabc907291bd259f8967c9a363a431dd8835516e22629e99e5f263fdba9d914bec32d12815e802a96997fd9449fcc49472a9cbb9ec94d1f7c9537e3479f2e149f73929266766b31cb0725efc96d95cab05d24801452095d23d621989a561998220893efa887b92656fb754d7733aecf0a81fd9263072388b06fd846935d3ba17067c39be79d8518980c16f526152241a535b6f52bf8011189088c6df77c40818d2e72e142e108f7a380c8e9417ddc6fc5db5f84354c5a615c9f03572b1f6751ca38bf960d70746e9792d4f86eb546d89babcc99c76833c980acf5039257d7fb19074b196f8e30d3d2d5ceebeeb7a09824999fa0f995e4f005445fdadc514b56f748317b241b5895526098351e6bcd49fcae088c3b4be3cb036746db5342f85194b5b5bbc4dd7e89007bf621a7b1af63665e47cf11e2d956835ad88ddb8da1d47e42c13be9f7c6fd1f36ae78c3806c6181e06642e8d4e51e14ff235881846571e79626bf3e591cd2282cd7d3ce5f4a6046a54df6054e44c868ad222aef0e77b74c40be85a66b7f1d0d84d58e159ed78d594cc6238759f91ca9a39a92fc4a022017fdc123e6e9cc6980929f78301d57930e35ed825c738304b377392bffe02c3c25fb94516f3cf1c236d99d27ca7064cdf1eda2ba1c553d7ac961c091c26e00ad9606ef615823787023fc66aa9591673aff6977cfd20ffa72335d3f128630890c361b0d1a4556b9ef5a827196650b6a73af2cbf9358e9eea744021994d114a93a578228f89893b5aae9b59251b9c2d384dc76cdc559d6f65e5f59c35c1f9184b131d352241b199eebfd104fa610934da0deb686b3d6d9505b3dd893997c813e095f7f78ed20e17bff21b6e7968b4d9dbb4e3a37b1f269e7c4272a19689db338543e66314cef3ab5e483b68f156048fd4ed42f651bf605530b2cb205674905b410c1401c3d766c56d5c8f356b5da828663c2ab492e1d5318693e8248620d40737735da30af69a57fe34d7dd96e579f721835d565f3c08614c249823dca94f08b651d187ad36a106881185a799166e465690665c55c7c77c4051e8f652c0e50fec6c63f5a5b70226794e2a9c682d1c72a6a87275d846ca05cafbc0d9759c48362644d48847f9e69fe7060decfd906be65770ef88abfe6257cdca24f08c13aa280369b35ff00b1ce3e4ac995fdfcf314f0ff4eb953741ff5c043ac8060594a33798d0733fbd2be31502967e4f35647346c742c57109885c21477965493b5e18e7d88ec65043fc4f7e10056734185d44a83865c58fd9e8c2b8905c8b7ebf3336efc3db95dd5006c395a7f98c47a7cb2fdce328c7104104cdea58123b4e4232ef3ffec840230c789f9883b476aa99d02886acb431c7075c4ee34d93d327430179365f062a58d5c94d43f0adb76252c62895e33d0ca8f0fed553e7e1684ab628cf9c659d8507abc891180ce9a615310583c56f676696ad62907729d1723050872d16fb86cdd5da2c747a770bbe80344d6ef1d32aa6cfae89bd27dcdc49c10ff1bd084f3fb5e46b70865271500d751d8b9b228d621941099bd976e963d3868711a3074265e8c97ff28d90ac1d3821301bdc7a6ab33eb0d4804b8c03323a7a3e8642ecf6e5c5751577932c3c4f400431ff7ccf79ab3f073e27de38a32872b23fe38b1f11add9a7a7c9c73775ccb9b8b2bb9db2b2c364ba11e321c3e2dd040acd0b8eed788d8221ea843bc4d11388849a65a9ac2c7c482b2e2e3d8373711ea13ca4a3ac4d420ff88fc55a110cfccde412135478d23fc8540da4b0dd870486b3cba47eb0e5e0c8e0ace6cf30ff093795e742c5708143c3e223eeffe4f7a4574c31919931a0e8ecb4ce4ecb8e22bc2f1dbf22fb8c9031d841434d198959495b9c80b6493c82668c63011a0817cc9319f954eba2debf1d851d7344360999e63525ec6d74e606e3186a40c12ed7e4a952561f79bd0dded90fb5a1344d7dbe798468cf09f522067354df60a236c3d2e7bff8d58eccca8046e7df8388988dc632ab7d3c9af33df0cbd25c41dc56f0322cab166adfc7e7d4ed85d6ce10a4101dffa51fe75639f3ebf08308f72d898d067e284f96701e3c3e0fc9d26b0287b0aec11a772bd17b0ea8b3a539f78079a7623604b85ab23eafe45123268f2b83f63116709f2670f3517213f3c05e2e65c4cf4b5a3513a37822338a2e45ae0df36db808c7130fb4eff9681431308965dd94685530b04dc4c433fda3155885fa6b67ac05d811d7d9ef5cf49c659a4a0ae47b407b87c59b1f936e8d8980d611027c15bf41df767f0a16335d3a91da38ef490ae9eb9bcd55883eb7042715b245773852891fe2cb21de31c19c78e122565230bb22a2777b73666cf08da819885e3c64356ce0f17d5e845d31229d8ccaeea8ff0137d4b6218f8e7d180baaa3b146396555939ba460e6ab22d992502f64114601f76ab5b15d1ef120f49e9d7e19d0cb2db114371b30ea1019846d1d33bddda6ac213b5196f357475d315dd578fb24aa38ef53acdc897ca9f6116ee1888033a8b25523ab8829015706c6387761729882882e1a51de2563cec66bc5ed41c6d89dcc26c9d077c285ae61ca5d6c66cbb9c11b3bdd440d456d250019589893a1009a9129d60d9dedd0b26233145d92a625256b778aa681e5ecc4ffdfd96b898a8e9d8f320bce3a44880c4ddd11131b11e727c480300a3066ce775d8b0d2e817585ea04f16a3260568f3a036545a208ec1119bd64074c6e36057083abb4789891521893f22d0080a3ba6ad64020a1d37970a80ec26e7a7ae601445cf851f78c032ca8a3d6b1ea386990e4b641d325c6e4743429bbd43b0ab71fb9fc8e2116d87f0821e473ead4bfe7b000a3c298ef558ae3a9a443ad3013160f0eada5243cdcb58604b144d0cbb50f120a28c69383e5f66d15b6ae105c6029c4992b2967033d361d6975eb63f80b97b216d5adc18748da3701f9e35efec46a4319fc9496263597eb6e454972056319c5e80de5fc7da598f5fe1b76f85579f33b56bac3628ce6cf972db76b38520b544a3775a3b601b44c73f93c1ac95792c242c83f3cc0cb521bcc1c939ea07c9ed186aa887e2323fcf7596a0ef108c6b43f83357c188a9a68f2433df30c8fe87c5d2ec0e9f51377348c24697375be559d22dbad20794b9de1c814bd25b0882f93c5521b73df73a3b19b500a32ec5c5e56f9431febc18ea34518cf448fd795d5d03d3ae597e002fc7c821fa1df7fa6771e6b64065db8e9e070fdbd3a629141c7cd0d160bd9248b9b4c23a3e95414d4c7ead48e25297cd4a4f3a930687d9953ea0f1336191d9b0b72f577af56c51a73ce0d8c22dabd35ba387a70b0450c5bcaa4504cde0603df9ba4da868a9265827182af5f3c9604d541a731a796b9c6f09cfaa9a972a16c7c032710508d5bab69852a958ad3961661949147aa024be567d318121f4ca81934ec87eb210c8b35bf36abc812348c6f3b68eae2941a8aef273d167135c973bffe68ce52e4a2f35d00810f8e2e6746577837abcc27793ffe738ae2ea0293633da76352ca58417e7aafbf559f2bc6dec257f0997521be746e5ce0b6c1131d04ebc4c5737885b0b80b9ac8d7c7c3399565eb1948e9095c126f33fdbaf6a92ba41b8ba131995b6091e0c30811671f198ae06454948c8ed7a066aaf4f484e87e0a246ad66f21924cd8a936f7b3d56e8f1bf0e3c89526ab135e7ad4a04079c97d0596eea57f7ea877af7a654bda3551dbd8daa079e96cdb7f9dc86f0e68be9474a28ac0e7fa6460b7b3b8d8f148153f43175e1a18b1824bc68a7ddca3ad774d0882308a944e2b338739ea1fac34aec0336f52a6d050ade9817c84b2533276dbda9ae67f3a2049fa00a06995f8d2bf5d407ffb4638bb4c7ad2abfaa0166f7e40ee32046c5811b6e2c96dd157a8beb2bc8fccbaf48b19c36db5a06cdcaeb08c9983bab94cc29039f0a6d57b2a47b3ed238bdf7c87d7e3320c2df33b5f8fcfe1412e5ec07cccccfb2eb2db81e5ce4606395cef95732c6175a9cb3ff8451b93c80d9505778889ccda8f5c4f34bf21dc98a7c8d7eb9b98c9e6b9a1afc10fbf307c80647896b00f9fb525de52367adf3d93c3b7b66269e76aceb14d9ab63c50ea9b22584bde577adddcb2498a6682323a0367fd7a3787b186d3cbae6a37bccee8fd06532c89e8a48e911a6ea9e97ee5590317df83d4c53007491d326cc1d8ecef00340a73a9b9bd961dedd1a1999d38451771b454f915a9fe7547bb7d5da8164deceb458cf24dc42e589a4359186e329570e6b0a334cc3a9c35a4c7e5e51ac683e888e4416867ef0567da9b9b2d5c10e0a356f414640ddd65dc23537a6958d7cc98f9b39fa0b8cd59a82cd13bbae1b46a7c965311b871af1ccdfb940b4cae1dcdba1468f18bf247c4d3ac94ebb3b3fa128bb607dfc830c02f7e86961f6e6a57f7b248b717d832c64af7c753043d1f0243d2f12d21eb433723ce4e3d82a9bd8615f47e6d1df2e3e91ba286a16935dd1795c476fcc38ace2f346cffee7d59eee0b3d8bba5750fd37b5d867ce75e05015bb664258ecda2711f76cf46fe0d93440ee308c6ad514aa6cb022dd7a44d828ef54a5a72b429583e3a94eff2d047a5e1ce6b491ebac52fa0fee38fd8e61667d2d68c80798127e60c8f34b3fb7254b71f66e1491f682b8ce4fed90337ad2dacd34aa2b9b047636bcb44018ae159f08a217d0db888e8802e6be83b60634d2d4a2eb04740ca49073140aa0bbd8dfddc74bb3714e7ad7c1f3aa24d99034c1b660e60d95a48efe85aba3f7c750f8d5fc7ae0de4cace03f31763511ea4c696a31f67a9140c5cfa2184b4796117da1fcda82f59a340ba898587b7d609fb8673f511907a0852122323e9a03b53d203dd29efe1f1cb4984cab0811e5451122f927869e2f17689b611c75c74a026ed86509c6434ff7c2d62cf96f3e9b0ae8a9b70923dcf1791cc0d49e0b7f5a6a09fd86192eead071e0fb9d7ecefce897568b0906822557e54e664d5a8c681fc22f89e696e13bdcca1a2d81b6249aabf64b69d98905c064550d4df63dbaf145537b0ed7825cab2ea225e592ece678a5a51a21b8186a5daa2e512cb9fb6c197635906571635a1ed5a1b6073f9d9bd205539e727b19cf8a5e9c342b0eb3489bf1099ae6266e1489d91ba082ea496c4af4f1f8ff86f39e47ce25b1f6577f0a529d18f8b3e01b8f59acc5db62bc26aaba507f82b3762a092db65bd65c51c15159510df8d2f4501ecc7d6a12e3620db5d1b673d6b623473c49b0190681aef8ddab401d9b1ab37477690bbe81b101085b96704242c03c82186a6d4530eaf22920c7ca380f4becf6c44f4d0cdc71d4b559bc634b5477aec6c4869b6fdfe52bfb697533909b6904e9ea121f11874b8fbe0376009218474ce8ba442ab9175456c9456d5be623c7c9a81381c569f15d6efd25e18fac210ffd5181e360f3bb61ec44d2b87806ee12fb72ebedb8985d692a007d1d298f96569f13e9c5142adb6cb41ff943a1f1f757c9cfe1c1818602e90319b67fbb223144928f33bf3af1669cc2e0c2f5d8fc04fb9957c581b714e806f80feaaeb1c3b93b0fa0aa505b80c34b65cd68c814bd22a036cfa85713d625fe30f61bcd97678ecfb06a256c0a7079cd9e0642d0c3b62f68c18985c86defe59a496b5cdae550b8b5fd8eaab24985db9607b6b9a1e4d34e84f982a11741b4c570b624179e10e86d2814bd15373392a92288df3bdb0d4f5f7bdd3e7a26be7ad284da084a08e08489ddc050f1da5f3cfadcef21e1026b03af7f974587ae0c2a5e92384178d1f2e1a8a7447a11fa5557820ca735070c4fc2b4ece2131e1840f7cd8e7d968aeaf85a8d2095fa4dfb0a2be78ea60dc401bf893ff4fe1fd137fce696d47684c65aee53905e82044e3f8fc488c0d2a0ff766beae5e2244c4479189dd5d40f7f5f6786945ccdeec164a6236d346218d01f444b8fd01d38ee2208111f9032e3650ce5890b457cd31f534425bfa8ae3fd5aebff21c239303700ea7eb099bd14508d9827e266224fdb843e86edbe8d9c8f3c90dad44d31c83c5d0363b055465f99876c7bdf29ad28956004cfffe76ee0155eff371843113267538274888116438100a3f8655dcef3b3615b47134c65dcba1fa65853d1eb1da47e98fac77cfd3deaddafe5c55b508e35a68e9a883fc2840b823c6b452ccd7a02251e9ef39d4c347f654c85dc51753b3263b139910ecdc62cb3202ff566cb1c074a702c007f80204f7753a17e0b672f8011820247b4f0e3307a768c97b072842c087f8958a1c152c7c6b3774bbc0843505624b0c30be381d84241ca9a36d3c2b9c71bb76fe1fd7b2d1eab850aad37c4e94e43e2dab65dda532ade00a4043121ccd7e3f47fc94b15d46188b32b07061f3957d321ed3ef2287066dabcc031646310a35f104e2db194c209bf0015f1b30e4a6906ec616db060f19373c0f13739733a17d0d264ddb1a2f52647b108884592cb5dbf86b5d67bbb9018cca8f255cc8d7cd2207a5eec3d8f36465858e1272b3c28df4f01cba82794be85d73f100717fc0793dd9900c719a7ca60c6e85c0fdbcf60cfbf80e9bb0c580eea8409dd44f04cbde9bdde119dc08a9ced58ec95b42f7888731d47f6a21492ff13ebee6729b2393525e192ba3c51e8308a74bed9d6e03a26bbaf16432b031aab9e386079a953c0dd1cfdf8ac9effdaf04b640d6df2fe4914d800bfc5bbcd10f2afc25d023300c17cdc79877eee2b0c999cd7991d00074d5c7965a491340b5c2417e22e2fefbf0f35c8fb543565f341db7ff980d1cc1e74c52a137f3a6edf1d3981182bdeb7def4bb3c3e25927dd22d5a227f92ec3c936ecff6c1e2ad8ef30e020f452b347e2ba902c92704fd366153629d653980582185c6925e9e0031f8989852a5e66e170f7c15cda1e474b490d5bb2d0aba4c04f758327a4feab13ad7f12c95141ca959027c8a142b25ca031b5346c2f75dabd0ff3084babe69f1dfa4064026865e8625f8958a9f862c0029df70bc6faaf583811eeea4a43b1ec65bcbdc1ebd91faca1ad2c362607a9ee57997c4f689d5b0e8fa47359be88396d41c2939710c755cd183a67c301fe9661598fd43c69a894a28b4a0076aa3517ae56c09352d851941e7713a4518c0bd68ea3a8c92cf3aeed71959aabd625b3d2d081f6a5d32b6ab9a2b2dad88c32c06d12b6dcddadef33db73c5dd920075540c958e2b5128105e4749065ade5874b76b1cf8340196b02ff6c05a54cfda078d000ff518cabc54722e596b59045e3ce2c978e2996bef3cfb98c17ae2446d2874e815df21c4e77c283dcacb9c76aa82b5c5cae361c99801b171e190fc22d289f2df348f955d0b272f2a5792e832b5673050db0094a181953143e15a60e95e9e5e361b6ec9b2f23b2a1ffb87a0f72156aecea4a55a1f6f3a7b0aadb295e0959513f48233c11cc724b4ab7c7d5b655294501070c239359584f2745909a69c4c4dae5db5dc04cffde94f2352180996d951ec99b5cb7eef5b78a429029fa0f2502d5c77fd4b68b8917bd30a00216472ffe7e77daf43bbeccbd6bd77c7b4490433ac847ea397a425081f3ed58e1e9bef2143a73922fb21713a06c9419232322fc4198eb768879d32ccb5a1ec4643c015dfadc479b1a75da1f574c56143b4c5c8d75636bf0db31613d679be13430f51dab58c8526944f6caee4e370f086e2b2ef796f0c88be44e47d7de6d93e1d14c0fdb33cd07ce9ae83cdefac01693b2b4f64844a3d74e832139cc55e0e24fb054c95f37295a9b362a33a9e0689af66d5d0bb3fb57a04f6f8e29bfebb92a25baa5bd80ed900a3f9ef337ce3587c21b269d3153767ad3a9ab1548e1a14c3f39b004039b054d80af79b32bfa5950696f81ee376d54b52b00510ee744b341fcaccbe9849f9412e75543801c9c474323a5ef11e77effd76f502ddc05d8cd4e98c4fcdf45631d93c67774a396e17d120e950cdf4b278266ebebfe219c7edffd790aa9274bbe8b0740d75e569d4d18545a6a6d7bb3f444527c193c092ed8ee8ad072dbaafee1dd8dab667fae938a1be36cd60a62afc1524160dd176d7d00a6bb401ee8bda3cb29051d6d7ad2fdebbc7d95d7b9bb18a0476b67c68efaba65f662d28b1df9a2e578524d8db221e7eecf4949464facc87571f3a759a1532664e9d917d24e66a70146d3770c9a57a70a5006c87aa0863a16cfe861e471d5e20c69e7cbbb54250dbc3a7e14f897cf0be9b50301bf0852183c2215a8aec9f0f359b900e9847fde11c9d496356231308c9b9572a0f14a90977b0e52b7fc0d5a3eefa4599b4f8391262ed9804cab10746229579bc415b17ee0bb63a220e07ac5a450289e2bca60f763ef9cfc7d3065c5c5a2b8608316128100ee01d528d78b811e352f2f01faf67dbeac194cb3a3510e828eb28cc4602c9fc7be0e0563a628c748a626077758ef278d44ac20dd800187ea211fb43e716f14d2156fd3850e9e73899fec10fc1d471e78b3e5d5335525fd20c98aa5c2ab915800ff738e0220e8d0842c3e5106e907232a1b4bd297c28b9e42c267fc0a7653b9953c7675a82998318c83a891bec221b3961b9b9d5a99986df5141a7dd3d09cd6ad70b0aea2fd54a01f3fa43087bdd787581aacb77d4e6448a03659a054acc14d688fe80731ef8fb9cb5f22cd9132d96ed906d42de6bd27ac69b065946a93345c87342167db0a35bc75cde06bf81736a4f60f262c5731524276ca170bf67eeba169e3f1d83f349b0745148507e9e2744b92b98eb0de62f2f6fdd4d0c4aaf2961207544d4fb4b9df0434eabc2b799574ec71c349f20bb3b4954e68e88db825efdb26dd8e00c80e676eaeebf86fd33e524aed9af92e7715f4a0687a992f24f7040dac3d2d322d5c2d11bc158ce5995252719229bcaaabcc0a2fbb5a83e66ca01e9c2b46053bc860ad1fd62f93c63862d834866198a0262b80d1ca07d1ac9667feffcdfb15395e095185f7715abb88798715a3ff3f5efab73f461dc4ca012d110e621b38bb2c267e87e81158a9517c667b83137689aaa865ef832acf1ed137194203e29fd418c1d482688465f37e177ce05cfe0604be35761c2f68a4217dfd529fb5c9262496501dde844e830c52621b9d9df564f565a899d413e20a80841968399636116d9d9dfb828963eb161e7538e542d2f2c2c638c4cf3a74e00b1a696d8ca9d1c918c0bf1e9ccb61834b82974c4419988e79a3d9dbd6ee762af5b5e301ba8bc67dc3ac23bfe82066d5ce1f9783bdb0ef19b8d01d6752e3c8ae2b2b37ed25dc32faf23c552b5f40aa2d3eb0db2081f3d4b34f55e92a9dedcc78ac7baf1f6918a598f1739ecc967f045a48309591054abfb251e83dda44e3406f7531d85a697a3de89f60735e7c914d498fef5579151914c2e83e4a0e328466b5b3580896203d46bea289d61feefb4fba5242579cef714a720a1e9a4f4dd1ca57dee050fd3e4106d93ab2d1cd5d05bbba5bf8ac9831402d0aa6faa158fb192699b79aa226ffa99e22443bfc3b13a485fa8a2f10260889030165de1c67c58b8e42c27860c25dec4cf1bd423938fb8f1258ec85373431270a83aaa6fa6657ca30e4ae33b02590822690bd2a9a704755be1afec51010adf76a4ad10c8661189a1773ddc36c64e2def5e3b91f3f7561ce9e2b218d23ef4a5af6e050cbd38d5687a464862310b909d20970a12f0969f23111f72438e4c73abca7c67e121510e2d2feda46765bd4d2e9005c474f88ef71cf46e3d9a3c5843ea5f9179633a7a556a09a26d75fe0cc986036fe63eee0dc792c374e5e94c59f7ff0b0eb7c8a1d36782b98b6bb221f00943a0e85124015cecea66e0c5ead79e7558eb5472f052c7cc8fd89b7e3d8aad78a924daa61851a065b4d2bae24f1360ff5672c4d73fa7f2612318700eea8f53b482d7f2556b888a9852f79a009c5ce9bd6bffbd0bcbb5c74f30784d64120305b77ea365019b8b5a40bffcd560b5d7406eb998c0dad14d550b761c1203e08e939f3413994f17439bd4f31d4d18282975077b60d400b293fa8736c017c1d7661444e69dd4d3baf362a6cb0256b46e13d35915811880cc5342d2b02d365f29df1d8dc43f8fa3a5fcb54246b2b5c1da9096c30ddbe53cfa569ebdfa8771395c5f115f0982b96110393e083f6dd3bb622bd802db6121a75f8af3e1b35afc7f03ba26693110576b9fb8c1592b214a29123ba9aabd1e74e0d3fd1ec89c40583db5c2f86a4713bae07133c52d4de498e4363ba2e2f80ced77fc31e7fb0e8dc48236e214f78ebb7ca9be01bfd2dcd7f3bdd1a2b426ba54a12d26c003e2af9e726477d5b46abded7583f840041353e7304a3e65ca111502d0be7793aa20482182b6885166f218e6fcefd3a144389041b27cdaba8019da187426cb06a524f6ad1a42db6e9895f1496c3fa82e72eeea8edc9f37bece42612a05e84b728aa96055e641a10ee62885813c2ca7f8a0df9021319da3a242b901a4129de99d1d1367702b353dff4374898e0a2bb1879aed463877fcf2f1b18250acc7157a988cf32aea0e417e910c86da299375fdd5e9fb0f981b2f97f06b50283eba8e4f870862218fbcd2fe16bccd027518c59c1ebc7b3c49a6709efe4a916a9b28cf80d425e15fe40bfef596857313c56191f2cbd3215576cda8323bd6320cac3c6e63a5d8ffaf847bca90bc55d911f71b48b82c5a4d1d43ba07b7ca831aa44a6c21c139585c9821966ad7ba4aa975e51d60632bbfd49b718d984f2b8ae30db948da229e9ed0ca201184d23e7d117535b235ea36a945ba30f9606763c97ef654f538fc2d3fe683cf01ba25dfb5cfb2036a92d571f42bb16f6cf8dc25af5f2bc79f0c26601d5ce0327810a158f69073ccedc7474f910e55989fa1735ab75329bd078744f78b291375971e64d39f6c133c4f7c8d4b83d6da5adbb8d511b1091daeeb247b85a4f62a958eef9ef0c8f4e963140d1f5a640e66295593a48c28c95bc79f75b013d127aaec3028195eab65f82c64fa06c015cc70fb4373e89d0cab4a084a68621e31956a2e4516b908ae5a2ed49f6f7d15e132c372c5b51b645d59cc0285265f61fef257bed0101bd4220519282a467391cad09db65fcc4b183002f94d8f260154fbb9bfecaad922d122cedef8254b8c782eb33e96ab067644d1ae219a7ec0cf94e0ae3ad60955b925eb09e1c6e39361fa57681b1ef5c4a049e38c4d97433918043ac271cf0d2aad55f5bb8380a89bc61e638973f764a2bd4893ad4932cddf07991d392b6e24bc1cbe52373ab111a07796b366880453c038148e0be2e3e56e2221fa8ed988080f5e6663eeddab4d6f033949321d9876f178227f62108b3568918615417e1051b69b004302da61c89a9b6c2029e6350e7a65c70b48df835948a4d26ed5f4b58eff0697bcfc8857c6de57f094d17368282ad216c3b6db3b7f28b9819790ef726d0910fdc214a900cac9a6ede42565c96834ba7fbdfd261d8e6cc7cbfcf74e6587fb120c90a4bc31caf052c257044336594af68138900db46c480e733fbd7183f27445a6a83ea59b827506fc0c87a75cc8b49844c1451949bba42a90494f7841ff95d53da2ba1c0eb6112aa775a9050ffc6c6bc735209c7e834d5ac9d450984ad9eab5730999a59b2eb96c9766aa992c4ebaf4dace72d933bbf1895bbdae89ccb33fa3addbd550c4392be302ccccb38a3a4ed1e8c5a729334afc1ad4edf7dda71bb66bc57b117f5900d6e96e724b851366d9263556d1021cee6eb8407ee7f5f8161d3db1dc3286a2281e607f8195dc842310055ab04f4ab8293429633c246e84aba98172626041dd338998c560df81f2536d94b5f15c79b444a8ccbb820f357099785bb24b0b0b0241346913a12622c4edacc43ded221586410fddab7b6791724ce1671691d12ed7ed864dca4584b9327c69cb7869e57b4c4343f6b73ae40310fdf4eee66083acff6b180e649b51dec37b11f0cf23ddfdb1f9fa8a0ce56bfa48cac88b3052056c8b3300f69e1ad02449a2b94c6e78d31e269c0bcb013dbbb58a8d1674c62b4e7e095dee24b8c0538ba0c2f17ca9a8f525ddd709b824e1b60ca32ccc722c98050c5900ca0d71364906351589b558ca29bc0cd4ee7752323339ba2e472d23bc710a1ae21337059991910efc80c26c4dd299e68d30ce38c5581d056f01889c21e0c8247971fda1259bc7420d8f6be1a65ed31161b085564f375eaddf70aee829175da668c58fab500dbeb8b300a82f95b006a28dd6d067141a7bd2f31befefc643aa3aaf33663185a11a093975aaf02c5322fc604e1f83a37bd0a4421e21eceb919ce5a569fd3692a6456d94e6167be8a75ddf716ad82554442801e27998f3bc457d09f355550ebeb9c4368e7955fa1c88816b9cc6650168e5d2a7e9749f26471b32189b739cff9f73c9ef444db6c6c680fa8d4ebce1567f3a7565b373a6dd473ab43ebbc91c22bfe2a478e047a2d157ecd63470254dd4f35986ea85d6d8c04b7c1d56ed8793f730f5e88b30a79006b330b8441ec472ed5b03739556ef7660b5ec54083d57f85e4670a19da6409c813e4d192060281a0eab586f02ea4ec50314a07b9f408a48641097f25fe3ab19a3f86e4f3400ef73319aa2dccd7a430165cbe971b0c83c267656b055037c2ea83a2c1c2ce2984c68ed0af60c976b823da86eabcd3bd909de47d3d823b66bfb11f16b5a3e88cb406874da4ec927b4327e5911d789fd46cfc08bffe3ed3fabeb3187bf1332a66831871019f7d5bf50676e776bbf130366ff014d83c8d4ad0caff14c4c8bff1ad379d72684549645e6ea4affdf43aa8204069e5f5ede11d925f56eaa3499067348d32b761b4241ce784baab771a0747b24859d04214b3efc748788378955deecc8245fce52e619a2f4e012d45d58f029f5f89bd96791f8e1246346d8533728e10b7534b6faf355442cf563522df597bc4b8cfc2659e5daaefcb07c2df313c75f43c780c4f50d4e79dc585c7315bb1d1fdb3528e22f1d2a6fc0d3684f59716bfa1318cf6d0741ef6c086a23730b9d369c2e65aba9f5a5c9b7d340dd6defb642acd80c5893c486b96c2b0a5cee9b2652008612397e8268da9f7f83001f940d0fb6f30b214fc431b05f46e54780c8045485e4dea874830848d1f96f24976d77c0d793b8552c4f40bb99bc3147ef1623297ed6d0e9ec26091c65cdf8a88596c170f7ec5e8b6ff498ab3e276ab1ca1bf157e5e0164abb01068841384dc1771ac226adea0f0f1f3c48cfaf7f9adfdf365e0fab624a7cdae40691ece38078e65a57b3cb6ce6bce62664fbc86a36d207ee6f3dba51b563dff4c282a43af7b60c495f4dbd0c9944ee28d390debfddd5db6d0c8fb1b98f8f4a6d07a7c9e31dd066c9687a0e29df828b31ee065d1880d0513e91ecb5ac1143bed0ed673547b3b16fbe52aa41acac18eabb7258de2113d1f5f8c4cb1389f80c308d886c92c94a3d754295af9eef4a8d70d8cddd236e6274ac1320706e6ef307f586a1a973634906b2ed944b6523ce8e5b614332dee2c81f692b4f407b8a7ced24d75ecf36d19d0ccada31567935d74283b6b35b66761ebfd44d3c264d53306036d46d973726d0697a2d02b82385335a8c5bcc4789ebe344686c90916121f052fcf8135046178d849703f61bd6701ee11878b98c0ceabce2e40d4625a049734ea471f89fd698e2356bb80567ad5363736711190ca3fbd8f8b36f7178449bdeb30988e34ea03e367c44da41a9337228ec28be26f74191494784e7f9d0a82e3c8c592213e05c00b9c9586f65f2c46d87c71d464edaede2832ae966325ed26d512bd1c296c5c5228d99bd87bf3a49749de5ca37b0cecbefab3ca52adad27d681f7e01a388dbbd0bcf4276b9b6ad3ff48d7ca300603a297e926d24febc6a71ddad1cf7ec0ec237b794929e256c5e72e9e17d0aef3ee65c036b2a3d3707ceca79f5d8a6cc2bd83408604fdc69561ba992d075db3cd57bc763ae08a290a4365f8851f27c5f69a7cfc9817904056ca2003978ab7426e2cebf5d6f8f941bdd8df6b2ea5e7cb2c5399860c157f082b734a33ae6260ad5d2653879cad48f3e7e3a3ef3dad81b5d374ae21f5d3105df9e7f91601f1c6c0502fa3042f195ad2154be319adf350983f2aac1d5c4fb329d798704a6e160fe9e29a8ed156fe3493a79ddb0d52211263ff7728a4aa546f02c19e151ed62961137d1a2bda6a920d3cfaeea4b9b65e9e7194f75088316e5e3eb5eac6d2f1efd77b718599a867f61c5f2d63a91c4d6c99974e502d8cb2bec5446e02133de3863bb5d433155983334c8764353b5e28b312e27cf3564b22838a2ec5187010093d766676aa0dc1591ffb4ffd61d75b55fce20f6909bfe9fc973c06b028ed3fbc47eaba66fe0801b379384fd6ceb574f0b18987ccad1e9fc6147279e6bf72621242a281d1326c5d71187e17e9629e2e0c4a1db6ac9dfcfd08365cc6678cd8ea54764fac4c83465c4c448fa5a4ee57c6e1effcb3009a55bd9091b87a48c1859a36ef85242de356e07844bdf89de4ee96a8cec7c698198e84e2846e04afb372f3678403df370ae2017086e0db9f2aee48d60a2770765aba009e2b07bbd7db8c3d92b7ccb02e24801769d9edb3ce1181310319357fbfc7103bbf666db71562875bd2965f1e5a1876415c4edc95765b9b6d9d56c84655034f4ba419b9d36900276ab319986b6d472ff7863fdd0b1ff0fadc1dc265fd31408979b8c293a5c0e812db1f98359e841463d217780741e18825b6fe1710700ce0e80c244795c0d7d9ddec626b4ffd0326b396d0158a703940fa88a76e37ce25424247ef1ab810f67d85be52a9c7979f3978f5cb3c81e26910fe91fb829dafc5c95e5f0adad16159a2ab8d267dc2f2f924b497a15c43b6151ed1e2e0840d631694cfe84705b9e5be850c28c73cad33b17faffe5f15aace9100f6a26ad5b587de0d8516fd01d97da037475a79192a213770f26cfda71e12df64667d18b653d5348a58ae1e31fdeff2bec77ad4d0d838e0e12a338d60500316a8a2d6ef8a686ea1f3349c37c7e6ecab47fec46b28b71ec0884f6b022ec091a7074397012e39aa90ced366376cc5069ec05082a7572f96094f1b9c8561f6173ff43647607079e3fa43ccb605c5e2c7eac43d59a230a884c991d82caadb15a91ee4e781942fccdf0681d11dfd8195e2632d71151ee3d65f9c926fc4210327bbedf19ab9687b8924636bdac6a31587142d8d99743b986783445e3b7bcfc40018ef2ef51921eb65961a28e31a5ec440715f66ddfdb0849d5db91306dec6f37e626439f6609c526c1acfec193adfd9e372d2679d55d9b313b53aed212d5a2d83aeedce96319f08f98950327f2e553374af3bf34b6bd10fa4df741b210779a69279cb71f107d2f52d534c3fd51864d89998cd0337c0256553e010558a89c09a5fea456ecaf7947e4e94b14d28d85081b8be2993026dc896a2e26c7ec7290e9453353c5f1c5b58c4390cc78fe5490194290b32474bd343e3e2fdc05464671068424129c92233e9f7af692423dafe8a556fc693a8d21cb9761fa4a617e5ea32d1efaac02d102d5f96285832ef434ae90a2a90fd17a04b2d8c5ef2667dff6cad1d578c3ef965d33fcc32e2ccc17df603293ad97da0d924094d9dc5957d1259c9735e846f956819680014e1d6649bf3f12dbb374a6761cdaa21f1f0db9dd8ae46fe70b19f3ff7e21812210cc75119cce29b14e1d7b0186eeff2550b7b0b5e65f8ba066d172826b825d43f7531f248849d5ad041f85a07d6ae27f48498f0864a35162b885d1cc1377b1bc35f875c4cee481227f2c930e10c974bbed43d581b7b97b3af4b1d524c14937fb6809c3c6dda39364f10673338d7a0f70926d93fc9e5974e68512ecb2a06ea455f50a17cf9d029723e2bd80246e5a003813888f6ff1df0262e87d178c544d37503755ee9310e4612f8c53b2d8d9e1eca7271e3c1bbe52d80a7df89b3c48d50ad159ffd703983022e7f88d31e49a3477894d5580f677ede27d2ced6996b03d3770ba2ccdcf21b59aec27963c1c5341fb29ae3ddbd28fc48bdc0ecc9a34ec731008a2a8f3216f480efef275c86deb58479b68c665a5d35544c18946707b9c899c822378467eb2f9c5b6a0355fbc2fe93330830ac9d1646a1416e9512e615fcdfe0fc298252e78e6cf46141f746807b3337659eac86ed0f0f160b76480c0a9848609d3b7b43726db36d17c4672663045d3414b5de18a45734bd540a6130bfba13d569febe37c41e0709aeb751e60086cb76faa03e82d44e2b71ac0d3f0f61d07a4619dd9b3fd20b129558759bb6f1cdc05a25bfffb0b9ef778ef498ac137a5dad13c50bca7ee73a38770574af18d0933ea53d9c34490e07aa51ea588c30a21557a4fb2eec83936f7ac4873d9ead494f94ec07bedcb3f872c67339cf97b1a330033600c6eeaa0979f29c90f568eea06c1a31e235637bbe31c0f6e3d84eb5be49a49e7cc7fbe163ff75c1d8e91a0f8257bf18ac4d820f90e1770edf46611d14be40d8db74a7ef97088a36826425d21dd24bd831e94dc975994fba9062a794d204fcccdd33d391cf10d60579439671b29bde8452611020d8ee659b2bc96d44dcc1ef2a267d898852da8b0e95fd40a0b6cc4e689771bf38cd2fae3bd363fe11884995ce6ae8f00969917d3799e1391e681ccc919558b0ee6d0ac7fd6ccf156675182cb10e90d5ac9ebfb308797eca97a905ec0457a96c9c112acc98acf9f7f650fc94c6be52a6a664d274cba83b3fb5d850424f61eaec2a1676f81f07e409eb799a7a3d5eddcf860b0b8f34eead702c96eefae698c2c78d03c3c4160a7631f831309563425435588811e8e4e7fbc7f5ef3de0577ba9f08e70674f2ae28fed0e145de66c1e80f9618d95a63c36ff070cb59fa46007aa975d27a1a289da0d499680f4e8db4987395ef203883b6d7f09750865519ac4b86822774ab373eb505b58796db0394c4f1075809845b9422e8dc25b3ee6e74825edb91d50cdfa8d2c2a9a33e29b6d043bef6d789a568fbcd76ee7c6ee46bd84f59ceee21f41b93b77233c96411b0a782257d297d5e0074d2484a0b2c30325ac40422ed47563de828568ac643cb182ecd36ddeaf80acbd1a17ca11574afa39f49d7a081c212930361df9fd0978151d3a5f980890e8fad89fcb51632eefeb6040ca573431c69d25707a526f6a1d95bfae5ad029dda039643d36d022cdc12a72d482815110de5f89a91e9c1f987014e216d8a8846e53ca7813bf26d6d4473df39f9a1083fee61726905458988084442d6c5008b4d77bf5d1ff27189309593117dd168a3d80f032ddb74186e731e80a4792868a7c81e672db2fab2bcf6b248b67050d210aec9502e249f2c9c1d8dff1b6181d5f128180fae26738e4e1b970d5b7db43f09daf166e7eaca6ee7c63560f2e1a9f72f1c8790f1b00364666e6c599f6c070d471c66cac8c06ccd7794978238bf05897ff6c0100727f0fd76d90d8eef1fdf7ed3eeaece982646daa8bcfdb7daac8878b49c734c939e39a9c824864d59374a340341dd9d3dce25e2e05a348391cb4b1ad4bbadf99085cd89b4d3fb4a25b7fad2b3cd8ca8e3f66aeac72b8ce2823ccd2111c78d24e5b46ca7de27ab9dc7e3c2d8be1163e84967b122e5f63e20537420d9fbac1afe1b584ce6a2157bd18b2ee48acec406bf6d1cc64420ceb6ee06065450b273e7938c7ad60f3547af03eb1b6d4534f644e7509233a6ab315629eb4553d6b7f3cabe57813e42133fdd21a635faf31af65e06d199e6d0cc2459f7b53ef6a5b82ef4ab0b974609ed887cf1f05688256a2ff431d99e97ca5c3d29ac7ff05846dd999f41948182d996f7678bdeba989e170ef7db432e495e409273cef0e7debf4aa600083c0a5795771f3b70592683a7ea177be85de487105aeb26b327b4e0a54af93930301030c43ec817856311ef88e0dcce5d6f11ee76476b262c7cfd5d5489642066ac5434f92931aa034ddcea3db60609d1b40769e26cc5824254e6f8eb9f2ec694e09cd3075b0d19b1bc56e4fce7b83bc1b85d54ae9929e9271d9a78bafeaf18cd81916446b6a275a1462a964d4ae0c5433e310f693855642b97ad73b4db1351fdbbf1733997a8b0459650203e3cae91d3bfe4862cc6d0133560c238a01b81ae66b681d092bf0b1a51219e258663c895c2f3256073632fdd706332e0a90278ba1a18f15c91f73102e1c05a1ff67a234334547aedddc2a24a099cda97d3f53881958c5828897ecb86d1f03eb94c23e8be038c2cf07af30d2837402a0ee2f4120098f016a4353739977fa8056ed6d93c670bcbc47924bda9b836c00ef87502a76bfadaa12746fd0b36699c914175d5f935201ef321de5414512ab3b90eb4017a3b16dbb1f38a739fa8e79ff5d704125e9b8e6432082c264e9968d7139808718b32d3061f50f769bb8e9a222a8832ffa486fb9e6cb402568e3e30b35eb5820fc22cca7c1edbb5c36d19db4e7c6e6de78583e6b25bbe112c62af9ec7490b3e458d7bb342e6ac5c85561f483a271c2d77988f3da2108f33bc4c1b41db033d6bce1109f35d968c276c731338c20c27753acb153581eec72d282075e3ad184ac69ba9830cbbbb6f90ad615f712e2f4fc168af56519bd944cc09019cf973b6b40e57903b447d63e907743d67ed58cdb004011695660e2a1f6171ed196c23eec4f9fb1c218a430052db3307cecf0783fb66aa743f3ef97e7a07978243cc515b76f2248ab4cc2a33de9ef6930572f361b2866aa503c4a023029fb8a729888bff3a83240d67eae8c4d3f78404b95a327bb33849007a9c2ce0639eb5b1fb5372eb8e6f2c75c163a9523f5f363aedb17118be0643eb29578273393c9600bbfaf54864693163db58a1bd7e62b5c2c43a331428986ec0ca4e3cf75adc5bdf31d0273b81fdfeec3aa1af5526f3238504e5b35b498e2f23e2f20743f1ab67ad435c717752fd1ea9d72ce20a0bf7fdb8dfba0c5c36a7927d4b8aa7c578e9c2569b6e36d5fdac351dc55d4fb77031b8d819dc37114d2759350c92518dd8d98c61d60e30da1576e84f3480447abe6e9a4299b7828deb39e8c72fc8dbf7577a3a4ad458737e7f845d4b8700e4dbbcf299d83481aa010e1fac12a4910303a7eb2c5d8e9d735b872ab6fb5647d80a8ce398d49642de8b7423e6711337caa396177cee50a1225771fb6cc659e362bcec3edb5d4042d61cd3560b76d00a72da903c4a6629067320cdad6a62d20ccd4b96e8736bb91564c3cce33d07ccf48ca533a186cd5a55c9c41f9d230a7e39c688163c9515c189cffae6d107c676eecbf035de67294ad8fb17cf71d5f879d4bb44ffafb63f30308e8477882109c94995344d921f88191cf6a9e23048dff802ed302ff2ed97c6a45644a8f162d56598e0b74bbd23922ff84c95df459de1e91b15f916cc915a730edba034a320a46412a3b166d77248a39963876c4680c3c5b99332cbea0b9d4b67fcedda0b5a8735691a2de39b27a8eb905db46f0c6b362a2e94952294c34311bb8e13de6c6bfb751a55234e95293808a302b892850f6ff15c3526695d9fead73a66663f571cd4b7fac199b2e87bfa45162ddbbed3fea86a1ca49301fce38fa415467795e2814a0e58567ebb8f7ad22f8ed57c1ad077800d2fb11c344cbc92345ac414166b85ace6d65ecdd9030f5ff8f06c5552f2e3bfc85981bba5b23d6d2b419088bcde4805bca2071c3bf937c3e2c483ea21a539e81f2e28d33bc442c8ecacba4c6ac29737d7ee7eb6612133c9f2cf9e37ac1b2347fe9b8154daa9fcc58e5a7f97685d9f8f7a91b17124a42161d4ec7b13821b0a27aa9444c65def4586b0126ea62d1af15bddb5fbcdc2e7f38adb8a32f9cf5de56b76c517a6707824744556e79d19cb08aa8453f853ff97eec9c44ee5875eae63091ed47f9fad66a84edf3de91d83e150411629a13152d252ef80d241fc403833a64247a41f186fddfa52eb5612508cecf6113ea01b2fb0b5a806ac63006097b068b0c84b1dc5c81bf4ad55373cd297fb4749e703374e44975ed04a07d7095af10d8010f134f84dc0cb0f113285eb43d1a71a428d8425dbb40dc0f4d8255657ec57827ae47f45437f90bbccca7467bc6426d1f5b1c7237c32ed31999e2fece681c6c5aa3676c97a61db289cb99f6cbf51266eb7ec356bd12930d3de521745df9af38f0e43be50085e309e58efd76de9c170a281623988cf2df3ae7495d523dd7be253fc686afb86266bd2054ec2a9ae8b3a5172b5883fc0faab2d11e8f15288cb9cac4eebd4fad4353b22066f6e5207c8281d6000dd32ba19b72f75b29f70bd2710f64d13290827904951820b360b466bbb7574c6150afa0cece5e73b966f0b15e8d648d9cabbd8fa8e406aab48656f81af2d5b29cbb224f58728e8647f096355994fa66aa8338f0909c0445af69d4decd593b7dcb949aa91cce867ce88d25ac001c58492b9265b867080512ea079712b99754c2d620e592a8e086b41e41afc1ff132f5a2c38c81ec6683f7ce82675f5b7efb0786f131998a989330a7b4c410fc5b8e58632bc8da7b59009f03d9ac32ce5ecfe1435944bdc6bf55bf069c674271f8652df3bec4d8d5f28771cba159959bf0de210fdee13cf7567f1491796ec91201efdc725c161767cb243e9d28a4d9f1811a5ac11e27ca24b104bc16063916804731f823c9e4115d0cff915581691bdcfe82046301d957a5c290787af9f1289fe5637a5fa229ac301552492d4083ca7bdc1b0cfd7e6ce93273b10f7f2c66d8b3e6fa260ecb37f32609700f60fd8c6e8d13613d41633dd4738e2b3954f910cfcdf4c74440d3d052e5e239fc15cf3165f14d2ebc227a8054769e366c8e07adb8c944dd13a9712281448cd8d737ac43a6ea603077e81bc4e39ecc281dc2ae43ecffb70caef6e1e6b17bd92118312237e1a033f3ea3fcb8d4f3709f3f9227aa3b663a6c16474ff3ee81d2b8d8bfc06ea222f8a4cdf513d91feb03dd0d1ba6b7fd0ea28c7f4ede177ea92c403f386dd503537810348463904db4ffabe154c94704ed8af23b97643e4a6f9e3bb9530672b8042f6d417ae41f828740ad154bc45be210695c80a73a7637364266e17066a740366ce2d53a2a8dca3f9426b079f53e0f02c5a921471ae1c84e4a4602913fe5427bcedec4381664defbc0b3202245233187e6dde7de937f9e776b2abe89e5bd9bb5f2c148b9c461051ad03551181371de19e4c801422f85fdad37d2d9948aec5a9857704e476c669e8fdea4b596db203022707c05ae82941018e4122dd90bb7344ad76f8b4e3dd4c6489d6d8034ac744bb289c71a6dd49fd77313a2288b93783d3d3f3b920ab836f2306856ef36773190fbdcd574c850eb87733d295fc1722f614a7ef1a090b5af037cb5018d7fd0cf688b5a92fc51ecdc5cc3ad6a55229f01b3a0a60e91b851ffe9e4c8d219312ab32bce4d362d741092f5aab9b1f16d52f5849453df02b49316a6084da58d85a789f5c066ef37063999482dc5cafa2958c693b044b5d753d45037ab01dfb2eb77bb88551116c553b798a3b8f163cbd5f3d7beb53f40d4a2463e2ca9d8ca01df79a6a8c724fbf71e64232c62a2f39b80dbacdb947c943de9ea68e81189c9ee047a8aaece4abc47484118731b6e8d1c0b3ed56738402e29abfce7fba3f559d70fae64b185db84d869658cd36cbf18fd6ca839dfa40913bb2fc0162c0c66f7ada008842ab2ca4e02b464952341cc48fdb5c37a2ed6a359e21754397431635dd1f9c70313fefb43d8586c7bf3deb9581d16f4e29d3e98f1b6d9206f223292ebb131ec33971b2ab835c2b541f7022c50ea9842a0a98eabf6f0e335f879692faec8b0975dd411c726365bb7d45258b6bd68ec284b7f8bb40555fd9507b1449d5d8ba7c6ca5875728ed064ac738a699aea3173a672b2d804c25150bcd1b7afb522bd1e6ad72121386a321b86ec438129298edadaf9c491f1cf1e8f78874267da2a72ccb97f2fc5df00c9af09ca08d67d76585a4a3aac2ba305ad7af04a928bcaa207f30ae9c850f3ba5829731e24c3bd2e29e85eb639a7221232338df1d1744aeace3cdd647364f4bc62d65d9dccb970aa93c270e6cd5ed1a0e3e9ad0d9bc848582bfe092cb9433f218e44de791dff9909ff6edc69e0643c6429bddd93a40b01f1e6be5088545d8b0cc123b5a41618d5f14e8ecd3cbc1c3d12857df17f44091c6f9a2c5ceee1981da66fa130a13751c23fb3dadc29e9f683c888ac7764498a6fea09add622adc2e11e26426ab827b44133117739168349a331b09ade8615089656bd2570b6de6b0d81164ac2786eed03ceea44c044611c063810ca85156d369c3f14b902b8a3902b4dceefab796a6a18b26dc37720e7d1d943cf504cfdd30b4b64185c831607cf7b226073f4e3dcfc6b23b6765a6c0e351ce43ad0b4f1043a038b1644de61ed3132a9522e70a4cc682318ccd093943dff1e2afeb7f699a48b10adabbfbc93e2070276f2702f8b8270f50feb2133b8c55b06dfacadf6746be7c776d55e57d409303ecb0567f45ca69604a675472e213598d1f784b964a448f52fa553ee7c2d134aed079884e8d6e38c838178ac0c89a1c4fa1177940768959ca044883cdfd1c83eead709e97a7aef3c01ce66f9c6ca0ba7fd745f4be43690dbb55eead8df9b7967afab010fc0dd5a2ffe039c57bb6cb9b854a4ec08e11d5f877144108803b188b82f5ec360f9a935d497480f1f24b86c9ab898e66ce05a7f18864e53d5f2649636a0cb56c7a017360088ec424a4de4394209f324d6758c16dc7181bac8f358facf16f2e7cda3ffb32857e9da8b6e782192c0c428e936c9910b829352c90581f836debd6dd4a23f6e1d53e720f4a564ec4ccce8de095e8eb2e0133712c2605b4e120769bc4891129eea266fb238e2d2d7788ce83b5c8e1ea965b127f589003709ec2fbb98d2cfdb189f4570caffe2e71bbc3df1a99e9b4211dd518aa5ef2ee84dca36c62d745f8ab20b2fcdc08e75c304004c1550b61a44f7be9b4f142cf3bed1b6dcaf680e0eb2d8c0b169f12d70b8e70ad719e679604e7127382ab7902beeda13b0b8e29361c467a3a1f10b86578230f63db85efd8e4bc8ec9a35b9eac0739b918e1958835717ccc3adc321d55b7d0c97c001f37ca8c0e7e0b980bb6a64e0d18890a0e01a23fc0e6207371d65b1aa8990cb6b95203e0d08813e257a6595c1a478295889d338c34ba6aa52104a00ba7f3e192d91739213e89bf86a50fefa4fd0b0058583cbf0ab83fdeae74fb5fe9141f584d081039d5ba24c5b415d597bb5a14f6e0655a33daae6c24d3669f5e4ee6428502d1b6cefac28cdf1c08de49d96b5d13ab0456719c6552486ac35f82ff8dd5af59269c7a3a9275700648c9c01bd1848420111143f26193306acb1106b62746922e5975159496e122e37adc1b5404d009ad0e90495e2b6d892734a933520112fa1ba70b6ad896dc7dace88ceae6844660c4383f27936b7bc20efca91eeaf8ce2acc8c856d1c3ccba84475e79afe475ba3b8815d0cf9966fd62b37478282ca40d4725c0f08f283933cb4a5d9a617ae9d080997b10ec1821dcefee63a72ccd79772f1abae14c9c4140fa8f9a469e94a15b546c4a2e938b5de2b16e80d32167ebc407be70c6f67d765bc4b6811c3d56e42cc7c5fed2bc93e8158520d88df8cafc8ed46e19e8078e7c9908be0792747d5945c63864029dd92ef4d4b31c5ca2bea2e02ad7dd54ba2c8ca9304c11c65aacb522b4de2e1e13b6e4c366df121b937619f57ff19b3cc8fcc78d924289ff08fc72e883440a286547e233e010d838932ea2c34fccefd0bb8c32b7faec0407ddef8cb7d4dafd2dc9657a2fdf029d92bf0fa764ae5778be49191c81470f7dd81a51d7090f4cf2b3f0819d7eda12b86a4246f8415f445be286dd132487bd0f785fef1f99e3b9a6282b8b5c7784b82b3ea4a071eb9a63e82d3520574bc71f4fb31368dad27e2fb4d6707f4344a92c780c812c651a817033b3e1a428cf77feb2884f1fb75eb0d63e104aa962c0c666e3e25bc08c4b0a8a5d9ca9d3c5f5462f1babdebafdc6739b99862c366d39551ba39a0ac03bde1c909e3afda31e70f42fb93dd9daba8b62691b68f030bbe2129761bbf67c4100614d4cf9a3d850068a9117e1c218d9244f3c589bc4fea82faabf1b82e91d1ce81cc1bd60357e6c150bf834521867ee90e07207e8c52d22b2923a1f8b2d759472af1e1041e3ac9ede7998612b1c276cc2ec527b869db38067e56d4988bba1a6ed7f49dc08d48dada0b22daa74193aad7f786d380b3b192de34ff6ab2df6a299a2ddb30d9de8e29ccbe835f3d947851c09a85be6c2aaf0bb7a9f2c93ff48a428127ac29a0d09a4f929d035945d5e57aafd38b3b9ed753b2dd48bb81e34d7cc59729e28f3063c6a242203c2a6eee629ab67e699ea1bc496913896147fde9452e9b6d2ce0fb8ab56cf9990f07f127c3e0ab49d6d0f61aa4faec382ad3f12de5a530a22225480628999bfd848e84ad6e5cd1d10409fd1919c6b3fa81d9fb6750d6a03f28fb927fa673e3eebfde37096cb08d402d35706b73092a2b42dff2afe6a28f9a5806d2d73e1707b61fd317a8bf8de937c859c121945ab0dfe8f91dd6b3407ba4935b2d8e11b712baac207694fd9674ec2ea89a3c628b0ec514de15d75f83da1f21c851f2e2f12132e3c3c5314194e2faeab07f0dd18ebfa8d060850c4dc99ba22dbfcece9f9eda39ddd744bbf148e942ebfa431b817dbee7f1cd74661893fc7d064509c95040227c63cf7fc7414869ed8b8430c161b752972ee578d306c6c56133b6bc7225d999b9f23defde6e5b03b225ed6f93d78d391ef2e1d368d534613fa59bc2e8e1cefcc354cf5831112f0e8a240e5d362e1a5d4a6ac5ac449e74a6d54515f486fbfaa3531729078926052133375553981a51c13fe40f44d89915094dac220ba019018925a42258f24eef1a7e858b8b53ab6e436534d84729ea91629ffb7dcbc3a7a28589e5103aed08a878a652e085f16e9a8b71df3ad966d1244d65793904f440dbbcc8564497b102487ab5f6875fa90db06c01bbc78427280e586fabbeb46b726c32982a92f7b564f96c9f22b4d2829d2718e3cbc056a3bdb18d6f73e7e32b19a06ac131bff8ee259304c3771e85f187356088eadf269376e7d3a8888f09731e2c3a9dfbe2fc8021d470c041e29b9fb6cddc4e377c5cd24a854eca9cf45a9d1c295f0a859735737c069154ebfaba4ab34e61e8bb9593057841423239173d4342ca0bceef2f4b8c16c4174e88b8fd3623a3aba1695a2c831d80b2b7cd153f1d6f77f04d379e7050946d0afc0f97b2b0e2d34ba27bef161ef979f59c8679b5de66f54c22de0b9c970ea6ef36ce424c540bf541b48fd100f4bcaf25a0858e903abec86c6cee362a19bb9f79c8e5b387ba534e4b9a0cf543d5922373ec4e38bda59099addd672767753b0d2f77f96241ec2e5c237083ab43e6c284e2a9c01229761554d1c9f3af65edec2241d5bcc2829f867b2e8cdc4a5961b2e9b0375fa0ee1a75a6a1a7450db5f58e06af2078bb52401c98b3eba1b12d26ac0ac4325ba70424f9177d4462fb90ece7dd07af2332e20a471fed8e18fb7f7a76d2d688faf1a1c07ca78e24c817a761ea72ecbbf0696fe1e9e164af849a70c5a6b6210515fb9c4ab944be48f922f6b09b9cd49bcef46373fe5d58e67284da35962a6c4fe9d48dd1df31e472af3f1ddc9e2bc4de5213857e2d064f8a2f062116a30a23fc6198662f6a8ff948efb395a85211da4003193be01449aa4c5c4e56a998a0d7905c5b8517eaf8e89e3d97b2e6475afc6f283cc7f39e1efd4720d2eda9d753dd2888b99ed322bdea09411c1623ea2e7308b00ad3f363e5c799d89637258b5e57acd0176d5f98ab3a51fc2b44ac5ca3701433c06e1867747b4aa2cb46b48b7adab2f3029bdb8eb9ff175b4680fead39287e7a4198ce8c5e2a223ea8674f6ba93c6cf8865868df2eee0cd34be70d330b70bf8a10a173be4dc6feaef977c96267342a133942e1b3f13f8ef1ad847aa5fe329808c41f5b90158217ddc468492e0b79ad9338a495d2da412500f1c4bc6eb14ca3e9ef940b762397d793f7ea091a221d40e0892049acccccad40774a726de53dbddfe3a57ce875f6bde64aa85f90f62478866b32cea49c79e12433eb054d49dcb0810c5d59066954ee556886afb4eba4642cb6d60aae00087597465d37ee5b15c54ce168c1196f61d8f3be720594c410de6b8ff343c91794bef4ed808d9d8bb3e73c782ba03cf9b5fe83202a88e9be4f95542ebd3949067d1e2db5def5bfa5ea33250c7499e4152f8d52930930a9943389029ae50a54353dcf4f01c9deaf7d084212d7321edf429c7e5352a0f8bc8c0fb4c20f2fba6352371024cf27c997e2da783491c233517c2919985b61fba6343a20d4d30fae4eeec232e263987b3e2b426118337f163332823b4ed66100ab2cbefa9d3604534164f6544c28dd4eead8f687449ee97deacfdc3b47d748fd3074df0ddfa11d82a0d3cc9ca231c09872a9f188a89a35f6f73a63eb973be76546115d66773a1c1edfcdc879013e40ce6d5b41ba5511777ac3f878efa2e7631c44fecb03173b42e59dfa2483a66221238c0a552fa0effd1dfb056fa23717445aed6c175a45bf091107ae5c71dcb74de49cb08f67bc3c72262e2a207d1084be53df339c9a20e6275ef47c61b6610acc2b85b55bafdd48a8883c961a12e19e77f91bcaacc4b4526da3693bd57c1b18f9f9e992fc9ccdff628484e15a50b4b75c3fb06dc6976eeb8a31d26f1674568c9e9040968e0a3d365a146523204105227609591917d877aed01b71511a99d8363390707bc1dab601fe7e088fa9d96875ab7e5a51f9f4c995aa77a253c6f51d9444e2ebd87d41e63ea572484118091338f4a0d7407f8fcfae281c3d3d47c95251e61a2bf3b8c438f338ecb53f38838a113bd8ec6795ec74d874aa2790e53fe7b7a0f978fa9026d4c68da44c505f658eb651e6dee86225b206e91245187f1aac0f3d4b50d62984dd5d721ebf7e1c5327b7577876ac63e824e2b0578098fca39dcc8f2e8311084f814459212c3effe2c60b10b4fa66ecb44dc365c8190eceefd2deef9f3a238d3050e85a9ef309c1275aa93a4bf6d1e71f7ff4c274adaa205af90c42588de2530ded5ae5792446b981cae19e762d0337ff76ad5962dabb9818288796b2e6438e0193fd976d1aa6f2b662092a87fe30898e790ac7c76126392c5fc7d03a6b2492910b929652696d95ce66cb4f62e75362659a41cbe556d990c0e2c60b97274637de9820598db30ade13c8e4377bafd07f376149601515ff26aeb6fb2c981d9bd94efa017ac924f38f51fbadd18c08d956aaa6e9fd76da49c83caec91412c020d237105fa168d6380d374ec9e130b4fe5a9bbce4d145058ff4ac26c5793ba6a152e0a36765f1ab6a0995e919e38eff48e08f5959457fe6796fa1d37c0de842cde0ae36f3f444a5b9a3b79da999f97622b23924ac54fb69f61b588cb958c9e31f6ad7a6e2377631be63d6319f8dcb1c18763b5a254cc069426afa0cd82ace9333712d7434e99541a583ee1d880b7fd8be86417720b18496e372a100d6e9e37f016f760a71d6029262f0492f63ca98d9aba838667fd14c89d944e280ca2203610427532e93bdc8fb7a8f3a3a206854a1b23321947757449c68a9d0e44aceae3105b2881af0435fe7ff3af578302dcb56a85229585354999e82a13d7098f7de75d452679b011803ac6765af5ffdba8d1bdefbc002b2a9a5d2ac12d5d253ef43c19539b9f7f85193ea36dbdb23e035344332358178463b9941f53b1c5e534e88fb89ceab1220d1d73b154b9685df163f6b5de42bf5adf428c2e7c86087df55483d1369ab3a6b95c931d289193e990b8afd2827b897de64f71b2e4cba3fe52fb6ec19d1276fc2701c39d81e152a011f6c5c8cbe87a00be6b67c591e5bf5edbf6bfed1d7d4b95c14965c902d03653cd5bd4a7a88e2dafc74f01d1f0a115091769eb55d228af2e1a4ad70fe53bacd341cd255094cb3c1562de674862098055a337f2aa30bd439873ce2edea3c9cbb2260fbbadb2a243666bac9948590a671d31bb466f6176fe6349344abb2e03d8053235aff70b0f43fff9ffd198524357bd6533dfeca47700f3263e1de143d37e85ebc4f5fbfef38501d0b9db114f9d23e69d22a41b9d857fbbcfda2950f5a61eaccefda1adb7cb86b354f1fc0eddadf60409076f1c23febf2c96a224d2f68f2864a427fccf00771e7139c730f580eba30b1e9d45155ff0009f907fe57d356a7cdddb476d81f4d9063ae62975376c563c129b4cd414ea1d41aa5530bf8b9586255f71be46735a154a2ed02faf3cb8b03a983e07068efee161971be7b66a572b3857cbd8ab2646b2f0968c7fc031ab9b9b718a0fa7dd1edb09a8898288a14028829732e4990a22cead6b6097655589a2ef74f3459b5e7667f17590767af40bfb5897b40d497a78bf08eaf936c0e034c00e916ddaf7bb339dbe656a7761eff0cf966a6539d4ce320829d67b75a37711aa34ae0c16e743dde55ff97c7774281f2f9c7d7cd139e4d27d9a71ddfcc12214e7dfb86ca71f6010dc714b4ec054520bf86c4797f24f5dfa9ed02460f8020af1475a19c485d0a9dad8620d839990e4d423d1d00ef8c9e871807a43cd282709f8fcdfa901ed79f5a2e3f827ad89dc9b1e589dccba696de4f248638e71ca0ef8471ec4c48ea434ef774d4ca0bc46d8f995d8e387b82754335069803ac8bfe96037f217ea751c4591327632625cce691f10e6fcf1780f077b36cc340ef351f7dfdbcd397f3bacf0b88918b64435c0d556ab174b60da19b7b1e028ec62ff490092e69a9438783e506047cf9153fc855bb8bb2f96bc327febdfb97dfbb1804e82a59c70a3c2244f65988d3f144afb00be0b2c902c1d53200b64e7b3e838bce3ef5c1a563e0947866d2ab2fba433b64233998c5423535a14ed42f7a07ae76ba49a336d7cd33daba3b7ac1a918641bedc5e58efaea26cf1b06564d11b41aa840e698657c6e90b3c85230fb6abd4a73c47610d14115cf0d319db1f1ad7be61aea301713f1735f29e6968d52f03f0f37c61372396e6b1d1f595c442b6c025e1a069b4769a5be6342e3073fe97f1877a2f047f0d2864b4a26295578afbfc6d1ccabefd987bf10f15bc7f7befa57d6649585ced5073f2218120a7649e4d9790e51b9e08a75d4ee371c9923cb49ca18ef935d305566b3825c687c79581c983018dd79c451b4054573d03d10168eda685c2b98f4091b51d9fe76fa8a835b067f869b13467a8423bcf8a380a2d4ae3ed1d2944d845343ee209c200798d2e82923bf3dcde4d70922f44c09617102589352a2614354efaf0ac057cb941c0e8fa30a317f3b4cdb2ae7732517ff427cd99c2513d348c75484d46311eaf5331fade8e90f4d93312cd7e7a390ed8ad1d98046b35aa251e8d585aafaf6e40aed11644982e5b09936bc4d91f1ca3ffbe8aeead242ac71173d777387a6ca51046187bd2fdd706774ce1983ac52b98985b5671fd678df8dc6a836c2bd34ec1cf2378284f11f299c46d44db8f92d5223e4715f6d09863c06ad4ea678a8cb3efdc7f9b6ba2eeb2c1a79d65dff05f1d4855b31117b923473a8bc167583c4fa7f1817c96b51316830e9c09fa7d294666fbd418014fb02bfd306c7821276d094e173158c6bacf745bb2306e2a19c35992717889e4e88dc980d38a0821388bcd867db80794c57e0410b38dbb26867147bf3ea8753c8303eb027664d1da6ec3630128734da724647d6040fc1e3bc65eaa4b2a2483ea1869793838dad82a1ce195bd7bedbf9cc90c86336bd5cd47a24850aef28f371e713900450850bf5a2569f73e94ebd29fdebeeafc6870c1c049f37bc0a40a4953d5a5cd6f930dcb0004484a59a4afc7f3af31533ae80e086ae51bd844d7197f7c164c864dd7513c09c01ebdf5b7f51041ec71bea27eeff6f70bf3015775bf7806a9e7def581bcd0dc2ace1630b7057a40337866f8cde076cf0295a43db64b746607ad2c661baf4eec394f9e567f10926a206af79683fb1babe52063511d4fbd3a8974d72331161f173f16f8b27eb292408edc8de88a40858b0fc2ffd68a708817f111ac3003f1572a4ba9ef70ed015d0340cfe5a6104e8121f59acacad5e79137adc1bb3289576827737c9df44cd92dd5eed61f51bad6b355ea7ff3fff5b374184edae6a83aaebc8d33d6f311f55917a0f530b457863a4a74f15cd1be6ed54d0aa8217948c1dd7a4f10e509c111e11345d91437f8b0ec7242ba28b5a96d35e8d58a37ae988444940d8063caab50e9dc38972c9d43abf90b356294c8e3a46d7a25a21c721eeb21e8c320968cf25bd9c21ff82c578e1f5eda632c4d32ffc4bee8e22c5481eea16a0906833ffe899479ed9281bc532281576da63a117db9a7b8ba4c4a89bd001d84acb3a5c19cc76d377a48041ff2223bf164eaace874c354c45a2cc7f3336abcac9faa74d3b919e97741a49939df42a8c5c2979fcea7e8a00e6139f7c25be7119726a874e8af2e8265185573372bf44cb22ec707069a7925045a6e0e9a7d3de48fc11fddce6ee6776f60cbcc8f8c5b13a0c4cf5120531a409eb158629740d589b71792301694a260e3c7d370b93828212ff5afb151724dc06cc8501fd93296e99f27286477c46f71d585f428f4719bdb4244f79f742b9fbaa25af08e0b42d9d7743677e67477d7b6380154eef70c36f09f5ad543bd3cded4cce726a34c3902ccc5a598751ec38118abb8ce4d6263540fc74a8745784be4026bb22732dc460cb3fd56f6e490a7ea269e2489e917e148f497993f5adb760b0d9992621790347db422c3bde7fd180b18069427a104729f17db253c3a67f2e4486d52f0d3a6af950b1aa920022c94bd7fa24a963d8299a277115277db13825fa7fb9874458b690898baeccc424dcffb2869a7a5a067bd0157b8263fdcf15c7a14e9ba7579da5a365cab56b31aa9d030146ee601171d9435a813c87755af525e95d711000c1c5fffcc7fe372d09af9e8aae942232e4678f3697f8a32a57e3f3adde816fa8aac75821c36edd4c5b5da66a9e1f162b682ccfb556d172cf2d8ec3ca3d08241b917a8925c288b21baa91bc565d6d8227de7d80be91560049bc6c0d067188eecaa00b270160b6bd79b65874b02d1edf541d5e5d9061b3b42d247b9f6ece59e4a169820b4ec83301100468324534d7b752ac7519446ec60ec4eb79b2049c3a4e3fd9d3727cce7da01310d53eecf0589b2572ddce6eaf38d0b9e8e789e40a17caf6c17a386a80a91109194e958b5248fc17687ea11363a71015372cd6d32107b0f27a21368682f290261398c24bbd5a48e9698f90fb5d01fba85b18b38d17628d0910b99a5362ffb64d0a1696c5b3ddbb5b7b3737cda8587ff36c6017aae4025b7fd53b045136a33bde5038a197fde4e27621731e5de7b4a2c1d2f27491ad2294482a638719034b30ebab338300f6a372555489b116711a7329c15c1dcd6fdf1db47381bd51c26f2634c51de1534b6878241673094a8bad9e66da42abc6450428004483f8c362218b52d2d884ee3911db71f5b184474817efb6e614e4cf82cf3b165f20b01c2ff6253e7f8bcead9cdeeb5fe920f6d4ae2c00f956c0a379ef23f3f902add653cdac851d025038329bd10179c7dfb115683c696aafd6f3599ee5f7cb87369b2d9a81ea3a64e93ed3eb779d359dd1cd445280bd896e911349280505667b0d436889da1f7c9e7a75e17e700baabf985c01395ab996ffb8332d9fc9a513db144bd8e8c88394e9ff65b0457a43b4cdceb0e7a5bc5de4ac6ef55898b40ca419be6d1857f12ee76a3fbb54b9cc505b7c3b7b9fd83c8b07a6f11fcf86759f9c78da3f5d8cbc740afc5960c9dd7a984e88fc7b6d6b7eec3c0064fcd36ea058b3263ce1b2f7d65ae2b8c4d57fcb40b5137d0dbd2751ae7cb0c1f066be56c585057973232ab7553018c2cde3f0300c7c31bddef4a3b6f468d1b94ebff628bcc24edf0917681638168e384001f793dac892398d522c9a8327c2da57f1bea5a774acd54dee3f86f574f500b81eefd3bd01bc2937c4e7eb0a2a06859afecedfa13c7fd7ad922287685fa3a0c56c220c0028041318d530c8f2a5d1c2f450dfd6fb91abbfa77e5cdea82fc13b6cd6967ec392b518842caa373ea06b0a7276896c6cb0a9cccde54a46f979a0deabb3985dfc787ad96cfb8e953d0a75dee570ccb5a21953d375abde4a7d7b9ed15641782229042200657229667de032f74fe668bee77f9f69196f39c6873635390f5fac6ff1fc6337e2ea9e725ab5cdcc816dfd2fc5b929f64c85df78197653121a245393fa3981849c9a243814c24fc1b9b16ac1c30ceadf9c4cd5cb020bdc3b1024d87b657a4ccefe50884bf0669f38ac43ca6fda3f4069e147f7f2851744f61ccc06191cb6a06b90fca4612c8e56d14744f07dcd936c99ebb3ad6f5835e1490bf9a3e1c144e43516a7399fa75d8509010ffc418a6391c035c92969b9f5555d636df71b8f7577e247ef1c976891118c86d39d40bab619d8e3de33f2250082aba7489a8e85634faf5b921154d6ad9fab8f5525e677f1c8056a10e544dcf1e8dee91c343f419903b747ff601502114b2f3b2f38018da8472ac215a7be90a8874f4f82889adc3f4b59122e1375d5bd140eabe760a4bd6097ff1aab06ef6ad47218feb7dfb59e3e7af90a279ec1232ded24108999fb821b61ee75a3a72c045564b56c87c694f28b1aa2c0da8288db2e828cdb649ef98d818974eee78480c2441d27fe8188b37651f9d546ba5b7466b4244ece8f54b0df6887c872e34ce70972dfb96f25997521effc49db319791041a7a1ae1e23b6b639053671ca3f74bb5f3685f00ba273a1a6eb5146738e9c3b8e4c7b5b07c8885a80bd52aca188995055781796550812f28ee31d02e602aec36465e9f9f1ec8068a659a27ab3575eb301e10504ad0400aa850ab5b86d28c6f42a832300c1ebb2d04c62c5f62aaec2c275a669fedb01c2598e61cebb7adfa806573bcb5d2b9265eb303bf0d2199c8f47ece2d7c5302cf73b21cfa01d185a715650c0ef0357aec5b511918bafa06d2c90aae98fed7057c87471d215c570517080e127671ea53c504d555481b415dc73a7f68d629d80c71ddf2db7266367227b69e9892309df536bc9c217bebc2249e2aeb8275be34f3f0da90195273aa060e312952afb9df973f6d91259de48cd912132aee82a42f129570b590506b35cbab724001f21d4f3dad997f22c1673f4ed584a6a290c7b1964c511e638fda511bd9d2c67ac18c2cf1cc0da3b4af8d0066aa0a2a17ea06a738c7e9b8d2ff7148de8c4e589590ebc8fedcb45773b4bd5862ae560b8c0b7c545ebddd7c960618c3d1fca9432d4db10e3f511e2ace81d63d19b1160e1b15d121046acb7a784c5c8d958db8be57004ceb64cee7dc8d1b2a46663de51accfd8bbb9c5c4e0637f6095e0474f324283113807271dba00d35b87813158902292684f2a6b2cfd93b33961e894998f839e6bdc2c4f5da447388bbd88017953cb43b1758e8b922496311ab22acad1414362054a8107ccae9a470ae562257fc869e519a08c52e17a49e71deb4673a0fece8a107c323762ac68583d4c1e8191d2c621ffe0be12587de839677e7dd43b442c38a3c9d062b262e827968d7d8f27e832a7ea9d15a03c2f155500c0015f1776ed0b85082857c9ebf89c416ce4c9a2ef36817787933a16e1cbad6eb930f4c6be4d9c4fb181d41848f6daf2a3572f8bb4cef898f4e32f565b39e79767016625ca9ea392d7cb52fbda35a971d20cb638e4bf9434f1537ce83e20f8b902870b98b533308e07cc535927080f99b7e0ab42e8717314ec289ac0023350f27c6e23856eddf20e4d86330dc4a6ee6dc0e846f057347e54dbcdaa4c6b57b0ce20b5b6867910a5f6384849d49f8d1d0cd313bf61f04d382512c51e43c35f82ede782fcb3a582e0df35fdb0821cb7e77c51a428dc56c008fe97527971454d45fc4810623ed15509157aee9cee62a73be9059a9212f249b7d0a2eab42831b041aac2595b0a7e3885864fa0e86682c5b9739aabfb6abcdc90c448a8fb912807a0cf0b21f4291b6e95466e5f67bef602ba009cf4996f350105204e85d6066f8fd8afb673c9a2a198e6dcad4f020bb3156e1a63224c6cbb6c4829e3de22c4711f878b8bca4ff0505509ce3a57f369ee1eb242179affc627984ed7dd38ac534fc7a04b2a62fe9f5fa30c49e1ba626600c9ac7f0e1ba99a4a956886b917315c92bdb315a8fd60b938861ba98c7c893228f49775a97f2147b100d0975c457af6f1d20ef3b0b4d612f9e013708dd75d9abf39bd7d1529c55599c7d54893f541fe1546687125b1824b33c1a46ad42c3c7b3fd28f87d66357f10c84dd28237a670ff752539b54cd0e48139f951ccfdca403772ce540d65620c0c25481c187cd98c033ffc072bf9e33d92c8e7d71c80ad584a36f4c76270dbc7e819b4a7e2f8d717e652870a5e6af172ec45a80829a26c6ee586d086fa2808b541ff868b26b1ab6783aebd622a37b7deab24cec0dfaa7a9d2d72048470b7b4a795f9a15665d8dbc13096e45f365a24c28e2a4c63871c3162377549ae54f770af0ec2cd4e7c4e30cdd0d3dc63a41ff0ceda829665d1198e86dbdb0d33b6b85cb8d0968562fcf08ee56b984915a4268cbdf91ca5327e8350ba5cb22080c11bcb368367872ab5df6ad2363b6cb374d03233be5f968b1e33345307f480bec29cb9c81eeb06bc616faf487b099a0898d3c6b11d928669d471b72a6401fbb2eddc2667f454934344714ff0929e4da5c13a78b1ad4539368a74f2faf9581c800bfa2b4649a36316e3aa9ffb103a1e7aba413e4dc87ac1ad1047d5fc9c4e864d57bb455f36b12c9114867cb6cc86b811688a9b61b4011e67ec6a05927f8bfc95ce8f4db49a17619876a31165934d29deaf38274eb8f354882c0e91b889fc26add9d464f9090c863beaee28c9be077260b627f398b4f6cb64ac7ea22be20383ece9db40aa129e2898bb5a8493be9e8bb0709481dfd7eed5bfb3078a83e3646c6ed7cca9b7e78a8567a89dac7ec9aec14a4f14b0356918e7b02893f7cc6ad0ee61b57c4a92ac5c63c5febae05a7a1d9983ec7f9bfb0dbf7f5d9558ce8d1cf40ec84e8f06ff016792370f565cb605c2047b48a2f641431182445392cb6931a61d557d8e6c30395093a98420c7ae94afd787e4fb86a10172c4c379f9a782b42c57859b866ffc7e7bd2411eea19b135fa1057ab40b1faf94d7be78624b4df538605c88105fc05459f92a071c744a7c354a583f5a4eba5af9364907c414e0b856bf858c3264545478f393c73b83e93d4d9b9917dfd077cde25aecadc6ac8ff980a489abae1460712883a8ee50c63669abbfab106de93549dffe079f50809804adc9d090aaf21d72ed03009c8f91766ba9a5058aae900489fc642a6160c386604747d620c72a073ff456cf8d3cca48aad43ace6c3617a613650e58180e357180bc3d670472c8c5439942fb64f68ed78e69cc81a829606bb7fe25e8799939120ae723ae3da3a33033312536330491280c28bc38caca13154ac0f3ba6797aab659a1ebd1a1401f5acc8f31bc2e0aa334846de7a019fbf684efb26fffd025f330cd36670605e5d55069ddbcae9bf577524d3f8fd2c3f16ea558e45a6d2717b7c0376d1942738a34a60ea8fba7933eb3e99c5af76493ea2fc404a141e34da243a53af4b84651d3d7f5c116aeb647b733d87ed91c66469a6fcc5599a4d1b16950efd4831385ea2092cd3a84a7b757a5443e21bae6eb2496e75331616d97c201a1338cb7ae66bbcf9a90d17eb76706fd30f4f6f8a154bba0f8c8409c4df59e13ee9010d9035c6244bad32b75ec0625fd011ded21e23fecb76b67993f136641aab234ffd44b23f54b0060f0e23d83b2e235bb3f796b4b66f5e9bf90925281b51dc293042ff1ad20e220bd7ccfafed580c342d597077145314bd890f2628ccdd230c8f9e3fbf4474df8c3dda5c6acae7995bb24b44c7a7158153efe8d9d83b61688687d5169a65d2e41aae85ac471a5b4921d22b51770a721214d73f1a1483005f13e784f62cfbdeb68691738f41b7d881c88bf9bd1e96416b738a7800df763df87b462a39f876a87ce6dba685cb1856465f2b5b6c283f0da01501131f835604a3457b367a3ac0fe8871f677d879a70bf2499a011e3b1593cb265d2f84e0d7efc708de28beb9aacd588e47e76dae2279e8254ae727b389219d16da3a30ee932c4de2f5c70e6a35b93c41dad9bc9016d292da7ab45ae02a171b930e10d27777c1136af30d746f5405f800b0117ecd14cc6027968848a7ba5535bdb1e54f6eb3bcfece1f5701316d4c849b415b1b67bd2e83239a7ee77b2a485caca7dfcc3dc345afb2b2fe53645370a587edcdb8b313ba38d826e274122cfce8ec9d1153fdb6f412562fd8da2411dae21a89bab265667e7ed9cf1554f3b63a261eb30577b6f3ab9a5ee63b554b49207f272c2fe825bd72d193b72de3bc48be2a9bc8168e5f82209b2ea1ca2412819a1e1f3011169c7200b9e0fa62ce8b45f07affea33bfab5d412b64c3c3193969ba106bea6af6a14ae1b59ecd8f07fdaba56f02a9760162055d3a0be33fdcfed359963c1dae260854d2ca9f77ce804e126498b5e0e3b8b44c0853eb832c9c2251bde79a6d4c941ce96caf217485e990dd44e2d5956b349642687e8f6b459e27e137bebf237a85d90d945226a47a0fd6f335e3812cf5055e16977cbfcb16f5834e5c778f2e954c62dfc1c12e883f1db1f5b98976c1964f8921f3518b343afce1be2d112870fdae67040d468fd7818b43c65ba5a8243ca8121bebf6f44e47ff827b28eccdaea7e4bc0b41cff5d3ef1bab9a3c39e24911ad076a6a647169b52cbe5c2b282ca54e210bf9cf7fc12803139598d7663eb5495ad7c4e4e78190f898ccfee40d77e1058612cfb065ac9908d6a7f27982a8f63db4a1a25c47995bee08af183b7619d68db440f0dcfbfaa2c4bf64b3bdd864168160a6ecd339ad2141374e9f5f1031447b0510ca852983e2829f84316aab36265b02310d1ce3d2cd2a3077ff41b1ace8d1aa8c1459edce43678cda0f90259cc62654cedf06e52d4619a50540c14fe0584c95352f03526d2bd829ea8ecd96e4e26ec29479265977621e95465201bba2da87f109c88b2300bbd27a901d6c1015611379e006cb8deff2e5e3e0d1f2b5ef7d504341289e834f93e5b806dfd40cc140296a55a67e9e41857bf7d559eb13ccd9da22477131be1d8798b5bdf048e42305fc9a3ec99ade95d68a74a53270860db47622827554e3ae6b4c19ea2a39c4933c1077a04288c83edeaaf4f0906bb635b5cd6f03d163c42a5a1b5714c4f7dc5cbf82f3eaf2fb3d0693d33241f2e72fbf37322543cee2b2bfc27592d555492fceb93dc3d14bf0956cd36e5666cee4d6e8e45dff2f7ebc6b493e8c703737a69d6340e68c842fe5720759fd04c82b9f5f39d9a4e6ec55e5d4f174513a07eb865a3a6dc86d9710f35edf8149a4a812713e5f8b4f23335c4b8e041369afda00b0acb99e906e8453ff0f8fcd30b74e390f6e816e098f299c6af718b14250d8e1fdbf038158ec679b4f68f5d2b37ce58ffd9902ce1b675d8e5ad3583d66781eec927cfec3136efe2fd60351d7044bfd781127b8606f9c54da9d21ac7d38802427fad18b5767efc6bc2b7ed42c53154d4023c5399f2adb13d039c63edb7fdb51a77ee453da45f2f4ea958b53b6807af06f0cdd034e107bdd685ec7b26d72f63882b38398b5797c2286d0924f0c3fd991e89afa6fb9f961f87868dd6d2d286e459786ac5d9542847d8cd8460f1fb70a9de5808dbbf047138d896dff364b3e04b86742105c2aa3fc617a2f96f60637574d91de48d252f12ba5f0230771aab30edb41fc90c77631825f027acc1d863448f855a016707685c851f9614631d84f4f0ede591f728baf0c3490dd897b1243e82f1e1f23509b9254e38988291020077cb0c239f6c558a9c941e08af43d8c580b5acaaa486fc9164ec3e5965d720bca5b433e99b7a041b5981443f0700ac4702bdd6d6a8d4c0d5f06072c5b6316bf9a6dc8f61375679a745fb213180a8e7e261dbce3d57a429c3cb75ebfe9dc21d6c6bc1c9a4673a7a77e69bb9ac98d45e08767dc136d8578bebb68d39e470f1d126c3e2411eb6c9388a2d41ef7acd953d799baf11103b28db7170e8504446d91d7592f14a82586b87e368dfdb863e70338edbd0d0b99a9880fc6451ce3ad4bcfd69510f972ff526a52dff0363e47e4fa07dbabb4da1425f31239fe91e84ed23a45c50936397fb5e8009f62bf7aad09664f3841e10b0d4e3a9b78c926181a7c0317d1447a5244385e49592bbfec2bb03fa4444b0aed0945628aefcc28419998b53edf4a1c3b61cfa85384c5229edab10e41ebef167ed6c62f889733d78f25f7989bfd063411073b99126fdd34fdd24e5c8a0f17de7327c4f50aa03831b419e84b329271f8bef4d68d252411f130abbd2b7ace0f44fd5593ec08761f46200428445f75c8069436cbedb0d5d41e48c87799360b15ea44a64e7f0ded3307c438522ab31472280456732aa7d9a7309a1dbd493c45d5bd40e23b8128b93d9e83115db778cc2a97d13aa7b04da1ecf3d726daef63658e90b2067fe9b9d5d5d56549fe63bccb58e89a0cd05ec5154f3d20ea4149fb53fd28203c6abb35157f8b4d3e658ac0bafbc369c23ce5a6ae1b26711e2945a0ce90eaa5c72240ac6259291df930a6ead619e2ac63b9543b8c36466477555cf0fc8833d9bae496f7d6fae55effa0a2ffabb52cb5919a46d2626a46d2b40837c2c864771bd763c3f1e85e5fb271971c16384d49094ee0e1fe8da41f439107c1b22e60247a07de62442442b8a01da75e5cad614ce37d68edeac046cb5ce4ace0de7995dc5956448c464acb3b8f7659c3a544d8c39570de67201946554bf6552f3decb2f8b01fbe0edc735ad2988cfd2b2f402f16f114613ca4d8f4a9ff5da292ba19f9e321457d2428c9ece68241b12f6f2f87ab66860e6d38ea88ec8a4b7bbb24d8b21737676e4043f14ce1c00ff8ecf05b4f22202b4c1ee6a27d6949b118bbdaf25ed129df0439c26d52bc12ed0e487eea8cc889d2548459d06fc1a4ef33f87a192b0e8daf6644c2532cbcf67358346ef18034e0d74214467883bdffd6fbd52fce5b981627e490035db77f51c15611721a373644bdf5fc6b55850a50599af384e82d1dbc33d91aebfbce7148a8697c834601e454b8d548c8b67ec8f96be05fae04526864ad140d229a5076ef07875d438c4ddef57930dc35d814bb4427b81f1af6572d63a0585c698d4369b2eaa55ce8a0ed84ca2634939f5ec09537a01a97bc61ce6dad580b978822041e7d0a50aceb249aa91528f6657415475e135e9146e048cd9f7bb68a6e2c3764ed3cd519ea9101ea34d4e6e41a50b4524b9cad42d54016eaea27d619aa9150580c48caac1bfd5bbbb348906fad70e9bfecfab45b733c100ef6d57a7c95f1f6387f17e3e71bc47a3ba422ba74d984ecc57c4610c2a6707f8a0175ce734d9fd91289243a926d5cd09c59f59f9fcf0770ddadd87efda598d2884abf0261dae7c85c773ee4e660c31d4dbd826f835cd8c2a9d3f5c33c76d0b2d56f8fbb4aa96af0c3ed568c5fa0f087f68bee5af0eea8b630d68459da44a187636d739f3b7e8a4dcdaea2af23b2e5ffe76192f9d476128a0d9d517928486c1f05551db13b915f3c662a21830c9b70d92640030b296f65c82cf24e8c8502faa90c8bcddfea7c02d44b68a82ac56ce2b1efe69ebf93e6c766d30ea93b19dfa472a4a1a9a329603873ad0dd9c761a9c4421dd1d9ba4d0f135dab7e9546a3121b0b2179ba9e3d675cb6b625fbaacb14867481de6bbb6389b244c7c1fb9c4b522e5fea9cf41171e05ab8961de31d00b96b776d00ae3713511c29b24b758f54f3962db567c8241a6534898f6c3cf73912a626b3b751c0b9728893d1af0dcebd588b2a7fc2b5ec93f7b34f70fa76c73e159c7e30be1258ead2bfa560790860d08e8db6c3ab70b37bba9fb5b5b05f67e99c869d11473770ee74758a6ed26d408160e8db8b35f3dbaf734b7f5a60fd41850dd9c1c46ac7c934c140da3af68659d2d47e8aef510572550ba943197fabd5c24be9d94aec9934a08c2aa9ebd03f35b1ab63851bb3418e5a59a2588b724870c8ecc71adc3c33013f5385b2244ee0016d86b31e3dec0f68d3f666cf83bca29e8a35f7dbdd6b2c946b3feb068de9a3a9d84e08341dc539b3f91a61016cf1afdd6348bd0914d171de1cd3b18505cbb9fc940db4ffde42062d360e08cadac53ab4f9963b3d8ee88b9e6e87770ac140e2e7d1905c6aca3f45852ee4d282367f06f293f0d57b9038c96bc15ec5b0afb5473c17e870add3e8ee9f0216934db5f8846ca85deb8c15e1ddbc890f718e142bdad4d5b175bef3cb9339b87e68206a2e6d4114fa97be31268555e6d354eeed386eedf3f0f77ab7bc13bb7771b327727a7007c79fa4c4c59f19d3d26909a0fb30c313b2ef1924b068885aa092ea73ccb53e201a88ab870586d55fbadaecc1c1833d1e163717780bd174aa566ae245904379ac417d4a80e41c2d4320b3066001e2e949ebd7b57d96738b654fa8d4165ddbafc5035c32ad38776d5a0eefaac32a381df777ee992e6c43ce17ece284e63fdd5fff3d0d13e0055cfe490347e3cc4b1185a2a5243f40c47cad1894f5f435259db86142ec0a1dfd39d102c3491d06a2f713fc5b8d156449163c9c87cfb1e2d0158049958b9a62824019c8d84097c9ef54d752a0db8b184f1bbd74ca387a3fc18853032fd6d72c98679aa0d79a9208d2306eb744072315713d284123e07ac7fb151f434fb365b229f45b1219170ba41266806e2d3b23ec6fe5cbebb68304964369ce1db31173729fd259ce2df674b9fc113d758454915b65e8ca5a1052e8a505a8b0a19541dab13f10be3d2b17a517957709d3027947edb03d61adf2f0cceb917c35bfc3a4fce96b840bb6b60fc74a4f5627f9aed47b069321a1653be878fee92f032e9e15ea2a027f3f9603e01af314bb91fb09980e9747d6cd0049be6400a689a3d29e130e8be119248d6b24dc57a90402f93f3590906ed28060aad01985bd036e11389cff812be616b28f81e3f784253567534fa1f8648957bc16977c3d955dcfe3dcaf28d6dafe4b906ad1257a5e687be3cea5d95c1f2cf81486d68455a8f39c9d6f657c5de137ac49ab3ec06d108c03787f177a2684407d84b74f9bac38093efe95660cc28576432a810154df3b8879a8a80424c429ae26999d4cebda2cbbd82fcdf7fc4cbd0f13d8011c6a823ac02e4d171e723b9f0c44463c0d75b528c620ba19a6cf51258537a80e419b471b8c38d3113a2f73e9d238055d70c60aafe4bbe0421f08e810b60809930839d25e5fd2ec9f8774d90601ed90ee384ca4dad7c0f4330e4ffc8f1116929c670bdc655c7265c678f6aae8e743b40ea41c5513f4042a78a917cc12fdb944846564fc687498700caa5e3028242faef032150bbbe8f8c19cef497cf9664129df034101813423aecae6c1bce89bde92d86283683268d52f85e9f842d8442d05cdb2fc59eda8a615c96d97c987d13d93e627f393a9c3b24e63e5d126c732471b46a331ef5cb312d64826e1d0e225c74e498f7519275b366fd0e2b6e438b6041786254e4c444daa577b0bd5b6e984ab05ccbd870ce7d1ad4f4288f7bdc18f53f1511eb14d9ef1d4677759f23c5da264060ccd96044f591c725807de9b2f7d7063715a836786dd59ee1fff4cc660e74ab2e4e684d24517a3e886c9d13bc20dd3a65407b669c7aa6e168f4dd86880964bd10c6a76123fb24b0b1ff6191a70d67df613067eec6f78369907a0ad329e892f2d9aabf90e7475e3624c2f3ab141074f1b6730f1a7b9ed147ad2f5edf0a8c6e5cb820fb57cd15ba11f0465281de5006a7c4021400a59e577b24e79ebba61d17052809be20ffd72203aa1db0bedb540fb205aec4209240083e0506a0a0c2d069a4eb734fb7d51d8b099ec1a6824b6b002972d99030c8a860e26ee7fac49ec74bb5d5b05e30e93d1ca205e61f146bff909ffa9200fcd89dd2e32603bd366c13eb9bba8ebed5d49a3e6ba3b2db0aa3301fe66193a68970699804b464723bb7de3a0776d78614f4995b14413b62f8b8cd79e06d5cf816531e7cf45b580949d727c8ffa85da34ea9b77446a114faefc49a0938d2c7aa8cdf4ec64ebd207815dad0a185112aa0dc5cbdf48ab5b23b5302b9cfcf251e6a6e84da2088c9b0954e3b51419d4de7fe727fc682e0ec6a878f642a35597fe37526c8a2d43141c9fa90f41be6864ee5e2d0750c1f64debec5ecd00e827416f91d441d5d928ee327dda44ec416832b410862047f38b9b65f45e59359029e96cc3669f37cf4b501894008b033e5aa8464d9f0faff959f19859bbe05a7bfbf39ee0a482d5a803a6570d3c99093980fe944e7d14389691f429fbaa2226a28aca921f0a7e16717e24fe8638881c9c1519d6d77d2593c63c4778f66fb4c9947d83f528f29ddf77d8c0909783e971414898ca6d0971db378d6736ba5428e8e8b79a47a094f7511a53026235452dff409c429ed16703526e252c9390f09ccb76089d77999775d0a46ab4c548ca1bd35f9446a66fe6a902185753f38daaf89bb4935734261fee1648b21677b1f51e0e10ef6c6221a827eba8abe6cc369e2f3e7fb9037b649692b4b15abb73da435970d0b1bab31c257c276c6360319518e61ac271ae9ef67e9ccb66117c4e3c2f7868d69b2a7da80cb517ed3d1e3074dfef95aec28ea5dc758d14516c08a16f89c2b55a166c3867b526118cafa8a13092ffd5b4d6c99b5c324e9e7ee7f04cce1777c25d4837ccc993ff669075386ddee77811c347a8d9b7b9c0f797109ee86b2b876745d4a411c69b3a07f30716a92a03a36daca3c5f163af149f10721de2efb3ac0c744c25b310e744bc641ea2a29b6eeed98c859470d3aba1775e52194def0c2ccf2108f43e3a81d29111cc8871282dd0808c914b2a0d13d2d09825051154d29af7d386848ca728d3ad2b113ddac5da6be149f6976cd00edd4bbd69eb7c4b2730dd99cffd543ad1e5620c282a37c9b15d4304c66536e127b15b40d807fd419d69601c82012fc0e8aaabcba0b4953aa259118b6844d315f77da06daa3ccf09b3891f2c7a2d13614aefb52f13687e101479fb90eaa4d4fde404639a47ce486ef74c576b416c6c78e09610d63e6e590ceb8c2a4412310b279ef7d990294c14e7a49137f60dee768146606dfb650feec85c2fe5c66d0d58313c62214a2d92d8fb43d73a4174994ceeb853d1bf78716e2b451d50892a29201e8a8fabc96f5adc6397dd5f14aaaf6a5bdedd9db4b0c90b59ddd6558863d54311c6ab013f2fdf0845f7550c7926a0809fbe063b5aabe55dc61cff82d94a714ef4d873cd69872dd9a9628867b7a2d73e107e7fd8f43302cb333679f9008523287ced8e4279da90f8f63cb0556aeecb74d1d9c0fe7a3f07cb814ab4026cacc62c2ac76dba5e7f3eecbe86a8fec4a0271ef9f7392057d54ad9feac98a30a355110da2f0685134a29e821476acb0a860de718c80a31da7a85d72d4e9f896862e3723b5bc5c6832740849e947a79fd196d69e2d51fc79a973c21f73af8f4e7fbfa8ff77804c640e46369069afb4b00bc0359695c47729a3297885a6ff2d12bcf2e642a49537c1eaf1efb3458d2e814b0352075cb9dddcba65235609f62c85597a14eb32e5f8fb3648e858d0db301c91c19a183af8e3c96e817d4a0d903691db6260a1a68f4aa6ae1b2984bced26846b02f095103e389b8ccc0f1441a4204271734a9935ebdfd1e5df9cea40fbcb82dc7844b82a1d8da990ef24a8fd4fbdb65161c198a6ed5442bf77cb77be2285a08c56f3deac59719f6021de236b1c89cefdcd444ef91672cddf9d881a4977e3f8be681990b1dcff4400adabdfed7ac87dcbb57f7830e336530a872dae95fd84b5009d4458a659e203763cab19ad3a4fc459094e130aa45f0bf4a631402796153ca6fc367951c683d76f34aa2f19469b1653c0e9efe5b60014b0d2fa940212d6cfd530a752cb08299efcc49fc27462adf662a6368eadb519592e59507c9a4f8977b9ebd9f6957f2661b09f9ba21a73da4545c1fb20fe2231bc6190df1711f1fd23f0009f34823d484301a02bb66afd765566a0c9b4c04c3199962a87f59d97a47a463fe5ea0d2c2c4b29cd455e3e2870e949721059d8fbb8a9c510e59c94f58cade93913e3f003edf1891a06d0c7967552e93cc07f4420caac2cb00dae113f10d0202daad6a822e9665580499c6f46ed858eb4ad5f1d4f73c3026afed7df6deb709c1c3154febf54e78ba3fa615ee17aa17739017d9b0d905891048b55463b9d1f91ed2b15c05150b43cd8df86386ec05c2f7a22eb1c075f3a57785cfa5dcf8e06988a56e131e0c4291f2cd98eaa45590e3c49cd62ac02ca15dca27cdc2e41fea49a62d50afed6bd04fa69ad70aa7da5d45b93f3d36d2c9ae4de5606fab9d485dfdc852b49c7f1c7ea96337d367c3b1e5a80ac21af92aa25d5036ea6ab6d9764755574d0525b2bea3ac875f260a551f0896191f0f5f4285fe7f2cdbdbca6d8717b317e31f6ea7d23f245ab627571e2635c44164e03e0d9d6d2c2041548f0145e7ef7b7e0e96935f3bf14d987a1e6d966f0919930255a0c209c21fab4b359759ab63e385b5936aa56ab6ff2eddcfe556fbe4f002e27ea0940331aaff73197f9e67c18eca6464b21ef2f0e08265dc42bd5a0b62bf9ac4116c004be7d0399278adb712d94d952ab2598f2390108f3e33f6f933c6714afdac1b8713495d27a940213dfd64dbf6e1c7b1d4c3724f3e1f71482743908f2f113ba8fcf2780de0daade37f231e3364f308646e689f10eb994d15f449212fee0c22b59ec42ca5ff2eaacee093c8b571b57cb21a7c84947b95a4fe572a9ed0da2b5a3da9888c5d5daab3029d62c9913747b5abfe0c55b0656fda658d5dbfc1903770943ae99761189353e047200addd60bb6e70d2378aea9513a2ef5d0a16e3126459de5fc494e4e28eb9321cd6946eb9755e297745c205d40c8505a73ccd108c5083762b8136b07c08c5975d300c489806f337261534d4e0c54dfae4e084ae4a1c373802289679831cf10a6546065a27ffbed99c6086e6d8335d65b34bf64ffd004fbb3b336b1071ddba6461d5877824a26a02b7beedb15f416cb8e182eacb8c04d1af08c9f17b37be88899be37094f96cb6aac86604eee07685967b9726c20bd972fe4e57461436cdf1f96b450828317537454dec824104d238b96156a08f43256696246f55711b4e487379cb35157efe57fe749b70c8a37fcbb5ef8b325bebfbd368228c546f7521087cba237691fd171dd2b46512a7a889a57edae28c18b6e67bf0c0d970d9c65810b9acbe52b3056bb2079dcecafc22a01073667b27a44dd1e218a0c564cc6116f87a326afcb66ee6a25448e379441162ddcc9db406bb27f880dd5c90820e672ae933a7761a0467a703d08d3284c11315c1c209ba953fbfd7c2b278161b2008861eefdedeff2074866264e255ab8b6ebe02959c88e8c78fdedf3add1f9ff44c2db221c2ba7e32a519384b91eb79a5a9e0371aaac7bbb22ed9446f8394a109fe539a8a3b9a83cd9f9ec9f8b45218430f933e5398a147d2799c215c553d6651d6657b8aeec1e0d8f4f4762529d3bf42d4b3487987e4dc28c38813bbbda3185cf3d6852e4bd9d52fd848060b66e9beae4213fd953c99729094d3a9ef96cf12de78cd3fbc9552340f3ba8ae55e6c7a672b5de24e6a16d516e2e1d57528c139f9d6f38f001df910edb29dfc821b57fc90639aa035bacf779731854b0630e68dbad81bc1453d135f0f9766b7f7e1d460ba521e30ae5ad45c2b6def415e65f2caac239ab6142db8013e94a23cca3a4504137d58207195adc92d41b26dbef576664d0c452b814508085e6c0784170148a3621716ae5be045dbc429bf35ec3b3eccc7886d64330f9c244f8271c45c702e2be8644beb606503d33f79e61c536c40a77fec3d0fcec8738426f5faace0dff34ab679a9022242e789ef58df01c1760c92272a1ccd75379e9632eefdf38a52549fab120bf6398caa59024d3d2c16213ca9ac65167ff0a331a3aaa0b2eb25e3bc341e2bcfee679f3b209be17d2c5912f8c839aa7a818d4ea4cac26ca8eed44f98a5d3f3e5193415b20d0ac9db9b56191405950dcfdfd17978d3235a622536d6dace61d46313ad46a88e28f447a5389244d689712df575177ed83af6ef586b97d7e4d9172d3d53d76040a7bc2df91ef7d49d9f8d848ddceb1258179458b6d8bd5c2bb60eeaeb6b4171565fb2f2bd4068fe923b916a594292d699db8c28f23c72fe00058b8081905206195f59f1bffae684433c26afdb860275bad3c4f785fcd0bb1278275caa3ab1f4e0bee157746e8c5add3c6c2dcbf9e0a0d444f83238b1eb5ef43b2de628eac2ed599e41346e24bffc333cfa15c27d1c426686c1bc9729e22f31218629d66bf2c3a815c547262e3b6db952b30871f8fdbf82fc9d1e276e69528ddb6cdb6a46fe843f10f15da286b0c63964fbb7292290f5097a4e19404bef3b427693f1ca9306ac2f2ab5d43fe9552711acc5f2023478d7bc8f7b94a4c710883a1a9459d176914ee15a6dc1e93f47c54bff392ef4c03020227896bb66337a47d64be9991ff52827d639f1c59f98a8cf9d1cb8bc1c2ce40c1b5110f969b77e087a7834bc74e10e05b897493e2e3ce0acedd60f79b8958f066f72d2d8d333c14aefdc1900f3deee91d03a9c71fa75f66e550a90d5e138216efc913799336c542f35b23a3d1b94fc09c0d125ff0068ad4f5ff15644756e86fe6668972c6bf3a341d2c114c0065b98d21d1d6779a51e1074f82dd1e319c5310109673911579d0b8ecca607bae617f2eb63993791597f648d572885cdc83c8a8ecf23ac34d3a492778716536a39946714eb179147fe37d6346e7b3ad2e25e852d810a1b9172a35c8f6d8cf2c0d9a94753826a3d05b7c9b86aba3b59749760645e917d8e30d97b600c9a25b2e5f8eb1f5df67a28a78d0e1ca5c4317a31ea85016ab0be4a5515ab6bf8f07cb3fa4c01bda04ecd070978c8a263f6d253f8ba5c8be414d1493d50d25d895c772b8b0d272951f2aa040142d39978ff3c388697a7269e7e92468b83fab777fc463d0a69ec7397441f2603989d8313a754f29c8cac82ee3de2bb8fe4316eca9de2cd44b2b84986c5e33cccf75063ed4c899c748a4aa9e0a2d813f7c028d9aa9abaf9e7612ccc8bb8d69c4b857303bf123bc9a0f2344420129f6281843955a012eb3f9ef20766186e6ac620d95411fe5d5ee2809fa841003efe3ceef3bcfeac9bd601bcbe5925c034867c30d31ae8eabd392736831c99718bae66ebf16c0a777719637ae8ace30ec840d8f403e27548d9b6800af57c2aae40b6b1f6da9ae73ab3f9cabf890d263b90d57eb57ec475ffc435a93091bff594e39c7d837f890e752b26986200803a1cefd858c8c2cc41c8fc0a8f944b7e3c6627bace5109d953535d921fcf48a9509bc6c6b07e874b7a881a26da7c2ae3ff063f024ca936bfbe6a47a1b36ee09ffc3eed25a56d35198032da442ccc55896947c59a644b84bf9eee12422f7bbf253e96b3319b5b142e862d17eae2b529f72e26fa19a51eefc7b9ef29724474ab0e0b1c872ac41d90255306ce52dce27d2c60805fb88808e2a5c9054f1a232bd0c07f5d34c3579229602f4883d86eaadff4ad8ac9628b2cf0d00c482917a3c1211541cbc18f2b6c7ea8b6eced593730b9071f3d5cedffdaa23204b73039ac333bc5d9ab6817cfa2f57995e78f3fa75d15b8fbfc561ade7b2d38e614032f5166ccbfb464eceb379c456370074bcf21d1acefdd2e3c65f6bc45a0e7804a3c21e34462d44bd0cdb6e4af488c4e38b3adcea92caca7d5d0bb55260ab433db9328593881a7924e70f7c483684d6dad63b508b1bb8438eb96babf1a2536a695ddd71e3a3174d3d60ce981da0a0c6649f9fb859b39faf2f38d239f812ea19914dadcc35392cec3bfefe655e0c2b1692d8c6ee328a2064e77f6259882112c9c6efe6625b33bf462a241401eb2b0e2f8b6b619ba9d1e77af2c82d9f8db187461bf81174ca6422a3a6b674973e61ef9ac91be7a26244cd90919e212551fb2ea31aeff234ab3595618ccec556258f54c333c63516a553a6f61ef82fed87cdb5fe13f52c6ed72b663a523bb96640c4b904483dca1a93905efbb5c418e6af91d9dc1886e6a65a608403657d201afd7d17efa762a48a197ce9eca7e78cac679c135fa6f8584d407107f605c57ed1568957af6c2fcfa168d33d298be100e1c8b7fea62cdb1321f72058c3a68693bfbcb0e207de14fa1e71a560bbc36a2e8f40dfb96890d321a8209235ddb0b530e452bbb08164c71f311e079a29742a358b675a34e40bb3759a76d7868c9b87f4e23a466891a348a8a0a92aa86d7d9fc700a0c227fddc3e44d2b3e13a9b6e51a42be3ab70483f48acce23d77553aa24287bfe50e99c07b7fca69c02565133ea7afed683e6201fd301ce2a75dd0d77fdb9d5a7f611beb2ec5bf7d616285e35c85f6d772e391aaec56aa4c2843bea2ed4a6ecdf249a98e3b1226b550994fe36d3ee2a4c7176092b214ab54cbb038b5606f5bef64b550615334ec7a4598a8c92b81ab315d78aaf50730e6cfd5f2c982b9cd189a112ff0cd303878237f4b6990a7a506ce31e76d1f82f7dc48aab7b1bb1d1c983ded45190b8ae68a3cf987b088a312ae037b442010794d2fa7a124d611482ab69a6bd13570da403f735b3aa450cc46a7b5b9cb5dbac0110b6f43566536cb4d62fe703b2400382cf094c907a72a03eb264d64f1eaeb94bf31d57d38834539bb40d61c9c317034cf963037d005e7f2a63aee8ed316345ca534edbef8dd8ee2b453f8f1ec6ed3f00ced5455ea0628706aed83f94f348c0bbd73a5718e21f60baf8aa341cac684c57dcfa98da56677db99cb82787f03f8ce98bf0c3c9b5203f6450f0553cdf85d353be1cf62c50f52a00467d403ebdb4f48044dd879ee3c984831df6908b7d3ca2983d03e18c222d45b3d2a84d1b274322fe64b1cef19df2af87644d7128f22520ee5f4aae231a0107601276184552c4adea4ff11f09526322a61acd6912ee36eb7b5565e0bac30ca45c27a859b464691ee02970e4e027e15ebd3bd3b69ec094e3465cdc2882a41f3c88cc6a11c612a877a7be6c4b144bddcb379d7764886eb03ba02c9b793707707b89d4e2958b73b7a37d5bfbfddd5cbdb0997b539160c2fe4df8816f195220c8d818ddca51765a643f00a07eee66f9c90aa3af645cb101f5ddd4c667993a6e9dbfc1c0f4955df7b10049ae6d489c09d7e246fe6b5497ab7ac138bfa7486d01dcfaf9166687c95fac5a78cb726faa72e32325c01e9ac3655063c8730bc5d71cc53153d5f9f907fd0f8f273c5f83a595aa141020f194b841b4ef437d3ebf3006aa99bc628f2184aca8df2fcc7e889df8882a08d54d8968b0db8c6ac460c54e209ae05fa6fc9919d25ea22d1be781420bb7c78e1a17c677b489a9e7cfe4e2a093ab2137fc81da380cfc1cb9ad276a7b74ae986e83120501256079ba611b41e703430e7fd393917c80188b85fa52703435808db0fe609650f30c637639b12daa7fca695d6ac4a7f855835529c8137a17f0196e861e10f3b26403abebec84b8c79e8264cca8d7ba8ca028190b2a02cef92dd88a80a48bd2e32f50ef663f4b4aa8c0660664d39042702a6909b685889bdd5b2ce534c2b6014b754e8468321fd5bceb0160535d9b171becae3f6925867499974313290994436cdac2f85c24f88541266db3382b14315187432d23729716f2cd2e00200e4247de657b7da8801401b62ee17cf904a70db17c85b59a3b84976dd35995609fab53b3eace47b87c1309f17bf631672c580d55be45f8680e9a636c09db1cd162ea414582380cc29f0e3a3ef0bb32689b951928b1ad4463f7c2fe4240b3956a71eb954086901dde1d213099ca64f2aafc6fd554141262050a422d35a658b6c2cfd97f47d45fcf29bdf611f10d19967a236f2a9a7eea7f08f8d13e6c3149b46d0ea1aa61cb8e6c6f2d68224fd90a29f0d81eec2991e06f52c7c130aa802a86d40a3519a8d6c2cc8abf136786ef58db2601656e373ba9777ddb6556e1baee524488705a26ae5431e996a569f280f92edf58b59be28cab7f0057267cf4c55df518e174baec6d422a4e2fb5368885a46835a8467df897b87183b9d4ed1d46172910396f081ff0bd3b22509aa7d039178e8d9494eb07c2304e4795166410467795edf749d89bae6e68af8a3cd45c6c25e2765754bcd0c1cd2c194293a8b28381064de069a908e9d74b0647f8416fc56440a4ac5180473b34312c815337e056bac586ec96db489d1dfbbdbe4774664485997cb11eb3da3df4f38caa21e1e31287014fcc1ff1d6bab8f98a2237c57144e12617135df597080c6f30535818b070ee5832b9a3582d087ff64b9ab479c263670c0b04663238ff90d1356f246bbfbb82da74426e894367eef380fc915536d2045113cee1b4c0eb6d1db46013d6af747f868fba6bc8b05761daa329cb2b5109cac3b99775ff61962a30d84fe3f284cb0a2c567930ba6f4e97f8bf882ca34ccebeca0c29d219c16dcf60ed7450cbf5fb37efa062991697eabbad3c7cfb0ec28f92c904a165b42e3860a51a29c07dfe51a741d9454a1bb44a7c71b7184613562b0de91edea2600e60e05e9702ab3492592bbbeba0c9c8a1ecb9722445062fc26f38edd25973f1099ef487bbb8d6b947188f90e13fd7523400cf0a9d3cad0d278813048da4e4966c4fb2173936293100958902951e65c4a6621cf071521d977f47af5b6dccb9d61eefd06c0a7a9e5ffe2d1da3e8f7fd1bdf3ea9a54772dbe874b65fcaaa73621bd4cd4da7b14149b5125c591418f894645c7bd1ff68bf039796278640bb7adac355ff662795c696bc7127df8bc9cac9731cca13f1e54ed871961d70e1082c603ee41289c229a5b822a562c3d6989076013b454d0778205be87a76e2aadc9a3921368dd9fe7cf1c86cef0f2eb6da3ea532ac04702cb3c5471d3d84ac041fb68c2b2d19389a9745ed66ea3ddda6e946140f0939da7ccf8fc9394624d21a744298377d45a36dcbc58a9bb5d005cf3c9390627764c88bfafd9e46dd19803e163221714efcc628a9ef9eb4ecf7d182bc2a35af01ecd666ccd65f917f90207ddc761d878a08ac048751af0463747e031739c9f917cb739db608182847fcfcbb84a0a66d9392e881cfccc699a9bb6003c1911f54a38fd1c05241105f1a8413a9d9859a56de391ccb2f33738c0a0361f586266e19328dbc70f83f9d45bc5aaaa263c9a299ce2b1e65a2654c658137d693b4a9865235fb3f48c1af1444abf0c39eb30675fc61b809add8287fa3cdc39fdda8a6a7f57fecfe85b5e17b5aac0821dcc1772f37156bdb15f8d3f0e7fead1f4520094c03d0fb70f439bfbbb667d52e7bee9f82e8b45588d582b845b2ff6bcbc658ef82afc20164d095a0a3b3cb6810ab5dfcf9f64e9f8e6c723836ed77dad706d2d56f964348e4d998dd4e5f21db5be46d8fffb4156dd8148ad372efd773d6b833f9f01499fd32dd46f2943959c14ab393737e0b194f043d34b2b2d1df49d4c0c0faa6ba83456c90924c826c2f511110fbfb06831911b94928128ffb034361a938b5cbc8769a17d574defe5f3519f654e264be8fe2ce4c91e89b0564348f349dfdf065cd34d6b9aeb26e8ebd67539dcc92622dcff306c53e373014532b07fa945305563ba14715872fb591b2357c0845ce8021172f1c8fa93ead2e55ff5e7b788a2a2aeccb36490e5a13764d5895114cb364f2eee2841b23b07dbf8bffc919dda9d29eff5e416506df1577f0d788b517ed897fd934f1e3802ac5d54bd9d41dbb3b9e05323c1a70977b0327a6b43c07f18e9bff5a22805dee2fea798a56b9d953722068374ca81e4db230b73f3ef00a69b1ad716d032f70c5cea956f43de554d07e223ba7c0d751a3c5fcd9bef317f0762b8804fff7365e79e57abfc02e42674e13a254075457bd34d6c96ae29032f92e4c5f60ff5aa054ab7d334c6c3753cd2be33ddecdb0e79829dceb5674816003990d9a40f3bc538f2faa169040b3963edaec031710483668f56ccecd55c10c5a2c91a4a8c31f68cab03330554728d0f1068c6e20f5c882289ea25133c64c4a35085083093fd97d9368de2b4e9f2e3f829fe7d3d7b5e8c80934331def8742936b13cdbeb583c8fb457d225696dd50993c18853d47cc7cfd073e1fc07cce5787bd5d650a1cee9ca720c868a290ca2b6e317ae2b34f5395523276193c6e4153bb63699ce1442d012261ccc9fd9d376e90c685d837a9f8e544ed92b4beffdc0cb44645a0b22c3fbccec9aa37de76ec4af3bd5ff876479444b1a4edd61d8f4df8dd2dfe74523731675489f0361d363bc404d9b5d5f0f821d2351ffc385b98178836c339bc1bc0ec48919db064ed4f84754e9503e3de4a2f88de7cf9a3b6461aaad10235b81a1696188bd4d0483340add98e3249f50eee102b73cf27b39af7b1755abc42dfed1de80c49f8c52cec22cd0e46167c11396a743f0dade068c1f0638c64274a29b1720bd3a3821f5d61073e579c2dacd3c6fa8d7bc1178c162b7254b398ae2d69107feb2a9880ba4bc6af5a071c34b03d079e2e9af9d310c76327ec8f0eac922e915ec48358043d53b0be2cdd410a828699aaa54fa88c860a5187057404c2380e4320e80e2c7ffd0a1fdcd539dfde603fe9fb18e14d61626eb1ec52a08317bc7b9c9b1e48318b6ba0744b2cef38ec234628d88da1ff358461a3837e707435b17385e1af796bd9ce38afd61894c6dd55f6bc1552c3698e42195c4ba1c57cea5b78f25ad2d2937cb4342926a454ce5dfe628bda92b683b619e32fad02410fef0c728e34d4d43fade72fdab5576d2dd396eb71891eb3e3e1d0b7584ecd06d821a81a39fca773dd4cdea2f377922af169dc63277dfc1429ba2b394b330f3fbe446d0c1ac34b6729afed42bba8626aa5e006979c7fd657dcf9f1e5f1b315710c3a704dfd234fe17c49fbacc2c433078e01f43496132a15758c659b5d43723a231abfbb080930fe613e4be6c5173b3da42f396f08e49eeb20f9c1d415fbb2ab67a0779d5bf279ea1d2ec22d3328ce0de4a6535cc12a69cc3b500b9cd4280242ad9acdcd686c2deb61f16d9a335d8e82efe2cf8a206c0d4d69bc28cfe24139c1dab2cb33366c191610a5b7eef9e0615e7ac9ad2e1a18a8c6e1f852045d57f036c133c5ea132f5a499469c9c55663dba5968ef3505eea6b5136d894ed1ff30d54da53447279637d32a2959281745156b92d26b4ceb3ae923e97b3120006f895def05127f88830bcd9d4125c5bcc2038dc0b3f700b5753e3ee1acb89d8759f88930505e551751853591b2566c7c46910b87023f10327d19d7432693515bf8a085c4f621ecbf6113ae97c92d79d419c2bfddcaa8ec561aecb0f2edc5dee1c8cce55eb8a96260888c7b62b01b5dfb5c52e4375ec6f7910fa8e68ce9a4f8579a695cd5547fbf96adaa75ddde511c7830e34e345a958d550e40d1043869534b0b6127f99b1bd196da4ade0f60034599edce2206462cab18763878261413189b596972192010d00d9595043841c435b067e8f05710555b24d8361aafd31dca11f1978a25ba51a19b55c7d48fc496406a98981e5f873cf12f45f10ba3344fd9f8f27a022d127ab3d4a1e21f8739b1e4de9bd467abacf4dcb25e3df3884b6e74eb21923e4e327de504196a6838b10971c2c1c05f3fd482257a06c79aa8d89503188472e9265103f57ee811e7ab60b93804a64aa5609a123fa0fe7f9976b83698dbf19ab125094c67e40ef7270817ae5360185a1076c79635a4f43823552d5464374812cd0d2bb7e7c0db420400848b852f3500e8a02ef137c2745ca916eba983713ad9c9791a7ef9608488cdfd8a43288243ca0748dc551bb124c0f9e67b82a69a04945de98afe453f78cf7c02e29719043c2ec0206c42b15ce73a23269dd920d7a5475af4c8d8953458f16114bf39b3f7adfef69e3a1657f40f1f93e7286840491b6073d1b7461b8b0295281e8bc4ae11dafd7fdfe9f9847b7b2f0453b4d898442d014acef4ba7fc7c86945a8a6cac7f662fffdfec06ff86bf45394b67408d74663f9ec4e2ad25558ec9a9a259b3c8147aad89d0c732960e8ffdccd1ad5e529a04c166962d554072c32cc4eade3f2b2f07883d37e7e33cf8f303f87a4bb25bbed426f161d2762d875160146f25ddfb50f5bdcfc3d7fc22d908c53ed351425ddb0d3fa8d2d49c6e3b9a31b1d0d37ae8931ca1f0b4ebf992af20a840e909cea5b993c4eaaffcc4b24e635bece2ae0bc384b55153333fe43eb19371629c7dafca2fec685a6c439064ce8c95bbdac2377c145dafe795c3b09362b5ec3e626b5f40bf481ea1ae61f621d795eec8b1ab8dd03b69687979d9182397877552e8073136773048e69fb8ed7634fb1b1312457a2cb793cef3b835c7c6860bc0ad167097300ea45371dbc915579542a682cef765537c117d95fbb1012f4cce0752c86838a55ac4b8be16695a9cfa83aebd3649b580e0978dea22cb6591b6bb27be6e515b0450db1cbca04efdd566cd8ad1cbaabd8d4d5bd32ffcdb1ebbc7f1d925b0f278520fb08a7e08b80007230f5512fee4d2b3af8c73729d19cc84e2cf9440468b2472c7f7eca407c67d3ebf73b32576e2c4368f24ac6e9bc9f25f3d36dbf5d179eb7eb07aaeb3c59b70bfd4ce5f3fa1f3b78b7b80610fdb528856c5a7278258f3db285512c6aab96dfd218708ad66825703eb190cca4a645b6c36454789058e621db0b2d1b4bcf4bfe7957a3babe0c9d2da01d42e3f0ac1fe3616a29a4063650a1a5e852cd3229e70d419965dfc115ad6727705be0dfd50ad22aa609dc73bcd9f49759e381e4e0cdfae48516745fdbb7e5ac26d3b7ba92b6c1573c65844d90268ae7f1ae0cab69e626b9b05c86656333072ddfead21df4133838fef4f1e3ce485b4134ee76b86da1dc7f5f24f0b0961751dbb0268a0d94c1bbd8b55ff691d3d20085d5049a76f664e7072f79b34d0ebd79e9da2720c0a3d9f7c080b522e5da0a88dc868e287737cb9c8cd59a62d6190afa0a2f9e54db37f88034adce39e17939bfae3628f785cdab5ad6e3cc9f11628686172211d5a9ce7189c6b58004b835a5a3665ebe0192df5f3a8afbe1c082b34870b97e2100c2f928f1959a6e87cb7299f4220e1c7842150eb37fb09a29e812207150b2c2a4a95829b320bbf824d8b60a23b30abeb27da80b19d6676dfc9904f95d33262c61637ad9f263d78b8d2c31785b7652eb5a6846dfbac619692cccca41ce22df47572c4344a5024bf8291e54a641d967923a9729a4211398d105b431648c1ad92ff47c9af519bfc280b313a7f141e0e5c14b4c0869d492742e68c9004cbffb9c238245326ff3b22dd6cb996cfe9896149c4ac6b5a8b25e35159d40585ae9957359781e92277424b786f2292bb95d089cd6905cad88c4679a01ae45e3e48387ce59f945ce672d261e5ac8c753af2932ea93394d981e3c0e9acfaaac0837a5a6fcef04d5b4fdddca90eb8ca0325890284f3d8ca9d79d559e02b164a30eba3b7526ae4198a75788eba2c6e392e7513c5d849b1732ef09836e930f102685b26964266c17c750bf7fcc6b865da4c99f641c41d64e2d858eba4916437a684fc4e317ed7583bcf34d607eb77b46acec86e5dc88f9b1dc21b29bac42d8be5d52b27042b99ee6b64c02fb12f73087dde85c67c3a4ebc2d29aa05c73c4d0421b4dd3a84050970b1d82bfda80b6659d56c04248e8602b01273d3436ab456d79dbd050e58924dfc6b0bbae69a58c1f4acd4324a0159d273ce668b422d01e97e4e793947934965a72ffdd67027d7adb3b44df96dd20346fbc48e6e44d0c6c387ce94af70c9ae3eb278fedba96ace6435d2bf961ee6396b6d6e70a02ef07a637bc8309343bae0abf6479bd78e44ef9f4ec33b8ca332a7e26c1bd59459012ad9c427c3a8caa7c66cc824d47cfeac35f1444c906ada5ab069c0bf261e3766d33a6569c833e808a257a3608b75f2b99fc375d77211edf3e814ec0ff969964ed3e14f0e2a53b4aba72030205cace736055b4c5d4299b6fb5ee4da5ea78b23e35063b95c73e07cb02604756e2bdfefaca31796bcf01112c9824737ababfebbae692123ab06ca9f36427bc5b028e2395e93b2a3ea12e842e3d6d0a2416706ec40fd35b4238581b59d9469013894da4c114274bb9d4610a1fcefc5e46e3f11dd0f8e8698365deeef862fac7a9e1c18522369c8ffccc932fe55f43f6a4020ef4d275ad53d7b3c5baffb65da284953f583fa4394c01b4e4f245614bcdaa4d0cc39ea5f691ba8c1d058077c89173502637060134fb13315193eeec221d85657d054e7f6f769c8fa8731bc1d1eae9e793abeb320f576332f6569110ce2b3f15a6a876ce610956b0d671207965d88c4e282ab65ad1fc17e220e5778478375234a010e1fea1754f641af3ff534caa2452d843ec0c9f2271e165c31ca11e418c1d8777bfa9deceacd086484e5fbbd303f350e7b57aa0ec9323e6285b58c5fb9a8668db8700b31c7e53c154445eab14f998a7e43be457eab0d53d63daac79b7d2401cd692a987067abbf94ecacea2558fc1e0ff16ee8ae6a214fd56ad9cd49ca49c33f94c846a3b04c69a71b54e745976d6c8a2f86a1594f8df973e0c0c4bf5b93244c2c5bbbb0526c7b88008c75b4070e2ce6fe4287523d1f602337c682add143dc020b352e9a515f5c99ebfcded7cd6f4d2c8edee586dd2dda44c7101e62412ecd7113c4703dd8c71235165408d9e44861c4ad3fcb214dc55bf8b3eb78109f095002cc4d26bcc6f305f03c88dab07b8fa29a6038cf55357a6763e648bddb71fcbefeb0da90337b150a91b2e6e4de656171328ec563caff120feedb701dc96b79f7f69c93717703fe88009b8ce9fa23252b0d3f0e3c9308d4fa041f9f601880386f6ceea23b5689a52b46c3e1fd562b9723682d557ff7f127a14ac32a16c2632f58027c39df47b61f94b48f8b6e88c04a18c341e06c292e996b47b324a7965c2daa6cbaa2ac5eef53430e2fc5d0b0a6d85c9700d764278436b659df3d9faef75a37e0bb7e416c597fbb29a6e4a85f089e630d0bc4a3e6728fbfe9e0456769b0d6bdb8c83e36ef03efce93a24b834c82d33d793d750edd3bc5f18c5cd5f7e3626afb9b78cacd5ade941e523e4b8913c5dd93171f3d2204e8aaf19890e85f446e2eee267efff107485ec5bf4255a2cc43a62a9c2b151e04e3297fbdbc955aa6dea28fee33eb937e4c607c96798cfe557077efa9edcfc63d65086e6731a67c02f5cb9ca67b582f48e6f266458df0b0c5dd4f675871c69b4fd481c8d32affabc8698eeac462ab982f9c4a168ad689b33db38aa54cdc7576e90449cbf3108e74fceac16bdf8565335ec5a36b1508b78c5609bd30fbe2e24e9c0b63f1861195314895e7ca01d86e93d13af168e545f1c4c7d966c8fec19c97cc9950f53ea6cab13c733270f708c073f15782319fde64ee525dbc3d5199397ce720ad29376ee6a414b12132d8c523d9cbbae1651ba54368b76f6d7ba2520e9d1a332125c46bfde1e67f36ac47f45c89f99bc4975e8fb945d50e1ce99650414653ba80819867bad5e734bb6d6c73a4b2b5a2f6d42a9f5ceb7bb72c69dbbc555a18dcf9dbf274187875f1894536aeb3dfde3f66f436b13fb36194c7bc72c86372a7ac8c967c2efedb73d138701d52d665d71dd8538cd69b2a7bae20aae04885e54b8de98f4d03a2b34aab32880b969d884d2469028556b70ae2278e2fe8826a20618608e4fae36b2788921aafd5e7946eda4c75dcf1ec9a660756553756167245077358b1abd2d6e6010d5e6dcae8c881579e99fe89a2de604b6b40c3f40e41eb2ec1cbee1a096efa3452877e20137065ed060a2a03c187192c2eecb651c0d3f2ff23cb1b5b706b202ed66f8c6e006dc1c808173e28527f8b67e64ca3362d622c979012b055a242f5fa25e0e8ed0d7c31e57453790d20c8048b062778abed43681013d1203835d7683a0075c194d00fa785feef3b69c968dd1109ce9b310b9f40a3f3bdfdc77ace5052c87911abd5415a47efa01c482e1b0d0a2df495e0cbad0f45e16891c6d05403a1631400d430a7adce82d6daf57376d469d5e5d5d5c45d236c09ba330e21d5df8456c10c6566380a2657a0937a11c27c982944f5cd7b289642912bbd9a987e477e3c1874f55f3463f841e87646030a247b00e89aaf889d4673e603f4d5f04c02be8e0336b4e2729c11713658874b1977f24276e271152f6eddd04b559b644bfba13e7a0c4e73e21da837b91927f02c82863446d87b10515cee4c506849782da3fc7f842b0bfecc720313823ea700d144533e4bae4679ab104ca8c9b94a2da08ea9ea1b1a1fd939140a7d8fec3076752d04f681a68721c79c0e0f34c2ee5e136aa2ce64bb45c6044b32fe6c714ba193e38573204e36b9805875e75df66b8693f4944dc6261a4968530deb4d6ee4acd32908eb61cfe66cb2dc51213755aa61878a9ee43dff309e9aa7e92c32a4f99016cbc73facca65879180adb9d4d4cec0d1669d66b0c61844cd7ce25508b278e6477426818ae0adb8dc40abae21c29de1868625993c60ae6d22e3b71419d78a14d17559352b56d2a8402a13ee9948651f52b000b00c0c9fba1e7e6d689667d86056bcdf5c0b09b99372097b0e403b9186e091cdba5d9664b5d048c52b7f0b13587bb8b6d4b2ebca8931d587f94c676f7781df89196bc5604a7bc974174b7975283f5794f61e82fda2acd284f2141ab1ce2fa9ded7af8b5abca9b4e79dc4c7aea793f3c469a36c13c30197444f66b218a85e96468349257ee98e6729496080f74ac24d88e965b847d553fcdeb05a0631629e0f753120d334442ebc27114d74bd0af77358cb98a38e2cc3f9d8dee79ee0905b7fd7c22aebf7d5abc5649cd9937c84d0a9eda4d0585be3bf5db270c296b38d8b6f85f625947d6b16aecf1598108bbebfcab7a6f24f9ca04fd019ef959889e245297524f4060232d53d94e8751f4d4e0990fd921d858b02f3b2330cbaa570c048ab2e3093b5b420ff583a7ce4032c2b240c500131201f6e09d56784727a823ccabb7c7a2793f64f25e72bff93ca8eb815d0c50736172d21c88350de23df1addc136303cefe01be92b33e36f26c45139cee3ea4cb679bc60c9b08bd6b5786f74e4ba3c468421bc6254f06a9cd2800c133aecb161200d62c0f098d21115e8f6cce17229dda85f3d005a6d181a740b171c20ee79a6fe54f93a3a641454e1ca15a98f69ec24108881696661a994d40a8374a738c3abe6ff4f71891d92ee970256a78f9922da74f475c05fdff9e5a04d92d4b3ac359285a9d0caf36d272cf1746fb161b6bd0be4c87062bced51768899be14c16b4c1dad033a321d3547c3630a4d6f2f3a23aaf929107baa33a3e703a97c741f22b3eca6a1cb3b2c40383489668b80b1721d6b3a597349da4138f17a161f2b948f5c6c45f4562ab4f3a425afc59111d36fdf28ac26b788a54e3b3b828860686b93c42fe1c179cac11a47211d0f9b7804e0085fb4208c01c49d6cd9fb51aa6976b5b6743371a0ed919ea1ef5e960bb261a71b9742ec78f989b4a48f32fe997f3ececf6399853f47db0907a3d6ee196b3e79ae8a1b512ac65902449cd584ade11d19cc8ee2f5df82c4f80e3662a5c91123108d805eb55fff4e3382e5e8202f4eed332038fe13afd01ec21a870a9b1ef5d03be4bd92d318c54e00fb3639cb02e0b9ec3f2bb243b440539ec9baf72c506a9be80022b2701b12adf3a7b19cfcbc73178bd1e7bc38f089526ac276298ab398681786cb995debda063d7fdac57371648354388eb1370b37370fe58484a9284c30d9521c1027e38ebca2c3f2b828b62a4c39b5b62ffb3e771027a14c19f4dbf7680f8cb4cb495a019c5133c2605d7b5ef4c07df277b30dfc7fa710a582ed3564595464c5d585336cd90e49b606bc0becfb6f803f828ec77ffca0e717f64e7cb09df61e5578f54df2a1fbb7009193b4e8037858868bbdced5ca787670b2bd915e880ec58732ce57c13895d4c911404b59bd96dac9b76504800327a5cf65cc1ae228688181a570b123aa6ab1b59e1976ffd6b12003e7ce9e61e1167b9ec6169bfc718f0f4e65e09ed8332e336bb5b7556a17a5cd7bf6bb8b773fd67fadab938a65a6bc343a68cac12119feed6fa4f6f5b4df26629e0ebaaaf68e86e2b454f20cf94d720af9adbf2c54fc37e0a9f8d98e8daa67b4f8c91818a7a9c3ba6f1e9fe1616f56c23eb60d0cdd8cd58b7954f92fe41c01c13ea8c7e5c466987a97e512b51e0490bbcf8924813670541470f9ad92ebe8e59e222561ac99f7b1da2a049c0b0bd3eb5ac31b53d53ef2da85d431d8d7717d5846229a6d6ff80d46ebc6baf96b5e13ee7b718effab34fce517bddd204ed6d97e72d7438c45c8ec87a65ef846ec3900c96b5cba802d7c6875a649ae326766979a50196a6576cb116d4cdc3b14ee59a78e589c8bfeab953edc1953669723e63ffdda6b2cde99b6a3479e780df8e6409af8b1088d4aedcc053d74b15fc351f867172fcb34d95430b373a6bc2582d190486045f1f702e9b08b9211fd839655c0e46264a5f39b3621d75ff7110c6243ec485e4aaaad5efd4abe371ead80f515ed68ce0df1b397ef8df5eb4688099772aef9d18dd95063d542eb49c446bc83e05fef7dbe128f0409287b0abf977d5a9b91e1eae251299cc517441ac3e0667ec8062a645906591cbbee71c5b7430601c1777de83681b647cb80d1abc1cef3b23f2357ff000696b2155870a510b5096dd4a7d4dc1bec4acec0b1081fdc714d732a27b1bd62b6357b26bb9290215f9028d5ac726f4a492e0817775f559414da9a39fcb1a1cc0ce7c8d1e70d3f92a296673809970e871d680fe64db622eb7d75d93f101ce1ff22d6f61ddbcadef45b8a94edf322b1317cab98f95557097fde670bec6b4644491fde7d8c76b20b00c2af1a2fc3596b80d45e712aeb200b8bcd9acb8500658a31037b516062b9959a6e39cf4c5465c14b2aa5bd73faa53563107dfb0d979a5b48b1cc46a496c3a4b8beeb810ac52b51b4e03ae7d7e09daacf5d25ab11e7900c259805bbd5c9cb97d395590e8f9b522a843d1d27e8c7a0bb8c34fc7551270d614f36b1a3d4bbe9fa9a0fe4a42572612bacee1a108a1582e2f8bab507a01ed9d66528052e581610ff3f444db409bae2d432d5ba412cf2b4fc0337aae2de085368c742825ff43f829a648385e2f187facbbc3516b56fe6bfa74b69b85919cb61c41dceffd69c50f1af2a1b5ddf9c2c8e9b612c266b1df31c48c8fb2e56f6d8103263701efc391d5ab3206a6917b84072c487a488f182b7a5b384c7914303cb03110042f894687dc17997694e275608b80fb7eaf939390a20b711e6e151f2082d5cf077e64759220fc501bb175621dde46c25d3d88a74d051b3fda5cb4d3215bea7dbe1a56f44a050586f3f74ea9e892cb4abf911fd8385a238cb6e4b2e691eadcd720450ca8c3966424d022b518b9914cc887830e8c1d5e828435d8debdce1c4deb386459d0e0ba35ba23d95b0a25ce4d95ef78298a9043f2e73a88b07b8eaa210fd036bcfdb547f93cd2714ad45dc19bb7746bd84dbcc3582946758c7f46934005e3d894c357a9d370410c005ee4307e2e907ddbb19fe27a0289a1155cd5093ac2b76cf24f2ef3f6adc0da16dca7263ecc808e97ec3aae5089ca8ddf54c9ec87d544d78bebe42bc074a75bca52f96fd1903e01818e1b9c40b441c3cb14919966f01d8482a75f4a178b6b76a136ff765e4b958488d81d79f245a715c93f412214aa2c0ba352eb18c577131ee36ccc49a235ad64f29008d1ea4bc8cea04ae6cdc1323903a7ea768d772a8c80fdd1b3fb1e6adfd37564acac6394f0d6ca3581a5e5a4aacabf228b66bf7e3e29928b7ab9ca73a86b015bc45738644d0f320e29147d7a609d9f66c71b58023b3bc0c1bb5b2469f90715ffd258967f24443e9ba4af54c68042ad99abb4c4543f6f8bcee0a081c781eff5e2cbfaedfe4a139b14dafa854bd2d4b46df7931103b416b1f465a5c0a4e134e20d0372b9d42f8f092401da1ed98971a46edc4564c4408c8010b39de5176839c6e78aa49991ca9cbcf72a8d8dd3161bc79f282eba8bcd9a46243e70476fa8fc58b7e1dd1ab01f09e6a8c663ee141eac26a5ef3c11b280e36b8c49c3a9c9d32d82c7683c38a91bd4de9a84a8e0bbd96e8b30f081fa3098d22ec26e4ea9b82fa372bffc8a926f131c0d69942115bec94be78ff180bd200e6aba9fa4559e80e70fa2597ab8e2dd472cbde5956305d906307f0c519f4e0ba87c06e46482d8f72352cbfb13ecb805b687eccad7ca92b9cdc05d9df4d83c17e465249b7220b89afa4d52ad7a1267c95cccb4255d938333f1edc20dba3962b547779c5bc82fe2ee57b700d21b1cc4ab7404eb879730e416b281f0f7043e19a697bdced3d27ea2658e43808005860cc1aebe5f3a3a3373a12c2ce403e5e56d769a9013b7958c5dbb11bb45702b49a030f6e4286eaf232e8b8583da078e3f5e0d341c6772db1cf826d581eac59d7d85a216d9a85e043a436ac1ba8c3aa3df357b979c1fda095bd0543f28741aa71cb7561a670cdfbf5449a41c4d6374b59b04b1464205e8da443d9832511a8043c89ae4ac36c8b0dd6957ba92b111d8f93bedf17f3f9b398563f3a0d0ebca70caeb345d89d269bfd0c9b40de980a972ae8729c12a3034d6641b7d47293c4b2c1d4cac77fe2366b03b6adf82fb5b2cfb9491928a50463154f623182f0444bb95025566dfef6886a3c94f8269f57097c854a1d48d9fbb873abdb26e999cfa97119cddd63885da9ef38093eb6025a5a0660758b5f17c86b7918ed509436a4dbf95c08b99a6b7cce8a620f08b62df2bafee2b244332490b839ccc010d73db51f4cae29f2fdcfa7b4b3b595525c602a7fc42c4322efa7a65df349c84c739860dd223ae5fd72289765a2998d01f0da86bc5a8717183a93566dfb90a1b3a6e80b07ea34966fe0d8e00b97ea6843f3257d0a28e52c193f8c5a01d90ef4f46cff4f044a517a82affbf77a3cb7bdaedd5904784f5dda3949b6c3668f7e7254c4510f9bc06b54fc2d51f7fe7a7995bb9a15bab213e2e669bdc6048183a2bd8da6c1e03077781ec4781093b6e696df6b029ca7828c7ca932eebd5102ed12d76fe41b7174aa908efc5d633612703deeea2f624fcb04a219d27d8c58e6b529a019cb786474263201239941e4ff175d73d97da1932cac8bb081b7de12248979da2b74c8a11aa945b9999dd565eb71e64c716412e93a0a2aecddf12021e8a0ef051d821ff72496fe6ae2c087b3eaf1c9bdb2a94146be7730b8d90e4c85b8345c47b15611a1f6c48519a8914c97eb5d1bef03d96d718add112f84681aaf9e5bc2038e68628a7af55bbdf6f83793215b85e7e8a509fa3fd3a9ac20207f351cb520468f9394b0f2e782c241ba74976287798fc8c3f191cd263597a6cb3082d93e4c2ed32936ec215d65e7c3c25c367aee22f0179631a548c4d6acd8d479c1ff33855ac72967cbaf3ad2f3cf8e1b2834d7c2f40ae3e2b126b46c5b1fa34d23ec383a6dfa2527661309b896d64c114d9a9c8196ec5bf10e80258c4ef18beac7e8d90c13952cafad2d8a538f67170de51f983d1ad4ea312342f88d4c59494ff2e4fd2f09b00482414737e3b2cd214baa8e8c7b90433b6ebf6e777f23033b30613d3e4ab01a146d4422a70c10fdad865495f99002dbc1842f5ef9d08d14996d377f0f8baa50a10732b0b9f382e44cf170e3716a48d579223e06ce572fc5f4bb2fd089afeb164696669e79c93c82731de84800c7a4aa5ed96bee082139f485a1768101b01632d2dea4dc7de9439f359a9288a0a96ef4655de9ed5c035c68719034119682ecd7060a135f67738e555555fcdd1567fc494d3ee129b039589cb53bc2be1a6a5e525c7475c0dbbfeff4207206df3031f282ce25a3b40df9be4ba0b75f84ba49990d4e03b6d7197f573c7d490bf58af0437f4c678e8ff68f89d3d93c86a838e75097a1ad3e274bbd1f63ab4f482a9901f8dc9501a1933bb96b166cbaf390b79dcf26e5bb08105622822f73440754f511caccafb294a090c3b12c34447de53946756a193287ecdbdb7ba4c3256822123094b5a587eedb6bcb2ed367f465987c6927f0e7cb654c8dbade55013349fd8c93e418adecb778a2af46b17bbebadc2326d658c4173f9bd3bab0ce916e2120edab7aa4978924f63d974f52d10e4ba28caf892a49a149a6362c00b5b5c9cbb7767449117db3bed35f040761fd773ada0dea3b2f59d14b2e6a544c0e6efab15da5d78b978f44d670a5099c884e6c6de6e0e61d0c2f9c69341492b19661f734c7b7f0d20a0187990a3f2502d88d2854f81cf87a87493595c53b114247a5a069f99bfedd10164704e2329b3bcbf03ee928489a72e780378084e33d408cc5ef96224c31c8db586f4356027e56b8ec7d98a6644eee3b2c4d47a4ff5691188efca6e2c20a5272e8e9f3379c6ab48d5b97caf15ef4cdadf65362f1a64d64d5cb5d4dc9505074bd3519a5fc9686243487775c07fd073078435b951dcb22c4d5eed9ef2ce9b5cc4088a761e68c82ad74accfa6abc3d2dc6e5144bf077c2e2af5fc44f881947dc63bb97577761c4208263a851c7903cfaaf37ab5640131f5012faf1aa709748f1a40d9d592259a428d73f008ece1cf913cac392bb1c122d6e68306b99c8a42f05328c20585344ec6a1cfd145fcfe4a24ab0b1704ae563f0bf88efe37d5ca1a49b510dd4fd79b152294dfabec6f73af75fdbd8178d20cee57706645de080ad7bbf1aec2606c154d07c3b5269528a82d22e9bef77b72b7a444a05503d796177e5b8e6f14a2e688578fe421ca2c382a637eaf5432e0c6b85258a3dd1c2636abbf1ad38347f2cb643426249cfd7b460ebcb78ccbcbc0ff0f4c7a5af5397cf7b2cd5733cfa36462dba32b2b6d43416db29025d9b6bfaf2e10a43a8f70d4f22bbd96db55def315f064f08047c01257d90080d1e96cb5a648a76d93490a6230f64b9e6634dfbd9dd130da99b7cf309b41de9ffd75c1fe70f560d8880b2a19ba69e66acc27decfc602a31c40b4c9fc1347e210e6f5c47871da6628254a729c357f455d6a1ed3f3e10e6f3d8058e2d8f5ddb012ebc553013ddf6904bb863a4ddfff1ac3feda289c48f271fe0fefd05384350cd3deb757758199ed6fa53eeca142b2eeb2b15ec12d02b4b77a993debffa04e8daddd3ae401606b3fdc781e2534f75ca9ad4821c607f7888c2ccf65219755165e7bc108bdc6f0d1a74c4a010f577fa7664f75c382c9ae44fd5e6933f03796a2152e1cdc82ab795611131641d278605a8c6c0c0c8540a7dcc97c30e718ab0f0dce6782bad93ee8728b70954ceea97c6ce9a45501ed8d82e8b3bf9f6d2814a46f3d00c92c43bb1f12d6f35db87455b1a5a05bff23efc626457192fd4e356370282041f968c7ba62dbe684223c1b5c1df475018613e8eeee688e38b0aeb4c90716ed349eb5015e3b6e8ab8077e4557df700040d404f77fa5f2babd2a567fec640e0d65f6b2701be974ccc4c80efe0070798f3b0b89f3aec983274a92dd4e4ee0565b07fe9cdea6709deb9710837e17b6b14b69a78780bb052a0412e864232a2d2e73956a9035859827193636c40a4e12faa25d5af913e2d81e34143a65c7d99d54427a96f5d7ff22588b7177ed21d08de67936a13501f28996a702ebb182ec040d346234405fd993386ec105a2fd90a0d22bc9159c4610a317bfd5e7f14be534502d533c38f4baa7f25508c967db9515d021d4387012511d2dd96b2874eef8aef9ad3463e8404aef955821682d0113b386e0cd0edc3fa1c330ed0ecbd3aece0da10f23af412e1624726fc5403e7059f3b983cfcb95e9a59b7e5ad38ea7c80b4fb6e1622028727b4c3be38465063ec3287c3cd406d61b1365929e33111abd682859d38299229762332c2659f0dc7ac16223ba3ce9b355dc4b28d895bf3297c938ec9463a8991761bf5a4cf3926ba83f58e728556f9a5fe083992a7061d1120b15b8c3038bba1086e739fed65c9b4464662ee278e1bf47e13e4cf519bc510c6098dc052afc25aeb726484304eaa3a465147ae3f50dd1a318236f870bb9e75540824f7a975d0d80ba2e231fb04a81649bf3937f33e76eb88c9ed007a1294bf0786f75fa8c5f3348a13f87d592a156ad143c46fbf4480b618c0e835b76c5e3defb92799e6b8b9367ed902da434a56d45d58bfea4b5713ad02a4bd7f8ef33dd38a470d9712d9d3385712726ae2a674119f30a94b5a59b38e21832de1254047cb527f8c2782785cca1aee16924ed95e5d3160f7439eaef413d31fe1209d93e55867abec2b97252a277b9b0c65204ed84814a73224b075e893a284536793da89e3bdd216e8de16a4fce793a190efe6c800ce27dae29cf8eb4311192f5aef29b29878744f05f040213351935840778fd3d6e56cb55bcdd83d215e04ca2d08473cd067ef4753a614bbf0333a852343a4035eb0ced3466ee87c1291350b9324bc268115b88cc5855c532cce579c26e3dc2337e82a009d0e3f4d6436af00811f50a80b16a201c7f285b8531df77a9c148cf99281c1ab718fe71168f818840eec3fbf0dd8d7596feb6dc8c3469aa5aad54deac6f9f98ae42cbd8fc6b00928859828a66d4defad5833a53b30c1cf67dcd63af8082a50ca27157905a204a59f316ea8193743ce7bb7e5a7c17c77c181b732c0eb80b996098d529e6fb7c97072e6e5ec816297f93b1575d44a5631a9cd47a9af24b080865d3c069a3ba2c7df889e8ca1ebb502a3f730aae2852bebeea72ab837b43b6fa88d2f7be8f7857fa0e0a475a7b1059cea8c54c783df4de7d1dd576ba48fb3c98f8ca8e523f0109b93d2742f04999e339c25fb88ada8d7949379633073fe8778f31428d34518efc2b9d5bffb175eaa9e11fd47f15cc7bf9fb27cfb6f38df59162c9eba6ee8d79bf15e327556f21d0195932324004c3796e0eba75f83c9ee5794bbc03f41b92da07c66561468897d0052fc093112e8601e4ba4e0e1a23f20f42b4d610535ccb8789a542f330401d471f32e0b1f2db16bfa1953d6c44ec6aaf2e9c2925a761b05d2b90e403d10419861f060b5688d7a220a1974d29ede5dbf4b19ab1e03165dd7a2ed471c8ad7c7487526ceb74df6e60ee932277c0b51269c66550b08085eea0f2ad927fb6921388ec7882557af05bdc43235c09f609b9c25e69e25c70c0bef6304d75e42a159214f7f6cfa53ed346ecf4f83d5aee2cc0851df4de157fae4cd8eec3cbef758fe813253b450cec0d2c4fd3b9becd0169b1c30142fe5c8ab4ca2479bc98324811556d3cb71a130e484b3b7411781c5d8d78599cd0e68578b67ec078a4accb23ee21d87562cbf3bbc0342074db4802c40f099e4e5998eaf4f1aaf0e203eae8ac1cb80dbaceb1e3560ff55f36575bb3b15729e2b03607c8e72f4d5ecd0ce181b196968fccec99b276000802233d92a17a29972fd6dd7bc3622e30d78203ab432ebf81bce3b585a2cc430ac937ed6568d7483e7b470eb8d545c655e7be4624b74c43f0289ffc5ad637acbc3dfd2163032dba2dea6f105e8b366297f5c8c0c42a064222276c50493a27e5e6cff88a0eb1435072a9fa574624f3f9c1025d599d6464379c74d57929ef3643bda687cd05b1abba1b2c4adfcf9166c6ba29bfed2cbb7d98e066a4a66bb7c39a0847c08708d5253d44255fbc9b6b7ab692d2595034ff8a7e8696ba50e688ee5ffc46026a8185ac812ece1de94277bcf7e678a246fafb214dfe577972fabb27d95ab8cff03f78457af9027ac144dbeae5a595bd1c1856e4c6049d0caed06728f2a877a938660e4f4fe544ddb2c5d2350322638a8643d61772f12eb037271207e9dae2652bd608670e8ca52186bc983c09b434b6b6828a54aad11d9e936c6df2767f72d64afdd8ab059910a98fe6ffd434582aeb052cc013bee88047dfd380215656c35302fd7beb6fc4df95eacd0cb2f06d4b2cb96597ea0e5aefefa7a6b919efcb52d1991bdf850388d2378f0f546d00170f2c00e12dc8772f57daae23a699892bf930f8ddaf45c48cbe17951d0d0f9029de15948e80d1029f9005b4bcec8159e4a5bea35efc911aaa43fddd565e1ecc0665325cd3b8b945e54903365dfd718c292516609ad4fb28de6c0e5ec146e379bc4a317483ee5d6d68b569ef51a9c28babda4c1ddf6917ca3f882d1bf08c7936da72d2e88362d09688428b24811686a12cbe8edc7c341a1bbc184164832ab8c7c85e716284aca25ea2d78695c0385edb098175d7f8f34f0d325d32ad63795fc0edfce39726d579df2df5504f9150afc28bc3329361330167fa283b1452c243c9f3dc1ce229ffb7bcb4a4e57bb984b52a316e67d8784e7684ca664f3b554b4c3e28c83fb840d4e90f4608d6daec736ccd4d087abdf63265d602fbd0b915a152f03fd26767173e98d9e7919d344cbd82b038cd51cf02c54ce88bd831a8dfbdd51172d3eea5e74fe85252fd50cd0c76fd6b4d9e4c548572a9ed8678bc6812d8d65379e180adb6ad19eedd287a7f39690d2e06891e9cb6f44befb6724527e4bd6f81cc6ce0825c73d997cf1b36d3ead20ad927bbb866415aff2fc594dc657d821da423d521aed6f9ae095c8eec898d275f30e7bff676c8c548ccebc5fcead0a98022ebc741781402d713ce94e0e2452d64a2a192d1ed64ba9d285c61df437e0564314f662325471475de814ec42d32a3bcdd401413739369dd3e4cc72cd8e0a91a4d84a59ff9878b16e0c4f9ccbca68a5b2db48f2074eb71c69bd6e6cb42c47d6d3416f83d3a162b9b6cfc14d768481a0dc0bfb1456e5d23700ffe624209416021c47a66d3a402ae5ae2f2abc3464c125132614080c308b073cac052e316a5232295f67859b6ae34000220653ca7780941d52791e34360aa54734f0fc6e07cd4e2953748670988a614227a8e0072fb8e2ec5df143d61537f4e0c2245d4c0f38bdf84c774f027d694cc67677aa3722bb994615f6e8aba0c0515f27cb1c3016824c73ad4b51c0a317c30f31c6a07d37ff8357fdf0ca474128310779de946968861dd74e904ff6ac03c33060ff632902319fd4829fc9a6e422dcc04d93643d2d251ef4d8c519d0006ef6758a86aa7d6887baab1fd5d02ed87e84b2c66419952057f014c3b75ff758f2d33bffed17ed24d17dbbaee7abf9c9dc0005750484ff743f9492dcbde030d4d420499db5fa209ef0c25b8f59144c52d603613de5624a55f20587108e9de90f3e2d893737a65937771761e17d8d1398829b00cee5ec3bde4e25dd748590cd3d5483082250ef407ed0ae1acd7b1621c8a006d8575708cc63363ef3976e4171e4341dbf428a5ca4bd2a111021a805cce405ea1cb01331a29d5b86662804e4f75a24efeaec09019ad0959c28bef1c09a1fb513a918b8f6ce5d3cd22c7014a0b2bad006e339d57d55d40d4f9d2acb683d03ae149dc49d67f518cedf82bd3eaed0d3afd9e87d46a2ec931926f892e719b8c11ca25a4c318fb257ad9d2dd7de1591611eca7908e76dd32bd46bf1756a841f191dddf54e4e09609b4660305a1c200098cf1a616009d08a740d95c0de5f24f8eb8e259e97028050f159d4adfdeeb97d51e5e82f83e393864cab08214d66bc7d607aa8e9686988099576087dd1d739159a6f39529d95cc804870e143375ec19e3e71cf5209ff70b808fbe1c89c6854cfb770cda6803f8e4edcd2ed979845b7e0e4b5f6c99bea193be89afcdf70aafce05c9a9fbd08aaa3884d2ce5278cb980e9bec9a1ae61e1a262ef6d53292dd26bb94c6c6c0fdedc3b319343271d334a76a6de3ee5080079af727512856e08b5e5785697a0e8e6fef56508bcaa18e7001b8750eaad1bca34512afa8f41a17d514f343bd7c5d92a8f804cb77a75bdb4eabc5390ba01d91d7a634569ab951f3c5a482c044622e6403953a621699953fa6048a483ed6ce862b1c65727ef52301fb457033d4b0ccb1b612e2ede6dd6ded5b7f72d2ab108319b3a96c0186cbd716b2c78cde9268ffa9abc143f26de02cf6b2b3bc691f1206d898d1547367f0f633f7ac3f499d3570fed039fcde9692d738dbe46989120c0b4933df4d7ce1c9e5ed168b15b6dd0b88c4b9c7f50778494d6af1fb853eb853f17f7542745aec174559f9d98c624dea09acc1336b08f640381bd521715dfce2339f90e3754b81d6415ed7a2e0dae47b15c3645a170b4d02520b308e747f1904021e92d4cc3f3a2be8c40b3aa652862a697eda4c752e5b8e8e21a802cb3f3d30388018aa8d545c49c8fe20be2996e14836902a1c087c3dea41bada6afdfd40ca803602b2d5cdf6a8bfa9aed50dafad30f14c3187cf290f7bacb28ad48137a827e4fa59e4a42972cf21cf9392ddfcd6c7e64a54590802f582c15dc57f6b9962786ab786431e40c6bb1d83c5ba3a0d90185dd9550fb3221d428cf37d8dcf6d628491488cf6238a7a66a233f6ccd77f09b76081b554337d6ba32d06880bb3e4a16d44352f15caf32a2057ebe186068e07d25c62f5caac6f77315f6c4088bf21a42fb3f6e24eb44bce054923a2a0e0fd407638e436822cd09c23f58c75873116074690221214385a7fcc52c11d6ef4055032e74a415d4d4d9cd8360c8cf325af071d12d2baf5cd5c17a3caf4773dd7a511df6043f2d6b1faa791e082ca1948a35c587eb7676195f2888f2ce2ce2f9b20d7a1763c44e2c4eb2420acfe7d6a2e1df032c76a14350ad41f202f55363792c240fb3fc28291a7ef0493817063d64b01b133b5c2f996f96963c611a53fe131e7da5fe196850cc5272e8aea4ab19d37430b8eb96109a9146b28482af7a5cd5514ed91ec9cf96850cf9f0cc8a0febf704b04059509284bc5d1ef7a451f62f3e166575eca9a4bc13f0fc61bd9874762bc188db3aa668a8005d4cd9d219877aa0f4af6fc9201f3c6f46721d4ffda515982913318c3513b03e968139e6644411521664f6d26520ea70f471a0ae5f16a340d7bb4662597a33d8385ed92a1c6b038d0c81b96a02379f1a32eed8c52a2e7c363dcfb06d1674f05ec1bd05d807909892b34cffe3c3eff8f5f3cdeec86e685338d15917ee0d72ab28f5fa0b5c8b312af60c37654f297e2186b8d5ddc03df21ab0a0b68810efd463c1c2397cdedece2ba4c2d8e0fb625357375388e33c6d79de20cfa18faf63debdbe8ef24c8bea1d1725e95023d5b49dbc4937ab5a3696b640d2883460a15093d881203d5a830213e84c53afbf29e32219b010c8f4e27ea83923305309966772e447adb7b5e9a3545d1ad26fc0d1aa7a1f3c600f4c6ca8e9c95310a137f81bc37860c2a388a633d853c43fccb911b12bbd118b49278b9134fe9d096efde585ba0c5184536aedb33be5235221a0a8a8a063e8c8a1524dadd5f5afe0079b29d02e19dc849d39de4a6c98984fc93a596876a3daf16ad7daf82dd052002fe93a088cfb08a0ebb0526788b7650dee90225e82a53db4d71afff26aa17743ae78cd91aafcd4d51b8e6a771a6492e2150bcc164017337e97d784748c2649c9a46a11d3f064393cc254aaba087dd9c84631cb2e5dd72700ddf198b0428242493a641bfe5d4289ef4e3d7d2794a7deff3e1b40bc1c1f64f15f4a8e1228af8ebeed7af68825d4edd10a3bcfb5231065f32e99792e57b69734f24eccc329158f1ac0840b0c26aa04caed089c4f61f80c96f768bd1529a426ced2be45d2e7f0821ed084de0d66937274848dc048917fc7cfbe4a7878ef8ae7ffa701e8c0545f8bd57a7f4d62aa39a97b2c579ccf14039db54b8b15a784b3fdda65885b2f847cc4fefb3963388bb729e898eb7280aeb7db9486ec186d0779776c80957f129bdc21c3ac2d43cc38ba385fa40ac9740cff5327e173205e654188b3f510ab54617446196bc01217765f85c24b3953970012df13bb8a589530e8c2d219032bbe674dd3552da06a203edb90fb5ddad5f1a9626e7364647a698a7d848e6fcdd3107e663d167dc7cf1820e8c88bdd509ef31a1541363d3fc9e884f05fb5021dfc113a5bf897d80644f314d74907c2a653951f6603e510570f6f8c14330612f81b52297aa233679483618bfa776d151a569eb3b4c224f92c219599d2b0a533a5aa8cb9ca297e850bf60002b7cde78894613aa21f75535f6fff0c517066713cec14338d12131783e0c2f4d0bae34b96069ec41fc0c886c8144469cbb5260d07bab0429e73ca741af0282815cbb76d56d8884ad71dfc0248506209f937887fc7f4f2a7e3a7482d34e0a8a3cbf5e00a71be72a152b4f4a879f3fc1b99063b901f2d51d01dcd88b1f8dd2c3abb7e59ac78e0ac6403dd7b33d9c7580ec6f3522a50b3e8ea4df8ca29285df5d634bdc5cd05677dc41ef2c4989be192d7e07a2c4aac704bfe05f362ea4616820d63cc30e0981b88078bb19825b10e954d719d9473f20295f8bea206659d607596578489a39a96d442ab4825e58354bd0b1c9756e75df957883869a7e38c85ccb87aff9168268d9cc64400b407f29f7beb577f41fe7928f69c07fdd5bc68028fcd9175309c7e8c697a6d9f804ea9b1f383aac084def0cbd905d0009fc8fc9fa1e4ac3c24c9c16302073cb21e979a80cfffd604d9ec9460c811a93cac2cb33e22398dd9d293996cb56aa9cd8ba0314b6763c82a0c7c157108cc7cf6183cac4b88d215dfc90de30253764a5af3c43abfc0baec4ce376e017a836222ceea6933f3aeb5a2483cbbf17bd238ef821944840992bfed1d69e1e02a76072e5a388fa91c9e9fbd6270c71cebdfafb05ffd54883808fa22c0c0b84629b8e70435c3b586bff7aad7f9e67694902134070a36c33b594ba216fe40e1ce60d732bbb6e5d8426b1c9401624e0ef620d8c213613c3d84a09ced6f9e0bbefd4ccd74be424d729cc05eabf4335094da29494691a21f3d64e125e2e67ef3e499ed773a3d4b622ebb04a6c435ff88b9313114fe4d35e459bfb2de09d5b209fe1c0c02fef753055898d53b9800fa9b48c03c944d067e352a1c205b0e0ae473aeb87e3ce134ec45b05cb2c85cf6c9c2647e85fbfdeb368112be2c3de16844429e28eabb69383b7e2c6cb4de2df906f087bf55491340a928de6d044b99287a682ba99393ad36cf1c20b46e99fed352002bf404deaf2125759bf04037a084a8ec5d00811502efb24df0a72d7ce298653275bfadb94e5cefaf9925731d329b21f11952ef1627ad5c65308131661b69addd901617273bc3ce292653227ee4c2a12817064f9598fb8aabd55c7456e4252a545202e43529fcd8e0272fdf797ebb3260aa1db5fdab0d41020956eea078672d888dfe73984ca0c0b6001e66fddb4eb3f8f6bcfcb37a6072f7c4c064f527e4295b5855fabfb9fd63f5e1ca9e9b31e3388be75d3e49cd13ed0dfa14e901a3505ce3f741e9ec63555db88649db0c0059ccba1c9a9511a8210be9185ca0f81cb98ec570bc8fba75f254ce03279761e82fcfcd8fc967deac62934a21f5a1fc50d77485004b431478ed30103649f4a2210bad66c8b2655be8546bd4a9099d932fe2518eb5db82ad397c9e690da40d1bcb2f3186fec7c643de4c28cd4a4cce6ec7120526fbe65f0a74012715b890c3844d152fee5f85fcd9fc7fed27f60ea78999544e9c502a31da720dc401f3de34bfd018c1dc106b46bfd6f8f7f5c525b04407fd312ddc45f8d5cc45768b6e8220531cf465c911543e2110990ebc269da4fc25defa5fc74b1bc4a2b79b3edd35dde39a8d2b66d649ef6609269e72558916cce2d5c41e2ad46d40a63f5e6f4db93ac41d0928a62af3aee5dee9d230914f53a68aacae403da397cf50215ba2bc33a3c10809552f911b5607ebeaca0885f3e460ff1b4c3ca619580c9f64d0ed6f2ecdac2aaa186f2e36471f211938e7f098ffa4439c6e7eddc7556be696eece238e74e63f76c61641658030f299bdf8bca58b6f8aff8affd4df0f1b88de53e5dc8bcea9fc4b5bdb90ab2ae2cc645bfc7767c6146d02a0d56558de4ed48bdf777eeef74e86a86796b978b6ccab03a70af9e66fc94fa31d4f0239704be10a91975b80e096a6d1702f1a605518bd47d8569596d2a6ade306094defc3f208f0e3257d9e50e6754befab4aaa9df4b936155b4908e5973359ddc43d2d22e994c2cf7b70a3877f69ca1260c12cb2ad6e37d6a6f480078ffda93382ab60a5b013596e83004f9dd906b4616486a034e50da02b641a83944131a756b16fff266471aa1f7f617ab7307dbdd7551b3c3d86858d66bfd12913985ae42b442b59ef20a4c7cb876434c35d45f69211e7f5ec39721308b784453ab1a42bb7d94dbcf677f9f773edd6ba58bd522bd542fafc50cf55661696120b20ec9aa1fe956ce881131fbdf7294b24f4e0ce3b098c87eb8471c8e1ba20c049992d9e30d49e2d4751ea93fb4d4b71e8be698f283aee6219e3f9d82b670ae4f1f68a52326714734c9daa96e640e9d0c24aee0292fae79ecb3cb43549b99d821f903d348bf42c4f680aab64dc5697e40e62f0b292972d0575f771cb298f5fa43c1623a8acde22b4a2f71abbe370c7a24aa393ee8b5726412a4a5555bc7a45de026af603f8ded79dfd88c9db86a04e65af5d59e3aa209f25781e7ab8ce9ec52b7f9ab05466c099bbb9a48485a5869f12b761062837a595df14b93365c978cad048ebfe3e43169cfc23c15909905f7c719f3ce6cba1432fa7da59b3d889568c01b805afbf28f7fb18cfd515a0689de6e42d4ce28d7d66b4482da1a7379554d6d438b6adb764e1e6a62b476e0ea6736ca8566ea4d43ee9bb804e27a430c39b769cee8d67832ee7f3ebdb3c033f1b0f631396ab24c8c09beb985bde1f06883e9cb2c626278ee0993d457d795aa5f0096dc58e59c40128189ed19b5d614bfc1a1bdd41596d809a10bf239d06fdb0ef8ddcab1eabc82b16a62e11e313c8becbc920747a7c7ecc54be2d768280b4407038a1f75710dd7b093f36edfda76c719a96681068bf4aebef85874df49a0f54eecce6440d75d4494a4e45706f8e04cdfc8d34063fd23e87c4ecbd17fb264a27566aac0d99a6b231f21250e41b2bfd43e1036cfa2aa7b4ec72a752477d0be152e93efd490d0282e9120a6eb73d3ff751cb4140dc67cbc09ff0bcbd45bea5e833e9c76cf7d76ece5c5c914b06397a9d2c51a5cd5380b2ba3a87709d93ea76c96df329b7a5d0442c2c4a0df3e1ce106e24718446709414dba60b447bd5b3ecec553d4f1a593e0ffcf127b251a07ddd8e7d1b6864d5c2edba07af7881088fc87a7ed8891da58ed85c5f4bbe68cae01806403d6deab7ab3bf2f89753130136e3d6ec0eb968a997dcbf9442c8df9baca17a73e97771318bc6e48a0577b6896a53a400fb2753ef8954ba16918df4af2d07590bfc3e40c669ad47e3043bed64339c9b35c4a5b5c5a54dc5611be21b9b75f89be0040419ddd66ee1139e706261131998a5c51573eb18b655be4bec4ddc10a5fbe0d1d5d69b44a09606159c3b0b040240d6460475af36a9304d9358d745983f5c55b65b9f5c04d25fada8e3a60b43005d35df252289955a2c224933fbc2db76b8da811200482503a2b6d98979c95e79838cd9a812509305f85f8812d521b9e89685e16c12aa55667cb434e0dfaa142addba131fed6ed07ccd3252a9e1b5c40bf228d00a304fac04f004be80aafba60b946db91e020cc34ecd930fb4e25743e08025af7d0ea8c358bf82bbff55505cea643b59a9beb648b4f06a565ee07bd036cdc48cab65000e7ab2e0b53f75e926517fcf90073f46788f817c1e4528158aeae01080cc690ccb7735c64df8679c8b02682a7f061b4acd82e420b54a508738ffb047dbcfc83eaeced6ced7dbf68e0f8357808fa4d862e15be023f7e9e043eef55b7b48f322e66fa0d184c0f83e1a30777292f9131aed0a10f2fe8ff318ca8958b5a62bdd677cda1323be992567db68b4d51e60dc7452e7c78831a88f1b6f8439ba62c8017ebc0370a1d4743a53891a8791f1b8bb5858e6e0330a29e7661f57b86a23f521e2d9fc3ef7fe6c776a72d6842c902e1bde2d5bc6f171e61a3d3bae142f4a6cb1764c84fad55fa60667952e4891d5e80a1263166ab2cbb2cc3b14d5d3a620cc77713519213327b9c2614a05802ee5ca035be3da1ec5ac8d24648c3cc30192a9df95e4296658a591bbe256c2438f573df44a3d493c71334953b30d86587e666ad232199007fd901c303bb46de64a54d0ad948226935de43f9fefeb53642e32802e748f9da61d93fb60b6795f47a142f3953966a823ade441e0182226e515efa33c1830d048401bf9b0476e9f163294da950362b8576e7f2350addb0d843b68f9da99f6ead8fbe923b6471f09046a3d1695773b3ffbaa35324297a24432dfb036a5098acbbd4ad124c50968d8b8a91a913accba50a7ee8d6d401c52929872624bc6d299adaec8ac79e507aff8c4533e2d0d05b740f81d3e6d07d440df07d10640b16932a287224f4db8e95684231174e978f90710c1a5360070c7d209073ea16a74f859693e49d35534d7ba408903458cdbf13af09ee082acaccd25202f6068b130ba693b9e8ade98e8b9b4eaf43e47cfa127a08e99ce005fea015b60186dbfacc64f6facb9801a89f9e30742c24197e716849eab93ae3e7b19268a9fadc271cdc33bb721e950742266a7a860fd27b4a556f4d137459e4054fc7d37c6c6dc9e358041523431763c8645942d3ed1b980fb1dc8f5914a263ae79ecd6cecf346ddb1a686a6b9ad2dde7c89b0cfe0d8a7c8e1d4f4baf73af45bf3dd7466e0f7fd76671aae2653f796088ce9b615aa8253f88a3044eb3f9d6451dac5dc57c047f03eafa36ecc318d5c9f248628d4bd15402993f055c20f628f9e499524af84e67b3bb127983872a56fee9e48acb63f440145c728eee32cd460f99103f614095a55dc0c451710885fedbe40a9c1234a64ba814a93a5ff2a5fdec5a9a98e18346c0c4a987d240020e1323a3312d11384267d69dd933f5db139dd6dea21b1d1d32622f117a387ea3b197f88cfd9fcc29451b8f4233e2f1cf636aea358d675fd0d2c562a27c3b6878b5b55131479b8a5abfc0a7317b8273f04a9cc3c395d2849a02f85412a93190abd2e3f3084da0720861721af93f62e5bddf332670157ced27a44c8e789a82dff2e6acb1affa724ff4c4cf766245130e9409706baccc157819bf12a52a1a7551461f55a680c76a0c392d735f41e6a28c8eaefac53284162775d88939bffadde9a5c2edb1cdc7e6b1ea8bdce479690901aa288e9de47543e35506cf87953a6036948788b4f4d3894e4c11b71e0602211a255fe237a4ebc6b8b95ba681116e8bb6836f0b93527a6f0516fa356807f813cc5c3ef7ef569a987cbe7fc639b7855edc371d0b09ef9be182b88b2d1471b25cd4b17b4dab6fc82a726f9b26257d839f611863aacc7ef16915611ec9489a6e3f2e24175ae5631507e4ec7fdfccc37df9045eed78833313c93e2563b8e2ff45ecb333e610f78662d80f1fa4e5024e9e75354623c49013e0ec29e27624b801fb9d929d5a1d36e2b3b47e561a57debad6fb2f20b976d479a6dc70f57d3fad3c0c1738d92e729629d88aae1bea53b094b36d7d08baed0697fc6a660d5158e95d173ffeb57ed69a91ddcd940a94694c1aedc1dc366246f2b2342c43a75082e6a985f65a5d20fc284ca7d22a6e05aa2397f768391add8b0df1edcef4f33441abd971f988ee96f27bcde7dd7787c208c1063979697ecb78bb3ea6ce4adf13b3c32eb08a52562ab2a649c823abf5127dde8e793f801a57a4100ed47a4b57db6cf9af8986f8a039ed339dcfa09032bfc34794b7a4c7e17ab17edebd6846acc8c2f5d2e01ef96a6f6492515615391ed049796c6ae6e4f88486238baeb98fc9912afd59be1b09d0acce7dad338caf09677f74b1daa3ed94d1e70fa82fb31edef9838e41f78b1059859002011db23a6d648c105ede3639cab5e16587ad52d15522b066f9b714b25335202f5599a55f7cbdb600faba8bf99a11d7ec14080a0da5167fecfae8056311563e685b481d635ef1d346aefe1381967579dc502764f476f23ea89542e9e12c8f7ab1fc3f8c9d214fb491dee6cefba11b6041271b3a2e070e7a5269ac505d2efca8efca3e86af665cb438a4346c7abfcd49a4faa2f535529edb338a4edb573f489b2960f64705cfa9f1be4f2325fa2b2f8c41766e1daf2159bb3b21c208208f4b7e19eac754d2ffe2c48ac2392f3256dacd6838764b6d3c90382f28746a10b8b0fb5791ae5948110b68564e306e30113baf3d8075d89b75dd06635d94c27ea7333fb84e0f4472715a12b4e060ba1def6af0243dc0781a0b8f87350e7bdf04ccd22f467d42903d7d4ae4e6e65479ed4b01486c43447ea7a737c49c97474f9d157478794bd6cc9051cd4640d30ead7d938a75a1cd977fe01d0772954f762c559a45cfb23fa0694c1b438ecf15998652d2d2641fbae6fa6b5b740d5c018ccf7e0e1c5aebb545b4bab1f11c8145dadf8958d5e4eb9d16e18186786e407ecb9ce58685b048dfb77f46bdf7e3fe3f2b1212c8f1ab80bb180a351527ba606b6f4fdafac9ac9e093cfdcd1681db1623316b574f72a27eb32b612e2c5a70c550fa7a8a2328344da88c67da4bff7bae101</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cab758c2bbf29e310f607855e3e7e51f21bbfea904ea7a8ed26da8da89de8fc9">1b693c4938223286468132b2f7068bf6098157620d78df6a8d32bb51e3f325b181ab70623eeb2a3f7a6bc681afafbdfe713bdd1c6f193890fe2449d416193fec46af80b0cd7431187dd1f97bc499b3a9ff9add79cea27c3015bb48123e899a7fb3295784c80b5d0b121aef398aca2f36d3661e78c54305f10d7d8f9de07de7e9a370641812f840a8f68bb7686e6e75bf5aaa69b4f328fe94d17a00647b6bdeefac5ff68db076f26d217b7be239abd3dad05c88857aa0945ec9bbce8c501724e9cddcda090e0b5dd17670bc5b0aa146e5c15ead49d5bedec7e2d0ba426f9bac50c6fb7f935f8a01d86b0fb15bfc31774d8b2e748468978a57c9f314cf3474a8908c962e62d793d4202cc789c89f172859f6c45d905ca5828e4fcc14dcd0b72bc60fed7d44f9e29b4be00939342e416c9e56c67e04b79fdec1dcef56c7602d391c51365f0885c5f1e7daa21ef5f34ec737ba851e91be020d6b473ff53dc5082093a33f1899d7be4ed55ecb8a865ada024c8a8ccf66b6e0c51f2843e1248a0f483d118e82308bd4ea916657024bf2c31a5fb01da6ef08a8316c44e217bc4792319d995741257cca7ddaab847de991c6537d986a79b83e8cee1d44c948ed237bbcc65fe83890021b84452bd350bbc4b8eace2cf7b56a5ee838ce3f76d847cd9b091176a88ddd8759125c5ef6f3a128951a6a60b4eb9b3000103e3fc21e28fefb5237e8dff0724bbe862d7bd8b9bf0bed10f0b85b68b8267130266e872060622d62bcab8182471f42324384a307a3f7cf68a591c3e5123d7d983dde563a046f30df65686ba53da8448fba75896080e1fc7bfc6685c2bd7cd91d28907af15fdc166854210f6d488a3c62336376333997a4440bd58288eeb52b359fd4fa62455ee3f5f10c53851924baa240880212ebf3801c2f496b21c0fb67bddddc6b3884e9dca3b6f3742e05f59e3fb3035436dce19683e5ecbb48d4df737592b11ece81856380177c37c7309f768d3b64c48649aa82ebe5d29649bdba9af2df082e771827d4835afab8fe8e69b87e8b2404de6c41cc60fa45c843bf89bc83d73d1a8b7d55dc6f00f0e1e9480890bf6a324e584fc0c45ae457e9031622981ee83f0f275eb5682b05f2cd81b5f6b4776c9f3b90bf1857e78a3ea5bb4c83a4654de516eadfd438a5f4d9c25c2e48b6d7fead8c1cedb027faf44d8d9ce375ffc87532cc56f002835e0e55b75b96dad4592e56417416aaa6d22e08af6e5c565e005c516dfe25927804e35c11ed470916d60e9e941489205c98c96a1c888ec4fcabf2cd59cf7ed77d51cb5d4b8aa1a0837099b37341d56b907e8ddeec5e34bff8bbefffa2c864d1ef7de812c4e874d2b420505ae8e4416dd9a33cd3713be4adbe572af303bc6904b8a281f9df07fd21b063fc85f7540f2b44976f593cbd622314605f4e2e391b20c0ea22f3895d13e668c979815c9bdfda25095fb79ef6c023139f1d0f3acf0ab15ef22a6373a11b906fb98209de8a83f85444cb96081129e2c7c8421791beecabb01241aa70f09346209d23bfe18d60338ba3abb4792d594197c9abc95d1d962a49bbc34c25e156e252f6510f8441a614bea22f2f7116575536cd4d2b8f12df6d82d2d65026003aa1cd2996ddd6c1d93fd308591391dd88d7d70cca7d5f9fea6f9500b11312df71132d053f8da3910d17eb455a1dd11462bd65159ecc86cfb61b3f130c2f1be650e86328833e99d8d121a1a5632a250b3ab29980d598255adab11607e9da1b5156f399c285e3d748d84aa460fc4b3c71d8120e0d056fa0707e1d876213ddcefae8b856a0a8384b037dfc6ed753ac31508f19bd2321a9da8adb4b9fbbd3e28be1d495e338871e63b948a663665d9671a349abbc5aa7d895e794785302d5260eede14246baa774210d9d0fea4bf36853a865a781b35c8c482b46675e2ef1161d78856120df62ab968a5e8726f7d58f7f4d7824daff425475d82858438b9a4d06ede3f489262c13637eab07914138236b60f73ebef728d93aa59e789a6c21e4868886308f79701a80cce6098a7d050424f478e9151a87e9de5c53b3c2bc81b15b601a40ac452486f1149a6af9d4f70d4dbb9cc233e8cc2703e8bf13aa35a4fca77bcb9cec9e6f1195475ac4af9952e31a4319c1ad417666c224efa7eb95a7f957cffa0541af71a66bdb3759cf72a3bca8bbb5036ebf135ee0f0ad0fcc1170aefc5c9881466f69582a0bd565161355fc447fc0121359014e08b1533f1c896eedef7e15e3c770fe2c2f4068bdae19fc24d286ec5fd0f0925586cb2b481031bded5c5e1ff5fcc581d17df686aca3266e519cbb70c9189e4145ff103d5facc16bf1d9f7660967180fe8795f400729b8422768e0af1b32dfbdbe6414a5b94b593247c2cb2c9b10ec80be7d55726ded5c724c7c8ce4f2a76ca5021331ba0286ae6b94c3fb0b137d2b826ad083f4c2d1e1ae70fcbb8fe81d638464af4d326d60b621db96b26194ab2fb1fcb2913b0634ac96c2e9a62baaaf0816cc903f1a5e96c6db24c9217efa7494bc43e85cc8016ac2cb7e31b7b63fbebcd70b47ea05a756893dd823673bd077b20bd5bf23ba92ebfc0556679994403d835e852da90fbaf894e326028fe892fc04fe5b32d965877af6b24e4f3f924e54a3d3cbf4518c36662dca2cb4afaefbe8600cb747e49e0e2212149a02961e3a9cecd985188fcb7217e7fe08172a65d854b5aa33a7365a6c28cb1ad4a2e05de66c8c404f1a39f3ee5d858d42c0d5f9276b6ce0c28190d7db0b3c8606f1c420e17d74e241c44756c9aff1789827b3a00b20d0d87f7f2ac159df12d8389c7eed139660934d7be7bb284f7529fb1e8bb000685742a6a1bff1bf41a0cbc05736e8fcec2428f54bcc6570c75cc89fc2894d87e0f1c5e64750f197b02fca53580902f57818e9e08988555ea17ff42bb449dd547e955ce96f2fe96eaa09708b4dde5098748432d8ea7491ad60e20930453b941a79c0f6ce9721cb6f34e915abc5e8be238e448d573d435ba3ba7f04efabd82896385e9747a56a5f2fd83fb874031ca98abe25cd3f5059a05b7242ef1147aad5dba834d3eefac1e0d04b36b8b2c6fca0bb35349ab66544cd487b47ca08d12da5a2a443129b16b4326f17b5d94d3787e2d4a3110f2bbb3aab5078e00c4c4b52045d41178d8e2db055a27f02630aae58b8716794d7e29aaf458840d948b33836a125e88e529d2fc5962f7e335cb78aefaa79db64da39d46419b3c7ab1091cd3820a4f7dd1016b1983e73c8dc12e5f2e4d0a4cb16ac57d47fface000b5d837fc1adecec7cda5d50581465c6d42796ce4c3a7eb31176b447a6841d6094a77856f6c8540d081849875aa46f856ec14d74469803af62af5f41b389dc1d57ab410775381bb0e7ab0d7b993edfdb1f4b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>The End of 2022</title>
    <url>/posts/ceebbd88.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<iframe src="/images/2022.mp4" position="absolute" frameboder="0" width="100%" height="415" controls="controls" allow="encrypted-media" allowfullscreen></iframe>

<div style="border:silver 1px dashed;background-color: rgba(0, 0, 0, 0);width:fit-content;padding:12px;font-size: 12px;font-family: 微软雅黑; ">
   <strong>免责声明：</strong><br>
   &nbsp;&nbsp;&nbsp;&nbsp;本视频转自网络文章，转载此视频仅为个人收藏，分享知识，如有侵权，请联系<a target="_blank">博主</a>进行删除。<br>
   &nbsp;&nbsp;&nbsp;&nbsp;原文作者：<a href="https://news.163.com/" target="_blank">网易新闻</a>
   原文地址：<a>404</a>
</div>

]]></content>
  </entry>
  <entry>
    <title>华为机考复盘</title>
    <url>/posts/84f2e3b5.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="相等的IPV6地址"><a href="#相等的IPV6地址" class="headerlink" title="相等的IPV6地址"></a>相等的IPV6地址</h2><p>IPV6地址首选表示法：<code>x:x:x:x:x:x:x:x</code>，分为8段，每段x是4个字符的十六进制值，每段x地址范围从0000 至 ffff，字母大小写等价。</p>
<p>其他两种短格式缩写：</p>
<ul>
<li>省略前导零 通过省略前导零指定IPV6地址，例如，IPV6地址1050:0000:0000:0000:0005:0600:300c:326b 可写作 1050:0000:0:0:5:600:300c:326b 或 1050:0000:0:0000:5:600:300c:326b，都算为等价地址，但每一段需缩写完整，例如0030只能省略成30，不能省略成030.</li>
<li>双冒号 通过双冒号(::)替换一系列零（不小于2段）来指定IPV6地址。例如，IPV6地址ff06:0:0:0:1:0:0:c3 可写作ff06::1:0:0:c3 或ff06:0:0:0:1::c3，都算作等价地址。一个IP地址中只可以使用一次双冒号，并要求一系列零缩写完整，例如0:0:0:0 只能省略成 ::，不能省略成0::或0::0等。</li>
</ul>
<p>输入：一个字符串，合法的IPV6地址</p>
<p>输出：一个正整数，表示所有等价地址的数量</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">样例<span class="number">1</span></span><br><span class="line">输入：<span class="number">1050:0:1000:1234:12:3450:1234:3269</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：需要考虑省略前导零，等价地址有：</span><br><span class="line"><span class="number">1050:0:1000:1234:12:3450:1234:3269</span></span><br><span class="line"><span class="number">1050:0000:1000:1234:12:3450:1234:3269</span></span><br><span class="line"><span class="number">1050:0:1000:1234:0012:3450:1234:3269</span></span><br><span class="line"><span class="number">1050:0000:1000:1234:0012:3450:1234:3269</span></span><br><span class="line"></span><br><span class="line">样例<span class="number">2</span></span><br><span class="line">输入：<span class="number">1050:0:0:1234:6789:3450:3333:3261</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：需要考虑省略前导零和双冒号，等价地址有：</span><br><span class="line"><span class="number">1050:0:0:1234:6789:3450:3333:3261</span></span><br><span class="line"><span class="number">1050:0000:0:1234:6789:3450:3333:3261</span></span><br><span class="line"><span class="number">1050:0:0000:1234:6789:3450:3333:3261</span></span><br><span class="line"><span class="number">1050:0000:0000:1234:6789:3450:3333:3261</span></span><br><span class="line"><span class="number">1050::1234:6789:3450:3333:3261</span></span><br><span class="line"></span><br><span class="line">样例<span class="number">3</span></span><br><span class="line">输入：<span class="number">1050:0:1000:1234:a000:3450:1234:3269</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：需要考虑省略前导零和字母大小写，等价地址有：</span><br><span class="line"><span class="number">1050:0:1000:1234:a000:3450:1234:3269</span></span><br><span class="line"><span class="number">1050:0000:1000:1234:a000:3450:1234:3269</span></span><br><span class="line"><span class="number">1050:0:1000:1234:A000:3450:1234:3269</span></span><br><span class="line"><span class="number">1050:0000:1000:1234:A000:3450:1234:3269</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<ol>
<li>字符串分割，方便后续操作，末尾加上一个’:’，分割后存储在字符串数组v里边；</li>
<li>用一个tmp临时数组存储v，清空v，遍历tmp数组，将全为0的地址项置为”0”，遇到双冒号展开（某一地址项的长度为0），检测地址项长度和8的距离差，补全”0”。</li>
<li>枚举可能的双冒号：<ol>
<li>每一次可能的情况（哪几个0缩起来）进行一次枚举</li>
<li>每次枚举，我们需要考虑，前导零和大小写，前导零（<code>*2</code>），大小写（<code>*2</code>）</li>
</ol>
</li>
<li>累加所有的枚举</li>
</ol>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回地址的组合数</span></span><br><span class="line"><span class="comment">// 遍历字符串数组，如果地址项长度小于4或地址项以0开头，res*=2，</span></span><br><span class="line"><span class="comment">// 遍历地址项，遇到字母（非数字字符）res*=2.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve2</span><span class="params">(vector&lt;string&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(string str : v) &#123;</span><br><span class="line">		<span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> || str.<span class="built_in">size</span>() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">			res *= <span class="number">2</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">char</span> c : str) &#123;</span><br><span class="line">			<span class="keyword">if</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span> ) res *= <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回地址分割后的数组，(pre, i)之间的地址不保留，保留[0, pre]和[i, n]的地址</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">getSub</span><span class="params">(vector&lt;string&gt;&amp; v, <span class="keyword">int</span> pre, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">	vector&lt;string&gt; tmp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= pre; j++) &#123;</span><br><span class="line">		tmp.<span class="built_in">push_back</span>(v[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(; i &lt; v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		tmp.<span class="built_in">push_back</span>(v[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// puts(&quot;hello&quot;);</span></span><br><span class="line">	str += <span class="string">&quot;:&quot;</span>;</span><br><span class="line">	vector&lt;string&gt; v;</span><br><span class="line">	string tmpStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 字符串分割，得到输入的地址</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> c : str) &#123;</span><br><span class="line">		<span class="keyword">if</span>(c == <span class="string">&#x27;:&#x27;</span>) &#123;</span><br><span class="line">			v.<span class="built_in">push_back</span>(tmpStr);</span><br><span class="line">			tmpStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			tmpStr += c;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;string&gt; tmp = v;</span><br><span class="line">	v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入的地址进行调整，全为0的地址项变为&quot;0&quot;，输入含有双冒号的话进行展开</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(tmp[i] == <span class="string">&quot;00&quot;</span> || tmp[i] == <span class="string">&quot;000&quot;</span> || tmp[i] == <span class="string">&quot;0000&quot;</span>)&#123;</span><br><span class="line">			tmp[i] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(tmp[i].<span class="built_in">size</span>()) v.<span class="built_in">push_back</span>(tmp[i]);</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> cnt = <span class="number">8</span> - tmp.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span>(cnt--) v.<span class="built_in">push_back</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> pre = <span class="number">-1</span>; <span class="comment">//标记前一个不为&quot;0&quot;的地址项的位置</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(v[i] != <span class="string">&quot;0&quot;</span>) &#123; <span class="comment">// 地址项不为&quot;0&quot;</span></span><br><span class="line">			<span class="keyword">if</span>(i - pre &gt; <span class="number">2</span>) &#123; <span class="comment">// 可以写为双冒号的情形</span></span><br><span class="line">				tmp = <span class="built_in">getSub</span>(v, pre, i); <span class="comment">// 进行地址分割，删去地址为&quot;0&quot;项</span></span><br><span class="line">				ans += <span class="built_in">solve2</span>(tmp); <span class="comment">// 加上该地址下的组合数</span></span><br><span class="line">			&#125;</span><br><span class="line">			pre = i; <span class="comment">// 更新pre</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(v.<span class="built_in">size</span>()- pre &gt; <span class="number">2</span>) &#123; <span class="comment">// 末尾项有连续的0，即双冒号在末尾位置</span></span><br><span class="line">		tmp = <span class="built_in">getSub</span>(v, pre, v.<span class="built_in">size</span>());</span><br><span class="line">		ans += <span class="built_in">solve2</span>(tmp);</span><br><span class="line">	&#125;</span><br><span class="line">	ans += <span class="built_in">solve2</span>(v); <span class="comment">// 加上不考虑双冒号的地址组合情况</span></span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string str;</span><br><span class="line">	cin &gt;&gt; str;</span><br><span class="line">	<span class="comment">// str = &quot;1050:0:1000:1234:12:3450:1234:3269&quot;;</span></span><br><span class="line">	<span class="comment">// str = &quot;1050:0:0:1234:6789:3450:3333:3261&quot;;</span></span><br><span class="line">	<span class="comment">// str = &quot;1050:0:1000:1234:a000:3450:1234:3269&quot;;</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">solve</span>(str) &lt;&lt; endl;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="游览小镇"><a href="#游览小镇" class="headerlink" title="游览小镇"></a>游览小镇</h2><p>需要规划一条路线，保证能游览完所有的小镇，同时走的路程（走过的路径之和）最短。</p>
<p>假定：</p>
<ol>
<li>有些小镇之间有路径直接相连，有些小镇之间不直接相连；所有小镇都至少跟其他一个小镇相连；</li>
<li>可以在任意小镇出发和停止，可以多次访问同一个小镇；</li>
<li>路径无方向（可以从A到B，也可以从B到A）；可以多次通过同一条路径；相连接的小镇间的路径长度相当；</li>
<li>小镇编号从1开始。</li>
</ol>
<p>输入</p>
<ol>
<li>假定有N个小镇（3&lt;=N&lt;=16），则输入N+1行数据</li>
<li>第一行输入N，表示小镇的数量；接下去N行是各个小镇的邻接信息。</li>
<li>第i+1行数据里包含n(1&lt;=n&lt;=N-1)个数据，且不会包含i本身，即不存在从i到i小镇的路径。</li>
<li>如果存在联通i(1&lt;=i&lt;=N)与j(1&lt;=i&lt;=N)的路径，那么这条路径在第i+1行和第j+1行都会出现。</li>
</ol>
<p>输出</p>
<p>能够访问所有小镇的最短路径长度；假如不存在可以访问所有小镇的路径，则输出-1</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">样例1</span><br><span class="line">输入：</span><br><span class="line">5</span><br><span class="line">2 4</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">1<span class="number"> 3 </span>5</span><br><span class="line">4</span><br><span class="line">输出：</span><br><span class="line">4</span><br><span class="line">解释：一个5个点。1号与2、4相连，2号与1、3相连，3号与2、4相连，4号与1、3、5号相连，5号与4号相连。</span><br><span class="line"></span><br><span class="line">样例2</span><br><span class="line">输入：</span><br><span class="line">5</span><br><span class="line">2 4</span><br><span class="line">1 </span><br><span class="line">4</span><br><span class="line">1<span class="number"> 3 </span>5</span><br><span class="line">4</span><br><span class="line">输出：</span><br><span class="line">5</span><br><span class="line">解释：一个5个点。1号与2、4相连，2号与1相连，3号与4相连，4号与1、3、5号相连，5号与4号相连。</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>状态压缩dp，用一个二进制数位上的0或1，代表不同的状态（取1代表位于集合中）。用二进制表示所有物品的放与不放的情况，这些二进制用十进制表示就一个维度，这个维度能表示所有物品放与不放的情况，即状态压缩。</p>
<p>假设每个边的权值都为1，权值矩阵w存储每个节点直接的连接情况，两点之间存在边则权值为1，不存在边则权值为inf。</p>
<p>初始化状态矩阵<code>dp[i][j]</code>，i表示状态，j表示结尾的地方。</p>
<p>求最短的路径和，采用Floyd算法求最短路径，是一种插点法，通过3重循环，k为中转点，v为起点，w为终点，循环比较<code>D[v][w]</code> 和 <code>D[v][k] + D[k][w] </code>最小值，如果<code>D[v][k] + D[k][w] </code>为更小值，则把<code>D[v][k] + D[k][w] </code>覆盖保存在<code>D[v][w]</code>中。</p>
<p>dp转移方程，首先枚举状态，再枚举这次要访问的点，第j位置上为1，循环遍历点k，如果k这个点在当前的状态（j不在状态集合）中，比较当前状态与从k这个点的状态转移过来的最小值，即<code>dp[i][j]=min(dp[i-(1&lt;&lt;j)][k]+w[k][j],dp[i][j]);</code></p>
<p>循环遍历结尾点i，更新路径和最小值<code>mn = min(mn,dp[(1&lt;&lt;n)-1][i])</code>，<code>dp[(1&lt;&lt;n)-1][i]</code>指的是结尾点为i，n位集合上全为1，代表所有节点都访问过。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1</span>&lt;&lt;<span class="number">20</span>][<span class="number">50</span>];<span class="comment">//i是状态，j是结尾的地方</span></span><br><span class="line"><span class="keyword">int</span> w[<span class="number">50</span>][<span class="number">50</span>]; <span class="comment">//边的权值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="built_in">memset</span>(w,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> w); <span class="comment">//将边的权值初始化为无穷大</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        string str;</span><br><span class="line">        <span class="built_in">getline</span>(cin, str);</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; str.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[j] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//设置i与tmp-1的边，把点的id设为从0开始</span></span><br><span class="line">                w[i][tmp - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                w[tmp - <span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">                tmp = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//保存点的序号比如输入的是13</span></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                那就是 tmp = 0*10 + 1</span></span><br><span class="line"><span class="comment">                           = 1*10 + 3</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                tmp = tmp * <span class="number">10</span> + (str[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp) &#123;</span><br><span class="line">            <span class="comment">//设置边，节点编号是从1开始的，因此需要减一</span></span><br><span class="line">            w[tmp - <span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">            w[i][tmp - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Folyd求最短路</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(w[i][j] &gt; w[i][k] + w[k][j])&#123;</span><br><span class="line">                    w[i][j] = w[i][k] + w[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化dp数组无穷大</span></span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="comment">//设置起点为i的坐标为0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i++) &#123;</span><br><span class="line">        dp[<span class="number">1</span> &lt;&lt; i][i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//状压dp,枚举状态</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1</span>&lt;&lt;n); i++)&#123;</span><br><span class="line">        <span class="comment">//枚举这次要访问的点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((i &gt;&gt; j) &amp; <span class="number">1</span>)&#123; <span class="comment">// 第j位置为1</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)&#123;</span><br><span class="line">                    <span class="comment">//k这个点在当前状态中</span></span><br><span class="line">                    <span class="keyword">if</span>(((i - (<span class="number">1</span>&lt;&lt;j)) &gt;&gt; k) &amp; <span class="number">1</span>)&#123; <span class="comment">// 第k位置为1</span></span><br><span class="line">                        <span class="comment">//就是从排除k这个点的状态转移过来更小还是就是当前状态的更小</span></span><br><span class="line">                        dp[i][j] = <span class="built_in">min</span>(dp[i - (<span class="number">1</span>&lt;&lt;j)][k] + w[k][j], dp[i][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mn = <span class="number">100000000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">    	mn=<span class="built_in">min</span>(mn, dp[(<span class="number">1</span>&lt;&lt;n) - <span class="number">1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mn == <span class="number">100000000</span>)  &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout&lt;&lt;mn&lt;&lt;endl;    </span><br><span class="line">    &#125;                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>面试复习总结</title>
    <url>/posts/65fbd269.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="Linux网络编程相关"><a href="#Linux网络编程相关" class="headerlink" title="Linux网络编程相关"></a>Linux网络编程相关</h2><h3 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h3><h4 id="用户空间与内核空间"><a href="#用户空间与内核空间" class="headerlink" title="用户空间与内核空间"></a>用户空间与内核空间</h4><p>对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。</p>
<p>为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。在Linux系统下：</p>
<ul>
<li>内核空间：最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用。</li>
<li>用户空间：将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用。</li>
</ul>
<h4 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h4><p>进程切换：为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：</p>
<ol>
<li>保存处理机上下文，包括程序计数器和其他寄存器。</li>
<li>更新PCB信息。</li>
<li>把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。</li>
<li>选择另一个进程执行，并更新其PCB。</li>
<li>更新内存管理的数据结构。</li>
<li>恢复处理机上下文。</li>
</ol>
<p>进程的切换<strong>很耗资源</strong>。</p>
<h4 id="进程阻塞"><a href="#进程阻塞" class="headerlink" title="进程阻塞"></a>进程阻塞</h4><p>正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。</p>
<p>进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。<strong>当进程进入阻塞状态，是不占用CPU资源的。</strong></p>
<h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><p>适用于UNIX，Linux系统。文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述<strong>指向文件的引用</strong>的抽象化概念。</p>
<p>文件描述符在形式上是一个<strong>非负整数</strong>。实际上，它是一个<strong>索引值</strong>，指向<strong>内核为每一个进程所维护的该进程打开文件的记录表</strong>。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。</p>
<h4 id="缓存IO"><a href="#缓存IO" class="headerlink" title="缓存IO"></a>缓存IO</h4><p>缓存 I/O 又被称作标准 I/O，大多数文件系统的默认 I/O 操作都是缓存 I/O。</p>
<p>在Linux的缓存 I/O 机制中，操作系统会将 I/O 的数据缓存在文件系统的<strong>页缓存（page cache）</strong>中，也就是说，<strong>数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间</strong>。</p>
<p><strong>缓存IO缺点：</strong>数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。</p>
<h3 id="IO模式"><a href="#IO模式" class="headerlink" title="IO模式"></a>IO模式</h3><p>对于一次IO访问（以read举例），会经历两个阶段：</p>
<ul>
<li>等待数据准备 (Waiting for the data to be ready)</li>
<li>将数据从内核拷贝到进程中 (Copying the data from the kernel to the process)</li>
</ul>
<p>Linux系统产生了下面五种网络模式：</p>
<ul>
<li>阻塞IO</li>
<li>非阻塞IO</li>
<li>IO多路复用</li>
<li>信号驱动IO （实际中不常用）</li>
<li>异步IO</li>
</ul>
<h4 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h4><p>Linux系统中默认情况下，所有的socket都是阻塞的，一个典型的读操作流程大概是这样：</p>
<p><img src="/20220923/bVm1c3" alt="clipboard.png"></p>
<p>当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据。</p>
<p>数据被拷贝到操作系统内核的缓冲区中是需要一个过程的。而在用户进程这边，整个进程会被阻塞（当然，是进程自己选择的阻塞）。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。</p>
<p><strong>阻塞IO特点</strong>：在IO执行的两个阶段都被阻塞了。</p>
<h4 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h4><p>设置socket为非阻塞的，当对一个非阻塞的socket执行读操作的流程：</p>
<p><img src="/20220923/bVm1c4" alt="clipboard.png"></p>
<p>当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。</p>
<p>一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。</p>
<p><strong>非阻塞IO特点：</strong>用户进程需要<strong>不断的主动询问</strong>kernel数据好了没有。</p>
<h4 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h4><p>IO多路复用主要指的就是select、poll、epoll这几个关键字。</p>
<p>I/O多路复用就是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是<strong>同步I/O</strong>，因为他们都需要在读写事件就绪后，自己负责进行读写，也就是说这个<strong>读写过程是阻塞的</strong>，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</p>
<p><img src="/20220923/bVm1c5" alt="clipboard.png"></p>
<p><strong>当用户进程调用了select，那么整个进程会被阻塞</strong>，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p>
<p><strong>IO多路复用的特点：</strong>通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。</p>
<p>和非阻塞IO相比，用select的优势在于它可以同时处理多个connection。select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</p>
<p>实际中，对于每一个socket，一般都设置成为非阻塞的，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</p>
<h4 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h4><p>Linux下的异步IO使用较少。</p>
<p><img src="/20220923/bVm1c8" alt="clipboard.png"></p>
<p>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。</p>
<p>然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p>
<p><strong>各个IO Model的比较如图所示：</strong></p>
<p><img src="/20220923/bVm1c9" alt="clipboard.png"></p>
<p>调用阻塞IO会一直阻塞住对应的进程直到操作完成，而非阻塞IO在内核还准备数据的情况下会立即返回。</p>
<p>非阻塞IO虽然大部分时间都不会被阻塞，但它仍要求进程去主动的check，当数据准备完成后，也需要进程主动的再次调用recvfrom来将数据拷贝到用户内存。而异步IO完全不同，它就像是用户进程将整个IO操作交给了他人（kernel）完成，然后他人做完后发信号通知。在此期间，用户进程不需要去检查IO操作的状态，也不需要主动的去拷贝数据。</p>
<h3 id="IO复用select、poll、epoll详解"><a href="#IO复用select、poll、epoll详解" class="headerlink" title="IO复用select、poll、epoll详解"></a>IO复用select、poll、epoll详解</h3><h4 id="select模式"><a href="#select模式" class="headerlink" title="select模式"></a>select模式</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span> <span class="params">(<span class="keyword">int</span> n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)</span></span>;</span><br></pre></td></tr></table></figure>

<p>select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述符就绪（有数据可读可写或者有异常），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以 通过遍历fdset，来找到就绪的描述符。</p>
<p>优点：几乎在所有的平台上支持，良好跨平台支持。</p>
<p>缺点：单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但 是这样也会造成效率的降低。</p>
<h4 id="poll模式"><a href="#poll模式" class="headerlink" title="poll模式"></a>poll模式</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span> <span class="params">(struct pollfd *fds, <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd; <span class="comment">/* file descriptor */</span></span><br><span class="line">    <span class="keyword">short</span> events; <span class="comment">/* requested events to watch */</span></span><br><span class="line">    <span class="keyword">short</span> revents; <span class="comment">/* returned events witnessed */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>不同于select使用三个位图来表示fdset，poll使用一个 pollfd的指针实现。</p>
<p>pollfd结构包含了要监视的event和发生的event，不再使用select“参数-值”传递的方式。</p>
<p>同时，pollfd并没有最大数量限制（但是数量过大后性能也是会下降）。<strong>和select函数一样，poll返回后，需要轮询pollfd来获取就绪的描述符。</strong></p>
<p>从上面看，select和poll都需要在返回后，通过遍历文件描述符来获取已经就绪的socket。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此<strong>随着监视的描述符数量的增长，其效率也会线性下降。</strong></p>
<h4 id="epoll模式"><a href="#epoll模式" class="headerlink" title="epoll模式"></a>epoll模式</h4><p>相对于select和poll来说，epoll更加灵活，没有描述符限制。<strong>epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。</strong></p>
<h5 id="epoll操作过程："><a href="#epoll操作过程：" class="headerlink" title="epoll操作过程："></a><strong>epoll操作过程</strong>：</h5><p>epoll操作过程需要三个接口，分别如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span>；<span class="comment">//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span>；</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event * events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>int epoll_create(int size);</strong></p>
<p>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大，这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值，<strong>参数size并不是限制了epoll所能监听的描述符最大个数，只是对内核初始分配内部数据结构的一个建议。</strong></p>
<p>返回值：<strong>额外的文件描述符，唯一标识内核中的事件表。</strong></p>
<p><strong>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；</strong></p>
<p>对指定描述符fd执行op操作。</p>
<ul>
<li>epfd：是epoll_create()的返回值。额外的文件描述符，唯一标识内核中的事件表。</li>
<li>op：表示op操作，用三个宏来表示：添加EPOLL_CTL_ADD，删除EPOLL_CTL_DEL，修改EPOLL_CTL_MOD。分别添加、删除和修改对fd的监听事件。</li>
<li>fd：是需要监听的fd（文件描述符）</li>
<li>epoll_event：指定事件，是告诉内核需要监听什么事，struct epoll_event结构如下：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">  <span class="keyword">__uint32_t</span> events;  <span class="comment">/* Epoll events */</span></span><br><span class="line">  <span class="keyword">epoll_data_t</span> data;  <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//events可以是以下几个宏的集合：</span></span><br><span class="line">EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；</span><br><span class="line">EPOLLOUT：表示对应的文件描述符可以写；</span><br><span class="line">EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；</span><br><span class="line">EPOLLERR：表示对应的文件描述符发生错误；</span><br><span class="line">EPOLLHUP：表示对应的文件描述符被挂断；</span><br><span class="line">EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。</span><br><span class="line">EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</span><br></pre></td></tr></table></figure>

<p>返回值：成功返回0，失败返回-1并设置errno。</p>
<p><strong>int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</strong></p>
<p>在一段超时时间内，等待一组文件描述符上的事件，等待epfd上的io事件，最多返回maxevents个事件（最多监听多少个事件，必须大于0）。</p>
<p>参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。</p>
<p>所有就绪的事件从内核事件表（epfd指定）复制到events指向的数组，events输出 epoll_wait 检测到的就绪事件 ，而不像select和poll的数组参数，既用于传入用户注册添加的事件，又用于输出内核检测到的就绪事件。这极大提高了应用程序索引就绪文件描述符的效率。</p>
<h5 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h5><p>epoll对文件描述符的操作有两种模式：<strong>LT（level trigger）水平触发</strong> 和<strong>ET（edge trigger）边缘触发</strong>。LT模式是默认模式，LT模式与ET模式的区别如下：</p>
<ul>
<li><strong>LT模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，<strong>应用程序可以不立即处理该事件</strong>。下次调用epoll_wait时，会再次响应应用程序并通知此事件。</li>
<li><strong>ET模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，<strong>应用程序必须立即处理该事件</strong>。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。</li>
</ul>
<ol>
<li>LT模式</li>
</ol>
<p><strong>LT(level triggered)是缺省的工作方式，并且同时支持阻塞和非阻塞socket。</strong>在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的。</p>
<ol start="2">
<li>ET模式</li>
</ol>
<p><strong>ET(edge-triggered)是高速工作方式，只支持非阻塞socket。</strong>在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了(比如，你在发送，接收或者接收请求，或者发送接收的数据少于一定量时导致了一个EWOULDBLOCK 错误）。但是请注意，如果一直不对这个fd作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once)</p>
<p><strong>ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</strong></p>
<p><strong>epoll的优点</strong>主要是以下几个方面：</p>
<p>1、<strong>监视的描述符数量不受限制，它所支持的FD上限是最大可以打开文件的数目</strong>，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左 右，具体数目可以cat /proc/sys/fs/file-max察看,一般来说这个数目和系统内存关系很大。select的最大缺点就是进程打开的fd是有数量限制的。这对 于连接数量比较大的服务器来说根本不能满足。虽然也可以选择多进程的解决方案( Apache就是这样实现的)，不过虽然linux上面创建进程的代价比较小，但仍旧是不可忽视的，加上进程间数据同步远比不上线程间同步的高效，所以也不是一种完美的方案。</p>
<p>2、IO的效率不会随着监视fd的数量的增长而下降。epoll不同于select和poll轮询的方式，而是<strong>通过每个fd定义的回调函数来实现的。只有就绪的fd才会执行回调函数</strong>。</p>
<p>如果没有大量的idle -connection(空闲连接)或者dead-connection，epoll的效率并不会比select/poll高很多，但是当遇到大量的idle- connection，就会发现epoll的效率大大高于select/poll。</p>
<h4 id="三组IO复用函数的比较"><a href="#三组IO复用函数的比较" class="headerlink" title="三组IO复用函数的比较"></a>三组IO复用函数的比较</h4><p>select、poll、epoll三组IO复用系统调用，都能同时监听多个文件描述符，等待timeout指定的超时时间，直到一个或多个文件描述符上有事件发生时返回，返回值是就绪的文件描述符的数量，返回0表示没有事件发生。这三组函数都是通过某种结构体变量来告诉内核监听哪些文件描述符上的哪些事件，并使用该结构体类型的参数来获取内核处理的结果。</p>
<ul>
<li>select的参数类型fd_set，<strong>没有将文件描述符与事件绑定</strong>，仅仅是一个文件描述符的集合，因此，select需提供3个这种类型的参数来分别传入和输出可读、可写、异常等事件。这使得select不能处理更多类型的事件，又由于内核对fd_set集合的在线修改，应用程序下次调用select前需要重置这3个fd_set集合。</li>
<li>poll的参数类型pollfd，它把文件描述符和事件都定义在其中，统一处理所有事件类型，只需一个事件集参数。内核每次修改的都是pollfd结构体中的revents成员（反馈就绪的事件），而events成员（用户传入的感兴趣事件）保持不变，因此下次调用poll时应用程序无须重置pollfd类型的事件集参数。由于每次<strong>select和poll调用都是返回整个用户注册添加的事件集合（其中包括就绪与未就绪的），所以应用程序索引就绪文件描述符的时间复杂度为O(n)。</strong>select和poll都只能工作在相对低效的<strong>LT模式</strong>，实现原理上采用的都是<strong>轮询</strong>的方式检测就绪事件，每次调用都要扫描整个注册文件描述符集合，并将其中就绪的文件描述符返回给用户程序，所以**时间复杂度为O(n)**。</li>
<li>epoll在内核中维护一个事件表，直接管理用户感兴趣的所有事件，并提供一个独立的系统调用epoll_ctl来控制往其中添加、修改、删除事件。每次<strong>epoll_wait调用都是直接从内核事件表中取得用户注册添加的事件，而无须反复从用户空间读入这些事件</strong>。epoll_wait系统调用的events参数仅用来返回就绪的事件，这使得<strong>应用程序索引就绪文件描述符的时间复杂度为O(1)。</strong>epoll可以工作在<strong>ET高效模式，</strong>还支持EPOLLONESHOT事件，进一步减少可读、可写和异常等事件被触发的次数。实现原理上采用的是<strong>回调</strong>的方式检测就绪事件，内核检测到就绪的文件描述符时，将触发回调函数，回调函数将该文件描述符上对应的事件插入到内核就绪事件队列，内核最后在合适的时机将该就绪队列中的内容拷贝到用户空间。因此，epoll_wait无须轮询整个文件描述符集合，**时间复杂度为O(1)**。</li>
</ul>
<h2 id="Mysql数据库"><a href="#Mysql数据库" class="headerlink" title="Mysql数据库"></a>Mysql数据库</h2><h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><p><strong>事务：</strong>一组数据库操作命令（sql语句），其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么都执行，要么都不执行，因此事务是一个不可分割的工作逻辑单元。</p>
<p>事务是保持 <strong>逻辑数据一致性</strong> 和 <strong>可恢复性</strong> 的重要利器。而锁是实现事务的关键，可以保证事务的完整性和并发性。</p>
<h4 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h4><p>四个特性ACID，<strong>关系型数据库</strong> 需要遵循 ACID 规则。</p>
<ul>
<li>原子性：事务是最小的执行单位，不可分割的（原子的）。事务的原子性确保动作要么全部执行，要么全部不执行。</li>
<li>一致性：当事务完成时，数据必须处于一致状态，多个事务对同一个数据读取的结果是相同的。</li>
<li>隔离性：<strong>并发访问数据库</strong> 时，一个用户的事务不被其他事务所干扰，各个事务不干涉内部的数据。</li>
<li>持久性：一个事务被提交之后，它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li>
</ul>
<p><strong>事务特性的实现：</strong></p>
<ul>
<li>DBMS 采用 日志 来保证事务的 原子性、一致性 和 持久性。日志记录了事务对数据库所做的更新，如果某个事务在执行过程中发生错误，就可以根据日志，撤销事务对数据库已做的更新，使数据库退回到执行事务前的初始状态。</li>
<li>DBMS 采用 锁机制 来实现事务的隔离性。当多个事务同时更新数据库中相同的数据时，只允许 持有锁的事务 能更新该数据，其他事务必须等待，直到前一个事务释放了锁，其他事务才有机会更新该数据。</li>
</ul>
<h4 id="事务之间的相互影响"><a href="#事务之间的相互影响" class="headerlink" title="事务之间的相互影响"></a>事务之间的相互影响</h4><p>在同时处理多个事务的时候，就可能出现脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）的问题。</p>
<ul>
<li>脏读：一个事务读到了另一个事务未提交的数据。</li>
<li>不可重复读：在一个事务内多次读取同一个数据，出现前后两次读到的数据不一样的情况。这是因为在此间隔内有其他事务对数据进行了修改。</li>
<li>幻读：当事务 <strong>不是独立执行时</strong> 发生的一种现象。在一个事务内多次查询某个符合查询条件的「记录数量」，出现前后两次查询到的记录数量不一样的情况。</li>
<li>丢失更新：两个事务同时读取同一条记录，事务 A 先修改记录，事务 B 也修改记录（B 是不知道 A 修改过），当 B 提交数据后， 其修改结果覆盖了 A 的修改结果，导致事务 A 更新丢失。</li>
</ul>
<h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><p>SQL 标准定义了 4 种不同的事务隔离级。即 <strong>并发事务对同一资源的读取深度层次</strong>，由低到高依次是 <strong>读取未提交</strong>（READ-UNCOMMITTED）、<strong>读取已提交</strong>（READ-COMMITTED）、可重复读（REPEATABLE-READ）、<strong>可串行化</strong>（SERIALIZABLE）</p>
<ul>
<li>读取未提交：指一个事务还没提交时，它做的变更就能被其他事务看到；最低的隔离级别。</li>
<li>读取已提交：指一个事务提交之后，它做的变更才能被其他事务看到；可以解决 <strong>脏读问题</strong>。</li>
<li>可重复读：指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，<strong>MySQL InnoDB 引擎的默认隔离级别</strong>；可以解决 <strong>脏读、不可重复读</strong>。</li>
<li>串行化：会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；隔离级别最高，完全服从 ACID，牺牲了系统的并发性。</li>
</ul>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="索引数据结构"><a href="#索引数据结构" class="headerlink" title="索引数据结构"></a>索引数据结构</h4><p>根据结构分类：</p>
<ul>
<li>B+树索引： <strong>平衡树索引</strong>，是 MySQL 数据库中使用最频繁的索引类型，MySQL、Oracle 和 SQL Server 数据库默认的都是 B+ 树索引。</li>
<li>Hash索引：采用一定的 <strong>哈希算法</strong>，将数据库字段数据转换成定长的 Hash 值，与这条数据的行指针一并存入 Hash 表的对应位置，如果发生 Hash 碰撞（两个不同关键字的 Hash 值相同），则在对应 Hash 键下以 链表形式 存储。</li>
<li>位图索引：为存储在某列中的每个值生成一个位图，查询时一行行扫描所有记录。位图索引适合静态数据，而不适合索引频繁更新的列。</li>
</ul>
<p>根据字段特性：</p>
<ul>
<li><p>主键索引：建立在主键字段上的索引，通常在创建表的时候一起创建，一张表最多只有一个主键索引，索引列的值不允许有空值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name  (</span><br><span class="line">  ....</span><br><span class="line">  PRIMARY KEY (index_column_1) USING BTREE</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>唯一索引：建立在 UNIQUE 字段上的索引，一张表可以有多个唯一索引，索引列的值必须唯一，但是允许有空值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name  (</span><br><span class="line">  ....</span><br><span class="line">  UNIQUE KEY(index_column_1,index_column_2,...) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>建表后，如果要创建唯一索引，使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE UNIQUE INDEX index_name</span><br><span class="line">ON table_name(index_column_1,index_column_2,...); </span><br></pre></td></tr></table></figure></li>
<li><p>普通索引：建立在普通字段上的索引，既不要求字段为主键，也不要求字段为 UNIQUE。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name  (</span><br><span class="line">  ....</span><br><span class="line">  INDEX(index_column_1,index_column_2,...) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>建表后，如果要创建普通索引，使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX index_name</span><br><span class="line">ON table_name(index_column_1,index_column_2,...); </span><br></pre></td></tr></table></figure></li>
<li><p>前缀索引：对字符类型字段的前几个字符建立的索引，而不是在整个字段上建立的索引，前缀索引可以建立在字段类型为 char、 varchar、binary、varbinary 的列上。使用前缀索引的目的是为了减少索引占用的存储空间，提升查询效率。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">    column_list,</span><br><span class="line">    INDEX(column_name(length))</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>建表后，如果要创建前缀索引，使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX index_name</span><br><span class="line">ON table_name(column_name(length)); </span><br></pre></td></tr></table></figure></li>
</ul>
<p>按字段个数：</p>
<ul>
<li><p>单列索引：建立在单列上的索引称为单列索引，比如主键索引；</p>
</li>
<li><p>建立在多列上的索引称为联合索引；使用联合索引时，存在<strong>最左匹配原则</strong>，也就是按照最左优先的方式进行索引的匹配。MySQL 会一直向右匹配直到遇到 <strong>范围查询</strong>（&gt;、&lt;、between、like）就停止匹配，<strong>范围列可以用到联合索引，但是范围列后面的列无法用到联合索引</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX index_product_no_name ON product(product_no, name);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/20220923/%E7%B4%A2%E5%BC%95%E6%80%BB%E7%BB%93.drawio.png" alt="img"></p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>根据加锁范围，可以分为全局锁、表级锁和行锁。</p>
<h4 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h4><p>要使用全局锁，则要执行这条命：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush tables with read lock</span><br></pre></td></tr></table></figure>

<p>执行后，<strong>整个数据库就处于只读状态了</strong>，这时其他线程执行以下操作，都会被阻塞：</p>
<ul>
<li>对数据的增删改操作，比如 insert、delete、update等语句；</li>
<li>对表结构的更改操作，比如 alter table、drop table 等语句。</li>
</ul>
<p>如果要释放全局锁，则要执行这条命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unlock tables</span><br></pre></td></tr></table></figure>

<p>当然，当会话断开了，全局锁会被自动释放。</p>
<p>应用场景：全局锁主要应用于做<strong>全库逻辑备份</strong>，这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。</p>
<p>缺点：加上全局锁，意味着整个数据库都是只读状态。如果数据库里有很多数据，备份就会花费很多的时间，关键是备份期间，业务只能读数据，而不能更新数据，这样会造成业务停滞。</p>
<p>备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 <code>–single-transaction</code> 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。</p>
<p>InnoDB 存储引擎默认的事务隔离级别正是可重复读，因此可以采用这种方式来备份数据库。</p>
<p>但是，对于 MyISAM 这种不支持事务的引擎，在备份数据库时就要使用全局锁的方法。</p>
<h4 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h4><p>MySQL 里面表级别的锁有这几种：</p>
<ul>
<li>表锁；</li>
<li>元数据锁（MDL）;</li>
<li>意向锁；</li>
<li>AUTO-INC 锁；</li>
</ul>
<h5 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h5><p>如果我们想对学生表（t_student）加表锁，可以使用下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//表级别的共享锁，也就是读锁；</span><br><span class="line">lock tables t_student read;</span><br><span class="line"></span><br><span class="line">//表级别的独占锁，也就是写锁；</span><br><span class="line">lock tables t_stuent write;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，表锁除了会限制别的线程的读写外，也会限制本线程接下来的读写操作。</p>
<p>也就是说如果本线程对学生表加了「共享表锁」，那么本线程接下来如果要对学生表执行写操作的语句，是会被阻塞的，当然其他线程对学生表进行写操作时也会被阻塞，直到锁被释放。</p>
<p>要释放表锁，可以使用下面这条命令，会释放当前会话的所有表锁：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unlock tables</span><br></pre></td></tr></table></figure>

<p>另外，当会话退出后，也会释放所有表锁。</p>
<p>不过尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能，<strong>InnoDB 实现了颗粒度更细的行级锁</strong>。</p>
<h5 id="元数据锁（MDL）"><a href="#元数据锁（MDL）" class="headerlink" title="元数据锁（MDL）"></a>元数据锁（MDL）</h5><p>不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：</p>
<ul>
<li>对一张表进行 CRUD 操作时，加的是 <strong>MDL 读锁</strong>；</li>
<li>对一张表做结构变更操作的时候，加的是 <strong>MDL 写锁</strong>；</li>
</ul>
<p>MDL 是在事务提交后才会释放，这意味着<strong>事务执行期间，MDL 是一直持有的</strong>。</p>
<p>申请 MDL 锁的操作会形成一个队列，队列中<strong>写锁获取优先级高于读锁</strong>，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。</p>
<h5 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h5><ul>
<li>在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；</li>
<li>在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；</li>
</ul>
<p>也就是，当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。</p>
<p>而普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。</p>
<p>不过，select 也是可以对记录加共享锁和独占锁的，具体方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//先在表上加上意向共享锁，然后对读取的记录加共享锁</span><br><span class="line">select ... lock in share mode;</span><br><span class="line"></span><br><span class="line">//先表上加上意向独占锁，然后对读取的记录加独占锁</span><br><span class="line">select ... for update;</span><br></pre></td></tr></table></figure>

<p><strong>意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（*lock tables … read*）和独占表锁（*lock tables … write*）发生冲突。</strong></p>
<p>表锁和行锁是满足读读共享、读写互斥、写写互斥的。</p>
<p><strong>意向锁的目的是为了快速判断表里是否有记录被加锁</strong>。</p>
<h5 id="AUTO-INC锁"><a href="#AUTO-INC锁" class="headerlink" title="AUTO-INC锁"></a>AUTO-INC锁</h5><p>在为某个字段声明 <code>AUTO_INCREMENT</code> 属性时，之后可以在插入数据时，可以不指定该字段的值，数据库会自动给该字段赋值递增的值，这主要是通过 AUTO-INC 锁实现的。</p>
<p>AUTO-INC 锁是特殊的表锁机制，锁<strong>不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放</strong>。</p>
<p><strong>在插入数据时，会加一个表级别的 AUTO-INC 锁</strong>，然后为被 <code>AUTO_INCREMENT</code> 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。</p>
<p>InnoDB 存储引擎提供了一种<strong>轻量级的锁</strong>来实现自增。</p>
<p>一样也是在插入数据的时候，会为被 <code>AUTO_INCREMENT</code> 修饰的字段加上轻量级锁，<strong>然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁</strong>。</p>
<h4 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h4><p>InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。</p>
<p>普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为<strong>锁定读</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//对读取的记录加共享锁</span><br><span class="line">select ... lock in share mode;</span><br><span class="line"></span><br><span class="line">//对读取的记录加独占锁</span><br><span class="line">select ... for update;</span><br></pre></td></tr></table></figure>

<p>上面这两条语句必须在一个事务中，<strong>因为当事务提交了，锁就会被释放</strong>，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit = 0。</p>
<p>共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。</p>
<p>行级锁的类型主要有三类：</p>
<ul>
<li>Record Lock，记录锁，也就是仅仅把一条记录锁上；</li>
<li>Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；</li>
<li>Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</li>
</ul>
<h5 id="Record-Lock"><a href="#Record-Lock" class="headerlink" title="Record Lock"></a>Record Lock</h5><p>Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：</p>
<ul>
<li>当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;</li>
<li>当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。</li>
</ul>
<h5 id="Gap-Lock"><a href="#Gap-Lock" class="headerlink" title="Gap Lock"></a>Gap Lock</h5><p>Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。</p>
<p>假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。</p>
<p>间隙锁虽然存在 X 型间隙锁和 S 型间隙锁，但是并没有什么区别，<strong>间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的</strong>。</p>
<h5 id="Next-Key-Lock"><a href="#Next-Key-Lock" class="headerlink" title="Next-Key Lock"></a>Next-Key Lock</h5><p>Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</p>
<p>假设，表中有一个范围 id 为（3，5] 的 next-key lock，那么其他事务即不能插入 id = 4 记录，也不能修改 id = 5 这条记录。next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。</p>
<p><strong>next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的</strong>。</p>
<h5 id="插入意向锁"><a href="#插入意向锁" class="headerlink" title="插入意向锁"></a>插入意向锁</h5><p>一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。</p>
<p>如果有的话，插入操作就会发生<strong>阻塞</strong>，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个<strong>插入意向锁</strong>，表明有事务想在某个区间插入新记录，但是现在处于等待状态。</p>
<p>插入意向锁名字虽然有意向锁，但是它并<strong>不是意向锁，它是一种特殊的间隙锁，属于行级别锁</strong>。</p>
<p>如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。</p>
<p>插入意向锁与间隙锁的另一个非常重要的差别是：尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。</p>
]]></content>
  </entry>
  <entry>
    <title>Redis学习记录（一）</title>
    <url>/posts/ccb8439b.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h2><p>Redis 是典型的键值数据库，自己构建一个简单的键值数据库，建立起<strong>系统观</strong>，对它的总体架构和关键模块有一个全局的认知，然后再深入到具体的技术点。</p>
<p>简单的键值数据库称为 SimpleKV。开始构建时考虑存什么样的数据，对数据有哪些操作，也就是<strong>数据模型</strong>和<strong>操作接口</strong>。</p>
<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>对于键值数据库，基本的数据模型是key-value模型。在 SimpleKV 中，key 是 String 类型，而 value 是基本数据类型，例如 String、整型等。对于实际生产环境中的键值数据库，value类型还可以是复杂类型。</p>
<p>对数据库选型时，一个重要考虑因素是它<strong>支持的value类型</strong>。例如，Memcached支持的 value 类型仅为 String 类型，而 Redis 支持的 value 类型包括了 String、哈希表、列表、集合等。<strong>Redis 能够在实际业务场景中得到广泛的应用，就是得益于支持多样化类型的 value。</strong></p>
<p>从使用的角度来说，不同 value 类型的实现，不仅可以支撑不同业务的数据需求，而且也隐含着不同数据结构在性能、空间效率等方面的差异，从而导致不同的 value 操作之间存在着差异。</p>
<h3 id="操作接口"><a href="#操作接口" class="headerlink" title="操作接口"></a>操作接口</h3><p>对数据的基本操作。基本操作无外乎增删改查。</p>
<p>SimpleKV 需要支持的 3 种基本操作，即 PUT、GET 和 DELETE。</p>
<ul>
<li>PUT：新写入或更新一个 key-value 对；</li>
<li>GET：根据一个 key 读取相应的 value 值；</li>
<li>DELETE：根据一个 key 删除整个 key-value 对。</li>
</ul>
<p>需要注意的是，<strong>有些键值数据库的新写/更新操作叫 SET</strong>。新写入和更新虽然是用一个操作接口，但在实际执行时，会根据 key 是否存在而执行相应的新写或更新流程。</p>
<p>在实际的业务场景中，我们经常会碰到这种情况：查询一个用户在一段时间内的访问记录。这种操作在键值数据库中属于 SCAN 操作，即<strong>根据一段 key 的范围返回相应的 value 值</strong>。</p>
<p>因此，<strong>PUT/GET/DELETE/SCAN 是一个键值数据库的基本操作集合</strong>。</p>
<p>对于一个具体的键值数据库而言，你可以通过查看操作文档，了解其详细的操作接口。</p>
<h3 id="保存位置"><a href="#保存位置" class="headerlink" title="保存位置"></a>保存位置</h3><p>完成构造数据模型与操作接口，进一步，一个重要的设计问题：<strong>键值对保存在内存还是外存？</strong></p>
<ul>
<li><p>保存在内存的好处是读写很快，毕竟内存的访问速度一般都在百 ns 级别。但是，潜在的风险是一旦掉电，所有的数据都会丢失。</p>
</li>
<li><p>保存在外存，虽然可以避免数据丢失，但是受限于磁盘的慢速读写（通常在几 ms 级别），键值数据库的整体性能会被拉低。</p>
</li>
</ul>
<p><strong>如何进行设计选择，我们通常需要考虑键值数据库的主要应用场景</strong>。比如，缓存场景下的数据需要能快速访问但允许丢失，那么，用于此场景的键值数据库通常采用内存保存键值数据。Memcached 和 Redis 都是属于内存键值数据库。对于 Redis 而言，缓存是非常重要的一个应用场景。</p>
<p>为了与Redis保持一致，SimpleKV 就采用内存保存键值数据。</p>
<h3 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h3><p>大体来说，一个键值数据库包括了<strong>访问框架、索引模块、操作模块和存储模块</strong>四部分：</p>
<img src="/posts/image-20220912203425948.png" alt="image-20220912203425948" style="zoom: 67%;">

<h3 id="访问模式"><a href="#访问模式" class="headerlink" title="访问模式"></a>访问模式</h3><p>访问模式通常有两种：</p>
<ul>
<li><p>一种是<strong>通过函数库调用的方式供外部应用使用</strong>，比如，上图中的libsimplekv.so，就是以动态链接库的形式链接到我们自己的程序中，提供键值存储功能；</p>
</li>
<li><p>另一种是<strong>通过网络框架以 Socket 通信的形式对外提供键值对操作</strong>，这种形式可以提供广泛的键值存储服务。在上图中，我们可以看到，网络框架中包括 Socket Server 和协议解析。</p>
</li>
</ul>
<p>实际的键值数据库也基本采用上述两种方式，例如，RocksDB 以动态链接库的形式使用，而 Memcached 和 Redis 则是通过网络框架访问。通过网络框架提供键值存储服务，一方面扩大了键值数据库的受用面，但另一方面，也给键值数据库的性能、运行模型提供了不同的设计选择，带来了一些潜在的问题。</p>
<p>I/O 模型设计问题，简单来说，就是网络连接的处理、网络请求的解析，以及数据存取的处理，是用一个线程、多个线程，还是多个进程来交互处理呢？该如何进行设计和取舍呢？举个例子，如果一个线程既要处理网络连接、解析请求，又要完成数据存取，一旦某一步操作发生阻塞，整个线程就会阻塞住，这就降低了系统响应速度。如果我们采用不同线程处理不同操作，那么，某个线程被阻塞时，其他线程还能正常运行。但是，不同线程间如果需要访问共享资源，那又会产生线程竞争，也会影响系统效率，这又该怎么办呢？所以，这的确是个“两难”选择，需要我们进行精心的设计。</p>
<h3 id="索引设计"><a href="#索引设计" class="headerlink" title="索引设计"></a>索引设计</h3><p>当 SimpleKV 解析了客户端发来的请求，知道了要进行的键值对操作，此时，SimpleKV 需要查找所要操作的键值对是否存在，这依赖于键值数据库的索引模块。<strong>索引的作用是让键值数据库根据 key 找到相应 value 的存储位置，进而执行操作</strong>。</p>
<p>索引的类型有很多，常见的有哈希表、B+ 树、字典树等。不同的索引结构在性能、空间消耗、并发控制等方面具有不同的特征。不同键值数据库采用的索引并不相同，例如，Memcached 和 Redis 采用哈希表作为 key-value 索引，而 RocksDB 则采用跳表作为内存中 key-value 的索引。</p>
<p>一般而言，内存键值数据库（例如 Redis）采用哈希表作为索引，很大一部分原因在于，其键值数据基本都是保存在内存中的，而内存的高性能随机访问特性可以很好地与哈希表O(1) 的操作复杂度相匹配。</p>
<p>SimpleKV 的索引根据 key 找到 value 的存储位置即可。但是，和 SimpleKV 不同，对于<br>Redis 而言，很有意思的一点是，它的 value 支持多种类型，当我们通过索引找到一个key 所对应的 value 后，仍然需要从 value 的复杂结构（例如集合和列表）中进一步找到我们实际需要的数据，这个操作的效率本身就依赖于它们的实现结构。Redis 采用一些常见的高效索引结构作为某些 value 类型的底层数据结构，这一技术路线为 Redis 实现高性能访问提供了良好的支撑。</p>
<h3 id="不同操作的具体逻辑"><a href="#不同操作的具体逻辑" class="headerlink" title="不同操作的具体逻辑"></a>不同操作的具体逻辑</h3><p>SimpleKV 的索引模块负责根据 key 找到相应的 value 的存储位置。对于不同的操作来说，找到存储位置之后，需要进一步执行的操作的具体逻辑会有所差异。SimpleKV 的操作模块就实现了不同操作的具体逻辑：</p>
<ul>
<li>对于 GET/SCAN 操作而言，此时根据 value 的存储位置返回 value 值即可；</li>
<li>对于 PUT 一个新的键值对数据而言，SimpleKV 需要为该键值对分配内存空间；</li>
<li>对于 DELETE 操作，SimpleKV 需要删除键值对，并释放相应的内存空间，这个过程由分配器完成。</li>
</ul>
<h3 id="重启后快速提供服务"><a href="#重启后快速提供服务" class="headerlink" title="重启后快速提供服务"></a>重启后快速提供服务</h3><p>分配器是键值数据库中的一个关键因素。对于以内存存储为主的 Redis 而言，这点尤为重要。Redis 的内存分配器提供了多种选择，分配效率也不一样。</p>
<p>希望 SimpleKV 重启后能快速重新提供服务，所以，在 SimpleKV 的存储模块中增加了持久化功能。鉴于磁盘管理要比内存管理复杂，SimpleKV 就直接采用了文件形式，将键值数据通过调用本地文件系统的操作接口保存在磁盘上。此时，SimpleKV 只需要考虑何时将内存中的键值数据保存到文件中，就可以了。</p>
<ul>
<li>一种方式是，对于每一个键值对，SimpleKV 都对其进行落盘保存，这虽然让 SimpleKV的数据更加可靠，但是，因为每次都要写盘，SimpleKV 的性能会受到很大影响。</li>
<li>另一种方式是，SimpleKV 只是周期性地把内存中的键值数据保存到文件中，这样可以避免频繁写盘操作的性能影响。但是，一个潜在的代价是 SimpleKV 的数据仍然有丢失的风险。</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>构建一个简单的键值数据库 SimpleKV。SimpleKV 包含了一个键值数据库的基本组件，对这些组件有了了解之后，后面在学习Redis 这个丰富版的 SimpleKV 时，就会轻松很多。</p>
<img src="/posts/image-20220912204855598.png" alt="image-20220912204855598" style="zoom:80%;">

<p>从对比图中，可以看到，从 SimpleKV 演进到 Redis，有以下几个重要变化：</p>
<ul>
<li>Redis 主要通过网络框架进行访问，而不再是动态库了，这也使得 Redis 可以作为一个基础性的网络服务进行访问，扩大了 Redis 的应用范围。</li>
<li>Redis 数据模型中的 value 类型很丰富，因此也带来了更多的操作接口，例如面向列表的 LPUSH/LPOP，面向集合的 SADD/SREM 等。</li>
<li>Redis 的持久化模块能支持两种方式：日志（AOF）和快照（RDB），这两种持久化方式具有不同的优劣势，影响到 Redis 的访问性能和可靠性。</li>
<li>SimpleKV 是个简单的单机键值数据库，但是，Redis 支持高可靠集群和高可扩展集群，因此，Redis 中包含了相应的集群功能支撑模块。</li>
</ul>
<h2 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h2><p>Redis接收到一个键值对操作后，能以<strong>微秒级别</strong>的速度找到数据，并快速完成操作。速度快的原因：</p>
<ul>
<li>它是内存数据库，所有操作都在内存上完成，内存的访问速度本身就很快。</li>
<li>归功于它的数据结构。这是因为，键值对是按一定的数据结构来组织的，操作键值对最终就是对数据结构进行增删改查操作，所以高效的数据结构是 Redis 快速处理数据的基础。</li>
</ul>
<p>Redis的键值对中值的数据类型：String（字符串）、List（列表）、Hash（哈希）、Set（集合）和 Sorted Set（有序集合）。</p>
<p>其底层实现，数据结构一共6种，分别是简单动态字符串、双向链表、压缩列表、哈希表、跳表和整数数组。它们和数据类型的对应关系如下图所示：</p>
<img src="/posts/image-20220912212558889.png" alt="image-20220912212558889" style="zoom:80%;">

<p>String 类型的底层实现只有一种数据结构，也就是简单动态字符串。而 List、Hash、Set 和 Sorted Set 这四种数据类型，都有两种底层实现结构。通常情况下，我们会把这四种类型称为集合类型，它们的特点是<strong>一个键对应了一个集合的数据</strong>。</p>
<h3 id="键和值的结构组织"><a href="#键和值的结构组织" class="headerlink" title="键和值的结构组织"></a>键和值的结构组织</h3><p>为了实现从键到值的快速访问，Redis 使用了一个哈希表来保存所有键值对。</p>
<p>一个哈希表，其实就是一个数组，数组的每个元素称为一个哈希桶。所以，我们常说，一个哈希表是由多个哈希桶组成的，每个哈希桶中保存了键值对数据。其实，哈希桶中的元素保存的并不是值本身，而是指向具体值的指针。这也就是说，不管值是 String，还是集合类型，哈希桶中的元素都是指向它们的指针。</p>
<img src="/posts/image-20220912214443579.png" alt="image-20220912214443579" style="zoom:80%;">

<p>哈希桶中的 entry 元素中保存了<em>key和</em>value指针，分别指向了实际的键和值，这样一来，即使值是一个集合，也可以通过*value指针被查找到。因为这个哈希表保存了所有的键值对，所以，我也把它称为<strong>全局哈希表</strong>。哈希表的最大好处很明显，就是让我们可以用 <strong>O(1) 的时间复杂度来快速查找到键值对</strong>——我们只需要计算键的哈希值，就可以知道它所对应的哈希桶位置，然后就可以访问相应的 entry 元素。</p>
<p>查找过程主要依赖于哈希计算，和数据量的多少并没有直接关系。也就是说，不管哈希表里有 10 万个键还是 100 万个键，我们只需要一次计算就能找到相应的键。当你往 Redis 中写入大量数据后，就可能发现操作有时候会突然变慢了。这其实是因为你忽略了一个潜在的风险点，那就是<strong>哈希表的冲突问题和 rehash 可能带来的操作阻塞。</strong></p>
<p><strong>哈希冲突：</strong>两个 key 的哈希值和哈希桶计算对应关系时，正好落在了同一个哈希桶中。</p>
<p>Redis 解决哈希冲突的方式，就是链式哈希。链式哈希也很容易理解，就是指<strong>同一个哈希桶中的多个元素用一个链表来保存，它们之间依次用指针连接</strong>。</p>
<img src="/posts/image-20220912214804037.png" alt="image-20220912214804037" style="zoom:80%;">

<p>通过 entry 元素中的指针，把它们连起来。这就形成了一个链表，也叫作哈希冲突链。但是，这里依然存在一个问题，哈希冲突链上的元素只能通过指针逐一查找再操作。如果哈希表里写入的数据越来越多，哈希冲突可能也会越来越多，这就会导致某些哈希冲突链过长，进而导致这个链上的元素查找耗时长，效率降低。</p>
<p><strong>rehash 操作</strong>：增加现有的哈希桶数量，让逐渐增多的 entry 元素能在更多的桶之间分散保存，减少单个桶中的元素数量，从而减少单个桶中的冲突。</p>
<p>为了使 rehash 操作更高效，Redis 默认使用了两个全局哈希表：哈希表 1 和哈希表 2。一开始，当你刚插入数据时，默认使用哈希表 1，此时的哈希表 2 并没有被分配空间。随着数据逐步增多，Redis 开始执行 rehash，这个过程分为三步：</p>
<ul>
<li>给哈希表 2 分配更大的空间，例如是当前哈希表 1 大小的两倍；</li>
<li>把哈希表 1 中的数据重新映射并拷贝到哈希表 2 中；</li>
<li>释放哈希表 1 的空间。</li>
</ul>
<p>可以从哈希表 1 切换到哈希表 2，用增大的哈希表 2 保存更多数据，而原来的哈希表 1 留作下一次 rehash 扩容备用。</p>
<p>过程看似简单，但是第二步涉及大量的数据拷贝，如果一次性把哈希表 1 中的数据都迁移完，会造成 Redis 线程阻塞，无法服务其他请求。此时，Redis 就无法快速访问数据了。为了避免这个问题，Redis 采用了<strong>渐进式 rehash</strong>。</p>
<p>在第二步拷贝数据时，Redis 仍然正常处理客户端请求，每处理一个请求时，从哈希表 1 中的第一个索引位置开始，顺带着将这个索引位置上的所有 entries 拷贝到哈希表 2 中；等处理下一个请求时，再顺带拷贝哈希表 1 中的下一个索引位置的entries。如下图所示：</p>
<img src="/posts/image-20220912215055175.png" alt="image-20220912215055175" style="zoom:80%;">

<p>巧妙地把一次性大量拷贝的开销，分摊到了多次处理请求的过程中，避免了耗时操作，保证了数据的快速访问。</p>
<h3 id="集合操作效率"><a href="#集合操作效率" class="headerlink" title="集合操作效率"></a>集合操作效率</h3><p>和 String 类型不同，一个集合类型的值，第一步是通过全局哈希表找到对应的哈希桶位置，第二步是在集合中再增删改查。集合的操作效率影响因素：</p>
<ul>
<li>与集合的底层数据结构有关。例如，使用哈希表实现的集合，要比使用链表实现的集合访问效率更高。</li>
<li>操作效率和这些操作本身的执行特点有关，比如读写一个元素的操作要比读写所有元素的效率高。</li>
</ul>
<h3 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h3><p>集合类型的底层数据结构主要有 5 种：整数数组、双向链表、哈希表、压缩列表和跳表。</p>
<p>哈希表的操作特点我们刚刚已经学过了；整数数组和双向链表也很常见，它们的操作特征都是顺序读写，也就是通过数组下标或者链表的指针逐个元素访问，操作复杂度基本是 O(N)，操作效率比较低；压缩列表和跳表我们平时接触得可能不多，但它们也是Redis 重要的数据结构。</p>
<p><strong>压缩列表：</strong>类似于一个数组，数组中的每一个元素都对应保存一个数据。和数组不同的是，压缩列表在表头有三个字段 zlbytes、zltail 和 zllen，分别表示列表长度、列表尾的偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束。</p>
<img src="/posts/image-20220912215439186.png" alt="image-20220912215439186" style="zoom: 67%;">

<p>在压缩列表中，如果我们要查找定位第一个元素和最后一个元素，可以通过表头三个字段的长度直接定位，复杂度是 O(1)。而查找其他元素时，就没有这么高效了，只能逐个查找，此时的复杂度就是 O(N) 了。</p>
<p><strong>跳表：</strong>跳表在链表的基础上，<strong>增加了多级索引，通过索引位置的几个跳转，实现数据的快速定位</strong>，</p>
<img src="/posts/image-20220912215609415.png" alt="image-20220912215609415" style="zoom:80%;">

<p>如果我们要在链表中查找 33 这个元素，只能从头开始遍历链表，查找 6 次，直到找到 33 为止。此时，复杂度是 O(N)，查找效率很低。</p>
<p>增加一级索引：从第一个元素开始，每两个元素选一个出来作为索引。这些索引再通过指针指向原始的链表。例如，从前两个元素中抽取元素 1 作为一级索引，从第三、四个元素中抽取元素 11 作为一级索引。此时，我们只需要 4 次查找就能定位到元素 33 了。</p>
<p>增加二级索引：从一级索引中，再抽取部分元素作为二级索引。例如，从一级索引中抽取 1、27、100 作为二级索引，二级索引指向一级索引。这样，我们只需要 3 次查找，就能定位到元素 33 了。</p>
<p>整个查找过程就是在多级索引上跳来跳去，最后定位到元素。这也正好符合“跳”表的叫法。当数据量很大时，跳表的查找复杂度就是 O(logN)。</p>
<p>按照查找的时间复杂度对这些数据结构进行分类：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td align="center">哈希表</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">跳表</td>
<td align="center">O(logN)</td>
</tr>
<tr>
<td align="center">双向链表</td>
<td align="center">O(N)</td>
</tr>
<tr>
<td align="center">压缩链表</td>
<td align="center">O(N)</td>
</tr>
<tr>
<td align="center">整数数组</td>
<td align="center">O(N)</td>
</tr>
</tbody></table>
<h3 id="不同操作的复杂度"><a href="#不同操作的复杂度" class="headerlink" title="不同操作的复杂度"></a>不同操作的复杂度</h3><p>集合类型的操作类型很多，有读写单个集合元素的，例如 HGET、HSET，也有操作多个元素的，例如 SADD，还有对整个集合进行遍历操作的，例如 SMEMBERS。这么多操作，它们的复杂度也各不相同。而复杂度的高低又是选择集合类型的重要依据。</p>
<p><strong>单元素操作是基础；范围操作非常耗时；统计操作通常高效；例外情况只有几个。</strong></p>
<p><strong>单元素操作</strong>：<strong>指每一种集合类型对单个数据实现的增删改查操作</strong>。例如，Hash 类型的 HGET、HSET 和 HDEL，Set 类型的 SADD、SREM、SRANDMEMBER 等。这些操作的复杂度由集合采用的数据结构决定，例如，HGET、HSET 和 HDEL 是对哈希表做操作，所以它们的复杂度都是 O(1)；Set 类型用哈希表作为底层数据结构时，它的 SADD、SREM、SRANDMEMBER 复杂度也是 O(1)。<br>需要注意的是，集合类型支持同时对多个元素进行增删改查，例如 Hash类型的 HMGET 和 HMSET，Set 类型的 SADD 也支持同时增加多个元素。此时，这些操作的复杂度，就是由单个元素操作复杂度和元素个数决定的。例如，HMSET 增加 M 个元素时，复杂度就从 O(1) 变成 O(M) 了。</p>
<p><strong>范围操作</strong>：<strong>指集合类型中的遍历操作，可以返回集合中的所有数据</strong>。比如 Hash类型的 HGETALL 和 Set 类型的 SMEMBERS，或者返回一个范围内的部分数据，比如 List类型的 LRANGE 和 ZSet 类型的 ZRANGE。<strong>这类操作的复杂度一般是 O(N)，比较耗时，应该尽量避免</strong>。<br>Redis 从 2.8 版本开始提供了 SCAN 系列操作（包括 HSCAN，SSCAN 和 ZSCAN），这类操作实现了渐进式遍历，每次只返回有限数量的数据。这样一来，相比于HGETALL、SMEMBERS 这类操作来说，就避免了一次性返回所有元素而导致的 Redis 阻塞。</p>
<p><strong>统计操作</strong>：<strong>集合类型对集合中所有元素个数的记录</strong>。例如 LLEN 和 SCARD。这类操作复杂度只有 O(1)，这是因为当集合类型采用压缩列表、双向链表、整数数组这些数据结构时，这些结构中专门记录了元素的个数统计，因此可以高效地完成相关操作。</p>
<p>例外情况：指某些数据结构的特殊记录，例如<strong>压缩列表和双向链表都会记录表头和表尾的偏移量</strong>。这样一来，对于 List 类型的 LPOP、RPOP、LPUSH、RPUSH 这四个操作来说，它们是在列表的头尾增删元素，这就可以通过偏移量直接定位，所以它们的复杂度也只有 O(1)，可以实现快速操作。</p>
<p>Redis 之所以能快速操作键值对，一方面是因为 O(1) 复杂度的哈希表被广泛使用，包括String、Hash 和 Set，它们的操作复杂度基本由哈希表决定，另一方面，Sorted Set 也采用了 O(logN) 复杂度的跳表。不过，集合类型的范围操作，因为要遍历底层数据结构，复杂度通常是 O(N)。这里的建议是：<strong>用其他命令来替代</strong>，例如可以用 SCAN 来代替，避免在 Redis 内部产生费时的全集合遍历操作。</p>
<p>对于复杂度较高的 List 类型，它的两种底层实现结构：双向链表和压缩列表的操作复杂度都是 O(N)。因此建议是：<strong>因地制宜地使用 List 类型</strong>。例如，既然它的 POP/PUSH 效率很高，那么就将它主要用于 FIFO 队列场景，而不是作为一个可以随机读写的集合。</p>
<h2 id="高性能IO模型：单线程-Redis-高性能"><a href="#高性能IO模型：单线程-Redis-高性能" class="headerlink" title="高性能IO模型：单线程 Redis 高性能"></a>高性能IO模型：单线程 Redis 高性能</h2><p>Redis 是单线程，主要是指 <strong>Redis 的网络 IO 和键值对读写是由一个线程来完成的，这也是 Redis 对外提供键值存储服务的主要流程</strong>。但 Redis 的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。</p>
<h3 id="Redis采用单线程的原因"><a href="#Redis采用单线程的原因" class="headerlink" title="Redis采用单线程的原因"></a>Redis采用单线程的原因</h3><p>需要考虑<strong>多线程的开销问题</strong>，使用多线程，可以增加系统吞吐率，或是可以增加系统扩展性。对于一个多线程的系统来说，在有合理的资源分配的情况下，可以增加系统中处理请求操作的资源实体，进而提升系统能够同时处理的请求数，即吞吐率。但是，一个关键的瓶颈在于，系统中通常会存在被多线程同时访问的共享资源，比如一个共享的数据结构。当有多个线程要修改这个共享资源时，为了保证共享资源的正确性，就需要有额外的机制进行保证，而这个额外的机制，就会带来额外的开销。</p>
<p><strong>多线程编程模式面临的共享资源的并发访问控制问题</strong>。并发访问控制一直是多线程开发中的一个难点问题，如果没有精细的设计，比如说，只是简单地采用一个粗粒度互斥锁，就会出现不理想的结果：即使增加了线程，大部分线程也在等待获取访问共享资源的互斥锁，并行变串行，系统吞吐率并没有随着线程的增加而增加。</p>
<p>采用多线程开发一般会引入同步原语来保护共享资源的并发访问，这也会降低系统代码的易调试性和可维护性。为了避免这些问题，Redis 直接采用了单线程模式。</p>
<h3 id="单线程-Redis-高性能的原因"><a href="#单线程-Redis-高性能的原因" class="headerlink" title="单线程 Redis 高性能的原因"></a>单线程 Redis 高性能的原因</h3><ul>
<li>Redis 的大部分操作在内存上完成，再加上它采用了高效的数据结构，例如哈希表和跳表，这是它实现高性能的一个重要原因。</li>
<li>Redis 采用了<strong>多路复用机制</strong>，使其在网络 IO 操作中能并发处理大量的客户端请求，实现高吞吐率。</li>
</ul>
<h3 id="基本IO模型与阻塞点"><a href="#基本IO模型与阻塞点" class="headerlink" title="基本IO模型与阻塞点"></a>基本IO模型与阻塞点</h3><p>以 Get 请求为例，SimpleKV 为了处理一个 Get 请求，需要监听客户端请求（bind/listen），和客户端建立连接（accept），从 socket 中读取请求（recv），解析客户端发送请求（parse），根据请求类型读取键值数据（get），最后给客户端返回结果，即向 socket 中写回数据（send）。</p>
<img src="/posts/image-20220912221548653.png" alt="image-20220912221548653" style="zoom:80%;">

<p>bind/listen、accept、recv、parse 和 send 属于网络 IO 处理，而 get 属于键值数据操作。既然 Redis 是单线程，那么，最基本的一种实现是在一个线程中依次执行上面说的这些操作。</p>
<p>潜在的阻塞点：分别是 **accept() 和 recv()**。当 Redis 监听到一个客户端有连接请求，但一直未能成功建立起连接时，会阻塞在 accept() 函数这里，导致其他客户端无法和 Redis 建立连接。类似的，当 Redis 通过 recv() 从一个客户端读取数据时，如果数据一直没有到达，Redis 也会一直阻塞在 recv()。这就导致 Redis 整个线程阻塞，无法处理其他客户端请求，效率很低。不过，socket 网络模型本身支持非阻塞模式。</p>
<h3 id="非阻塞模式"><a href="#非阻塞模式" class="headerlink" title="非阻塞模式"></a>非阻塞模式</h3><p>Socket 网络模型的非阻塞模式设置，主要体现在三个关键的函数调用上。在 socket 模型中，不同操作调用后会返回不同的套接字类型。</p>
<ul>
<li>首先，socket() 方法会返回主动套接字。</li>
<li>然后，调用 listen() 方法，将主动套接字转化为监听套接字，此时，可以监听来自客户端的连接请求。</li>
<li>最后，调用 accept() 方法接收到达的客户端连接，并返回已连接套接字。</li>
</ul>
<img src="/posts/image-20220912221918081.png" alt="image-20220912221918081" style="zoom:80%;">

<p>针对监听套接字，我们可以设置非阻塞模式：当 Redis 调用 accept() 但一直未有连接请求到达时，Redis 线程可以返回处理其他操作，而不用一直等待。但是要注意的是，调用 accept() 时，已经存在监听套接字了。</p>
<p>类似的，也可以针对已连接套接字设置非阻塞模式：Redis 调用 recv() 后，如果已连接套接字上一直没有数据到达，Redis 线程同样可以返回处理其他操作。我们也需要有机制继续监听该已连接套接字，并在有数据达到时通知 Redis。</p>
<p>这样才能保证 Redis 线程，既不会像基本 IO 模型中一直在阻塞点等待，也不会导致 Redis无法处理实际到达的连接请求或数据。</p>
<h3 id="基于多路复用的高性能I-O模型"><a href="#基于多路复用的高性能I-O模型" class="headerlink" title="基于多路复用的高性能I/O模型"></a>基于多路复用的高性能I/O模型</h3><p>Linux 中的 IO 多路复用机制是指一个线程处理多个 IO 流，就是经常听到的select/epoll 机制。简单来说，在 Redis 只运行单线程的情况下，<strong>该机制允许内核中，同时存在多个监听套接字和已连接套接字</strong>。内核会一直监听这些套接字上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流的效果。</p>
<img src="/posts/image-20220912222349372.png" alt="image-20220912222349372" style="zoom:80%;">

<p>Redis 网络框架调用 epoll 机制，让内核监听这些套接字。此时，Redis 线程不会阻塞在某一个特定的监听或已连接套接字上，也就是说，不会阻塞在某一个特定的客户端请求处理上。正因为此，Redis 可以同时和多个客户端连接并处理请求，从而提升并发性。</p>
<p>为了在请求到达时能通知到 Redis 线程，select/epoll 提供了<strong>基于事件的回调机制</strong>，即<strong>针对不同事件的发生，调用相应的处理函数</strong>。select/epoll 一旦监测到 FD 上有请求到达时，就会触发相应的事件。</p>
<p><strong>这些事件会被放进一个事件队列，Redis 单线程对该事件队列不断进行处理。</strong>这样一来，Redis 无需一直轮询是否有请求实际发生，这就可以避免造成 CPU 资源浪费。同时，Redis 在对事件队列中的事件进行处理时，会调用相应的处理函数，这就实现了基于事件的回调。因为 Redis 一直在对事件队列进行处理，所以能及时响应客户端请求，提升Redis 的响应性能。</p>
<p>以连接请求和读数据请求为例，两个请求分别对应 Accept 事件和 Read 事件，Redis 分别对这两个事件注册 accept 和 get 回调函数。当 Linux 内核监听到有连接请求或读数据请求时，就会触发 Accept 事件和 Read 事件，此时，内核就会回调 Redis 相应的 accept 和 get 函数进行处理。</p>
<p>Redis 单线程是指它对网络 IO 和数据读写的操作采用了一个线程，而采用单线程的一个核心原因是避免多线程开发的并发控制问题。单线程的 Redis 也能获得高性能，跟多路复用的 IO 模型密切相关，因为这避免了 accept() 和 send()/recv() 潜在的网络 IO 操作阻塞点。</p>
<p>注：2020 年 5 月，Redis 6.0 的稳定版发布了，Redis 6.0 中提出了多线程模型。</p>
<h2 id="AOF日志：Redis避免数据丢失"><a href="#AOF日志：Redis避免数据丢失" class="headerlink" title="AOF日志：Redis避免数据丢失"></a>AOF日志：Redis避免数据丢失</h2><p>Redis可以当作缓存使用，因为它把后端数据库中的数据存储在内存中，然后直接从内存中读取数据，响应速度会非常快，但是，这里也有一个绝对不能忽略的问题：<strong>一旦服务器宕机，内存中的数据将全部丢失。</strong></p>
<p>很容易想到的一个解决方案是，从后端数据库恢复这些数据，但这种方式存在两个问题：一是，需要频繁访问数据库，会给数据库带来巨大的压力；二是，这些数据是从慢速数据库中读取出来的，性能肯定比不上从 Redis 中读取，导致使用这些数据的应用程序响应变慢。所以，对 Redis 来说，实现数据的持久化，避免从后端数据库中进行恢复，是至关重要的。</p>
<p>Redis 的<strong>持久化</strong>主要有两大机制：<strong>AOF 日志和 RDB 快照。</strong></p>
<h3 id="AOF日志的实现"><a href="#AOF日志的实现" class="headerlink" title="AOF日志的实现"></a>AOF日志的实现</h3><p>不同于写前日志（Write Ahead Log, WAL），也就是，在实际写数据前，先把修改的数据记到日志文件中，以便故障时进行恢复。</p>
<p>AOF日志正好相反，它是<strong>写后日志</strong>，“写后”的意思是 Redis 是先执行命令，把数据写入内存，然后才记录日志，如下图所示：</p>
<img src="/posts/image-20220912233456867.png" alt="image-20220912233456867" style="zoom: 50%;">

<p>传统数据库的日志，例如 redo log（重做日志），记录的是修改后的数据，而 AOF 里记录的是 Redis 收到的每一条命令，这些命令是以文本形式保存的。</p>
<p>以 Redis 收到“set testkey testvalue”命令后记录的日志为例，看看 AOF 日志的内容。其中，“*3”表示当前命令有三个部分，每部分都是由“<code>$+数字</code>”开头，后面紧跟着具体的命令、键或值。这里，“数字”表示这部分中的命令、键或值一共有多少字节。例如，“$3 set”表示这部分有 3 个字节，也就是“set”命令。</p>
<img src="/posts/image-20220912233653313.png" alt="image-20220912233653313" style="zoom: 67%;">

<p>但是，为了避免额外的检查开销，Redis 在向 AOF 里面记录日志的时候，并不会先去对这些命令进行语法检查。所以，如果先记日志再执行命令的话，日志中就有可能记录了错误的命令，Redis 在使用日志恢复数据时，就可能会出错。</p>
<p>而写后日志这种方式，就是先让系统执行命令，只有命令能执行成功，才会被记录到日志中，否则，系统就会直接向客户端报错。所以，Redis 使用写后日志这一方式的一大好处是，可以<strong>避免出现记录错误命令的情况。</strong></p>
<p>除此之外，AOF 还有一个好处：它是在命令执行后才记录日志，所以<strong>不会阻塞当前的写操作</strong>.</p>
<p>不过，AOF 也有两个潜在的风险：</p>
<ul>
<li>如果刚执行完一个命令，还没有来得及记日志就宕机了，那么这个命令和相应的数据就有丢失的风险。如果此时 Redis 是用作缓存，还可以从后端数据库重新读入数据进行恢复，但是，如果 Redis 是直接用作数据库的话，此时，因为命令没有记入日志，所以就无法用日志进行恢复了。</li>
<li>AOF 虽然避免了对当前命令的阻塞，但可能会给下一个操作带来阻塞风险。这是因为，AOF 日志也是在主线程中执行的，如果在把日志文件写入磁盘时，磁盘写压力大，就会导致写盘很慢，进而导致后续的操作也无法执行了。</li>
</ul>
<p>这两个风险都是和 AOF 写回磁盘的时机相关的。这也就意味着，如果我们能够控制一个写命令执行完后 AOF 日志写回磁盘的时机，这两个风险就解除了。</p>
<h3 id="三种写回策略"><a href="#三种写回策略" class="headerlink" title="三种写回策略"></a>三种写回策略</h3><p>AOF 机制给我们提供了三个选择，也就是 AOF 配置项 appendfsync 的三个可选值。</p>
<ul>
<li><strong>Always</strong>，同步写回：每个写命令执行完，立马同步地将日志写回磁盘；</li>
<li><strong>Everysec</strong>，每秒写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘；</li>
<li><strong>No</strong>，操作系统控制的写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。</li>
</ul>
<p>针对避免主线程阻塞和减少数据丢失问题，这三种写回策略都无法做到两全其美。</p>
<ul>
<li>“同步写回”可以做到基本不丢数据，但是它在每一个写命令后都有一个慢速的落盘操作，不可避免地会影响主线程性能；</li>
<li>“每秒写回”采用一秒写回一次的频率，避免了“同步写回”的性能开销，虽然减少了对系统性能的影响，但是如果发生宕机，上一秒内未落盘的命令操作仍然会丢失。所以，这只能算是，在避免影响主线程性能和避免数据丢失两者间取了个折中。</li>
<li>虽然“操作系统控制的写回”在写完缓冲区后，就可以继续执行后续的命令，但是落盘的时机已经不在 Redis 手中了，只要 AOF 记录没有写回磁盘，一旦宕机对应的数据就丢失了；</li>
</ul>
<p>三种策略的写回时机，以及优缺点汇总在了一张表格里：</p>
<img src="/posts/image-20220912234311901.png" alt="image-20220912234311901" style="zoom:67%;">

<p>因此，可以根据系统对高性能和高可靠性的要求，来选择使用哪种写回策略了。总结一下就是：想要获得高性能，就选择 No 策略；如果想要得到高可靠性保证，就选择Always 策略；如果允许数据有一点丢失，又希望性能别受太大影响的话，那么就选择Everysec 策略。</p>
<p>AOF 是以文件的形式在记录接收到的所有写命令。随着接收的写命令越来越多，AOF 文件会越来越大。一定要小心 AOF 文件过大带来的性能问题。主要在于以下三个方面：</p>
<ul>
<li>文件系统本身对文件大小有限制，无法保存过大的文件；</li>
<li>如果文件太大，之后再往里面追加命令记录的话，效率也会变低；</li>
<li>如果发生宕机，AOF 中记录的命令要一个个被重新执行，用于故障恢复，如果日志文件太大，整个恢复过程就会非常缓慢，这就会影响到 Redis 的正常使用。</li>
</ul>
<p>因此，需要采取一定的控制手段：<strong>AOF 重写机制</strong>。</p>
<h3 id="AOF重写机制"><a href="#AOF重写机制" class="headerlink" title="AOF重写机制"></a>AOF重写机制</h3><p>AOF 重写机制就是在重写时，Redis 根据数据库的现状创建一个新的 AOF 文件，也就是说，读取数据库中的所有键值对，然后对每一个键值对用一条命令记录它的写入。比如说，当读取了键值对“testkey”: “testvalue”之后，重写机制会记录 set testkey testvalue 这条命令。这样，当需要恢复时，可以重新执行该命令，实现“testkey”: “testvalue”的写入。</p>
<p>重写机制具有“多变一”功能。所谓的“多变一”，也就是说，旧日志文件中的多条命令，在重写后的新日志中变成了一条命令。</p>
<img src="/posts/image-20220912234736351.png" alt="image-20220912234736351" style="zoom:67%;">

<p>AOF 文件是以追加的方式，逐一记录接收到的写命令的。当一个键值对被多条写命令反复修改时，AOF 文件会记录相应的多条命令。但是，在重写的时候，是根据这个键值对当前的最新状态，为它生成对应的写入命令。这样一来，一个键值对在重写日志中只用一条命令就行了，而且，在日志恢复时，只用执行这条命令，就可以直接完成这个键值对的写入了。</p>
<p>对一个列表先后做了 6 次修改操作后，列表的最后状态是[“D”, “C”, “N”]，此时，只用 LPUSH u:list “N”, “C”, “D”这一条命令就能实现该数据的恢复，这就节省了五条命令的空间。对于被修改过成百上千次的键值对来说，重写能节省的空间当然就更大了。</p>
<h3 id="AOF重写阻塞问题"><a href="#AOF重写阻塞问题" class="headerlink" title="AOF重写阻塞问题"></a>AOF重写阻塞问题</h3><p>和 AOF 日志由主线程写回不同，重写过程是由后台线程 bgrewriteaof 来完成的，这也是为了避免阻塞主线程，导致数据库性能下降。</p>
<p>重写的过程可以总结为“<strong>一个拷贝，两处日志</strong>”。“一个拷贝”就是指，每次执行重写时，主线程 fork 出后台的 bgrewriteaof 子进程。此时，fork 会把主线程的内存拷贝一份给 bgrewriteaof 子进程，这里面就包含了数据库的最新数据。然后，bgrewriteaof 子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。</p>
<p>“两处日志”：</p>
<p>因为主线程未阻塞，仍然可以处理新来的操作。此时，如果有写操作，第一处日志就是指正在使用的 AOF 日志，Redis 会把这个操作写到它的缓冲区。这样一来，即使宕机了，这个 AOF 日志的操作仍然是齐全的，可以用于恢复。</p>
<p>第二处日志，就是指新的 AOF 重写日志。这个操作也会被写到重写日志的缓冲区。这样，重写日志也不会丢失最新的操作。等到拷贝数据的所有操作记录重写完成后，重写日志记录的这些最新操作也会写入新的 AOF 文件，以保证数据库最新状态的记录。此时，我们就可以用新的 AOF 文件替代旧文件了。</p>
<img src="/posts/image-20220913102736102.png" alt="image-20220913102736102" style="zoom:67%;">

<p>每次 AOF 重写时，Redis 会先执行一个内存拷贝，用于重写；然后，使用两个日志保证在重写过程中，新写入的数据不会丢失。而且，因为 Redis 采用额外的线程进行数据重写，所以，这个过程并不会阻塞主线程。</p>
<h2 id="RDB内存快照"><a href="#RDB内存快照" class="headerlink" title="RDB内存快照"></a>RDB内存快照</h2><p>用 AOF 方法进行故障恢复的时候，需要逐一把操作日志都执行一遍。如果操作日志非常多，Redis 就会恢复得很缓慢，影响到正常使用。既可以保证可靠性，还能在宕机时实现快速恢复的一种持久化方法：<strong>内存快照</strong>。所谓内存快照，就是指内存中的数据在某一个时刻的状态记录。这就类似于照片，当你给朋友拍照时，一张照片就能把朋友一瞬间的形象完全记下来。</p>
<p>对 Redis 来说，它实现类似照片记录效果的方式，就是把某一时刻的状态<strong>以文件的形式写到磁盘上</strong>，也就是快照。这样一来，即使宕机，快照文件也不会丢失，数据的可靠性也得到了保证。这个快照文件就称为 RDB 文件，RDB 就是 Redis DataBase 的缩写。</p>
<p>和 AOF 相比，RDB 记录的是某一时刻的数据，并不是操作，所以，在做数据恢复时，可以直接把 RDB 文件读入内存，很快地完成恢复。但这也存在新的问题：</p>
<ul>
<li>对哪些数据做快照？这关系到快照的执行效率问题；</li>
<li>做快照时，数据还能被增删改吗？这关系到 Redis 是否被阻塞，能否同时正常处理请求。</li>
</ul>
<h3 id="给哪些内存数据做快照"><a href="#给哪些内存数据做快照" class="headerlink" title="给哪些内存数据做快照"></a>给哪些内存数据做快照</h3><p>Redis 的数据都在内存中，为了提供所有数据的可靠性保证，它执行的是<strong>全量快照</strong>，也就是说，<strong>把内存中的所有数据都记录到磁盘中</strong>，这就类似于给 100 个人拍合影，把每一个人都拍进照片里。这样做的好处是，一次性记录了所有数据，一个都不少。给内存的全量数据做快照，把它们全部写入磁盘也会花费很多时间。而且，全量数据越多，RDB 文件就越大，往磁盘上写数据的时间开销就越大。</p>
<p>Redis 提供了两个命令来生成 RDB 文件，分别是 save 和 bgsave：</p>
<ul>
<li>save：在主线程中执行，会导致阻塞；</li>
<li>bgsave：创建一个子进程，专门用于写入 RDB 文件，避免了主线程的阻塞，这也是Redis RDB 文件生成的默认配置。</li>
</ul>
<p>可以通过 bgsave 命令来执行全量快照，这既提供了数据的可靠性保证，也避免了对 Redis 的性能影响。</p>
<h3 id="快照时数据能否修改"><a href="#快照时数据能否修改" class="headerlink" title="快照时数据能否修改"></a>快照时数据能否修改</h3><p>在对内存数据做快照时，如果数据能被修改，那就意味着 Redis 还能正常处理写操作。否则，所有写操作都得等到快照完了才能执行，性能一下子就降低了。</p>
<p>可以用 bgsave 避免阻塞，但是，<strong>避免阻塞和正常处理写操作并不是一回事</strong>。此时，主线程的确没有阻塞，可以正常接收请求，但是，为了保证快照完整性，它只能处理读操作，因为不能修改正在执行快照的数据。为了快照而暂停写操作，肯定是不能接受的。Redis 借助操作系统提供的<strong>写时复制技术</strong>（Copy-On-Write, COW），在执行快照的同时，正常处理写操作。</p>
<img src="/posts/image-20220913104541648.png" alt="image-20220913104541648" style="zoom:67%;">

<p>bgsave 子进程是由主线程 fork 生成的，可以共享主线程的所有内存数据。bgsave 子进程运行后，开始读取主线程的内存数据，并把它们写入 RDB 文件。此时，如果主线程对这些数据也都是读操作（例如图中的键值对 A），那么，主线程和 bgsave 子进程相互不影响。但是，如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据。</p>
<p>这既保证了快照的完整性，也允许主线程同时对数据进行修改，避免了对正常业务的影响。</p>
<p><strong>Redis 使用 bgsave 对当前内存中的所有数据做快照，这个操作是子进程在后台完成的，这就允许主线程同时可以修改数据。</strong></p>
<h3 id="多久做一次快照"><a href="#多久做一次快照" class="headerlink" title="多久做一次快照"></a>多久做一次快照</h3><p>虽然 bgsave 执行时不阻塞主线程，但是，<strong>如果频繁地执行全量快照，也会带来两方面的开销</strong>。</p>
<ul>
<li>频繁将全量数据写入磁盘，会给磁盘带来很大压力，多个快照竞争有限的磁盘带宽，前一个快照还没有做完，后一个又开始做了，易造成恶性循环。</li>
<li>bgsave 子进程需要通过 fork 操作从主线程创建出来。虽然，子进程在创建后不会再阻塞主线程，但是，fork 这个创建过程本身会阻塞主线程，而且主线程的内存越大，阻塞时间越长。如果频繁 fork 出 bgsave 子进程，这就会频繁阻塞主线程了。</li>
</ul>
<p>解决方法：可以做<strong>增量快照</strong>，做了一次全量快照后，后续的快照只对修改的数据进行快照记录，这样可以避免每次全量快照的开销。前提是，<strong>需要记住哪些数据被修改了</strong>。需要使用额外的元数据信息去记录哪些数据被修改了，这会带来额外的空间开销问题。</p>
<img src="/posts/image-20220913110310966.png" alt="image-20220913110310966" style="zoom: 80%;">

<p>能利用 RDB 的快速恢复，又能以较小的开销做到尽量少丢数据的方法：Redis 4.0 中提出了一个<strong>混合使用 AOF 日志和内存快照</strong>的方法。简单来说，内存快照以一定的频率执行，在两次快照之间，使用 AOF 日志记录这期间的所有命令操作。</p>
<p>这样一来，快照不用很频繁地执行，这就避免了频繁 fork 对主线程的影响。而且，AOF日志也只用记录两次快照间的操作，也就是说，不需要记录所有操作了，因此，就不会出现文件过大的情况了，也可以避免重写开销。</p>
<img src="/posts/image-20220913110602610.png" alt="image-20220913110602610" style="zoom:80%;">

<p>T1 和 T2 时刻的修改，用 AOF 日志记录，等到第二次做全量快照时，就可以清空 AOF 日志，因为此时的修改都已经记录到快照中了，恢复时就不再用日志了。</p>
<ul>
<li><p>内存快照的优势：可以快速恢复数据库，也就是只需要把 RDB 文件直接读入内存，这就避免了 AOF 需要顺序、逐一重新执行操作命令带来的低效性能问题。</p>
</li>
<li><p>内存快照的局限性：它拍的是一张内存的“大合影”，不可避免地会耗时耗力。虽然，Redis 设计了 bgsave 和写时复制方式，尽可能减少了内存快照对正常读写的影响，但是，频繁快照仍然是不太能接受的。</p>
</li>
<li><p>最优解：混合使用 RDB 和 AOF，正好可以取两者之长，避两者之短，以较小的性能开销保证数据可靠性和性能。</p>
</li>
</ul>
<p>关于 AOF 和 RDB 的选择问题有三点：</p>
<ul>
<li>数据不能丢失时，内存快照和 AOF 的混合使用是一个很好的选择；</li>
<li>如果允许分钟级别的数据丢失，可以只使用 RDB；</li>
<li>如果只用 AOF，优先使用 everysec 的配置选项，因为它在可靠性和性能之间取了一个平衡。</li>
</ul>
<h2 id="数据同步：主从库实现数据一致"><a href="#数据同步：主从库实现数据一致" class="headerlink" title="数据同步：主从库实现数据一致"></a>数据同步：主从库实现数据一致</h2><p> Redis 具有高可靠性体现在两方面：</p>
<ul>
<li><p><strong>数据尽量少丢失</strong>。AOF 和 RDB 保证了前者；</p>
</li>
<li><p><strong>服务尽量少中断</strong>。Redis 的做法是<strong>增加副本冗余量</strong>，将一份数据同时保存在多个实例上。即使有一个实例出现了故障，需要过一段时间才能恢复，其他实例也可以对外提供服务，不会影响业务使用。</p>
</li>
</ul>
<p>Redis 提供了主从库模式，以保证数据副本的一致，主从库之间采用的是<strong>读写分离</strong>的方式。</p>
<ul>
<li><strong>读操作</strong>：主库、从库都可以接收；</li>
<li><strong>写操作</strong>：首先到主库执行，然后，主库将写操作同步给从库。</li>
</ul>
<img src="/posts/image-20220913111545067.png" alt="image-20220913111545067" style="zoom:67%;">

<p>如果在不同的实例上执行，而且保持这个数据在三个实例上一致，就要涉及到加锁、实例间协商是否完成修改等一系列操作，但这会带来巨额的开销，当然是不太能接受的。而主从库模式一旦采用了读写分离，所有数据的修改只会在主库上进行，不用协调三个实例。主库有了最新的数据后，会同步给从库，这样，主从库的数据就是一致的。</p>
<p>主从库同步的基本原理，总结有三种模式：</p>
<ul>
<li>全量复制</li>
<li>基于长连接的命令传播</li>
<li>增量复制</li>
</ul>
<h3 id="主从库的第一次同步（全量复制）"><a href="#主从库的第一次同步（全量复制）" class="headerlink" title="主从库的第一次同步（全量复制）"></a>主从库的第一次同步（全量复制）</h3><p>当我们启动多个 Redis 实例的时候，它们相互之间就可以通过 replicaof（Redis 5.0 之前使用 slaveof）命令形成主库和从库的关系，之后会按照三个阶段完成数据的第一次同步。</p>
<p>例如，现在有实例 1（ip：172.16.19.3）和实例 2（ip：172.16.19.5），在实例 2 上执行以下这个命令后，实例 2 就变成了实例 1 的从库，并从实例 1 上复制数据：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">replicaof <span class="number">172.16</span><span class="number">.19</span><span class="number">.3</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>

<img src="/posts/image-20220913112220438.png" alt="image-20220913112220438" style="zoom:80%;">

<p>主从库间数据第一次同步的三个阶段：</p>
<ul>
<li><p>第一阶段：主从库间建立连接、协商同步的过程，主要是为全量复制做准备。<strong>从库和主库建立起连接，并告诉主库即将进行同步，主库确认回复后，主从库间就可以开始同步了</strong>。<br>具体来说，从库给主库发送 psync 命令，表示要进行数据同步，主库根据这个命令的参数来启动复制。psync 命令包含了<strong>主库的 runID</strong> 和<strong>复制进度 offset</strong> 两个参数。</p>
<ul>
<li>runID，是每个 Redis 实例启动时都会自动生成的一个随机 ID，用来唯一标记这个实例。当从库和主库第一次复制时，因为不知道主库的 runID，所以将 runID 设为“？”。</li>
<li>offset，此时设为 -1，表示第一次复制。</li>
</ul>
<p>主库收到 psync 命令后，会用 FULLRESYNC 响应命令带上两个参数：主库 runID 和主库目前的复制进度 offset，返回给从库。从库收到响应后，会记录下这两个参数。注意：<strong>FULLRESYNC 响应表示第一次复制采用的全量复制，也就是说，主库会把当前所有的数据都复制给从库</strong>。</p>
</li>
<li><p>第二阶段：<strong>主库将所有数据同步给从库。从库收到数据后，在本地完成数据加载</strong>。这个过程依赖于内存快照生成的 RDB 文件。<br>具体来说，主库执行 bgsave 命令，生成 RDB 文件，接着将文件发给从库。从库接收到RDB 文件后，会先清空当前数据库，然后加载 RDB 文件。这是因为从库在通过 replicaof 命令开始和主库同步前，可能保存了其他数据。为了避免之前数据的影响，从库需要先把当前数据库清空。</p>
<p>在主库将数据同步给从库的过程中，主库不会被阻塞，仍然可以正常接收请求。否则，Redis 的服务就被中断了。但是，这些请求中的写操作并没有记录到刚刚生成的 RDB 文件中。为了保证主从库的数据一致性，主库会在内存中用专门的 replication buffer，记录 RDB 文件生成后收到的所有写操作。</p>
</li>
<li><p>第三阶段：主库会把第二阶段执行过程中新收到的写命令，再发送给从库。<br>具体的操作是，当主库完成 RDB 文件发送后，就会把此时 replication buffer 中的修改操作发给从库，从库再重新执行这些操作。这样一来，主从库就实现同步了。</p>
</li>
</ul>
<h3 id="主从级联模式"><a href="#主从级联模式" class="headerlink" title="主从级联模式"></a>主从级联模式</h3><p>一次全量复制中，对于主库来说，需要完成两个耗时的操作：生成 RDB 文件和传输 RDB 文件。</p>
<p>如果从库数量很多，而且都要和主库进行全量复制的话，就会导致主库忙于 fork 子进程生成 RDB 文件，进行数据全量同步。fork 这个操作会阻塞主线程处理正常请求，从而导致主库响应应用程序的请求速度变慢。此外，传输 RDB 文件也会占用主库的网络带宽，同样会给主库的资源使用带来压力。</p>
<p>解决方法：<strong>“主 - 从 - 从”模式</strong>。分担主库压力。</p>
<p>在刚才的主从库模式中，所有的从库都是和主库连接，所有的全量复制也都是和主库进行的。可以<strong>通过“主 - 从 - 从”模式将主库生成 RDB 和传输 RDB 的压力，以级联的方式分散到从库上</strong>。</p>
<p>简单来说，我们在部署主从集群的时候，可以手动选择一个从库（比如选择内存资源配置较高的从库），用于级联其他的从库。然后，我们可以再选择一些从库（例如三分之一的从库），在这些从库上执行如下命令，让它们和刚才所选的从库，建立起主从关系。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">replicaof 所选从库的IP <span class="number">6379</span></span><br></pre></td></tr></table></figure>

<p>这样一来，这些从库就会知道，在进行同步时，不用再和主库进行交互了，只要和级联的从库进行写操作同步就行了，这就可以减轻主库上的压力，如下图所示：</p>
<img src="/posts/image-20220913113401065.png" alt="image-20220913113401065" style="zoom:67%;">

<p>一旦主从库完成了全量复制，它们之间就会一直维护一个网络连接，主库会通过这个连接将后续陆续收到的命令操作再同步给从库，这个过程也称为<strong>基于长连接的命令传播</strong>，可以避免频繁建立连接的开销。不过存在风险点，最常见的就是<strong>网络断连或阻塞</strong>。如果网络断连，主从库之间就无法进行命令传播了，从库的数据自然也就没办法和主库保持一致了，客户端就可能从从库读到旧数据。</p>
<h3 id="主从库间网络断联（增量复制）"><a href="#主从库间网络断联（增量复制）" class="headerlink" title="主从库间网络断联（增量复制）"></a>主从库间网络断联（增量复制）</h3><p>在 Redis 2.8 之前，如果主从库在命令传播时出现了网络闪断，那么，从库就会和主库重新进行一次全量复制，开销非常大。</p>
<p>从 Redis 2.8 开始，网络断了之后，主从库会采用<strong>增量复制</strong>的方式继续同步。它和全量复制的不同：<strong>全量复制是同步所有数据，而增量复制只会把主从库网络断连期间主库收到的命令，同步给从库。</strong></p>
<p>此时主从库之间保持同步，需要 repl_backlog_buffer 缓冲区。当主从库断连后，主库会把断连期间收到的写操作命令，写入 replication buffer，同时也会把这些操作命令也写入 repl_backlog_buffer 这个缓冲区。</p>
<p>repl_backlog_buffer 是一个环形缓冲区，<strong>主库会记录自己写到的位置，从库则会记录自己已经读到的位置</strong>。</p>
<p>刚开始的时候，主库和从库的写读位置在一起，二者起始位置相同。随着主库不断接收新的写操作，它在缓冲区中的写位置会逐步偏离起始位置，对主库来说，对应的偏移量就是 master_repl_offset。同样，从库在复制完写操作命令后，它在缓冲区中的读位置也开始逐步偏移刚才的起始位置，此时，从库已复制的偏移量 slave_repl_offset 也在不断增加。正常情况下，这两个偏移量基本相等。</p>
<img src="/posts/image-20220913114021244.png" alt="image-20220913114021244" style="zoom: 80%;">

<p>主从库的连接恢复之后，从库首先会给主库发送 psync 命令，并把自己当前的slave_repl_offset 发给主库，主库会判断自己的 master_repl_offset 和 slave_repl_offset 之间的差距。在网络断连阶段，主库可能会收到新的写操作命令，所以，一般来说，master_repl_offset 会大于 slave_repl_offset。此时，主库只用把 master_repl_offset 和 slave_repl_offset     之间的命令操作同步给从库就行。</p>
<p>示意图中，主库和从库之间相差了 put d e 和 put d f 两个操作，在增量复制时，主库只需要把它们同步给从库。</p>
<p>增量复制的流程：</p>
<img src="/posts/image-20220913114257379.png" alt="image-20220913114257379" style="zoom:67%;">

<p>因为 repl_backlog_buffer 是一个环形缓冲区，所以在缓冲区写满后，主库会继续写入，此时，就会覆盖掉之前写入的操作。<strong>如果从库的读取速度比较慢，就有可能导致从库还未读取的操作被主库新写的操作覆盖了，这会导致主从库间的数据不一致</strong>。</p>
<p>为避免这一情况，一般而言，可以调整 <strong>repl_backlog_size</strong> 这个参数。这个参数和所需的缓冲空间大小有关。缓冲空间的计算公式是：缓冲空间大小 = 主库写入命令速度 * 操作大小 - 主从库间网络传输命令速度 * 操作大小。在实际应用中，考虑到可能存在一些突发的请求压力，我们通常需要把这个缓冲空间扩大一倍，即 <strong>repl_backlog_size = 缓冲空间大小 * 2</strong>，这也就是 repl_backlog_size 的最终值。</p>
<p>例如，如果主库每秒写入 2000 个操作，每个操作的大小为 2KB，网络每秒能传输 1000 个操作，那么，有 1000 个操作需要缓冲起来，这就至少需要 2MB 的缓冲空间。否则，新写的命令就会覆盖掉旧操作了。为了应对可能的突发压力，最终把repl_backlog_size 设为 4MB。</p>
<p>这样一来，增量复制时主从库的数据不一致风险就降低了。不过，如果并发请求量非常大，连两倍的缓冲空间都存不下新操作请求的话，此时，主从库数据仍然可能不一致。</p>
<p>针对这种情况，一方面，你可以根据 Redis 所在服务器的内存资源再适当增加repl_backlog_size 值，比如说设置成缓冲空间大小的 4 倍，另一方面，你可以考虑使用切片集群来分担单个主库的请求压力。</p>
<h2 id="哨兵机制"><a href="#哨兵机制" class="headerlink" title="哨兵机制"></a>哨兵机制</h2><p>如果主库发生故障，会直接影响从库的同步，因为从库没有相应的主库可以进行数据复制操作了。一旦有写操作请求了，按照主从库模式下的读写分离要求，需要由主库来完成写操作。此时，也没有实例可以来服务客户端的写操作请求：</p>
<img src="/posts/image-20220913164525577.png" alt="image-20220913164525577" style="zoom:67%;">

<p>如果主库挂了，我们就需要运行一个新主库，比如说把一个从库切换为主库，把它当成主库。涉及三个问题：</p>
<ul>
<li>主库真的挂了吗？</li>
<li>该选择哪个从库作为主库？</li>
<li>怎么把新主库的相关信息通知给从库和客户端呢？</li>
</ul>
<p>解决方法：<strong>哨兵机制</strong>。在 Redis 主从集群中，哨兵机制是实现主从库自动切换的关键机制，它有效地解决了主从复制模式下故障转移的这三个问题。</p>
<h3 id="哨兵机制的基本流程"><a href="#哨兵机制的基本流程" class="headerlink" title="哨兵机制的基本流程"></a>哨兵机制的基本流程</h3><p>哨兵其实就是一个运行在特殊模式下的 Redis 进程，主从库实例运行的同时，它也在运行。</p>
<p>哨兵主要负责的就是三个任务：<strong>监控、选主（选择主库）和通知。</strong></p>
<ul>
<li>监控：哨兵进程在运行时，周期性地给所有的主从库发送 PING 命令，检测它们是否仍然在线运行。如果从库没有在规定时间内响应哨兵的 PING 命令，哨兵就会把它标记为“下线状态”；</li>
<li>选择主库：如果主库也没有在规定时间内响应哨兵的 PING 命令，哨兵就会判定主库下线，然后开始<strong>自动切换主库</strong>的流程。主库挂了以后，哨兵就需要从很多个从库里，按照一定的规则选择一个从库实例，把它作为新的主库。</li>
<li>通知：在执行通知任务时，哨兵会把新主库的连接信息发给其他从库，让它们执行 replicaof 命令，和新主库建立连接，并进行数据复制。同时，哨兵会把新主库的连接信息通知给客户端，让它们把请求操作发到新主库上。</li>
</ul>
<img src="/posts/image-20220913165106203.png" alt="image-20220913165106203" style="zoom:67%;">

<h3 id="主观下线与客观下线"><a href="#主观下线与客观下线" class="headerlink" title="主观下线与客观下线"></a>主观下线与客观下线</h3><p>主观下线：<strong>哨兵进程会使用 PING 命令检测它自己和主、从库的网络连接情况，用来判断实例的状态</strong>。如果哨兵发现主库或从库对 PING 命令的响应超时了，那么，哨兵就会先把它标记为“主观下线”。</p>
<p>如果检测的是从库，那么，哨兵简单地把它标记为“主观下线”就行了，因为从库的下线影响一般不太大，集群的对外服务不会间断。</p>
<p>如果检测的是主库，那么，哨兵还不能简单地把它标记为“主观下线”，开启主从切换。因为很有可能存在这么一个情况：那就是哨兵误判了，其实主库并没有故障。可是，一旦启动了主从切换，后续的选主和通知操作都会带来额外的计算和通信开销。为了避免这些不必要的开销，要特别注意误判的情况。</p>
<p>误判一般会发生在<strong>集群网络压力较大、网络拥塞，或者是主库本身压力较大</strong>的情况下。</p>
<p>哨兵机制<strong>通常会采用多实例组成的集群模式进行部署，这也被称为哨兵集群</strong>。引入多个哨兵实例一起来判断，就可以避免单个哨兵因为自身网络状况不好，而误判主库下线的情况。同时，多个哨兵的网络同时不稳定的概率较小，由它们一起做决策，误判率也能降低。</p>
<p>客观下线：在判断主库是否下线时，不能由一个哨兵说了算，只有大多数的哨兵实例，都判断主库已经“主观下线”了，主库才会被标记为“客观下线”，这个叫法也是表明主库下线成为一个客观事实了。这个判断原则就是：少数服从多数。同时，这会进一步触发哨兵开始主从切换流程。</p>
<img src="/posts/image-20220913165536398.png" alt="image-20220913165536398" style="zoom:67%;">

<p>简单来说，“客观下线”的标准就是，当有 N 个哨兵实例时，最好要有 N/2 + 1 个实例判断主库为“主观下线”，才能最终判定主库为“客观下线”。这样一来，就可以减少误判的概率，也能避免误判带来的无谓的主从库切换。（当然，有多少个实例做出“主观下线”的判断才可以，可以由 Redis 管理员自行设定）。</p>
<h3 id="如何选定新主库"><a href="#如何选定新主库" class="headerlink" title="如何选定新主库"></a>如何选定新主库</h3><p>可以把哨兵选择新主库的过程称为“筛选 + 打分”。在多个从库中，先按照<strong>一定的筛选条件</strong>，把不符合条件的从库去掉。然后，我们再按照<strong>一定的规则</strong>，给剩下的从库逐个打分，将得分最高的从库选为新主库：</p>
<img src="/posts/image-20220913165745510.png" alt="image-20220913165745510" style="zoom: 67%;">

<p>筛选条件：</p>
<p>一般情况下，我们肯定要先保证所选的从库仍然在线运行。不过，在选主时从库正常在线，这只能表示从库的现状良好，并不代表它就是最适合做主库的。在选主时，<strong>除了要检查从库的当前在线状态，还要判断它之前的网络连接状态</strong>。如果从库总是和主库断连，而且断连次数超出了一定的阈值，我们就有理由相信，这个从库的网络状况并不是太好，就可以把这个从库筛掉了。</p>
<p>具体判断：使用配置项 down-after-milliseconds * 10。其中，down-after-milliseconds 是我们认定主从库断连的最大连接超时时间。如果在 down-after-milliseconds 毫秒内，主从节点都没有通过网络联系上，我们就可以认为主从节点断连了。如果发生断连的次数超过了 10 次，就说明这个从库的网络状况不好，不适合作为新主库。</p>
<p>分别按照三个规则依次进行三轮打分，<strong>从库优先级、从库复制进度以及从库 ID 号</strong>。只要在某一轮中，有从库得分最高，那么它就是主库了，选主过程到此结束。如果没有出现得分最高的从库，那么就继续进行下一轮。</p>
<ul>
<li><p><strong>第一轮：优先级最高的从库得分高。</strong>用户可以通过 slave-priority 配置项，给不同的从库设置不同优先级。比如，你有两个从库，它们的内存大小不一样，你可以手动给内存大的实例设置一个高优先级。在选主时，哨兵会给优先级高的从库打高分，如果有一个从库优先级最高，那么它就是新主库了。如果从库的优先级都一样，那么哨兵开始第二轮打分。</p>
</li>
<li><p><strong>第二轮：和旧主库同步程度最接近的从库得分高。</strong>如果选择和旧主库同步最接近的那个从库作为主库，那么，这个新主库上就有最新的数据。</p>
<p>判断从库和旧主库间的同步进度：主从库同步时有个命令传播的过程。在这个过程中，主库会用master_repl_offset 记录当前的最新写操作在 repl_backlog_buffer 中的位置，而从库会用 slave_repl_offset 这个值记录当前的复制进度。此时，我们想要找的从库，它的 slave_repl_offset 需要最接近 master_repl_offset。如果在所有从库中，有从库的 slave_repl_offset 最接近 master_repl_offset，那么它的得分就最高，可以作为新主库。</p>
<img src="/posts/image-20220913233528320.png" alt="image-20220913233528320" style="zoom:67%;">

<p>旧主库的 master_repl_offset 是 1000，从库 1、2 和 3 的 slave_repl_offset 分别是 950、990 和 900，那么，从库 2 就应该被选为新主库。如果有两个从库的 slave_repl_offset 值大小是一样的（例如，从库 1 和从库 2 的 slave_repl_offset 值都是 990），我们就需要给它们进行第三轮打分了。</p>
</li>
<li><p><strong>第三轮：ID 号小的从库得分高。</strong>每个实例都会有一个 ID，这个 ID 就类似于这里的从库的编号。目前，Redis 在选主库时，有一个默认的规定：<strong>在优先级和复制进度都相同的情况下，ID 号最小的从库得分最高，会被选为新主库</strong>。</p>
</li>
</ul>
<p><strong>选择主库的流程总结：</strong></p>
<p>首先，哨兵会按照在线状态、网络状态，筛选过滤掉一部分不符合要求的从库，然后，依次按照优先级、复制进度、ID 号大小再对剩余的从库进行打分，只要有得分最高的从库出现，就把它选为新主库。</p>
<h2 id="哨兵集群"><a href="#哨兵集群" class="headerlink" title="哨兵集群"></a>哨兵集群</h2><p>哨兵机制可以实现主从库的自动切换。通过部署多个实例，就形成了一个哨兵集群。哨兵集群中的多个实例共同判断，可以降低对主库下线的误判率。一旦多个实例组成了<strong>哨兵集群</strong>，即使有哨兵实例出现故障挂掉了，其他哨兵还能继续协作完成主从库切换的工作，包括判定主库是不是处于下线状态，选择新主库，以及通知从库和客户端。</p>
<p>在配置哨兵的信息时，我们只需要用到下面的这个配置项，设置<strong>主库的 IP</strong> 和<strong>端口</strong>，并没有配置其他哨兵的连接信息。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br></pre></td></tr></table></figure>

<h3 id="基于-pub-sub-机制的哨兵集群组成"><a href="#基于-pub-sub-机制的哨兵集群组成" class="headerlink" title="基于 pub/sub 机制的哨兵集群组成"></a>基于 pub/sub 机制的哨兵集群组成</h3><p>Redis 提供的 pub/sub 机制，也就是发布 / 订阅机制，使得哨兵实例之间可以相互发现。哨兵只要和主库建立起了连接，就可以在主库上发布消息了，比如说发布它自己的连接信息（IP 和端口）。同时，它也可以从主库上订阅消息，获得其他哨兵发布的连接信息。当多个哨兵实例都在主库上做了发布和订阅操作后，它们之间就能知道彼此的 IP 地址和端口。</p>
<p>为了区分不同应用的消息，Redis 会以频道的形式，对这些消息进行分门别类的管理。所谓的频道，实际上就是消息的类别。当消息类别相同时，它们就属于同一个频道。反之，就属于不同的频道。<strong>只有订阅了同一个频道的应用，才能通过发布的消息进行信息交换</strong>。</p>
<img src="/posts/image-20220914100323975.png" alt="image-20220914100323975" style="zoom:67%;">

<p>哨兵 1 把自己的 IP（172.16.19.3）和端口（26579）发布到“<code>__sentinel__:hello</code>”频道上，哨兵 2 和 3 订阅了该频道。那么此时，哨兵 2 和 3 就可以从这个频道直接获取哨兵 1 的 IP 地址和端口号。然后，哨兵 2、3 可以和哨兵 1 建立网络连接。通过这个方式，哨兵 2 和 3 也可以建立网络连接，这样一来，哨兵集群就形成了。它们相互间可以通过网络连接进行通信，哨兵除了彼此之间建立起连接形成集群外，还需要和从库建立连接。这是因为，在哨兵的监控任务中，它需要<strong>对主从库都进行心跳判断</strong>，而且在主从库切换完成后，它还需要通知从库，让它们和新主库进行同步。</p>
<p><strong>哨兵是如何知道从库的 IP 地址和端口</strong>：哨兵向主库发送 INFO 命令来完成的。</p>
<img src="/posts/image-20220914100718778.png" alt="image-20220914100718778" style="zoom:67%;">

<p>哨兵 2 给主库发送 INFO 命令，主库接受到这个命令后，就会把从库列表返回给哨兵。接着，哨兵就可以根据从库列表中的连接信息，和每个从库建立连接，并在这个连接上持续地对从库进行监控。哨兵 1 和 3 可以通过相同的方法和从库建立连接。</p>
<p>通过 <strong>pub/sub 机制</strong>，哨兵之间可以组成集群，同时，哨兵又通过 <strong>INFO 命令</strong>，获得了从库连接信息，也能和从库建立连接，并进行监控了。哨兵不能只和主、从库连接。因为，主从库切换后，客户端也需要知道新主库的连接信息，才能向新主库发送请求操作。所以，哨兵还需要完成<strong>把新主库的信息告诉客户端</strong>这个任务。</p>
<h3 id="基于-pub-sub-机制的客户端事件通知"><a href="#基于-pub-sub-机制的客户端事件通知" class="headerlink" title="基于 pub/sub 机制的客户端事件通知"></a>基于 pub/sub 机制的客户端事件通知</h3><p>从本质上说，哨兵就是一个运行在特定模式下的 Redis 实例，只不过它并不服务请求操作，只是完成监控、选主和通知的任务。所以，每个哨兵实例也提供 pub/sub 机制，客户端可以从哨兵订阅消息。哨兵提供的消息订阅频道有很多，不同频道包含了主从库切换过程中的不同关键事件。</p>
<p>重要的频道汇总，涉及几个关键事件，包括主库下线判断、新主库选定、从库重新配置。</p>
<img src="/posts/image-20220914102009203.png" alt="image-20220914102009203" style="zoom:67%;">

<p>知道了这些频道之后，就可以<strong>让客户端从哨兵这里订阅消息</strong>了。具体的操作步骤：客户端读取哨兵的配置文件后，可以获得哨兵的地址和端口，和哨兵建立网络连接。然后，我们可以在客户端执行订阅命令，来获取不同的事件消息。</p>
<p>例如，可以执行如下命令，来订阅“所有实例进入客观下线状态的事件”：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SUBSCRIBE +odown</span><br></pre></td></tr></table></figure>

<p>也可以执行如下命令，订阅所有的事件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">PSUBSCRIBE *</span><br></pre></td></tr></table></figure>

<p>当哨兵把新主库选择出来后，客户端就会看到下面的 switch-master 事件。这个事件表示主库已经切换了，新主库的 IP 地址和端口信息已经有了。这个时候，客户端就可以用这里面的新主库地址和端口进行通信了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>-master &lt;master name&gt; &lt;oldip&gt; &lt;oldport&gt; &lt;newip&gt; &lt;newport&gt;</span><br></pre></td></tr></table></figure>

<p>有了这些事件通知，客户端不仅可以在主从切换后得到新主库的连接信息，还可以监控到主从库切换过程中发生的各个重要事件。这样，客户端就可以知道主从切换进行到哪一步了，有助于了解切换进度。</p>
<p>有了 pub/sub 机制，哨兵和哨兵之间、哨兵和从库之间、哨兵和客户端之间就都能建立起连接。</p>
<h3 id="由哪个哨兵执行主从切换？"><a href="#由哪个哨兵执行主从切换？" class="headerlink" title="由哪个哨兵执行主从切换？"></a>由哪个哨兵执行主从切换？</h3><p>确定由哪个哨兵执行主从切换的过程，和主库“客观下线”的判断过程类似，也是一个“投票仲裁”的过程。哨兵集群要判定主库“客观下线”，需要有一定数量的实例都认为该主库已经“主观下线”了。任何一个实例只要自身判断主库“主观下线”后，就会给其他实例发送 is-master-down-by-addr 命令。接着，其他实例会根据自己和主库的连接情况，做出 Y 或 N 的响应，Y 相当于赞成票，N 相当于反对票。</p>
<img src="/posts/image-20220914102953991.png" alt="image-20220914102953991" style="zoom:67%;">

<p>一个哨兵获得了仲裁所需的赞成票数后，就可以标记主库为“客观下线”。这个所需的赞成票数是通过哨兵配置文件中的 quorum 配置项设定的。例如，现在有 5 个哨兵，quorum 配置的是 3，那么，一个哨兵需要 3 张赞成票，就可以标记主库为“客观下线”了。这 3 张赞成票包括哨兵自己的一张赞成票和另外两个哨兵的赞成票。</p>
<p>这个哨兵就可以再给其他哨兵发送命令，表明希望由自己来执行主从切换，并让所有其他哨兵进行投票。这个投票过程称为“Leader 选举”。因为最终执行主从切换的哨兵称为 Leader，投票过程就是确定 Leader。</p>
<p>投票过程中，要成为 Leader 的哨兵，需满足两个条件：</p>
<ul>
<li>拿到半数以上的赞成票；</li>
<li>拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值。</li>
</ul>
<p>例如，3 个哨兵、quorum 为 2 的选举过程。</p>
<img src="/posts/image-20220914103255201.png" alt="image-20220914103255201" style="zoom: 67%;">

<p>在 T1 时刻，S1 判断主库为“客观下线”，它想成为 Leader，就先给自己投一张赞成票，然后分别向 S2 和 S3 发送命令，表示要成为 Leader。在 T2 时刻，S3 判断主库为“客观下线”，它也想成为 Leader，所以也先给自己投一张赞成票，再分别向 S1 和 S2 发送命令，表示要成为 Leader。</p>
<p>在 T3 时刻，S1 收到了 S3 的 Leader 投票请求。因为 S1 已经给自己投了一票 Y，所以它不能再给其他哨兵投赞成票了，所以 S1 回复 N 表示不同意。同时，S2 收到了 T2 时 S3发送的 Leader 投票请求。因为 S2 之前没有投过票，它会给第一个向它发送投票请求的哨兵回复 Y，给后续再发送投票请求的哨兵回复 N，所以，在 T3 时，S2 回复 S3，同意 S3 成为 Leader。</p>
<p>在 T4 时刻，S2 才收到 T1 时 S1 发送的投票命令。因为 S2 已经在 T3 时同意了 S3 的投票请求，此时，S2 给 S1 回复 N，表示不同意 S1 成为 Leader。发生这种情况，是因为S3 和 S2 之间的网络传输正常，而 S1 和 S2 之间的网络传输可能正好拥塞了，导致投票请求传输慢了。（先到先得）</p>
<p>最后，在 T5 时刻，S1 得到的票数是来自它自己的一票 Y 和来自 S2 的一票 N。而 S3 除了自己的赞成票 Y 以外，还收到了来自 S2 的一票 Y。此时，S3 不仅获得了半数以上的Leader 赞成票，也达到预设的 quorum 值（quorum 为 2），所以它最终成为了 Leader。接着，S3 会开始执行选主操作，而且在选定新主库后，会给其他从库和客户端通知新主库的信息。</p>
<p>如果 S3 没有拿到 2 票 Y，那么这轮投票就不会产生 Leader。哨兵集群会等待一段时间（也就是哨兵故障转移超时时间的 2 倍），再重新选举。这是因为，<strong>哨兵集群能够进行成功投票，很大程度上依赖于选举命令的正常网络传播</strong>。如果网络压力较大或有短时堵塞，就可能导致没有一个哨兵能拿到半数以上的赞成票。所以，等到网络拥塞好转之后，再进行投票选举，成功的概率就会增加。</p>
<p>注意，如果哨兵集群只有 2 个实例，此时，一个哨兵要想成为 Leader，必须获得 2 票，而不是 1 票。所以，如果有个哨兵挂掉了，那么，此时的集群是无法进行主从库切换的。因此，通常我们至少会配置 3 个哨兵实例。</p>
<p><strong>要保证所有哨兵实例的配置是一致的，尤其是主观下线的判断值 down-after-milliseconds</strong>。因为这个值在不同的哨兵实例上配置不一致，会导致哨兵集群一直没有对有故障的主库形成共识，也就没有及时切换主库，最终的结果就是集群服务不稳定。</p>
<h2 id="切片集群"><a href="#切片集群" class="headerlink" title="切片集群"></a>切片集群</h2><p>切片集群，也叫分片集群，就是指启动多个 Redis 实例组成一个集群，然后按照一定的规则，把收到的数据划分成多份，每一份用一个实例来保存。如果把 25GB 的数据平均分成 5 份（当然，也可以不做均分），使用 5 个实例来保存，每个实例只需要保存 5GB 数据。如下图所示：</p>
<img src="/posts/image-20220914104532461.png" alt="image-20220914104532461" style="zoom: 50%;">

<p>在切片集群中，实例在为 5GB 数据生成 RDB 时，数据量就小了很多，fork 子进程一般不会给主线程带来较长时间的阻塞。采用多个实例保存数据切片后，我们既能保存25GB 数据，又避免了 fork 子进程阻塞主线程而导致的响应突然变慢。</p>
<p>在实际应用 Redis 时，随着用户或业务规模的扩展，保存大量数据的情况通常是无法避免的。而切片集群，就是一个非常好的解决方案。</p>
<h3 id="如何保存更多的数据"><a href="#如何保存更多的数据" class="headerlink" title="如何保存更多的数据"></a>如何保存更多的数据</h3><p>刚刚的案例里，为了保存大量数据，我们使用了大内存云主机和切片集群两种方法。实际上，这两种方法分别对应着 Redis 应对数据量增多的两种方案：纵向扩展（scale up）和横向扩展（scale out）。</p>
<ul>
<li><strong>纵向扩展</strong>：升级单个 Redis 实例的资源配置，包括增加内存容量、增加磁盘容量、使用更高配置的 CPU。就像下图中，原来的实例内存是 8GB，硬盘是 50GB，纵向扩展后，内存增加到 24GB，磁盘增加到 150GB。</li>
<li><strong>横向扩展</strong>：横向增加当前 Redis 实例的个数。就像下图中，原来使用 1 个 8GB 内存、50GB 磁盘的实例，现在使用三个相同配置的实例。</li>
</ul>
<img src="/posts/image-20220914104752293.png" alt="image-20220914104752293" style="zoom:50%;">

<p>纵向扩展的好处是，<strong>实施起来简单、直接</strong>。不过存在两个潜在的问题：</p>
<ul>
<li>当使用 RDB 对数据进行持久化时，如果数据量增加，需要的内存也会增加，主线程 fork 子进程时就可能会阻塞。不过，如果你不要求持久化保存 Redis 数据，那么，纵向扩展会是一个不错的选择。</li>
<li><strong>纵向扩展会受到硬件和成本的限制</strong>。</li>
</ul>
<p>与纵向扩展相比，横向扩展是一个扩展性更好的方案。这是因为，要想保存更多的数据，采用这种方案的话，只用增加 Redis 的实例个数就行了，不用担心单个实例的硬件和成本限制。<strong>在面向百万、千万级别的用户规模时，横向扩展的 Redis 切片集群会是一个非常好的选择</strong>。</p>
<p>但是，切片集群不可避免地涉及到多个实例的分布式管理问题。</p>
<ul>
<li>数据切片后，在多个实例之间如何分布？</li>
<li>客户端怎么确定想要访问的数据在哪个实例上？</li>
</ul>
<h3 id="数据切片和实例的对应分布关系"><a href="#数据切片和实例的对应分布关系" class="headerlink" title="数据切片和实例的对应分布关系"></a>数据切片和实例的对应分布关系</h3><p><strong>Redis Cluster 方案</strong>中规定了数据和实例的对应规则。具体来说，Redis Cluster 方案采用<strong>哈希槽</strong>（Hash Slot，接下来我会直接称之为 Slot），来处理数据和实例之间的映射关系。在 Redis Cluster 方案中，一个切片集群共有 16384 个哈希槽，这些哈希槽类似于数据分区，每个键值对都会根据它的 key，被映射到一个哈希槽中。具体的映射过程分为两大步：</p>
<ul>
<li>首先根据键值对的 key，按照CRC16 算法计算一个 16 bit 的值；</li>
<li>然后，再用这个 16bit 值对 16384 取模，得到 0~16383 范围内的模数，每个模数代表一个相应编号的哈希槽。</li>
</ul>
<p>在部署 Redis Cluster 方案时，可以使用 cluster create 命令创建集群，此时，Redis 会自动把这些槽平均分布在集群实例上。例如，如果集群中有 N 个实例，那么，每个实例上的槽个数为 16384/N 个。也可以使用 cluster meet 命令手动建立实例间的连接，形成集群，再使用cluster addslots 命令，指定每个实例上的哈希槽个数。</p>
<p>假设集群中不同 Redis 实例的内存大小配置不一，如果把哈希槽均分在各个实例上，在保存相同数量的键值对时，和内存大的实例相比，内存小的实例就会有更大的容量压力。遇到这种情况时，你可以根据不同实例的资源配置情况，使用 cluster addslots 命令手动分配哈希槽。</p>
<p>数据、哈希槽、实例这三者的映射分布：</p>
<img src="/posts/image-20220914111750808.png" alt="image-20220914111750808" style="zoom:67%;">

<p>示意图中的切片集群一共有 3 个实例，同时假设有 5 个哈希槽，我们首先可以通过下面的命令手动分配哈希槽：实例 1 保存哈希槽 0 和 1，实例 2 保存哈希槽 2 和 3，实例 3 保存哈希槽 4。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">redis-cli -h <span class="number">172.16</span><span class="number">.19</span><span class="number">.3</span> –p <span class="number">6379</span> cluster addslots <span class="number">0</span>,<span class="number">1</span> </span><br><span class="line">redis-cli -h <span class="number">172.16</span><span class="number">.19</span><span class="number">.4</span> –p <span class="number">6379</span> cluster addslots <span class="number">2</span>,<span class="number">3</span> </span><br><span class="line">redis-cli -h <span class="number">172.16</span><span class="number">.19</span><span class="number">.5</span> –p <span class="number">6379</span> cluster addslots <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>在集群运行的过程中，key1 和 key2 计算完 CRC16 值后，对哈希槽总个数 5 取模，再根据各自的模数结果，就可以被映射到对应的实例 1 和实例 3 上了。<strong>在手动分配哈希槽时，需要把 16384 个槽都分配完，否则 Redis 集群无法正常工作</strong>。</p>
<h3 id="客户端如何定位数据"><a href="#客户端如何定位数据" class="headerlink" title="客户端如何定位数据"></a>客户端如何定位数据</h3><p>进一步定位到实例，还需要知道哈希槽分布在哪个实例上。一般来说，客户端和集群实例建立连接后，实例就会把哈希槽的分配信息发给客户端。但是，在集群刚刚创建的时候，每个实例只知道自己被分配了哪些哈希槽，是不知道其他实例拥有的哈希槽信息的。</p>
<p>Redis 实例会把自己的哈希槽信息发给和它相连接的其它实例，来完成哈希槽分配信息的扩散。当实例之间相互连接后，每个实例就有所有哈希槽的映射关系了。</p>
<p>客户端收到哈希槽信息后，会把哈希槽信息缓存在本地。当客户端请求键值对时，会先计算键所对应的哈希槽，然后就可以给相应的实例发送请求了。</p>
<p>但是，在集群中，实例和哈希槽的对应关系并不是一成不变的，最常见的变化有两个：</p>
<ul>
<li>在集群中，实例有新增或删除，Redis 需要重新分配哈希槽；</li>
<li>为了负载均衡，Redis 需要把哈希槽在所有实例上重新分布一遍。</li>
</ul>
<p>Redis Cluster 方案提供了一种<strong>重定向机制，</strong>客户端给一个实例发送数据读写操作时，这个实例上并没有相应的数据，客户端要再给一个新实例发送操作命令。</p>
<p>当客户端把一个键值对的操作请求发给一个实例时，如果这个实例上并没有这个键值对映射的哈希槽，那么，这个实例就会给客户端返回下面的 MOVED 命令响应结果，这个结果中就包含了新实例的访问地址。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">GET hello:<span class="built_in">key</span> </span><br><span class="line">(error) MOVED <span class="number">13320</span> <span class="number">172.16</span><span class="number">.19</span><span class="number">.5</span>:<span class="number">6379</span></span><br></pre></td></tr></table></figure>

<p>其中，MOVED 命令表示，客户端请求的键值对所在的哈希槽 13320，实际是在172.16.19.5 这个实例上。通过返回的 MOVED 命令，就相当于把哈希槽所在的新实例的信息告诉给客户端了。这样一来，客户端就可以直接和 172.16.19.5 连接，并发送操作请求了。</p>
<img src="/posts/image-20220914112545803.png" alt="image-20220914112545803" style="zoom:80%;">

<p>在上图中，当客户端给实例 2 发送命令时，Slot 2 中的数据已经全部迁移到了实例 3。在实际应用时，如果 Slot 2 中的数据比较多，就可能会出现一种情况：客户端向实例 2 发送请求，但此时，Slot 2 中的数据只有一部分迁移到了实例 3，还有部分数据没有迁移。在这种迁移部分完成的情况下，客户端就会收到一条 ASK 报错信息，如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">GET hello:<span class="built_in">key</span></span><br><span class="line">(error) ASK <span class="number">13320</span> <span class="number">172.16</span><span class="number">.19</span><span class="number">.5</span>:<span class="number">6379</span></span><br></pre></td></tr></table></figure>

<p>这个结果中的 ASK 命令就表示，客户端请求的键值对所在的哈希槽 13320，在172.16.19.5 这个实例上，但是这个哈希槽正在迁移。此时，客户端需要先给 172.16.19.5 这个实例发送一个 ASKING 命令。这个命令的意思是，让这个实例允许执行客户端接下来发送的命令。然后，客户端再向这个实例发送 GET 命令，以读取数据。</p>
<img src="/posts/image-20220914113239238.png" alt="image-20220914113239238" style="zoom: 80%;">

<p>Slot 2 正在从实例 2 往实例 3 迁移，key1 和 key2 已经迁移过去，key3 和 key4 还在实例 2。客户端向实例 2 请求 key2 后，就会收到实例 2 返回的 ASK 命令。ASK 命令表示两层含义：</p>
<ul>
<li>第一，表明 Slot 数据还在迁移中；</li>
<li>第二，ASK 命令把客户端所请求数据的最新实例地址返回给客户端，此时，客户端需要给实例 3 发送 ASKING 命令，然后再发送操作命令。</li>
</ul>
<p>和 MOVED 命令不同，<strong>ASK 命令并不会更新客户端缓存的哈希槽分配信息</strong>。上图中，如果客户端再次请求 Slot 2 中的数据，它还是会给实例 2 发送请求。这也就是说，ASK 命令的作用只是让客户端能给新实例发送一次请求，而不像 MOVED 命令那样，会更改本地缓存，让后续所有命令都发往新实例。</p>
]]></content>
  </entry>
  <entry>
    <title>Linux下的C++项目开发：聊天室（三）</title>
    <url>/posts/d2dacbee.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="多线程客户端"><a href="#多线程客户端" class="headerlink" title="多线程客户端"></a>多线程客户端</h2><p>公用的头文件写在global.h 与global.cpp，代码如下：</p>
<p>global.h:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _GLOBAL_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GLOBAL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> chrono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> unordered_map&lt;string,<span class="keyword">int</span>&gt; name_sock_map;<span class="comment">//记录名字和文件描述符</span></span><br><span class="line"><span class="keyword">extern</span> unordered_map&lt;<span class="keyword">int</span>,set&lt;<span class="keyword">int</span>&gt;&gt; group_map;<span class="comment">//记录群号和对应的文件描述符集合</span></span><br><span class="line"><span class="keyword">extern</span> unordered_map&lt;string,string&gt; from_to_map;<span class="comment">//key:用户名 value:key的用户想私聊的用户</span></span><br><span class="line"><span class="comment">//extern time_point&lt;system_clock&gt; begin_clock;//开始时间，用于压力测试</span></span><br><span class="line"><span class="comment">//extern clock_t begin_clock;//开始时间，用于性能测试，有bug</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">double</span> total_time;<span class="comment">//线程池处理任务的总时间</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> total_handle;<span class="comment">//总处理请求数，用于性能测试</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">double</span> top_speed;<span class="comment">//记录峰值性能</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> total_recv_request;<span class="comment">//接收到的请求总数，性能测试</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> Bloom_Filter_bitmap[<span class="number">1000000</span>];<span class="comment">//布隆过滤器所用的bitmap</span></span><br><span class="line"><span class="keyword">extern</span> queue&lt;<span class="keyword">int</span>&gt; mission_queue;<span class="comment">//任务队列</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> mission_num;<span class="comment">//任务队列中的任务数量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_cond_t</span> mission_cond;<span class="comment">//线程池所需的条件变量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_spinlock_t</span> name_mutex;<span class="comment">//互斥锁，锁住需要修改name_sock_map的临界区</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_spinlock_t</span> from_mutex;<span class="comment">//互斥锁，锁住修改from_to_map的临界区</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_spinlock_t</span> group_mutex;<span class="comment">//互斥锁，锁住修改group_map的临界区</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_mutex_t</span> queue_mutex;<span class="comment">//互斥锁，锁住修改任务队列的临界区</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> epollfd;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_spinlock_t</span> count_mutex;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>global.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;global.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">unordered_map&lt;string,<span class="keyword">int</span>&gt; name_sock_map;</span><br><span class="line">unordered_map&lt;<span class="keyword">int</span>,set&lt;<span class="keyword">int</span>&gt;&gt; group_map;</span><br><span class="line">unordered_map&lt;string,string&gt; from_to_map;<span class="comment">//key:用户名 value:key的用户想私聊的用户</span></span><br><span class="line"><span class="comment">//time_point&lt;system_clock&gt; begin_clock;</span></span><br><span class="line"><span class="keyword">double</span> total_time;<span class="comment">//线程池处理任务的总时间</span></span><br><span class="line"><span class="comment">//clock_t begin_clock;//开始时间，用于性能测试</span></span><br><span class="line"><span class="keyword">int</span> total_handle;<span class="comment">//总处理请求数，用于性能测试</span></span><br><span class="line"><span class="keyword">double</span> top_speed;<span class="comment">//记录峰值性能</span></span><br><span class="line"><span class="keyword">int</span> total_recv_request;<span class="comment">//接收到的请求总数，性能测试</span></span><br><span class="line"><span class="keyword">int</span> Bloom_Filter_bitmap[<span class="number">1000000</span>];<span class="comment">//布隆过滤器所用的bitmap</span></span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; mission_queue;<span class="comment">//任务队列</span></span><br><span class="line"><span class="keyword">int</span> mission_num;<span class="comment">//任务队列中的任务数量</span></span><br><span class="line"><span class="keyword">pthread_cond_t</span> mission_cond;<span class="comment">//线程池所需的条件变量</span></span><br><span class="line"><span class="keyword">pthread_spinlock_t</span> name_mutex;<span class="comment">//互斥锁，锁住需要修改name_sock_map的临界区</span></span><br><span class="line"><span class="keyword">pthread_spinlock_t</span> from_mutex;<span class="comment">//互斥锁，锁住修改from_to_map的临界区</span></span><br><span class="line"><span class="keyword">pthread_spinlock_t</span> group_mutex;<span class="comment">//互斥锁，锁住修改group_map的临界区</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> queue_mutex;<span class="comment">//互斥锁，锁住修改任务队列的临界区</span></span><br><span class="line"><span class="keyword">int</span> epollfd;</span><br><span class="line"><span class="keyword">pthread_spinlock_t</span> count_mutex;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>处理客户端的头文件HandleClient.h：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HANDLECLIENT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HANDLECLIENT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程执行此函数来发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">handle_send</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程执行此函数来接收消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">handle_recv</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>声明两个处理函数，一个发送消息函数，一个接收消息函数。</p>
<p>处理客户端的程序HandleClient.cpp：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;HandleClient.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">handle_recv</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock=*(<span class="keyword">int</span> *)arg;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> recv_buffer[<span class="number">1000</span>];</span><br><span class="line">        <span class="built_in">memset</span>(recv_buffer,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(recv_buffer));</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">recv</span>(sock,recv_buffer,<span class="built_in"><span class="keyword">sizeof</span></span>(recv_buffer),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="function">string <span class="title">str</span><span class="params">(recv_buffer)</span></span>;</span><br><span class="line">        cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">handle_send</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock=*(<span class="keyword">int</span> *)arg;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        string str;</span><br><span class="line">        cin&gt;&gt;str;</span><br><span class="line">        <span class="keyword">if</span>(str==<span class="string">&quot;exit&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(sock&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            str=<span class="string">&quot;content:&quot;</span>+str;</span><br><span class="line">            <span class="built_in">send</span>(sock,str.<span class="built_in">c_str</span>(),str.<span class="built_in">length</span>(),<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sock&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            str=<span class="string">&quot;gr_message:&quot;</span>+str;</span><br><span class="line">            <span class="built_in">send</span>(-sock,str.<span class="built_in">c_str</span>(),str.<span class="built_in">length</span>(),<span class="number">0</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收消息函数，接收传入的套接字描述符，读取消息到缓冲区recv_buffer，成功读取消息后输出字符串内容。</p>
<p>发送消息函数，传入发送数据的套接字描述符，读取输入的字符串，如果为”exit”，终止输入；如果套接字描述符的值大于0，为私聊消息，在输入的str前加上”content”前缀标记，执行数据发送；如果套接字描述符的值小于0，为群聊消息，在输入的str前加上”gr_message:”标记，执行数据发送。</p>
<p>多线程客户端主程序client.cpp:</p>
<p>头文件导入：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;HandleClient.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> *<span class="title">hand_recv</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> *<span class="title">handle_send</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>;</span><br></pre></td></tr></table></figure>

<p>主函数内容：</p>
<p>定义一个TCP协议的socket，设置服务器端的IP地址与端口号，客户端套接字描述符sock主动连接服务端，调用connect函数；choice记录用户输入的选项（0:退出，1:登录，2:注册），if_login记录是否成功登陆，如果成功登陆，记录该用户名login_name。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line"><span class="keyword">pthread_t</span> snd_thread, rcv_thread;</span><br><span class="line">sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;serv_addr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(serv_addr));</span><br><span class="line">serv_addr.sin_family = AF_INET;</span><br><span class="line">serv_addr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;192.168.3.202&quot;</span>);</span><br><span class="line">serv_addr.sin_port = <span class="built_in">htons</span>(<span class="number">8023</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">connect</span>(sock, (struct sockaddr *)&amp;serv_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(serv_addr)) == <span class="number">-1</span>)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;connect() error&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> choice;</span><br><span class="line">string name,pass,pass1;</span><br><span class="line"><span class="keyword">bool</span> if_login=<span class="literal">false</span>;<span class="comment">//记录是否登录成功</span></span><br><span class="line">string login_name;<span class="comment">//记录成功登录的用户名</span></span><br></pre></td></tr></table></figure>

<p><strong>新增模块：发送本地cookie，并接收服务器答复，如果答复通过就不用登录</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先检查是否存在cookie文件</span></span><br><span class="line"><span class="function">ifstream <span class="title">f</span><span class="params">(<span class="string">&quot;cookie.txt&quot;</span>)</span></span>;</span><br><span class="line">string cookie_str;</span><br><span class="line"><span class="keyword">if</span>(f.<span class="built_in">good</span>())&#123;</span><br><span class="line">    f&gt;&gt;cookie_str;</span><br><span class="line">    f.<span class="built_in">close</span>();</span><br><span class="line">    cookie_str=<span class="string">&quot;cookie:&quot;</span>+cookie_str;</span><br><span class="line">    <span class="comment">//将cookie发送到服务器</span></span><br><span class="line">    <span class="built_in">send</span>(sock,cookie_str.<span class="built_in">c_str</span>(),cookie_str.<span class="built_in">length</span>()+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//接收服务器答复</span></span><br><span class="line">    <span class="keyword">char</span> cookie_ans[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">memset</span>(cookie_ans,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cookie_ans));</span><br><span class="line">    <span class="built_in">recv</span>(sock,cookie_ans,<span class="built_in"><span class="keyword">sizeof</span></span>(cookie_ans),<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//判断服务器答复是否通过</span></span><br><span class="line">    <span class="function">string <span class="title">ans_str</span><span class="params">(cookie_ans)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(ans_str!=<span class="string">&quot;NULL&quot;</span>)&#123;<span class="comment">//redis查询到了cookie，通过</span></span><br><span class="line">        if_login=<span class="literal">true</span>;</span><br><span class="line">        login_name=ans_str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>初始未登录时：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!if_login)&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; ------------------\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;|                  |\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;| 请输入你要的选项:|\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;|    0:退出        |\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;|    1:登录        |\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;|    2:注册        |\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;|                  |\n&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; ------------------ \n\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>处理登录与注册事务，如果已登录，跳出该事务；输入choice，choice为0跳出循环；choice为1，输入用户账号与密码合并为字符串str，str前加入”login”前缀标记，发送登录消息，定义buffer缓存区接收服务端的接收响应，接收消息为recv_str，如果为”ok”，代表密码正确登录成功，本地建立cookie文件保存sessionid。sessionid的起始位置为recv_str的第三位，登录成功则跳出该事务，失败提示密码或用户名错误，等待输入choice选项。输入choice为2，执行注册事务，输入用户名与密码，密码需要第二次输入确认，字符串str存储用户账号+密码，发送到服务端。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开始处理各种事务</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(if_login)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    cin&gt;&gt;choice;</span><br><span class="line">    <span class="keyword">if</span>(choice==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">//登录</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">1</span>&amp;&amp;!if_login)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;用户名:&quot;</span>;</span><br><span class="line">            cin&gt;&gt;name;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;密码:&quot;</span>;</span><br><span class="line">            cin&gt;&gt;pass;</span><br><span class="line">            string str=<span class="string">&quot;login&quot;</span>+name;</span><br><span class="line">            str+=<span class="string">&quot;pass:&quot;</span>;</span><br><span class="line">            str+=pass;</span><br><span class="line">            <span class="built_in">send</span>(sock,str.<span class="built_in">c_str</span>(),str.<span class="built_in">length</span>(),<span class="number">0</span>);<span class="comment">//发送登录信息</span></span><br><span class="line">            <span class="keyword">char</span> buffer[<span class="number">1000</span>];</span><br><span class="line">            <span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(buffer));</span><br><span class="line">            <span class="built_in">recv</span>(sock,buffer,<span class="built_in"><span class="keyword">sizeof</span></span>(buffer),<span class="number">0</span>);<span class="comment">//接收响应</span></span><br><span class="line">            <span class="function">string <span class="title">recv_str</span><span class="params">(buffer)</span></span>;</span><br><span class="line">            <span class="keyword">if</span>(recv_str.<span class="built_in">substr</span>(<span class="number">0</span>,<span class="number">2</span>)==<span class="string">&quot;ok&quot;</span>)&#123;</span><br><span class="line">                if_login=<span class="literal">true</span>;</span><br><span class="line">                login_name=name;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//新增：本地建立cookie文件保存sessionid</span></span><br><span class="line">                string tmpstr=recv_str.<span class="built_in">substr</span>(<span class="number">2</span>);</span><br><span class="line">                tmpstr=<span class="string">&quot;cat &gt; cookie.txt &lt;&lt;end \n&quot;</span>+tmpstr+<span class="string">&quot;\nend&quot;</span>;</span><br><span class="line">                <span class="built_in">system</span>(tmpstr.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;登陆成功\n\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;密码或用户名错误！\n\n&quot;</span>;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注册</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">2</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;注册的用户名:&quot;</span>;</span><br><span class="line">        cin&gt;&gt;name;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;密码:&quot;</span>;</span><br><span class="line">            cin&gt;&gt;pass;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;确认密码:&quot;</span>;</span><br><span class="line">            cin&gt;&gt;pass1;</span><br><span class="line">            <span class="keyword">if</span>(pass==pass1)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;两次密码不一致!\n\n&quot;</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">        name=<span class="string">&quot;name:&quot;</span>+name;</span><br><span class="line">        pass=<span class="string">&quot;pass:&quot;</span>+pass;</span><br><span class="line">        string str=name+pass;</span><br><span class="line">        <span class="built_in">send</span>(sock,str.<span class="built_in">c_str</span>(),str.<span class="built_in">length</span>(),<span class="number">0</span>);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;注册成功！\n&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\n继续输入你要的选项:&quot;</span>;     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(if_login)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登录成功后，输入新的选项值choice（0:退出，1:私聊，2:群聊），建立两个线程分别执行发送与接收任务。choice为0，退出登录；choice为1，执行私聊事务，输入对方的用户名target_name，发送字符串为”target:”+target_name+”from:”+login_name，标记目标用户与源用户，执行发送函数，创建发送与接收线程，执行handle_send和handle_recv；choice为2，执行群聊事务，输入群号，字符串str加上”group:”前缀标记，发送到服务端，将sock套接字描述符的值变为负值，创建发送与接收线程，执行handle_send和handle_recv。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//登陆成功</span></span><br><span class="line"><span class="keyword">while</span>(if_login&amp;&amp;<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(if_login)&#123;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;        欢迎回来,&quot;</span>&lt;&lt;login_name&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot; -------------------------------------------\n&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;|                                           |\n&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;|          请选择你要的选项：               |\n&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;|              0:退出                       |\n&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;|              1:发起单独聊天               |\n&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;|              2:发起群聊                   |\n&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;|                                           |\n&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot; ------------------------------------------- \n\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;choice;</span><br><span class="line">    <span class="keyword">pthread_t</span> <span class="keyword">send_t</span>,<span class="keyword">recv_t</span>;<span class="comment">//线程ID</span></span><br><span class="line">    <span class="keyword">void</span> *thread_return;</span><br><span class="line">    <span class="keyword">if</span>(choice==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(choice==<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入对方的用户名:&quot;</span>;</span><br><span class="line">        string target_name,content;</span><br><span class="line">        cin&gt;&gt;target_name;</span><br><span class="line">        <span class="function">string <span class="title">sendstr</span><span class="params">(<span class="string">&quot;target:&quot;</span>+target_name+<span class="string">&quot;from:&quot;</span>+login_name)</span></span>;<span class="comment">//标识目标用户+源用户</span></span><br><span class="line">        <span class="built_in">send</span>(sock,sendstr.<span class="built_in">c_str</span>(),sendstr.<span class="built_in">length</span>(),<span class="number">0</span>);<span class="comment">//先向服务器发送目标用户、源用户</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入你想说的话(输入exit退出)：\n&quot;</span>;</span><br><span class="line">        <span class="keyword">auto</span> send_thread=<span class="built_in">pthread_create</span>(&amp;<span class="keyword">send_t</span>,<span class="literal">NULL</span>,handle_send,(<span class="keyword">void</span> *)&amp;sock);<span class="comment">//创建发送线程</span></span><br><span class="line">        <span class="keyword">auto</span> recv_thread=<span class="built_in">pthread_create</span>(&amp;<span class="keyword">recv_t</span>,<span class="literal">NULL</span>,handle_recv,(<span class="keyword">void</span> *)&amp;sock);<span class="comment">//创建接收线程</span></span><br><span class="line">        <span class="built_in">pthread_join</span>(<span class="keyword">send_t</span>,&amp;thread_return);</span><br><span class="line">        <span class="comment">//pthread_join(recv_t,&amp;thread_return);</span></span><br><span class="line">        <span class="built_in">pthread_cancel</span>(<span class="keyword">recv_t</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">if</span>(choice==<span class="number">2</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入群号:&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        cin&gt;&gt;num;</span><br><span class="line">        <span class="function">string <span class="title">sendstr</span><span class="params">(<span class="string">&quot;group:&quot;</span>+to_string(num))</span></span>;</span><br><span class="line">        <span class="built_in">send</span>(sock,sendstr.<span class="built_in">c_str</span>(),sendstr.<span class="built_in">length</span>(),<span class="number">0</span>);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入你想说的话(输入exit退出)：\n&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> sock1=-sock;</span><br><span class="line">        <span class="keyword">auto</span> send_thread=<span class="built_in">pthread_create</span>(&amp;<span class="keyword">send_t</span>,<span class="literal">NULL</span>,handle_send,(<span class="keyword">void</span> *)&amp;sock1);<span class="comment">//创建发送线程</span></span><br><span class="line">        <span class="keyword">auto</span> recv_thread=<span class="built_in">pthread_create</span>(&amp;<span class="keyword">recv_t</span>,<span class="literal">NULL</span>,handle_recv,(<span class="keyword">void</span> *)&amp;sock);<span class="comment">//创建接收线程</span></span><br><span class="line">        <span class="built_in">pthread_join</span>(<span class="keyword">send_t</span>,&amp;thread_return);</span><br><span class="line">        <span class="built_in">pthread_cancel</span>(<span class="keyword">recv_t</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">close</span>(sock);</span><br></pre></td></tr></table></figure>

<h2 id="线程池服务器"><a href="#线程池服务器" class="headerlink" title="线程池服务器"></a>线程池服务器</h2><p>公用头文件相同，global.h与global.cpp</p>
<p>处理线程池服务器的头文件HandleServerUseThreadPool.h，声明一个线程处理请求函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HANDLE_SERVER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HANDLE_SERVER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/tcp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hiredis/hiredis.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程执行此函数，处理请求</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_all_request</span><span class="params">(<span class="keyword">int</span> arg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>处理线程池服务器的文件HandleServerUseThreadPool.cpp，定义该线程处理请求函数。</p>
<p>name_sock_map记录用户名与套接字描述符（哈希表），group_map记录群号与套接字描述符集合（哈希表）。定义并创建两个互斥锁，分别用于修改name_sock_map的临界区和group_map的临界区。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;HandleServerUseThreadPool.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;global.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//extern unordered_map&lt;pair&lt;int,string&gt;,pair&lt;int,string&gt;&gt; from_to_map;//记录目标用户、源用户</span></span><br><span class="line"><span class="keyword">extern</span> unordered_map&lt;string,<span class="keyword">int</span>&gt; name_sock_map;<span class="comment">//名字和套接字描述符</span></span><br><span class="line"><span class="keyword">extern</span> unordered_map&lt;<span class="keyword">int</span>,set&lt;<span class="keyword">int</span>&gt;&gt; group_map;<span class="comment">//记录群号和套接字描述符集合</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_all_request</span><span class="params">(<span class="keyword">int</span> arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> mutx;<span class="comment">//互斥锁，锁住需要修改name_sock_map的临界区</span></span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> group_mutx;<span class="comment">//互斥锁，锁住修改group_map的临界区</span></span><br><span class="line">    <span class="built_in">pthread_mutex_init</span>(&amp;mutx, <span class="literal">NULL</span>); <span class="comment">//创建互斥锁</span></span><br><span class="line">    <span class="built_in">pthread_mutex_init</span>(&amp;group_mutx,<span class="literal">NULL</span>);<span class="comment">//创建互斥锁</span></span><br><span class="line">    <span class="keyword">int</span> conn=arg;</span><br><span class="line">    <span class="keyword">int</span> target_conn=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">1000</span>];</span><br><span class="line">    string name,pass;</span><br><span class="line">    <span class="keyword">bool</span> if_login=<span class="literal">false</span>;<span class="comment">//记录当前服务对象是否成功登录</span></span><br><span class="line">    string login_name;<span class="comment">//记录当前服务对象的名字</span></span><br><span class="line">    string target_name;<span class="comment">//记录发送信息时目标用户的名字</span></span><br><span class="line">    <span class="keyword">int</span> group_num;<span class="comment">//记录群号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接MYSQL数据库</span></span><br><span class="line">    MYSQL *con=<span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">mysql_real_connect</span>(con,<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;test_connect&quot;</span>,<span class="number">0</span>,<span class="literal">NULL</span>,CLIENT_MULTI_STATEMENTS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接redis数据库</span></span><br><span class="line">    redisContext *redis_target = <span class="built_in">redisConnect</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">    <span class="keyword">if</span>(redis_target-&gt;err)&#123;</span><br><span class="line">        <span class="built_in">redisFree</span>(redis_target);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;连接redis失败&quot;</span>&lt;&lt;endl;     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//禁用nagle算法，防止粘包</span></span><br><span class="line">    <span class="comment">//int enable = 1;</span></span><br><span class="line">    <span class="comment">//setsockopt(conn, IPPROTO_TCP, TCP_NODELAY, (void*)&amp;enable, sizeof(enable));</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-----------------------------\n&quot;</span>;</span><br><span class="line">        <span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(buffer));</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">recv</span>(conn, buffer, <span class="built_in"><span class="keyword">sizeof</span></span>(buffer),<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//断开了连接或者发生了异常</span></span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>||len==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">string <span class="title">str</span><span class="params">(buffer)</span></span>;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;&quot;用户&quot;&lt;&lt;inet_ntoa(clnt_adr.sin_addr)&lt;&lt;&quot;正在连接&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//新增：先接收cookie看看redis是否保存该用户的登录状态</span></span><br><span class="line">        <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;cookie:&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            string cookie=str.<span class="built_in">substr</span>(<span class="number">7</span>);</span><br><span class="line">            string redis_str=<span class="string">&quot;hget &quot;</span>+cookie+<span class="string">&quot; name&quot;</span>;</span><br><span class="line">            redisReply *r = (redisReply*)<span class="built_in">redisCommand</span>(redis_target,redis_str.<span class="built_in">c_str</span>());</span><br><span class="line">            string send_res;</span><br><span class="line">            <span class="keyword">if</span>(r-&gt;str)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;查询redis结果：&quot;</span>&lt;&lt;r-&gt;str&lt;&lt;endl;</span><br><span class="line">                send_res=r-&gt;str;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;sizeof(r-&gt;str)&lt;&lt;endl;</span></span><br><span class="line">                <span class="comment">// cout&lt;&lt;send_res.length()&lt;&lt;endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                send_res=<span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">            <span class="built_in">send</span>(conn,send_res.<span class="built_in">c_str</span>(),send_res.<span class="built_in">length</span>()+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//if(r-&gt;str==)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;login&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            <span class="keyword">int</span> p1=str.<span class="built_in">find</span>(<span class="string">&quot;login&quot;</span>),p2=str.<span class="built_in">find</span>(<span class="string">&quot;pass:&quot;</span>);</span><br><span class="line">            name=str.<span class="built_in">substr</span>(p1+<span class="number">5</span>,p2<span class="number">-5</span>);</span><br><span class="line">            pass=str.<span class="built_in">substr</span>(p2+<span class="number">5</span>,str.<span class="built_in">length</span>()-p2<span class="number">-4</span>);</span><br><span class="line">            string search=<span class="string">&quot;SELECT * FROM user WHERE NAME=\&quot;&quot;</span>;</span><br><span class="line">            search+=name;</span><br><span class="line">            search+=<span class="string">&quot;\&quot;;&quot;</span>;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;sql语句:&quot;</span>&lt;&lt;search&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">auto</span> search_res=<span class="built_in">mysql_query</span>(con,search.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="keyword">auto</span> result=<span class="built_in">mysql_store_result</span>(con);</span><br><span class="line">            <span class="keyword">int</span> col=<span class="built_in">mysql_num_fields</span>(result);<span class="comment">//获取列数</span></span><br><span class="line">            <span class="keyword">int</span> row=<span class="built_in">mysql_num_rows</span>(result);<span class="comment">//获取行数</span></span><br><span class="line">            <span class="comment">//auto info=mysql_fetch_row(result);//获取一行的信息</span></span><br><span class="line">            <span class="keyword">if</span>(search_res==<span class="number">0</span>&amp;&amp;row!=<span class="number">0</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;查询成功\n&quot;</span>;</span><br><span class="line">                <span class="comment">//auto result=mysql_store_result(con);</span></span><br><span class="line">                <span class="comment">//int col=mysql_num_fields(result);//获取列数</span></span><br><span class="line">                <span class="comment">//int row=mysql_num_rows(result);//获取行数</span></span><br><span class="line">                <span class="keyword">auto</span> info=<span class="built_in">mysql_fetch_row</span>(result);<span class="comment">//获取一行的信息</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;查询到用户名:&quot;</span>&lt;&lt;info[<span class="number">0</span>]&lt;&lt;<span class="string">&quot; 密码:&quot;</span>&lt;&lt;info[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">if</span>(info[<span class="number">1</span>]==pass)&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;登录密码正确\n&quot;</span>;</span><br><span class="line">                    string str1=<span class="string">&quot;ok&quot;</span>;</span><br><span class="line">                    if_login=<span class="literal">true</span>;</span><br><span class="line">                    login_name=name;</span><br><span class="line">                    <span class="built_in">pthread_mutex_lock</span>(&amp;mutx); <span class="comment">//上锁</span></span><br><span class="line">                    name_sock_map[name]=conn;<span class="comment">//记录下名字和文件描述符的对应关系</span></span><br><span class="line">                    <span class="built_in">pthread_mutex_unlock</span>(&amp;mutx); <span class="comment">//解锁</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//新添加：随机生成sessionid并发送到客户端</span></span><br><span class="line">                    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));<span class="comment">//初始化随机数种子</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                        <span class="keyword">int</span> type=<span class="built_in">rand</span>()%<span class="number">3</span>;</span><br><span class="line">                        <span class="comment">//type为0代表数字，为1代表小写字母，为2代表大写字母</span></span><br><span class="line">                        <span class="keyword">if</span>(type==<span class="number">0</span>)</span><br><span class="line">                            str1+=<span class="string">&#x27;0&#x27;</span>+<span class="built_in">rand</span>()%<span class="number">9</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">1</span>)</span><br><span class="line">                            str1+=<span class="string">&#x27;a&#x27;</span>+<span class="built_in">rand</span>()%<span class="number">26</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">2</span>)</span><br><span class="line">                            str1+=<span class="string">&#x27;A&#x27;</span>+<span class="built_in">rand</span>()%<span class="number">26</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//将sessionid存入redis</span></span><br><span class="line">                    string redis_str=<span class="string">&quot;hset &quot;</span>+str1.<span class="built_in">substr</span>(<span class="number">2</span>)+<span class="string">&quot; name &quot;</span>+login_name;</span><br><span class="line">                    redisReply *r = (redisReply*)<span class="built_in">redisCommand</span>(redis_target,redis_str.<span class="built_in">c_str</span>());</span><br><span class="line">                    <span class="comment">//设置生存时间,默认300秒</span></span><br><span class="line">                    redis_str=<span class="string">&quot;expire &quot;</span>+str1.<span class="built_in">substr</span>(<span class="number">2</span>)+<span class="string">&quot; 300&quot;</span>;</span><br><span class="line">                    r=(redisReply*)<span class="built_in">redisCommand</span>(redis_target,redis_str.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;随机生成的sessionid为：&quot;</span>&lt;&lt;str1.<span class="built_in">substr</span>(<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line">                    <span class="comment">//cout&lt;&lt;&quot;redis指令:&quot;&lt;&lt;r-&gt;str&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">                    <span class="built_in">send</span>(conn,str1.<span class="built_in">c_str</span>(),str1.<span class="built_in">length</span>()+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;登录密码错误\n&quot;</span>;</span><br><span class="line">                    <span class="keyword">char</span> str1[<span class="number">100</span>]=<span class="string">&quot;wrong&quot;</span>;</span><br><span class="line">                    <span class="built_in">send</span>(conn,str1,<span class="built_in">strlen</span>(str1),<span class="number">0</span>);</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;查询失败\n&quot;</span>;</span><br><span class="line">                <span class="keyword">char</span> str1[<span class="number">100</span>]=<span class="string">&quot;wrong&quot;</span>;</span><br><span class="line">                <span class="built_in">send</span>(conn,str1,<span class="built_in">strlen</span>(str1),<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;name:&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            <span class="keyword">int</span> p1=str.<span class="built_in">find</span>(<span class="string">&quot;name:&quot;</span>),p2=str.<span class="built_in">find</span>(<span class="string">&quot;pass:&quot;</span>);</span><br><span class="line">            name=str.<span class="built_in">substr</span>(p1+<span class="number">5</span>,p2<span class="number">-5</span>);</span><br><span class="line">            pass=str.<span class="built_in">substr</span>(p2+<span class="number">5</span>,str.<span class="built_in">length</span>()-p2<span class="number">-4</span>);</span><br><span class="line">            string search=<span class="string">&quot;INSERT INTO user VALUES (\&quot;&quot;</span>;</span><br><span class="line">            search+=name;</span><br><span class="line">            search+=<span class="string">&quot;\&quot;,\&quot;&quot;</span>;</span><br><span class="line">            search+=pass;</span><br><span class="line">            search+=<span class="string">&quot;\&quot;);&quot;</span>;</span><br><span class="line">            cout&lt;&lt;endl&lt;&lt;<span class="string">&quot;sql语句:&quot;</span>&lt;&lt;search&lt;&lt;endl;</span><br><span class="line">            <span class="built_in">mysql_query</span>(con,search.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">//设定目标的文件描述符</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;target:&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            <span class="keyword">int</span> pos1=str.<span class="built_in">find</span>(<span class="string">&quot;from&quot;</span>);</span><br><span class="line">            string target=str.<span class="built_in">substr</span>(<span class="number">7</span>,pos1<span class="number">-7</span>),from=str.<span class="built_in">substr</span>(pos1+<span class="number">4</span>);</span><br><span class="line">            <span class="comment">//pair&lt;string,int&gt; tmp1(from,name_sock_map[from]);</span></span><br><span class="line">            <span class="comment">//pair&lt;string,int&gt; tmp2(target,name_sock_map[target]);</span></span><br><span class="line">            <span class="comment">//from_to_map[tmp1]=tmp2;</span></span><br><span class="line">            target_name=target;</span><br><span class="line">            <span class="keyword">if</span>(name_sock_map.<span class="built_in">find</span>(target)==name_sock_map.<span class="built_in">end</span>())</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;源用户为&quot;</span>&lt;&lt;login_name&lt;&lt;<span class="string">&quot;,目标用户&quot;</span>&lt;&lt;target_name&lt;&lt;<span class="string">&quot;仍未登陆，无法发起私聊\n&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;源用户&quot;</span>&lt;&lt;login_name&lt;&lt;<span class="string">&quot;向目标用户&quot;</span>&lt;&lt;target_name&lt;&lt;<span class="string">&quot;发起的私聊即将建立&quot;</span>;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;,目标用户的套接字描述符为&quot;</span>&lt;&lt;name_sock_map[target]&lt;&lt;endl;</span><br><span class="line">                target_conn=name_sock_map[target];</span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收到消息，转发</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;content:&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target_conn==<span class="number">-1</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;找不到目标用户&quot;</span>&lt;&lt;target_name&lt;&lt;<span class="string">&quot;的套接字，将尝试重新寻找目标用户的套接字\n&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(name_sock_map.<span class="built_in">find</span>(target_name)!=name_sock_map.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    target_conn=name_sock_map[target_name];</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;重新查找目标用户套接字成功\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;查找仍然失败，转发失败！\n&quot;</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//char recv_buff[1000];</span></span><br><span class="line">            <span class="comment">//memset(recv_buff,0,sizeof(recv_buff));</span></span><br><span class="line">            <span class="comment">//int len=recv(conn,recv_buff,sizeof(recv_buff),0);</span></span><br><span class="line">            <span class="function">string <span class="title">recv_str</span><span class="params">(str)</span></span>;</span><br><span class="line">            string send_str=recv_str.<span class="built_in">substr</span>(<span class="number">8</span>);</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;用户&quot;</span>&lt;&lt;login_name&lt;&lt;<span class="string">&quot;向&quot;</span>&lt;&lt;target_name&lt;&lt;<span class="string">&quot;发送:&quot;</span>&lt;&lt;send_str&lt;&lt;endl;</span><br><span class="line">            send_str=<span class="string">&quot;[&quot;</span>+login_name+<span class="string">&quot;]:&quot;</span>+send_str;</span><br><span class="line">            <span class="built_in">send</span>(target_conn,send_str.<span class="built_in">c_str</span>(),send_str.<span class="built_in">length</span>(),<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定群聊号</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;group:&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            string <span class="built_in">recv_str</span>(str);</span><br><span class="line">            string num_str=recv_str.<span class="built_in">substr</span>(<span class="number">6</span>);</span><br><span class="line">            group_num=<span class="built_in">stoi</span>(num_str);</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;用户&quot;</span>&lt;&lt;login_name&lt;&lt;<span class="string">&quot;绑定群聊号为：&quot;</span>&lt;&lt;num_str&lt;&lt;endl;</span><br><span class="line">            <span class="built_in">pthread_mutex_lock</span>(&amp;group_mutx);<span class="comment">//上锁</span></span><br><span class="line">            <span class="comment">//group_map[group_num].push_back(conn);</span></span><br><span class="line">            group_map[group_num].<span class="built_in">insert</span>(conn);</span><br><span class="line">            <span class="built_in">pthread_mutex_unlock</span>(&amp;group_mutx);<span class="comment">//解锁</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//广播群聊信息</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;gr_message:&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            string <span class="built_in">send_str</span>(str);</span><br><span class="line">            send_str=send_str.<span class="built_in">substr</span>(<span class="number">11</span>);</span><br><span class="line">            send_str=<span class="string">&quot;[&quot;</span>+login_name+<span class="string">&quot;]:&quot;</span>+send_str;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;群聊信息：&quot;</span>&lt;&lt;send_str&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i:group_map[group_num])&#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=conn)</span><br><span class="line">                    <span class="built_in">send</span>(i,send_str.<span class="built_in">c_str</span>(),send_str.<span class="built_in">length</span>(),<span class="number">0</span>);</span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">mysql_close</span>(con);</span><br><span class="line">    <span class="built_in">close</span>(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>线程池服务器主函数serverUseThreadPool.cpp：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;HandleServerUseThreadPool.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;global.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">handle_all_request</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unordered_map&lt;pair&lt;int,string&gt;,pair&lt;int,string&gt;&gt; from_to_map;//记录源用户、目的用户</span></span><br><span class="line"><span class="keyword">extern</span> unordered_map&lt;string,<span class="keyword">int</span>&gt; name_sock_map;<span class="comment">//记录名字和套接字描述符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tmptest</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> serv_sock, clnt_sock; <span class="comment">//服务器端、客户端套接字描述符</span></span><br><span class="line">    sockaddr_in serv_adr,clnt_adr; <span class="comment">//服务器端、客户端的地址与端口号</span></span><br><span class="line">    <span class="keyword">socklen_t</span> clnt_adr_sz; <span class="comment">//记录客户端地址长度</span></span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> mutx;  <span class="comment">//互斥锁</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_mutex_init</span>(&amp;mutx, <span class="literal">NULL</span>); <span class="comment">//创建互斥锁</span></span><br><span class="line">    serv_sock = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//PF_INET:tcp/ip协议   SOCK_STREAM: tcp    0:默认协议</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serv_adr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(serv_adr));</span><br><span class="line">    serv_adr.sin_family = AF_INET;<span class="comment">//使用地址族</span></span><br><span class="line">    serv_adr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;172.29.18.134&quot;</span>);<span class="comment">//ip地址</span></span><br><span class="line">    serv_adr.sin_port = <span class="built_in">htons</span>(<span class="number">8023</span>);<span class="comment">//端口号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定套接字与地址</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bind</span>(serv_sock, (struct sockaddr *)&amp;serv_adr, <span class="built_in"><span class="keyword">sizeof</span></span>(serv_adr)) == <span class="number">-1</span>)</span><br><span class="line">         cout&lt;&lt;<span class="string">&quot;bind() error&quot;</span>;</span><br><span class="line">    <span class="comment">//服务器监听</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">listen</span>(serv_sock, <span class="number">5</span>) == <span class="number">-1</span>)<span class="comment">//连接队列大小为5</span></span><br><span class="line">         cout&lt;&lt;<span class="string">&quot;listen() error&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//vector&lt;int&gt; sock_arr;//记录套接字描述符</span></span><br><span class="line">    clnt_adr_sz = <span class="built_in"><span class="keyword">sizeof</span></span>(clnt_adr);</span><br><span class="line">    <span class="keyword">int</span> conn; <span class="comment">//连接套接字描述符</span></span><br><span class="line">    <span class="keyword">pthread_t</span> t_id;<span class="comment">//线程id</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增boost库线程池</span></span><br><span class="line">    <span class="comment">/* 定义一个5线程的线程池 */</span></span><br><span class="line">    boost::<span class="function">asio::thread_pool <span class="title">tp</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收连接成功</span></span><br><span class="line">    <span class="keyword">while</span>(conn = <span class="built_in">accept</span>(serv_sock, (struct sockaddr *)&amp;clnt_adr, &amp;clnt_adr_sz))&#123;</span><br><span class="line">        <span class="comment">//HandleServer target;</span></span><br><span class="line">        <span class="comment">//HandleServer::clnt_adr=clnt_adr;</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;用户&quot;</span>&lt;&lt;<span class="built_in">inet_ntoa</span>(clnt_adr.sin_addr)&lt;&lt;<span class="string">&quot;正在连接:\n&quot;</span>;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;conn&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//sock_arr.push_back((conn);</span></span><br><span class="line">        <span class="comment">//新增boost库线程池</span></span><br><span class="line">        boost::asio::<span class="built_in">post</span>(boost::<span class="built_in">bind</span>(handle_all_request,conn)); <span class="comment">// 执行函数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//pthread_create(&amp;t_id, NULL, handle_all_request, (void *)&amp;conn); </span></span><br><span class="line">        <span class="comment">//pthread_detach(t_id);  </span></span><br><span class="line">    &#125;</span><br><span class="line">    tp.<span class="built_in">join</span>();<span class="comment">//释放线程池</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IO复用-线程池服务器"><a href="#IO复用-线程池服务器" class="headerlink" title="IO复用+线程池服务器"></a>IO复用+线程池服务器</h2><p>服务器处理函数头文件HandleServerV2.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HANDLESERVERV2_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HANDLESERVERV2_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/tcp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hiredis/hiredis.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程执行此函数，处理请求</span></span><br><span class="line"><span class="comment">//void handle_all_request(string,int);</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">handle_all_request</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>服务器处理函数文件HandleServerV2.cpp</p>
<p>name_sock_map记录用户名与套接字描述符，group_map记录群号和套接字描述符集合，from_to_map记录用户xx要向用户yy发送信息，mission_queue为任务队列。需要创建4个互斥锁，锁住修改这四个变量的临界区。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;HandleServerV2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;global.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> unordered_map&lt;string,<span class="keyword">int</span>&gt; name_sock_map;<span class="comment">//名字和套接字描述符</span></span><br><span class="line"><span class="keyword">extern</span> unordered_map&lt;<span class="keyword">int</span>,set&lt;<span class="keyword">int</span>&gt;&gt; group_map;<span class="comment">//记录群号和套接字描述符集合</span></span><br><span class="line"><span class="keyword">extern</span> unordered_map&lt;string,string&gt; from_to_map;<span class="comment">//记录用户xx要向用户yy发送信息</span></span><br><span class="line"><span class="comment">//extern clock_t begin_clock;//开始时间，用于性能测试</span></span><br><span class="line"><span class="comment">//extern time_point&lt;system_clock&gt; begin_clock;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> total_handle;<span class="comment">//总处理请求数，用于性能测试</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> total_recv_request;<span class="comment">//接收到的请求总数，性能测试</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">double</span> top_speed;<span class="comment">//峰值性能</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> Bloom_Filter_bitmap[<span class="number">1000000</span>];<span class="comment">//布隆过滤器所用的bitmap</span></span><br><span class="line"><span class="keyword">extern</span> queue&lt;<span class="keyword">int</span>&gt; mission_queue;<span class="comment">//任务队列</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> mission_num;<span class="comment">//任务队列中的任务数量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_cond_t</span> mission_cond;<span class="comment">//线程池所需的条件变量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_spinlock_t</span> name_mutex;<span class="comment">//互斥锁，锁住需要修改name_sock_map的临界区</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_spinlock_t</span> group_mutex;<span class="comment">//互斥锁，锁住修改group_map的临界区</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_spinlock_t</span> from_mutex;<span class="comment">//互斥锁，锁住修改from_to_map的临界区</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_mutex_t</span> queue_mutex;<span class="comment">//互斥锁，锁住修改任务队列的临界区</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> epollfd;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_spinlock_t</span> count_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">handle_all_request</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;   <span class="comment">//(string epoll_str,int conn_num,int epollfd)&#123;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> conn_num;</span><br><span class="line">        <span class="comment">//取出任务</span></span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;queue_mutex);</span><br><span class="line">        <span class="keyword">while</span>(mission_queue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="built_in">pthread_cond_wait</span>(&amp;mission_cond,&amp;queue_mutex);</span><br><span class="line">        &#125;</span><br><span class="line">        conn_num=mission_queue.<span class="built_in">front</span>();</span><br><span class="line">        mission_queue.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;queue_mutex);</span><br><span class="line"></span><br><span class="line">        time_point&lt;system_clock&gt; begin_clock= system_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="comment">//pthread_spin_init(&amp;mutex, NULL); //创建互斥锁</span></span><br><span class="line">        <span class="comment">//pthread_spin_init(&amp;group_mutex,NULL);//创建互斥锁</span></span><br><span class="line">        <span class="keyword">int</span> conn=conn_num;</span><br><span class="line">        <span class="keyword">int</span> target_conn=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">1000</span>];</span><br><span class="line">        string name,pass;</span><br><span class="line">        <span class="keyword">bool</span> if_login=<span class="literal">false</span>;<span class="comment">//记录当前服务对象是否成功登录</span></span><br><span class="line">        string login_name;<span class="comment">//记录当前服务对象的名字</span></span><br><span class="line">        string target_name;<span class="comment">//记录发送信息时目标用户的名字</span></span><br><span class="line">        <span class="keyword">int</span> group_num;<span class="comment">//记录群号</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//连接MYSQL数据库</span></span><br><span class="line">        MYSQL *con=<span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">mysql_real_connect</span>(con,<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;test_connect&quot;</span>,<span class="number">0</span>,<span class="literal">NULL</span>,CLIENT_MULTI_STATEMENTS);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//连接redis数据库</span></span><br><span class="line">        redisContext *redis_target = <span class="built_in">redisConnect</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="keyword">if</span>(redis_target-&gt;err)&#123;</span><br><span class="line">            <span class="built_in">redisFree</span>(redis_target);</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;连接redis失败&quot;</span>&lt;&lt;endl;     </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//禁用nagle算法，防止粘包</span></span><br><span class="line">        <span class="comment">//int enable = 1;</span></span><br><span class="line">        <span class="comment">//setsockopt(conn, IPPROTO_TCP, TCP_NODELAY, (void*)&amp;enable, sizeof(enable));</span></span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-----------------------------\n&quot;</span>;</span><br><span class="line">        string recv_str;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line">            <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(buf));</span><br><span class="line">            <span class="keyword">int</span> ret  = <span class="built_in">recv</span>(conn, buf, <span class="built_in"><span class="keyword">sizeof</span></span>(buf), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;recv返回值小于0&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="comment">//对于非阻塞IO，下面的事件成立标识数据已经全部读取完毕</span></span><br><span class="line">                <span class="keyword">if</span>((errno == EAGAIN) || (errno == EWOULDBLOCK))&#123;</span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">&quot;数据读取完毕\n&quot;</span>);</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;接收到的完整内容为：&quot;</span>&lt;&lt;recv_str&lt;&lt;endl;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;开始处理事件&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;errno:&quot;</span>&lt;&lt;errno&lt;&lt;endl;</span><br><span class="line">                <span class="built_in">close</span>(conn);</span><br><span class="line">                <span class="built_in">mysql_close</span>(con);</span><br><span class="line">                <span class="keyword">if</span>(!redis_target-&gt;err)</span><br><span class="line">                    <span class="built_in">redisFree</span>(redis_target);</span><br><span class="line">                <span class="comment">//events[i].data.fd=-1;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;recv返回值为0&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="built_in">close</span>(conn);</span><br><span class="line">                <span class="built_in">mysql_close</span>(con);</span><br><span class="line">                <span class="keyword">if</span>(!redis_target-&gt;err)</span><br><span class="line">                    <span class="built_in">redisFree</span>(redis_target);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">                <span class="comment">//events[i].data.fd=-1;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;接收到内容如下: %s\n&quot;</span>,buf);</span><br><span class="line">                <span class="function">string <span class="title">tmp</span><span class="params">(buf)</span></span>;</span><br><span class="line">                recv_str+=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string str=recv_str;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//新增：先接收cookie看看redis是否保存该用户的登录状态</span></span><br><span class="line">        <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;cookie:&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            string cookie=str.<span class="built_in">substr</span>(<span class="number">7</span>);</span><br><span class="line">            string redis_str=<span class="string">&quot;hget &quot;</span>+cookie+<span class="string">&quot; name&quot;</span>;</span><br><span class="line">            redisReply *r = (redisReply*)<span class="built_in">redisCommand</span>(redis_target,redis_str.<span class="built_in">c_str</span>());</span><br><span class="line">            string send_res;</span><br><span class="line">            <span class="keyword">if</span>(r-&gt;str)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;查询redis结果：&quot;</span>&lt;&lt;r-&gt;str&lt;&lt;endl;</span><br><span class="line">                send_res=r-&gt;str;</span><br><span class="line">                <span class="built_in">pthread_spin_lock</span>(&amp;name_mutex); <span class="comment">//上锁</span></span><br><span class="line">                name_sock_map[send_res]=conn;<span class="comment">//记录下名字和文件描述符的对应关系</span></span><br><span class="line">                <span class="built_in">pthread_spin_unlock</span>(&amp;name_mutex); <span class="comment">//解锁</span></span><br><span class="line">                <span class="comment">//cout&lt;&lt;sizeof(r-&gt;str)&lt;&lt;endl;</span></span><br><span class="line">                <span class="comment">// cout&lt;&lt;send_res.length()&lt;&lt;endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                send_res=<span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">            <span class="built_in">send</span>(conn,send_res.<span class="built_in">c_str</span>(),send_res.<span class="built_in">length</span>()+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//if(r-&gt;str==)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;login&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            <span class="keyword">int</span> p1=str.<span class="built_in">find</span>(<span class="string">&quot;login&quot;</span>),p2=str.<span class="built_in">find</span>(<span class="string">&quot;pass:&quot;</span>),flag=<span class="number">0</span>;</span><br><span class="line">            name=str.<span class="built_in">substr</span>(p1+<span class="number">5</span>,p2<span class="number">-5</span>);</span><br><span class="line">            pass=str.<span class="built_in">substr</span>(p2+<span class="number">5</span>,str.<span class="built_in">length</span>()-p2<span class="number">-4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//新增布隆过滤器</span></span><br><span class="line">            <span class="comment">//对字符串使用哈希函数</span></span><br><span class="line">            <span class="keyword">int</span> hash=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> ch:name)&#123;</span><br><span class="line">                hash=hash*<span class="number">131</span>+ch;</span><br><span class="line">                <span class="keyword">if</span>(hash&gt;=<span class="number">10000000</span>)</span><br><span class="line">                    hash%=<span class="number">10000000</span>;                            </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> index=hash/<span class="number">32</span>,pos=hash%<span class="number">32</span>;</span><br><span class="line">            <span class="keyword">if</span>((Bloom_Filter_bitmap[index]&amp;(<span class="number">1</span>&lt;&lt;pos))==<span class="number">0</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;布隆过滤器查询为0，登录用户名必然不存在数据库中\n&quot;</span>;</span><br><span class="line">                <span class="keyword">char</span> str1[<span class="number">100</span>]=<span class="string">&quot;wrong&quot;</span>;</span><br><span class="line">                <span class="built_in">send</span>(conn,str1,<span class="built_in">strlen</span>(str1),<span class="number">0</span>);</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//布隆过滤器无法判断才要查数据库</span></span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">                string search=<span class="string">&quot;SELECT * FROM user WHERE NAME=\&quot;&quot;</span>;</span><br><span class="line">                search+=name;</span><br><span class="line">                search+=<span class="string">&quot;\&quot;;&quot;</span>;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;sql语句:&quot;</span>&lt;&lt;search&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">auto</span> search_res=<span class="built_in">mysql_query</span>(con,search.<span class="built_in">c_str</span>());</span><br><span class="line">                <span class="keyword">auto</span> result=<span class="built_in">mysql_store_result</span>(con);</span><br><span class="line">                <span class="comment">//int col=mysql_num_fields(result);//获取列数</span></span><br><span class="line">                <span class="keyword">int</span> row;</span><br><span class="line">                <span class="keyword">if</span>(result)</span><br><span class="line">                    row=<span class="built_in">mysql_num_rows</span>(result);<span class="comment">//获取行数</span></span><br><span class="line">                <span class="comment">//auto info=mysql_fetch_row(result);//获取一行的信息</span></span><br><span class="line">                <span class="keyword">if</span>(search_res==<span class="number">0</span>&amp;&amp;row!=<span class="number">0</span>)&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;查询成功\n&quot;</span>;</span><br><span class="line">                    <span class="comment">//auto result=mysql_store_result(con);</span></span><br><span class="line">                    <span class="comment">//int col=mysql_num_fields(result);//获取列数</span></span><br><span class="line">                    <span class="comment">//int row=mysql_num_rows(result);//获取行数</span></span><br><span class="line">                    <span class="keyword">auto</span> info=<span class="built_in">mysql_fetch_row</span>(result);<span class="comment">//获取一行的信息</span></span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;查询到用户名:&quot;</span>&lt;&lt;info[<span class="number">0</span>]&lt;&lt;<span class="string">&quot; 密码:&quot;</span>&lt;&lt;info[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">if</span>(info[<span class="number">1</span>]==pass)&#123;</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;登录密码正确\n&quot;</span>;</span><br><span class="line">                        string str1=<span class="string">&quot;ok&quot;</span>;</span><br><span class="line">                        if_login=<span class="literal">true</span>;</span><br><span class="line">                        login_name=name;</span><br><span class="line">                        <span class="built_in">pthread_spin_lock</span>(&amp;name_mutex); <span class="comment">//上锁</span></span><br><span class="line">                        name_sock_map[name]=conn;<span class="comment">//记录下名字和文件描述符的对应关系</span></span><br><span class="line">                        <span class="built_in">pthread_spin_unlock</span>(&amp;name_mutex); <span class="comment">//解锁</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//新添加：随机生成sessionid并发送到客户端</span></span><br><span class="line">                        <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));<span class="comment">//初始化随机数种子</span></span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                            <span class="keyword">int</span> type=<span class="built_in">rand</span>()%<span class="number">3</span>;<span class="comment">//type为0代表数字，为1代表小写字母，为2代表大写字母</span></span><br><span class="line">                            <span class="keyword">if</span>(type==<span class="number">0</span>)</span><br><span class="line">                                str1+=<span class="string">&#x27;0&#x27;</span>+<span class="built_in">rand</span>()%<span class="number">9</span>;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">1</span>)</span><br><span class="line">                                str1+=<span class="string">&#x27;a&#x27;</span>+<span class="built_in">rand</span>()%<span class="number">26</span>;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">2</span>)</span><br><span class="line">                                str1+=<span class="string">&#x27;A&#x27;</span>+<span class="built_in">rand</span>()%<span class="number">26</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//将sessionid存入redis</span></span><br><span class="line">                        string redis_str=<span class="string">&quot;hset &quot;</span>+str1.<span class="built_in">substr</span>(<span class="number">2</span>)+<span class="string">&quot; name &quot;</span>+login_name;</span><br><span class="line">                        redisReply *r = (redisReply*)<span class="built_in">redisCommand</span>(redis_target,redis_str.<span class="built_in">c_str</span>());</span><br><span class="line">                        <span class="comment">//设置生存时间,默认300秒</span></span><br><span class="line">                        redis_str=<span class="string">&quot;expire &quot;</span>+str1.<span class="built_in">substr</span>(<span class="number">2</span>)+<span class="string">&quot; 300&quot;</span>;</span><br><span class="line">                        r=(redisReply*)<span class="built_in">redisCommand</span>(redis_target,redis_str.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;随机生成的sessionid为：&quot;</span>&lt;&lt;str1.<span class="built_in">substr</span>(<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line">                        <span class="comment">//cout&lt;&lt;&quot;redis指令:&quot;&lt;&lt;r-&gt;str&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">                        <span class="built_in">send</span>(conn,str1.<span class="built_in">c_str</span>(),str1.<span class="built_in">length</span>()+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;登录密码错误\n&quot;</span>;</span><br><span class="line">                        <span class="keyword">char</span> str1[<span class="number">100</span>]=<span class="string">&quot;wrong&quot;</span>;</span><br><span class="line">                        <span class="built_in">send</span>(conn,str1,<span class="built_in">strlen</span>(str1),<span class="number">0</span>);</span><br><span class="line">                    &#125;   </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;查询失败\n&quot;</span>;</span><br><span class="line">                    <span class="keyword">char</span> str1[<span class="number">100</span>]=<span class="string">&quot;wrong&quot;</span>;</span><br><span class="line">                    <span class="built_in">send</span>(conn,str1,<span class="built_in">strlen</span>(str1),<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;name:&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            <span class="keyword">int</span> p1=str.<span class="built_in">find</span>(<span class="string">&quot;name:&quot;</span>),p2=str.<span class="built_in">find</span>(<span class="string">&quot;pass:&quot;</span>);</span><br><span class="line">            name=str.<span class="built_in">substr</span>(p1+<span class="number">5</span>,p2<span class="number">-5</span>);</span><br><span class="line">            pass=str.<span class="built_in">substr</span>(p2+<span class="number">5</span>,str.<span class="built_in">length</span>()-p2<span class="number">-4</span>);</span><br><span class="line">            string search=<span class="string">&quot;INSERT INTO user VALUES (\&quot;&quot;</span>;</span><br><span class="line">            search+=name;</span><br><span class="line">            search+=<span class="string">&quot;\&quot;,\&quot;&quot;</span>;</span><br><span class="line">            search+=pass;</span><br><span class="line">            search+=<span class="string">&quot;\&quot;);&quot;</span>;</span><br><span class="line">            cout&lt;&lt;endl&lt;&lt;<span class="string">&quot;sql语句:&quot;</span>&lt;&lt;search&lt;&lt;endl;</span><br><span class="line">            <span class="built_in">mysql_query</span>(con,search.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设定目标的文件描述符</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;target:&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            <span class="keyword">int</span> pos1=str.<span class="built_in">find</span>(<span class="string">&quot;from&quot;</span>);</span><br><span class="line">            string target=str.<span class="built_in">substr</span>(<span class="number">7</span>,pos1<span class="number">-7</span>),from=str.<span class="built_in">substr</span>(pos1+<span class="number">5</span>);</span><br><span class="line">            <span class="comment">//pair&lt;string,int&gt; tmp1(from,name_sock_map[from]);</span></span><br><span class="line">            <span class="comment">//pair&lt;string,int&gt; tmp2(target,name_sock_map[target]);</span></span><br><span class="line">            <span class="comment">//from_to_map[tmp1]=tmp2;</span></span><br><span class="line">            target_name=target;</span><br><span class="line">            <span class="keyword">if</span>(name_sock_map.<span class="built_in">find</span>(target)==name_sock_map.<span class="built_in">end</span>())</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;源用户为&quot;</span>&lt;&lt;from&lt;&lt;<span class="string">&quot;,目标用户&quot;</span>&lt;&lt;target_name&lt;&lt;<span class="string">&quot;仍未登陆，无法发起私聊\n&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">pthread_spin_lock</span>(&amp;from_mutex);</span><br><span class="line">                from_to_map[from]=target;</span><br><span class="line">                <span class="built_in">pthread_spin_unlock</span>(&amp;from_mutex);</span><br><span class="line">                login_name=from;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;源用户&quot;</span>&lt;&lt;login_name&lt;&lt;<span class="string">&quot;向目标用户&quot;</span>&lt;&lt;target_name&lt;&lt;<span class="string">&quot;发起的私聊即将建立&quot;</span>;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;,目标用户的套接字描述符为&quot;</span>&lt;&lt;name_sock_map[target]&lt;&lt;endl;</span><br><span class="line">                target_conn=name_sock_map[target];</span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收到消息，转发</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;content:&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            <span class="comment">//根据两个map找出当前用户和目标用户</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i:name_sock_map)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i.second==conn)&#123;</span><br><span class="line">                    login_name=i.first;</span><br><span class="line">                    target_name=from_to_map[i.first];</span><br><span class="line">                    target_conn=name_sock_map[target_name];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;       </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target_conn==<span class="number">-1</span>)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;找不到目标用户&quot;</span>&lt;&lt;target_name&lt;&lt;<span class="string">&quot;的套接字，将尝试重新寻找目标用户的套接字\n&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span>(name_sock_map.<span class="built_in">find</span>(target_name)!=name_sock_map.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    target_conn=name_sock_map[target_name];</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;重新查找目标用户套接字成功\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;查找仍然失败，转发失败！\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//char recv_buff[1000];</span></span><br><span class="line">            <span class="comment">//memset(recv_buff,0,sizeof(recv_buff));</span></span><br><span class="line">            <span class="comment">//int len=recv(conn,recv_buff,sizeof(recv_buff),0);</span></span><br><span class="line">            <span class="function">string <span class="title">recv_str</span><span class="params">(str)</span></span>;</span><br><span class="line">            string send_str=recv_str.<span class="built_in">substr</span>(<span class="number">8</span>);</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;用户&quot;</span>&lt;&lt;login_name&lt;&lt;<span class="string">&quot;向&quot;</span>&lt;&lt;target_name&lt;&lt;<span class="string">&quot;发送:&quot;</span>&lt;&lt;send_str&lt;&lt;endl;</span><br><span class="line">            send_str=<span class="string">&quot;[&quot;</span>+login_name+<span class="string">&quot;]:&quot;</span>+send_str;</span><br><span class="line">            <span class="built_in">send</span>(target_conn,send_str.<span class="built_in">c_str</span>(),send_str.<span class="built_in">length</span>(),<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//绑定群聊号</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;group:&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            string <span class="built_in">recv_str</span>(str);</span><br><span class="line">            string num_str=recv_str.<span class="built_in">substr</span>(<span class="number">6</span>);</span><br><span class="line">            group_num=<span class="built_in">stoi</span>(num_str);</span><br><span class="line">            <span class="comment">//找出当前用户</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i:name_sock_map)</span><br><span class="line">                <span class="keyword">if</span>(i.second==conn)&#123;</span><br><span class="line">                    login_name=i.first;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;用户&quot;</span>&lt;&lt;login_name&lt;&lt;<span class="string">&quot;绑定群聊号为：&quot;</span>&lt;&lt;num_str&lt;&lt;endl;</span><br><span class="line">            <span class="built_in">pthread_spin_lock</span>(&amp;group_mutex);<span class="comment">//上锁</span></span><br><span class="line">            <span class="comment">//group_map[group_num].push_back(conn);</span></span><br><span class="line">            group_map[group_num].<span class="built_in">insert</span>(conn);</span><br><span class="line">            <span class="built_in">pthread_spin_unlock</span>(&amp;group_mutex);<span class="comment">//解锁</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//广播群聊信息</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.<span class="built_in">find</span>(<span class="string">&quot;gr_message:&quot;</span>)!=str.npos)&#123;</span><br><span class="line">            <span class="comment">//找出当前用户</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i:name_sock_map)</span><br><span class="line">                <span class="keyword">if</span>(i.second==conn)&#123;</span><br><span class="line">                    login_name=i.first;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//找出群号</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i:group_map)</span><br><span class="line">                <span class="keyword">if</span>(i.second.<span class="built_in">find</span>(conn)!=i.second.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    group_num=i.first;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="function">string <span class="title">send_str</span><span class="params">(str)</span></span>;</span><br><span class="line">            send_str=send_str.<span class="built_in">substr</span>(<span class="number">11</span>);</span><br><span class="line">            send_str=<span class="string">&quot;[&quot;</span>+login_name+<span class="string">&quot;]:&quot;</span>+send_str;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;群聊信息：&quot;</span>&lt;&lt;send_str&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i:group_map[group_num])&#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=conn)</span><br><span class="line">                    <span class="built_in">send</span>(i,send_str.<span class="built_in">c_str</span>(),send_str.<span class="built_in">length</span>(),<span class="number">0</span>);</span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;  </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;---------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程工作完毕后重新注册事件</span></span><br><span class="line">        epoll_event event;</span><br><span class="line">        event.data.fd=conn;</span><br><span class="line">        event.events=EPOLLIN|EPOLLET|EPOLLONESHOT;</span><br><span class="line">        <span class="built_in">epoll_ctl</span>(epollfd,EPOLL_CTL_MOD,conn,&amp;event);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">mysql_close</span>(con);</span><br><span class="line">        <span class="keyword">if</span>(!redis_target-&gt;err)</span><br><span class="line">            <span class="built_in">redisFree</span>(redis_target);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//性能测试</span></span><br><span class="line">        <span class="keyword">auto</span> end_clock   = system_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="keyword">auto</span> duration = duration_cast&lt;microseconds&gt;(end_clock - begin_clock);</span><br><span class="line">        <span class="built_in">pthread_spin_lock</span>(&amp;count_mutex);</span><br><span class="line">        total_time+=<span class="built_in"><span class="keyword">double</span></span>(duration.<span class="built_in">count</span>()) * microseconds::period::num / microseconds::period::den; </span><br><span class="line">        total_handle++;</span><br><span class="line">        <span class="built_in">pthread_spin_unlock</span>(&amp;count_mutex);</span><br><span class="line">        <span class="comment">//double total_time=(double)(end_clock-begin_clock)/CLOCKS_PER_SEC;</span></span><br><span class="line">        <span class="comment">//cout&lt;&lt;begin_clock&lt;&lt;&quot; &quot;&lt;&lt;end_clock&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">double</span> now_rate=total_handle/total_time;</span><br><span class="line">        <span class="keyword">if</span>(now_rate&gt;top_speed)</span><br><span class="line">            top_speed=now_rate;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;已用时&quot;</span>&lt;&lt;total_time&lt;&lt;<span class="string">&quot;秒,&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;共收到&quot;</span>&lt;&lt;total_recv_request&lt;&lt;<span class="string">&quot;个请求,&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;已处理&quot;</span>&lt;&lt;total_handle&lt;&lt;<span class="string">&quot;个请求\n&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;处理一个请求平均需要&quot;</span>&lt;&lt;total_time/total_handle&lt;&lt;<span class="string">&quot;秒,&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;平均一秒处理&quot;</span>&lt;&lt;now_rate&lt;&lt;<span class="string">&quot;个请求\n&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;峰值性能为一秒处理&quot;</span>&lt;&lt;top_speed&lt;&lt;<span class="string">&quot;个请求&quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;---------------------------------\n&quot;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器主函数serverV2.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;global.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;HandleServerV2.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#define MAXLINE 1000  </span></span><br><span class="line"><span class="comment">//#define OPEN_MAX 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//listen的backlog大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTENQ 200</span></span><br><span class="line"><span class="comment">//监听端口号</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERV_PORT 8000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFTIM 1000 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//extern void handle_all_request(string epoll_str,int conn_num,int epollfd);</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span>* <span class="title">handle_all_request</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> unordered_map&lt;string,<span class="keyword">int</span>&gt; name_sock_map;<span class="comment">//记录名字和套接字描述符</span></span><br><span class="line"><span class="comment">//extern clock_t begin_clock;//开始时间，用于性能测试，有bug</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">double</span> total_time;<span class="comment">//线程池处理任务的总时间</span></span><br><span class="line"><span class="comment">//extern time_point&lt;system_clock&gt; begin_clock;//开始时间，压力测试</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> total_handle;<span class="comment">//总处理请求数，用于性能测试</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> total_recv_request;<span class="comment">//接收到的请求总数，性能测试</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> Bloom_Filter_bitmap[<span class="number">1000000</span>];<span class="comment">//布隆过滤器所用的bitmap</span></span><br><span class="line"><span class="keyword">extern</span> queue&lt;<span class="keyword">int</span>&gt; mission_queue;<span class="comment">//任务队列</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> mission_num;<span class="comment">//任务队列中的任务数量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_cond_t</span> mission_cond;<span class="comment">//线程池所需的条件变量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_spinlock_t</span> name_mutex;<span class="comment">//互斥锁，锁住需要修改name_sock_map的临界区</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_spinlock_t</span> from_mutex;<span class="comment">//互斥锁，锁住修改from_to_map的临界区</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_spinlock_t</span> group_mutex;<span class="comment">//互斥锁，锁住修改group_map的临界区</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_mutex_t</span> queue_mutex;<span class="comment">//互斥锁，锁住修改任务队列的临界区</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> epollfd;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">pthread_spinlock_t</span> count_mutex;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将参数的文件描述符设为非阻塞</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setnonblocking</span><span class="params">(<span class="keyword">int</span> sock)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> opts;  </span><br><span class="line">    opts=<span class="built_in">fcntl</span>(sock,F_GETFL);  </span><br><span class="line">    <span class="keyword">if</span>(opts&lt;<span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;fcntl(sock,GETFL)&quot;</span>);  </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    opts = opts|O_NONBLOCK;  </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fcntl</span>(sock,F_SETFL,opts)&lt;<span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;fcntl(sock,SETFL,opts)&quot;</span>);  </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </span><br><span class="line">    &#125;      </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_spin_init</span>(&amp;name_mutex, <span class="number">0</span>); <span class="comment">//创建互斥锁</span></span><br><span class="line">    <span class="built_in">pthread_spin_init</span>(&amp;group_mutex,<span class="number">0</span>);<span class="comment">//创建互斥锁</span></span><br><span class="line">    <span class="built_in">pthread_mutex_init</span>(&amp;queue_mutex,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">pthread_spin_init</span>(&amp;count_mutex,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">pthread_spin_init</span>(&amp;from_mutex,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">pthread_cond_init</span>(&amp;mission_cond,<span class="literal">NULL</span>);<span class="comment">//初始化条件变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, maxi, listenfd, connfd, sockfd,epfd,nfds;  </span><br><span class="line">    <span class="keyword">ssize_t</span> n;  </span><br><span class="line">    <span class="comment">//char line[MAXLINE];  </span></span><br><span class="line">    <span class="keyword">socklen_t</span> clilen;  </span><br><span class="line">    <span class="comment">//声明epoll_event结构体的变量,ev用于注册事件,数组用于回传要处理的事件  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>,<span class="title">events</span>[10000];</span>  </span><br><span class="line">    <span class="comment">//生成用于处理accept的epoll专用的文件描述符  </span></span><br><span class="line">    epfd=<span class="built_in">epoll_create</span>(<span class="number">10000</span>);</span><br><span class="line">    epollfd=epfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientaddr</span>;</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serveraddr</span>;</span>  </span><br><span class="line">    listenfd = <span class="built_in">socket</span>(PF_INET, SOCK_STREAM, <span class="number">0</span>);  </span><br><span class="line">    <span class="comment">//把socket设置为非阻塞方式  </span></span><br><span class="line">    <span class="built_in">setnonblocking</span>(listenfd);  </span><br><span class="line">    <span class="comment">//设置与要处理的事件相关的文件描述符  </span></span><br><span class="line">    ev.data.fd=listenfd;  </span><br><span class="line">    <span class="comment">//设置要处理的事件类型  </span></span><br><span class="line">    ev.events=EPOLLIN|EPOLLET;  </span><br><span class="line">    <span class="comment">//注册epoll事件  </span></span><br><span class="line">    <span class="built_in">epoll_ctl</span>(epfd,EPOLL_CTL_ADD,listenfd,&amp;ev); <span class="comment">//相当于Select模型的FD_SET  </span></span><br><span class="line">    <span class="comment">//设置serveraddr</span></span><br><span class="line">    <span class="built_in">bzero</span>(&amp;serveraddr, <span class="built_in"><span class="keyword">sizeof</span></span>(serveraddr));  </span><br><span class="line">    serveraddr.sin_family = AF_INET;  </span><br><span class="line">    serveraddr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;192.168.3.202&quot;</span>);<span class="comment">//此处设为服务器的ip</span></span><br><span class="line">    serveraddr.sin_port=<span class="built_in">htons</span>(<span class="number">8023</span>);  </span><br><span class="line">    <span class="built_in">bind</span>(listenfd,(sockaddr *)&amp;serveraddr, <span class="built_in"><span class="keyword">sizeof</span></span>(serveraddr));  </span><br><span class="line">    <span class="built_in">listen</span>(listenfd, LISTENQ); </span><br><span class="line">    clilen=<span class="built_in"><span class="keyword">sizeof</span></span>(clientaddr);</span><br><span class="line">    maxi = <span class="number">0</span>;   </span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;准备连数据库\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接MYSQL数据库</span></span><br><span class="line">    MYSQL *con=<span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">mysql_real_connect</span>(con,<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;test_connect&quot;</span>,<span class="number">0</span>,<span class="literal">NULL</span>,CLIENT_MULTI_STATEMENTS);</span><br><span class="line">    string search=<span class="string">&quot;SELECT * FROM user;&quot;</span>;</span><br><span class="line">    <span class="keyword">auto</span> search_res=<span class="built_in">mysql_query</span>(con,search.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">auto</span> result=<span class="built_in">mysql_store_result</span>(con);</span><br><span class="line">    <span class="keyword">int</span> row;</span><br><span class="line">    <span class="keyword">if</span>(result)</span><br><span class="line">        row=<span class="built_in">mysql_num_rows</span>(result);<span class="comment">//获取行数</span></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;连接数据库成功\n准备初始化布隆过滤器\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数据并完成布隆过滤器初始化</span></span><br><span class="line">    <span class="built_in">memset</span>(Bloom_Filter_bitmap,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(Bloom_Filter_bitmap));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line">        <span class="keyword">auto</span> info=<span class="built_in">mysql_fetch_row</span>(result);<span class="comment">//获取一行的信息</span></span><br><span class="line">        string read_name=info[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//对字符串使用哈希函数</span></span><br><span class="line">        <span class="keyword">int</span> hash=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;&quot;字符串：&quot;&lt;&lt;read_name;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> ch:read_name)&#123;</span><br><span class="line">            hash=hash*<span class="number">131</span>+ch;</span><br><span class="line">            <span class="keyword">if</span>(hash&gt;=<span class="number">10000000</span>)</span><br><span class="line">                hash%=<span class="number">10000000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hash%=<span class="number">32000000</span>;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;&quot;,hash值为：&quot;&lt;&lt;hash;</span></span><br><span class="line">        <span class="comment">//调整bitmap</span></span><br><span class="line">        <span class="keyword">int</span> index=hash/<span class="number">32</span>,pos=hash%<span class="number">32</span>;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;index&lt;&lt;&quot; &quot;&lt;&lt;pos&lt;&lt;endl;</span></span><br><span class="line">        Bloom_Filter_bitmap[index]|=(<span class="number">1</span>&lt;&lt;pos);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;&quot;,调整后的：&quot;&lt;&lt;Bloom_Filter_bitmap[index]&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mysql_close</span>(con);</span><br><span class="line">    <span class="keyword">int</span> one=<span class="number">0</span>,zero=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:Bloom_Filter_bitmap)&#123;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">32</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b&amp;i)</span><br><span class="line">                one++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                zero++;</span><br><span class="line">            b=(b&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;布隆过滤器中共有&quot;</span>&lt;&lt;one&lt;&lt;<span class="string">&quot;位被置为1，其余&quot;</span>&lt;&lt;zero&lt;&lt;<span class="string">&quot;位仍为0&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 定义一个10线程的线程池 */</span></span><br><span class="line">    <span class="comment">//boost::asio::thread_pool tp(10);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//10个线程的线程池</span></span><br><span class="line">    <span class="keyword">pthread_t</span> tid[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="built_in">pthread_create</span>(&amp;tid[i],<span class="literal">NULL</span>,handle_all_request,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//压力测试</span></span><br><span class="line">    total_time=<span class="number">0</span>;</span><br><span class="line">    total_handle=<span class="number">0</span>;</span><br><span class="line">    total_recv_request=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;  </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;--------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;epoll_wait阻塞中&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="comment">//等待epoll事件的发生  </span></span><br><span class="line">        nfds=<span class="built_in">epoll_wait</span>(epfd,events,<span class="number">10000</span>,<span class="number">-1</span>);<span class="comment">//最后一个参数是timeout，0:立即返回，-1:一直阻塞直到有事件，x:等待x毫秒</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;epoll_wait返回，有事件发生&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="comment">//处理所发生的所有事件  </span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nfds;++i)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="comment">//有新客户端连接服务器</span></span><br><span class="line">            <span class="keyword">if</span>(events[i].data.fd==listenfd) </span><br><span class="line">            &#123;  </span><br><span class="line">                connfd = <span class="built_in">accept</span>(listenfd,(sockaddr *)&amp;clientaddr, &amp;clilen);  </span><br><span class="line">                <span class="keyword">if</span>(connfd&lt;<span class="number">0</span>)&#123;  </span><br><span class="line">                     <span class="built_in">perror</span>(<span class="string">&quot;connfd&lt;0&quot;</span>);  </span><br><span class="line">                     <span class="built_in">exit</span>(<span class="number">1</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;用户&quot;</span>&lt;&lt;<span class="built_in">inet_ntoa</span>(clientaddr.sin_addr)&lt;&lt;<span class="string">&quot;正在连接\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//设置用于读操作的文件描述符  </span></span><br><span class="line">                ev.data.fd=connfd;  </span><br><span class="line">                <span class="comment">//设置用于注册的读操作事件，采用ET边缘触发，为防止多个线程处理同一socket而使用EPOLLONESHOT  </span></span><br><span class="line">                ev.events=EPOLLIN|EPOLLET|EPOLLONESHOT;</span><br><span class="line">                <span class="comment">//边缘触发要将套接字设为非阻塞</span></span><br><span class="line">                <span class="built_in">setnonblocking</span>(connfd);</span><br><span class="line">                <span class="comment">//注册ev  </span></span><br><span class="line">                <span class="built_in">epoll_ctl</span>(epfd,EPOLL_CTL_ADD,connfd,&amp;ev);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">//接收到读事件</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(events[i].events&amp;EPOLLIN)  </span><br><span class="line">            &#123;  </span><br><span class="line">                total_recv_request++;</span><br><span class="line">                sockfd = events[i].data.fd;</span><br><span class="line">                events[i].data.fd=<span class="number">-1</span>;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;接收到读事件&quot;</span>&lt;&lt;endl;</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">pthread_mutex_lock</span>(&amp;queue_mutex);</span><br><span class="line">                mission_queue.<span class="built_in">push</span>(sockfd);<span class="comment">//加入任务队列</span></span><br><span class="line">                <span class="built_in">pthread_cond_broadcast</span>(&amp;mission_cond);<span class="comment">//广播唤醒</span></span><br><span class="line">                <span class="built_in">pthread_mutex_unlock</span>(&amp;queue_mutex);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//string recv_str;</span></span><br><span class="line">                <span class="comment">//boost::asio::post(boost::bind(handle_all_request,recv_str,sockfd,epfd)); //加入任务队列，处理事件</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">close</span>(listenfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Linux下的C++项目开发：聊天室（二）</title>
    <url>/posts/9fc468bc.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><h3 id="MySQL基础"><a href="#MySQL基础" class="headerlink" title="MySQL基础"></a>MySQL基础</h3><p>数据库一般分为关系型数据库和非关系型数据库，关系型数据库有我们常见的 MySQL、Oracle 等，非关系型数据库有 Redis 等。</p>
<p>关系型数据库是用二维表格模型来组织数据信息的数据库。MySQL 实际上是一个关系数据库管理系统，在这个系统里面可以有多个数据库，每个数据库中可以有多张表，每张表中可以有多列属性和多行数据。</p>
<p>比如我们要添加用户注册功能，就可以创建一个专用的数据库，在数据库中建一张叫 USER 的表，表中包含用户名 NAME 和密码 PASSWORD 两列属性，然后下面的若干行就是具体的数据。</p>
<p><strong>SQL结构化查询语言</strong>：</p>
<p>SQL 即结构化查询语言，是一种数据库查询语言，用来管理关系数据库系统，以及对数据进行增删查改等操作。</p>
<p><strong>Linux下启动MySQL</strong>：</p>
<p>首先启动 MySQL 服务，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure>

<p>进入MySQL控制台：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">// 输入密码</span><br></pre></td></tr></table></figure>

<p>接下来就可以输入各种 SQL 语句管理数据库系统了。</p>
<p><strong>C++连接MySQL的环境配置：</strong></p>
<p>更新源并安装 dev 组件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y libmysqlclient-dev</span><br></pre></td></tr></table></figure>

<p>安装完毕之后查看 <code>/usr/include/mysql</code> 目录下，是否有 <code>mysql.h</code> 文件，如果有的话就说明安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /usr/include/mysql|grep mysql.h</span><br></pre></td></tr></table></figure>

<h3 id="测试连接MySQL"><a href="#测试连接MySQL" class="headerlink" title="测试连接MySQL"></a>测试连接MySQL</h3><p>常用函数：</p>
<p>初始化MYSQL结构函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MYSQL *<span class="title">mysql_init</span><span class="params">(MYSQL *mysql)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">描述：</span></span><br><span class="line"><span class="comment">	分配或初始化与mysql_real_connect()相适应的MYSQL对象。如果mysql是NULL指针，该函数将分配、初始化、并返回新对象。否则，将初始化对象，并返回对象的地址。如果mysql_init()分配了新的对象，当调用mysql_close()来关闭连接时。将释放该对象。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	初始化的MYSQL*句柄。如果无足够内存以分配新的对象，返回NULL。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>连接MySQL函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">MYSQL *<span class="title">mysql_real_connect</span><span class="params">(MYSQL *mysql, <span class="keyword">const</span> <span class="keyword">char</span> *host, <span class="keyword">const</span> <span class="keyword">char</span> *user, <span class="keyword">const</span> <span class="keyword">char</span> *passwd, <span class="keyword">const</span> <span class="keyword">char</span> *db, <span class="keyword">unsigned</span> <span class="keyword">int</span> port, <span class="keyword">const</span> <span class="keyword">char</span> *unix_socket, <span class="keyword">unsigned</span> <span class="keyword">long</span> client_flag)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">描述：</span></span><br><span class="line"><span class="comment">	尝试与运行在主机上的MySQL数据库引擎建立连接。在你能够执行需要有效MySQL连接句柄结构的任何其他API函数之前，mysql_real_connect()必须成功完成。</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	mysql：已有MYSQL结构的地址，调用mysql_real_connect()之前，必须调用mysql_init()来初始化MYSQL结构。</span></span><br><span class="line"><span class="comment">	host：主机名或IP地址。如果“host”是NULL或字符串&quot;localhost&quot;，连接将被视为与本地主机的连接。</span></span><br><span class="line"><span class="comment">	user：包含用户的MySQL登录ID。如果“user”是NULL或空字符串&quot;&quot;，用户将被视为当前用户。</span></span><br><span class="line"><span class="comment">	passwd：包含用户的密码。如果“passwd”是NULL，仅会对该用户的（拥有1个空密码字段的）用户表中的条目进行匹配检查。</span></span><br><span class="line"><span class="comment">	db：数据库名称。如果db为NULL，连接会将默认的数据库设为该值。</span></span><br><span class="line"><span class="comment">	port：端口号，如果“port”不是0，其值将用作TCP/IP连接的端口号。注意，“host”参数决定了连接的类型。一般设置为0.</span></span><br><span class="line"><span class="comment">	unix_socket：一般设置为NULL，如果unix_socket不是NULL，该字符串描述了应使用的套接字或命名管道。注意，“host”参数决定了连接的类型。</span></span><br><span class="line"><span class="comment">	client_flag：标志位，通常为0，但也能将其设置为一些标志的组合，以允许特定功能。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	如果连接成功，返回MYSQL*连接句柄。如果连接失败，返回NULL。对于成功的连接，返回值与第1个参数的值相同。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>MySQL查询函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mysql_query</span><span class="params">(MYSQL *mysql, <span class="keyword">const</span> <span class="keyword">char</span> *query)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">描述：</span></span><br><span class="line"><span class="comment">	执行由“Null终结的字符串”查询指向的SQL查询。正常情况下，字符串必须包含1条SQL语句，而且不应为语句添加终结分号（‘;’）或“\g”。如果允许多语句执行，字符串可包含多条由分号隔开的语句。</span></span><br><span class="line"><span class="comment">	mysql_query()不能用于包含二进制数据的查询，应使用mysql_real_query()取而代之（二进制数据可能包含字符‘\0’，mysql_query()会将该字符解释为查询字符串结束）。</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	mysql：指向MYSQL类型的指针</span></span><br><span class="line"><span class="comment">	query：一条查询语句，一般以分号结尾</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	如果查询成功，返回0。如果出现错误，返回非0值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test_mysql.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql/mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MYSQL *con = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">mysql_real_connect</span>(con, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;test_connect&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>, CLIENT_MULTI_STATEMENTS);</span><br><span class="line">    <span class="comment">// 标志位：通知服务器，客户端可能在单个字符串内发送多条语句（由‘;’隔开）。如果未设置该标志，将禁止多语句执行。</span></span><br><span class="line">    string str=<span class="string">&quot;INSERT INTO user VALUES (&#x27;FYL&#x27;,&#x27;abc123&#x27;);&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">mysql_query</span>(con,str.<span class="built_in">c_str</span>()))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;success!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MySQL建表"><a href="#MySQL建表" class="headerlink" title="MySQL建表"></a>MySQL建表</h3><p>聊天室项目中，将用户注册的账号与密码发送到服务器端，并保存在服务器的 MySQL 数据库中。进入服务器端的MySQL控制台：</p>
<p>首先在 MySQL 控制台创建数据库 ChatProject，如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database ChatProject;</span><br></pre></td></tr></table></figure>

<p>接下来先用 use 命令切换到新建的数据库。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use ChatProject;</span><br></pre></td></tr></table></figure>

<p>然后新建一张表格叫 USER 用来保存账号信息，表中有账号 NAME 和密码 PASSWORD 两项属性，都为 VARCHAR 可变长度字符串类型，且将账号 NAME 设为 PRIMARY KEY 主键，主键不允许重复保证了账号的唯一性，而且主键能自动建立索引加快查询速度。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span>(</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    PASSWORD <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>建好表之后我们可以查看当前数据库中所有的表格。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure>

<p>最后输入 <code>exit</code> 即可离开 MySQL 控制台回到终端。</p>
<h2 id="常用SQL语句"><a href="#常用SQL语句" class="headerlink" title="常用SQL语句"></a>常用SQL语句</h2><h3 id="SQL语句类别"><a href="#SQL语句类别" class="headerlink" title="SQL语句类别"></a>SQL语句类别</h3><ul>
<li>数据定义语言 DDL（Data Definition Language）：例如<code>CREATE，DROP，ALTER</code>等，对逻辑结构等有操作的，其中包括表结构，视图和索引。</li>
<li>数据查询语言 DQL（Data Query Language）：即查询操作，以<code>SELECT</code>关键字为主，各种简单查询、连接查询等都属于 DQL。</li>
<li>数据操纵语言 DML（Data Manipulation Language）：例如<code>INSERT，UPDATE，DELETE</code>等，对数据进行操作的。DQL 与 DML共同构建了多数初级程序员常用的 增删改查 操作，而查询是较为特殊的一种，被划分到 DQL 中。</li>
<li>数据控制功能 DCL（Data Control Language）：例如<code>GRANT，REVOKE，COMMIT，ROLLBACK</code>等，对数据库安全性、完整性等有操作的，可以简单的理解为权限控制等。</li>
</ul>
<h3 id="超键与主键"><a href="#超键与主键" class="headerlink" title="超键与主键"></a>超键与主键</h3><ul>
<li><strong>超 键：</strong>在关系中，能唯一标识元组的属性集称为关系模式的超键。一个属性可以作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。</li>
<li><strong>候选键：</strong>是最小超键，即没有冗余元素的超键。</li>
<li><strong>主 键：</strong>数据库表中对储存数据对象予以<strong>唯一和完整标识的数据列或属性的组合</strong>。<strong>一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（NULL）。</strong></li>
<li><strong>外 键：</strong>在一个表中存在的另一个表的主键称此表的外键，<strong>外键可以有重复的, 可以是空值。外键是用来和其他表建立联系用的。</strong></li>
</ul>
<h3 id="SQL约束类型："><a href="#SQL约束类型：" class="headerlink" title="SQL约束类型："></a>SQL约束类型：</h3><p>约束是一种简单地强加于表中一列或多列的限制，从而保证表中数据一致性（准确和可靠）。以下为六大约束：</p>
<ul>
<li>非空约束（NOT NULL）：保证该字段值一定不为空；</li>
<li>默认约束（DEFAULT）：保证字段有默认值；</li>
<li>主键约束（PRIMARY KEY）：标志一列或者多列，并保证其值在表内的唯一性；</li>
<li>外键约束（FOREIGN KEY）：限制一列或多列中的值必须被包含在另一表的外键列中，并且在级联更新或级联删除规则建立后也可以限制其他表中的可用值；</li>
<li>唯一约束（UNIQUE）： 限制一列或多列的值，保证字段值在表内的唯一性，可以为空（主键约束是一种特殊类型的唯一约束）；</li>
<li>检查约束（CHECK）：限制一列的可用值范围。</li>
</ul>
<h3 id="char-与-varchar-的区别"><a href="#char-与-varchar-的区别" class="headerlink" title="char 与 varchar 的区别"></a>char 与 varchar 的区别</h3><ul>
<li>char 表示定长字符串，长度是固定的，最多能存放的字符个数为 255，和编码无关；而 varchar 表示可变长字符串，长度是可变的，最多能存放的字符个数为 65532；</li>
<li>使用 char 时，如果插入数据的长度小于 char 的固定长度时，则用空格填充；</li>
<li>因为固定长度，char 的存取速度比 varchar 快很多，同时缺点是会占用多余空间，属于空间换时间；</li>
</ul>
<h3 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h3><p>在项目开发过程中，使用数据库查询语句时，有很多需求都是要涉及到较为复杂或者多表的连接查询，需要关联查询实现。以下为总结的 MySQL 的五种关联查询。</p>
<ul>
<li><strong>交叉连接（CROSS JOIN）</strong></li>
</ul>
<p>除了在<code>FROM</code>子句中使用 <strong>逗号间隔连接的表</strong> 外，SQL 还支持另一种被称为交叉连接的操作，它们都返回被连接的两个表所有数据行的 <strong>笛卡尔积</strong>，返回到的数据行数等于第一个表中符合查询条件的数据行数 <strong>乘以</strong> 第二个表中符合查询条件的数据行数。惟一的不同在于，交叉连接分开列名时，使用 <code>CROSS JOIN </code>关键字而不是逗号，即以下两个表达式等价：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT  *  FROM  A, B</span><br><span class="line">SELECT  *  FROM  A  CROSS JOIN  B</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>内连接（INNER JOIN）</strong></li>
</ul>
<p>内连接分为三类，分别是 <strong>等值连接</strong>：<code>ON A.id = B.id</code>、<strong>不等值连接</strong>：<code>ON A.id &gt; B.id</code> 和 <strong>自连接</strong>：<code>SELECT * FROM A T1 INNER JOIN A T2 ON T1.id = T2.pid</code>。</p>
<ul>
<li><strong>外连接（LEFT JOIN/RIGHT JOIN）</strong></li>
</ul>
<p><strong>左外连接</strong>：以左表为主，先查询出左表，按照<code>ON</code>后的关联条件匹配右表，没有匹配到的用<code> NULL</code>填充，可以简写成<code> LEFT JOIN</code>；</p>
<p><strong>右外连接</strong>：以右表为主，先查询出右表，按照<code>ON</code>后的关联条件匹配左表，没有匹配到的用<code>NULL</code>填充，可以简写成<code> RIGHT JOIN</code>；</p>
<ul>
<li><strong>联合查询（UNION 与 UNION ALL）</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM A UNION SELECT * FROM B UNION ...</span><br></pre></td></tr></table></figure>


<p>联合查询就是把多个结果集集中在一起，<code>UNION </code>前的结果为基准，需要注意的是联合查询的 <strong>列数要相等</strong>，相同的记录行会合并；</p>
<p>如果使用<code> UNION ALL</code>，不会合并重复的记录行，所以效率更高。</p>
<ul>
<li><strong>全连接（FULL JOIN）</strong></li>
</ul>
<p>MySQL 本身不支持全连接，但可以通过联合使用<code>LEFT JOIN、UNION</code>和<code>RIGHT JOIN</code>来实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM A LEFT JOIN B ON A.id = B.id UNION SELECT * FROM A RIGHT JOIN B ON A.id = B.id</span><br></pre></td></tr></table></figure>

<h3 id="子查询及分类"><a href="#子查询及分类" class="headerlink" title="子查询及分类"></a>子查询及分类</h3><p>多条 MySQL 语句嵌套使用时，内部的 MySQL 查询语句称为子查询。子查询是一个<code>SELECT</code>语句，它嵌套在另一个<code>SELECT、SELECT…INTO</code>语句、<code>INSERT…INTO </code>语句、<code>DELETE </code>语句、 <code>UPDATE </code>语句或嵌套在另一子查询中。</p>
<p>MySQL 的子查询是多表查询的一个重要组成部分，常常和 <strong>连接查询</strong> 一起使用，是多表查询的基础。</p>
<p>子查询可分为四类：</p>
<ul>
<li><p><strong>标量子查询</strong></p>
<p>查询返回单一值的标量，如一个数字或一个字符串，是子查询中最简单的形式。</p>
</li>
<li><p><strong>列子查询</strong></p>
<p>子查询返回的结果集是 N 行一列，该结果通常来自对表的 <strong>某个字段</strong> 查询返回。</p>
</li>
<li><p><strong>行子查询</strong></p>
<p>子查询返回的结果集是一行 N 列，该结果通常是对表的 <strong>某行数据</strong> 进行查询而返回的结果集</p>
</li>
<li><p><strong>表子查询</strong></p>
<p>子查询返回的结果集是 N 行 N 列的一个表数据。</p>
</li>
</ul>
<h3 id="DROP、DELETE-与-TRUNCATE-的区别"><a href="#DROP、DELETE-与-TRUNCATE-的区别" class="headerlink" title="DROP、DELETE 与 TRUNCATE 的区别"></a>DROP、DELETE 与 TRUNCATE 的区别</h3><p>三种都可以表示删除，其中的细微区别之处如下：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">DROP</th>
<th align="center">DELETE</th>
<th align="center">TRUNCATE</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SQL语句类型</td>
<td align="center">DDL</td>
<td align="center">DML</td>
<td align="center">DDL</td>
</tr>
<tr>
<td align="center">回滚</td>
<td align="center">不可回滚</td>
<td align="center">可回滚</td>
<td align="center">不可回滚</td>
</tr>
<tr>
<td align="center">删除内容</td>
<td align="center">从数据库中 <strong>删除表</strong>，<br>所有的数据行，索引和<br>权限也会被删除</td>
<td align="center">表结构还在，删除表的<br><strong>全部或者一部分数据行</strong></td>
<td align="center">表结构还在，删除表中<br>的 <strong>所有数据</strong></td>
</tr>
<tr>
<td align="center">删除速度</td>
<td align="center">删除速度最快</td>
<td align="center">删除速度慢，需要逐行删除</td>
<td align="center">删除速度快</td>
</tr>
</tbody></table>
<p>因此，在不再需要一张表的时候，采用 <code>DROP</code>；在想删除部分数据行时候，用 <code>DELETE</code>；在保留表而删除所有数据的时候用 <code>TRUNCATE</code>。</p>
<h3 id="UNION-与-UNION-ALL-的区别"><a href="#UNION-与-UNION-ALL-的区别" class="headerlink" title="UNION 与 UNION ALL 的区别"></a>UNION 与 UNION ALL 的区别</h3><p><code>UNION </code>用于把来自多个<code>SELECT</code>语句的结果组合到一个结果集合中，MySQL 会把结果集中 <strong>重复的记录删掉</strong>，而使用<code> UNION ALL</code>，MySQL 会把所有的记录返回，且效率高于<code>UNION</code>。</p>
]]></content>
  </entry>
  <entry>
    <title>Linux下的C++项目开发：聊天室（一）</title>
    <url>/posts/afd28464.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="Linux-C-开发常用工具"><a href="#Linux-C-开发常用工具" class="headerlink" title="Linux C++ 开发常用工具"></a>Linux C++ 开发常用工具</h2><h3 id="使用g-编译代码"><a href="#使用g-编译代码" class="headerlink" title="使用g++编译代码"></a>使用g++编译代码</h3><h4 id="C-编译过程"><a href="#C-编译过程" class="headerlink" title="C++编译过程"></a>C++编译过程</h4><p>C++的编译过程主要有四个阶段：预处理、编译、汇编、链接：</p>
<ul>
<li>预处理：主要负责宏定义的替换、条件编译（防止重复包含头文件的宏#ifdef、#ifndef、#else、#endif等）、将include的头文件展开到正文等；</li>
<li>编译：负责将源代码转化为汇编代码；</li>
<li>汇编：负责将汇编代码转化为可重定位的目标二进制文件；<ul>
<li>静态重定位：即在程序装入内存的过程中完成，是指在程序开始运行前，程序中的各个地址有关的项均已完成重定位，地址变换通常是在装入时一次完成的，以后不再改变，故称为静态重定位。</li>
<li>动态重定位：它不是在程序装入内存时完成的，而是CPU每次访问内存时 由动态地址变换机构（硬件）自动进行把相对地址转换为绝对地址。动态重定位需要软件和硬件相互配合完成。</li>
</ul>
</li>
<li>链接：负责将所有的目标文件（二进制目标文件、库文件等）连接起来，进行符号解析和重定位，最后生成可执行文件。<strong>静态链接和动态链接两者最大的区别就在于链接的时机不一样。</strong><ul>
<li>静态链接：将多个源文件产生的目标文件进行链接，从而形成一个可以执行的程序，静态库也可以简单地看成是一组目标文件的集合，即很多目标文件经过压缩打包后形成的一个文件。<strong>静态链接是在形成可执行程序前。</strong></li>
<li>动态链接：解决静态链接的两个问题，空间浪费和更新困难。动态链接把程序按照模块拆分成各个相对独立部分，在程序运行时才将它们链接在一起形成一个完整的程序，而不是像静态链接一样把所有程序模块都链接成一个单独的可执行文件。<strong>动态链接的进行则是在程序执行时。</strong></li>
</ul>
</li>
</ul>
<h4 id="g-编译命令"><a href="#g-编译命令" class="headerlink" title="g++编译命令"></a>g++编译命令</h4><p>假设有test.cpp文件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">add</span>(a,b)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>预处理阶段的结果，直接在终端输出，命令为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ -E test.cpp</span><br></pre></td></tr></table></figure>

<p>编译阶段可以得到汇编代码（.s 文件），可由以下命令直接得到汇编代码文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ -S test.cpp</span><br></pre></td></tr></table></figure>

<p>可重定位的目标文件（.o 文件）由以下命令直接得到：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ -c test.cpp</span><br></pre></td></tr></table></figure>

<p>需要得到最终的可执行文件时可使用下面这条命令，需要自己指定目标文件名，下面这条命令最终得到名为 work 的可执行文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ -o work test.cpp</span><br><span class="line">g++ test.cpp -o work</span><br></pre></td></tr></table></figure>

<p>两种写法都可以，注意命令中-o后面是生成可执行文件的名字。</p>
<p>在实际开发过程中，往往需要使用 gdb 进行调试，可以在编译时加上-g 选项，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ -g -o work test.cpp</span><br></pre></td></tr></table></figure>

<p>如果在开发过程中加入自己指定使用的动态链接库，比如我们需要使用 pthread 线程库，需要加上 -l 选项。下例中编译器会到 <code>lib</code> 目录下找 <code>libpthread.so</code> 文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ -o work test.cpp -lpthread</span><br></pre></td></tr></table></figure>

<h4 id="多文件编译"><a href="#多文件编译" class="headerlink" title="多文件编译"></a>多文件编译</h4><p>多个源码文件进行一起编译，例如有三个cpp文件：a.cpp、b.h、b.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;b.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">add</span>(a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BH</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BH</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;b.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以采用以下的编译命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ -o test a.cpp b.cpp</span><br></pre></td></tr></table></figure>

<p>使用以下命令运行程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./test</span><br></pre></td></tr></table></figure>

<h4 id="运行可执行文件"><a href="#运行可执行文件" class="headerlink" title="运行可执行文件"></a>运行可执行文件</h4><p>使用 g++ 编译得到的可执行文件，使用如下格式执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./可执行文件名</span><br></pre></td></tr></table></figure>

<p>如果程序需要传入参数，则以下述格式执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./可执行文件名 参数1 参数2</span><br></pre></td></tr></table></figure>

<h3 id="使用gdb进行调试"><a href="#使用gdb进行调试" class="headerlink" title="使用gdb进行调试"></a>使用gdb进行调试</h3><h4 id="安装gdb"><a href="#安装gdb" class="headerlink" title="安装gdb"></a>安装gdb</h4><p>安装分为编译安装和 <code>apt</code> 命令安装，因为 Ubuntu 的软件包仓库内置了 gdb，所以可以直接使用命令安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gdb</span><br></pre></td></tr></table></figure>

<p>安装成功后查看gdb版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb -v</span><br></pre></td></tr></table></figure>

<h4 id="gdb常用调试命令"><a href="#gdb常用调试命令" class="headerlink" title="gdb常用调试命令"></a>gdb常用调试命令</h4><p>为了能使用 gdb 调试，在用 g++ 编译时要将 -g 参数加上，然后进行gdb调试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ -g -o test a.cpp b.cpp</span><br><span class="line">gdb test</span><br></pre></td></tr></table></figure>

<p>常用的调试命令：</p>
<ul>
<li><code>l</code>：查看代码</li>
<li><code>b 5</code>：在程序的第 5 行添加断点</li>
<li><code>info break</code>：查看断点</li>
<li><code>r</code>：开始运行</li>
<li><code>s</code>：进入函数内部</li>
<li><code>n</code>：进入下一步</li>
<li><code>finish</code>：跳出函数内部</li>
<li><code>c</code>：运行到下一个断点</li>
</ul>
<p>最后退出调试，可以直接输入 <code>quit</code> 命令。</p>
<h3 id="编写-makefile-进行自动编译"><a href="#编写-makefile-进行自动编译" class="headerlink" title="编写 makefile 进行自动编译"></a>编写 makefile 进行自动编译</h3><p>在大型项目中有大量的源代码文件，不可能每次都逐个敲 g++ 命令来进行编译，而是采用编写 makefile 的方式来进行自动编译，提高效率。</p>
<h4 id="创建makefile"><a href="#创建makefile" class="headerlink" title="创建makefile"></a>创建makefile</h4><p>和创建源代码文件一样，可以直接用 vi 编辑器来创建 makefile：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi makefile</span><br></pre></td></tr></table></figure>

<p>写好 makefile 内容后，命令模式输入 <code>wq</code> 保存离开即可。</p>
<h4 id="makefile基本格式"><a href="#makefile基本格式" class="headerlink" title="makefile基本格式"></a>makefile基本格式</h4><p>一般格式为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">目标名1：依赖文件1，依赖文件2，依赖文件3</span><br><span class="line">    g++ 编译命令</span><br><span class="line">目标名2：依赖文件4，依赖文件5</span><br><span class="line">    g++ 编译命令</span><br></pre></td></tr></table></figure>

<p>其中目标名可以由自己定义，也可以是一个文件的名字；依赖文件就是说要达成这个目标所需要的文件。 仍以前面的“多文件编译”代码为例，可以写出如下的 makefile 文件（注意：makefile 文件中要使用 tab 键，不能使用空格键，否则会报错）：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">target:a.cpp b.o</span></span><br><span class="line">    g++ -o test a.cpp b.o</span><br><span class="line"><span class="section">b.o:b.cpp</span></span><br><span class="line">    g++ -c b.cpp</span><br></pre></td></tr></table></figure>

<p>target 依赖于 <code>a.cpp</code> 和 <code>b.o</code>，而 <code>b.o</code> 依赖于 <code>b.cpp</code>，因此编译时发现 <code>b.cpp</code> 更新了的话就会先执行后面的命令来更新 <code>b.o</code>。保存好 makefile 文件之后，我们用命令行输入 <code>make</code> 即可进行自动编译：</p>
<h4 id="快速清理目标文件"><a href="#快速清理目标文件" class="headerlink" title="快速清理目标文件"></a>快速清理目标文件</h4><p>有时候我们想要删掉 makefile 产生出来的所有目标文件，如果逐个去删显得过于麻烦，因此我们可以借助<code> make clean</code>。仍然是在前面的 makefile 文件中修改，在后面补上一个 <code>clean：</code>，以及相应的清除命令：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">target:a.cpp b.o</span></span><br><span class="line">    g++ -o test a.cpp b.o</span><br><span class="line"><span class="section">b.o:b.cpp</span></span><br><span class="line">    g++ -c b.cpp</span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm *.o</span><br><span class="line">    rm test</span><br></pre></td></tr></table></figure>

<p>在命令行执行 <code>make clean</code> 就可删掉所有目标文件。</p>
<h2 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h2><h3 id="传输层基本概念"><a href="#传输层基本概念" class="headerlink" title="传输层基本概念"></a>传输层基本概念</h3><p>TCP/IP 四层参考模型中，从上往下有四种层次：应用层、传输层、网络层、网络接口层，应用层包括 HTTP、FTP、DNS 等协议，而传输层包括 TCP、UDP 两种协议，网络层则包含 IP、ARP 等协议，网络接口层较为底层，一般不是我们研究的对象。其中，传输层是我们在编程开发中较为重要的一层，需要对其中的两种协议尤其是 TCP 理解透彻。</p>
<p><img src="/20220825/9195a5673454d7fd8f457fb1e07c7701-0" alt="图片描述"></p>
<h4 id="传输层的作用"><a href="#传输层的作用" class="headerlink" title="传输层的作用"></a>传输层的作用</h4><p>根本目的：在网络层提供的数据通信服务基础上，实现主机的进程间通信的可靠服务。<br>主要有以下两个要点：为位于两个主机内部的两个应用进程之间提供通信服务、提供可靠的通信服务。</p>
<h4 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h4><p>“套接字”表示一个 IP 地址与对应的一个端口号。例如，一个 IP 地址为 172.31.75.8 的客户端使用 8050 端口号，那么标识客户端的套接字为“172.31.75.8:8050”。</p>
<h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><p>端口号为 0-65535 之间的整数，有3种类型：熟知端口号、注册端口号、临时端口号。</p>
<ul>
<li><p>熟知端口号：给每种服务器分配确定的全局端口号。每个用户进程都知道相应的服务器进程的熟知端口号，范围为 0-1023，它是统一分配和控制的。</p>
</li>
<li><p>注册端口号：在 IANA 注册的端口号，数值范围为 1024-49151。</p>
</li>
<li><p>临时端口号：客户端程序使用临时端口号，它是运行在客户端上的 TCP/IP 软件随机选取的，范围为 49152-65535。</p>
</li>
</ul>
<p>平时进行网络编程时服务器最好使用注册端口号，而客户端的端口号则是系统随机分配的，即临时端口号。</p>
<h4 id="UDP用户数据协议"><a href="#UDP用户数据协议" class="headerlink" title="UDP用户数据协议"></a>UDP用户数据协议</h4><p>UDP协议的特点：</p>
<ul>
<li><strong>无连接的：</strong>发送数据之前不需要建立连接，因此减少了开销和发送数据之前的时延。</li>
<li><strong>尽最大努力交付：</strong>即不保证可靠交付，因此主机不需要维持复杂的连接状态表。</li>
<li><strong>面向报文的：</strong>UDP 对应用层传递下来的报文，既不合并，也不拆分，而是保留这些报文的边界。UDP 对于应用程序提交的报文，添加头部后就向下提交给网络层。</li>
<li><strong>没有拥塞控制：</strong>网络出现的拥塞时，UDP 不会使源主机的发送速率降低。这对某些实时应用是很重要的，很适合多媒体通信的要求。</li>
<li>支<strong>持多对多的交互通信。</strong></li>
</ul>
<p>UDP的适用场景：</p>
<ul>
<li>适用于少量（几百个字节）的数据。</li>
<li>对性能的要求高于对数据完整性的要求，如视频播放、P2P、DNS 等。</li>
<li>需要“简短快捷”的数据交换 简单的请求与应答报文交互，如在线游戏。</li>
<li>需要多播和广播的应用，源主机以恒定速率发送报文，拥塞发生时允许丢弃部分报文，如本地广播、隧道 VPN。</li>
</ul>
<h4 id="TCP传输控制协议"><a href="#TCP传输控制协议" class="headerlink" title="TCP传输控制协议"></a>TCP传输控制协议</h4><p>TCP协议的特点：</p>
<ul>
<li><strong>面向连接</strong>的传输服务。打电话式、会话式通信。</li>
<li><strong>面向字节流传输服务</strong>（而 UDP 是面向报文）。字节管道、字节按序传输和到达。</li>
<li><strong>全双工通信。</strong>一个应用进程可以同时接收和发送数据、捎带确认；通信双方都设置有发送和接收缓冲区，应用程序将要发送的数据字节提交给发送缓冲区，实际发送由 TCP 协议控制，接收方收到数据字节后将它存放在接收缓冲区，等待高层应用程序读取。</li>
<li><strong>可建立多个并发的 TCP 连接。</strong>如 Web 服务器可同时与多个客户端建立的连接会话。</li>
<li><strong>可靠传输服务</strong>。不丢失数据、保持数据有序、向上层不重复提交数据（通过确认机制、拥塞控制等方式实现）， 想象一下 ATM 机转帐应用就需要上述可靠性。</li>
</ul>
<p>TCP的报文结构图：</p>
<img src="/posts/544e589943a8426e0f4f4c16981663e7-0" alt="图片描述">

<p>重点关注的标志位：</p>
<table>
<thead>
<tr>
<th align="center">标志</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SYN</td>
<td align="center">当SYN=1，ACK=0，是一个建立连接请求的报文；<br>当SYN=1，ACK=1，是一个同意建立连接请求的报文；</td>
</tr>
<tr>
<td align="center">ACK</td>
<td align="center">当ACK=1时，确认序号字段才有意义</td>
</tr>
<tr>
<td align="center">FIN</td>
<td align="center">FIN=1说明数据发送完毕，请求释放连接</td>
</tr>
<tr>
<td align="center">RST</td>
<td align="center">RST=1说明出现严重错误，必须释放连接再重新建立连接</td>
</tr>
<tr>
<td align="center">URG</td>
<td align="center">URG=1说明此报文是紧急数据，要尽快传送出去</td>
</tr>
<tr>
<td align="center">PSH</td>
<td align="center">PSH=1请求接收方TCP软件将该报文立即推送给应用程序</td>
</tr>
</tbody></table>
<p>TCP 连接包括连接建立、报文传输、连接释放三个阶段，其中连接建立的三次握手过程较为重要。</p>
<p><strong>建立连接的三次握手过程：</strong></p>
<p>（1）当客户端准备发起一次 TCP 连接，首先向服务器发送第一个“SYN”报文（控制位 SYN=1）。</p>
<p>（2）服务器收到 SYN 报文后，如果同意建立连接，则向客户端发送第二个“SYN+ACK”报文（控制位 SYN=1，ACK=1），该报文表示对第一个 SYN 报文请求的确认。</p>
<p>（3）接收到 SYN+ACK 报文后，客户端发送第三个 ACK 报文，表示对 SYN+ACK 报文的确认。</p>
<img src="/posts/3c83420afc02fdd2a2e7639275d1d863-0" alt="图片描述" style="zoom:80%;">

<h3 id="TCP套接字网络编程"><a href="#TCP套接字网络编程" class="headerlink" title="TCP套接字网络编程"></a>TCP套接字网络编程</h3><p>网络编程一般采用C/S架构，即服务器端和客户端。</p>
<h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><p>服务器端一般先用 socket 创建一个套接字，然后用 bind 给这个套接字绑定地址（即 ip+端口号），然后调用 listen 把这个套接字置为监听状态，随后调用 accept 函数从已完成连接队列中取出成功建立连接的套接字，以后就在这个新的套接字上调用 send、recv 来发送数据、接收数据，最后调用 close 来断开连接释放资源即可。整个过程如下：</p>
<img src="/posts/e1413de95f7af4c44f7d10a2f09d49d4-0" alt="图片描述" style="zoom: 67%;">

<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>与服务器不同，客户端并不需要 bind 绑定地址，因为端口号是系统自动分配的，而且客户端也不需要设置监听的套接字，因此也不需要 listen。客户端在用 socket 创建套接字后直接调用 connect 向服务器发起连接即可，connect 函数通知 Linux 内核完成 TCP 三次握手连接，最后把连接的结果作为返回值。成功建立连接后就可以调用 send 和 recv 来发送数据、接收数据，最后调用 close 来断开连接释放资源。整个过程如下：</p>
<img src="/posts/e6a08660699bd4f0e26119e7de2c20bd-0" alt="图片描述" style="zoom:67%;">

<h4 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h4><p>TCP网络编程的完整流程如下：</p>
<img src="/posts/87c29545a64eed3b2b2338ef5f901fc4-0" alt="图片描述" style="zoom: 67%;">

<h4 id="TCP相关的数据结构"><a href="#TCP相关的数据结构" class="headerlink" title="TCP相关的数据结构"></a>TCP相关的数据结构</h4><p>地址结构：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> sin_family; <span class="comment">/* 地址族 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sin_port; <span class="comment">/* 端口号 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span> <span class="comment">/* ip地址 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> s_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>TCP网络编程函数：</p>
<p>socket函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">( <span class="keyword">int</span> domain, <span class="keyword">int</span> type,<span class="keyword">int</span> protocol)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">功能：创建一个新的套接字，返回套接字描述符</span></span></span><br><span class="line"><span class="comment"><span class="function">参数说明：</span></span></span><br><span class="line"><span class="comment"><span class="function">domain：域类型，指明使用的协议栈，如TCP/IP使用的是PF_INET，其他还有AF_INET6、AF_UNIX</span></span></span><br><span class="line"><span class="comment"><span class="function">type:指明需要的服务类型, 如</span></span></span><br><span class="line"><span class="comment"><span class="function">	SOCK_DGRAM:数据报服务，UDP协议</span></span></span><br><span class="line"><span class="comment"><span class="function">	SOCK_STREAM:流服务，TCP协议</span></span></span><br><span class="line"><span class="comment"><span class="function">protocol:一般都取0(由系统根据服务类型选择默认的协议)</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br></pre></td></tr></table></figure>

<p>bind函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd,struct sockaddr* my_addr,<span class="keyword">int</span> addrlen)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">功能：为套接字绑定地址</span></span></span><br><span class="line"><span class="comment"><span class="function">TCP/IP协议使用sockaddr_in结构，包含IP地址和端口号，服务器使用它来指明熟知的端口号，然后等待连接</span></span></span><br><span class="line"><span class="comment"><span class="function">参数说明：</span></span></span><br><span class="line"><span class="comment"><span class="function">sockfd:套接字描述符，指明创建连接的套接字</span></span></span><br><span class="line"><span class="comment"><span class="function">my_addr:本地地址，IP地址和端口号</span></span></span><br><span class="line"><span class="comment"><span class="function">addrlen:地址长度</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br></pre></td></tr></table></figure>

<p>listen函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd,<span class="keyword">int</span> backlog)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">功能：</span></span></span><br><span class="line"><span class="comment"><span class="function">将一个套接字置为监听模式，准备接收传入连接。用于服务器，指明某个套接字连接是被动的监听状态。</span></span></span><br><span class="line"><span class="comment"><span class="function">参数说明：</span></span></span><br><span class="line"><span class="comment"><span class="function">Sockfd:套接字描述符，指明创建连接的套接字</span></span></span><br><span class="line"><span class="comment"><span class="function">backlog: linux内核2.2之前，backlog参数=半连接队列长度+已连接队列长度；linux内核2.2之后，backlog参数=已连接队列（Accept队列）长度</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br></pre></td></tr></table></figure>

<p>accept函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, structsockaddr *addr, <span class="keyword">int</span> *addrlen)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">功能：从已完成连接队列中取出成功建立连接的套接字，返回成功连接的套接字描述符。</span></span></span><br><span class="line"><span class="comment"><span class="function">参数说明：</span></span></span><br><span class="line"><span class="comment"><span class="function">Sockfd:套接字描述符，指明正在监听的套接字</span></span></span><br><span class="line"><span class="comment"><span class="function">addr:提出连接请求的主机地址</span></span></span><br><span class="line"><span class="comment"><span class="function">addrlen:地址长度</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br></pre></td></tr></table></figure>

<p>send函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> * data, <span class="keyword">int</span> data_len, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">功能：在TCP连接上发送数据,返回成功传送数据的长度，出错时返回－1。send会将数据移到发送缓冲区中。</span></span></span><br><span class="line"><span class="comment"><span class="function">参数说明：</span></span></span><br><span class="line"><span class="comment"><span class="function">sockfd:套接字描述符</span></span></span><br><span class="line"><span class="comment"><span class="function">data:指向要发送数据的指针</span></span></span><br><span class="line"><span class="comment"><span class="function">data_len:数据长度</span></span></span><br><span class="line"><span class="comment"><span class="function">flags:通常为0</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br></pre></td></tr></table></figure>

<p>recv函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, intbuf_len,<span class="keyword">unsigned</span> <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">功能：接收数据,返回实际接收的数据长度，出错时返回－1。</span></span></span><br><span class="line"><span class="comment"><span class="function">参数说明：</span></span></span><br><span class="line"><span class="comment"><span class="function">Sockfd:套接字描述符</span></span></span><br><span class="line"><span class="comment"><span class="function">Buf:指向内存块的指针</span></span></span><br><span class="line"><span class="comment"><span class="function">Buf_len:内存块大小，以字节为单位</span></span></span><br><span class="line"><span class="comment"><span class="function">flags:一般为0</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br></pre></td></tr></table></figure>

<p>close函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">close</span>(<span class="keyword">int</span> sockfd)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">功能：撤销套接字。如果只有一个进程使用，立即终止连接并撤销该套接字，如果多个进程共享该套接字，将引用数减一，如果引用数降到零，则关闭连接并撤销套接字。</span></span><br><span class="line"><span class="comment">参数说明：</span></span><br><span class="line"><span class="comment">sockfd:套接字描述符</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>connect函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd,structsockaddr *server_addr,<span class="keyword">int</span> sockaddr_len)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">功能： 同远程服务器建立主动连接，成功时返回0，若连接失败返回－1。</span></span></span><br><span class="line"><span class="comment"><span class="function">参数说明：</span></span></span><br><span class="line"><span class="comment"><span class="function">Sockfd:套接字描述符，指明创建连接的套接字</span></span></span><br><span class="line"><span class="comment"><span class="function">Server_addr:指明远程端点：IP地址和端口号</span></span></span><br><span class="line"><span class="comment"><span class="function">sockaddr_len :地址长度</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br></pre></td></tr></table></figure>

<h3 id="服务器与客户端连接实例"><a href="#服务器与客户端连接实例" class="headerlink" title="服务器与客户端连接实例"></a>服务器与客户端连接实例</h3><p>编写两个程序：一个服务器与一个客户端，用户可以在客户端不断输入信息并发送到服务器终端上显示。</p>
<h4 id="服务器程序编写"><a href="#服务器程序编写" class="headerlink" title="服务器程序编写"></a>服务器程序编写</h4><p>编写<code>server.cpp</code>, 代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定义sockfd</span></span><br><span class="line">    <span class="keyword">int</span> server_sockfd = <span class="built_in">socket</span>(AF_INET,SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义sockaddr_in</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_sockaddr</span>;</span></span><br><span class="line">    server_sockaddr.sin_family = AF_INET;<span class="comment">//TCP/IP协议族</span></span><br><span class="line">    server_sockaddr.sin_port = <span class="built_in">htons</span>(<span class="number">8023</span>);<span class="comment">//端口号</span></span><br><span class="line">    server_sockaddr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//ip地址，127.0.0.1是环回地址，相当于本机ip</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//bind，成功返回0，出错返回-1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">bind</span>(server_sockfd,(struct sockaddr *)&amp;server_sockaddr,<span class="built_in"><span class="keyword">sizeof</span></span>(server_sockaddr))==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;bind&quot;</span>);<span class="comment">//输出错误原因</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);<span class="comment">//结束程序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//listen，成功返回0，出错返回-1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">listen</span>(server_sockfd,<span class="number">20</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;listen&quot;</span>);<span class="comment">//输出错误原因</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);<span class="comment">//结束程序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//客户端套接字</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> length = <span class="built_in"><span class="keyword">sizeof</span></span>(client_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功返回非负描述字，出错返回-1</span></span><br><span class="line">    <span class="keyword">int</span> conn = <span class="built_in">accept</span>(server_sockfd, (struct sockaddr*)&amp;client_addr, &amp;length);</span><br><span class="line">    <span class="keyword">if</span>(conn&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;connect&quot;</span>);<span class="comment">//输出错误原因</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);<span class="comment">//结束程序</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;客户端成功连接\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收缓冲区</span></span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不断接收数据</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(buffer));</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">recv</span>(conn, buffer, <span class="built_in"><span class="keyword">sizeof</span></span>(buffer),<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//客户端发送exit或者异常结束时，退出</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(buffer,<span class="string">&quot;exit&quot;</span>)==<span class="number">0</span> || len&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;收到客户端信息：&quot;</span>&lt;&lt;buffer&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(conn);</span><br><span class="line">    <span class="built_in">close</span>(server_sockfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="客户端程序编写"><a href="#客户端程序编写" class="headerlink" title="客户端程序编写"></a>客户端程序编写</h4><p>编写<code>client.cpp</code>, 代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定义sockfd</span></span><br><span class="line">    <span class="keyword">int</span> sock_cli = <span class="built_in">socket</span>(AF_INET,SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义sockaddr_in</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;<span class="comment">//TCP/IP协议族</span></span><br><span class="line">    servaddr.sin_port = <span class="built_in">htons</span>(<span class="number">8023</span>);  <span class="comment">//服务器端口</span></span><br><span class="line">    servaddr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);  <span class="comment">//服务器ip</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接服务器，成功返回0，错误返回-1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">connect</span>(sock_cli, (struct sockaddr *)&amp;servaddr, <span class="built_in"><span class="keyword">sizeof</span></span>(servaddr)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;连接服务器成功！\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> sendbuf[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">char</span> recvbuf[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(sendbuf, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(sendbuf));</span><br><span class="line">        cin&gt;&gt;sendbuf;</span><br><span class="line">        <span class="built_in">send</span>(sock_cli, sendbuf, <span class="built_in">strlen</span>(sendbuf),<span class="number">0</span>); <span class="comment">//发送</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(sendbuf,<span class="string">&quot;exit&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(sock_cli);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h4><p>编译两个cpp文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">g++ -o server server.cpp</span><br><span class="line">g++ -o client client.cpp</span><br></pre></td></tr></table></figure>

<p>运行服务器程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./server</span><br></pre></td></tr></table></figure>

<p>另开一个新的终端，运行客户端程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./client</span><br></pre></td></tr></table></figure>

<p>连接成功，可以在客户端不断输入信息并且在服务器端显示。</p>
<h2 id="多线程并发服务器"><a href="#多线程并发服务器" class="headerlink" title="多线程并发服务器"></a>多线程并发服务器</h2><p>上一个实例练习编写的服务器是单线程的，只能为单个客户端服务。而要设计一个聊天室的服务器就必须能够同时为多个客户端服务，因此需要将服务器升级为多线程版本。</p>
<h3 id="进程与线程的基本概念"><a href="#进程与线程的基本概念" class="headerlink" title="进程与线程的基本概念"></a>进程与线程的基本概念</h3><ul>
<li><p>进程：是程序的一次执行过程，是操作系统资源分配的基本单位。</p>
<p>比如在实例中运行<code>./server</code>服务器程序，就会产生一个进程，可以使用 <code>ps -ef|grep ./server</code> 命令查看相关进程快照。其中的PID就是该进程的进程号。</p>
</li>
<li><p>线程：是任务调度和执行的基本单位，一个进程中可以有多个线程独立运行。线程没有自己独立的地址空间，会与其它属于同一进程的线程一起共享进程的资源，但是每个线程也会有自己的独立的栈和一组寄存器。在 Linux 当中，线程的实现比较特别，会把线程当做进程来实现，即将线程视为一个与其它进程共享资源的进程。</p>
<p>可以使用 <code>ps -T -p XXX(进程号) </code>命令来查看一个进程的所有线程。</p>
</li>
</ul>
<h3 id="C-11的thread线程库"><a href="#C-11的thread线程库" class="headerlink" title="C++11的thread线程库"></a>C++11的thread线程库</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>C++11中提供了专门的线程库，可以很方便地进行调用。</p>
<p>使用需要导入头文件：<code>#include&lt;thread&gt;</code></p>
<p>创建一个新线程来执行 run 函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">thread <span class="title">t</span><span class="params">(run)</span></span>;  <span class="comment">//实例化一个线程对象t，让该线程执行run函数，构造对象后线程就开始执行了</span></span><br></pre></td></tr></table></figure>

<p>假如 run 函数需要传入参数 a 和 b，可以这样构造：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">thread <span class="title">t</span><span class="params">(run,a,b)</span></span>;  <span class="comment">//实例化一个线程对象t，让该线程执行run函数，传入a和b作为run的参数</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，<strong>传入的函数必须是全局函数或者静态函数，不能是类的普通成员函数。</strong></p>
<p>join 函数会阻塞主线程，直到 join 函数的 thread 对象标识的线程执行完毕为止，join 函数使用方法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">t.<span class="built_in">join</span>(); <span class="comment">//调用join后，主线程会一直阻塞，直到子线程的run函数执行完毕</span></span><br></pre></td></tr></table></figure>

<p>但有时候需要主线程在继续完成其它的任务，而不是一直等待子线程结束，这时候我们可以使用 detach 函数。detach 函数会让子线程变为分离状态，主线程不会再阻塞等待子线程结束，而是让系统在子线程结束时自动回收资源。使用的方法如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">t.<span class="built_in">detach</span>();</span><br></pre></td></tr></table></figure>

<h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><p>构建两个线程，同时输出 1-10，实现简单的多线程编程：</p>
<p>新建一个 <code>test_thread.cpp</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test_thread.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">1</span>);   <span class="comment">//休眠1秒钟</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(print)</span>,<span class="title">t2</span><span class="params">(print)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    <span class="comment">//也可以使用detach</span></span><br><span class="line">    <span class="comment">//t1.detach();</span></span><br><span class="line">    <span class="comment">//t2.detach();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后使用 g++ 进行编译，需要注意的是这里要用上 <code>-l</code> 来链接线程动态库，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ -o test_thread test_thread.cpp -lpthread</span><br></pre></td></tr></table></figure>

<h3 id="实例：多线程并发服务器"><a href="#实例：多线程并发服务器" class="headerlink" title="实例：多线程并发服务器"></a>实例：多线程并发服务器</h3><h4 id="具体要求"><a href="#具体要求" class="headerlink" title="具体要求"></a>具体要求</h4><p>编写两个程序：一个多线程服务器、一个单线程客户端程序（可和上个实验一样），用一个终端运行服务器程序，多个终端运行客户端程序，让所有客户端发送的信息都能在服务器终端上显示。</p>
<ol>
<li>编写一个服务器类 server，该类可以创建多个线程为多个客户端服务，接收所有客户端发送的消息并打印出来。</li>
<li>要编写多个源代码文件：<code>server.h</code> 头文件给出 server 类声明、<code>server.cpp</code> 给出类方法具体实现、<code>test_server.cpp</code> 中编写主函数创建 server 实例对象并测试。</li>
<li>客户端程序可继续使用上个实验的，不用做修改。</li>
<li>编写 Makefile 进行自动编译，使用 git 管理版本。</li>
</ol>
<h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><p>因为需要为每个客户端创建一个线程进行服务，所以我们要在每次 accept 取出新连接之后都创建一个线程，这个线程只负责服务这个新的连接，因此我们还要将这个连接对应的套接字描述符传入线程函数中。线程函数不断地调用 recv 接收信息并打印，直到收到客户端发来的 “exit” 或者 recv 返回值小于等于 0 为止。</p>
<h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><p>编写 <code>server.h</code> 头文件，给出类的成员变量和成员函数声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SERVER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">server</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> server_port;<span class="comment">//服务器端口号</span></span><br><span class="line">        <span class="keyword">int</span> server_sockfd;<span class="comment">//设为listen状态的套接字描述符</span></span><br><span class="line">        string server_ip;<span class="comment">//服务器ip</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; sock_arr;<span class="comment">//保存所有套接字描述符</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">server</span>(<span class="keyword">int</span> port,string ip);<span class="comment">//构造函数</span></span><br><span class="line">        ~<span class="built_in">server</span>();<span class="comment">//析构函数</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;<span class="comment">//服务器开始服务</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RecvMsg</span><span class="params">(<span class="keyword">int</span> conn)</span></span>;<span class="comment">//子线程工作的静态函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>在 <code>server.cpp</code> 文件中给出函数具体的定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;server.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">server::<span class="built_in">server</span>(<span class="keyword">int</span> port,string ip):<span class="built_in">server_port</span>(port),<span class="built_in">server_ip</span>(ip)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">server::~<span class="built_in">server</span>()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> conn:sock_arr)</span><br><span class="line">        <span class="built_in">close</span>(conn);</span><br><span class="line">    <span class="built_in">close</span>(server_sockfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器开始服务</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义sockfd</span></span><br><span class="line">    server_sockfd = <span class="built_in">socket</span>(AF_INET,SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义sockaddr_in</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_sockaddr</span>;</span></span><br><span class="line">    server_sockaddr.sin_family = AF_INET;<span class="comment">//TCP/IP协议族</span></span><br><span class="line">    server_sockaddr.sin_port = <span class="built_in">htons</span>(server_port);<span class="comment">//server_port;//端口号</span></span><br><span class="line">    server_sockaddr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(server_ip.<span class="built_in">c_str</span>());<span class="comment">//ip地址，127.0.0.1是环回地址，相当于本机ip</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//bind，成功返回0，出错返回-1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">bind</span>(server_sockfd,(struct sockaddr *)&amp;server_sockaddr,<span class="built_in"><span class="keyword">sizeof</span></span>(server_sockaddr))==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;bind&quot;</span>);<span class="comment">//输出错误原因</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);<span class="comment">//结束程序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//listen，成功返回0，出错返回-1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">listen</span>(server_sockfd,<span class="number">20</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;listen&quot;</span>);<span class="comment">//输出错误原因</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);<span class="comment">//结束程序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//客户端套接字</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> length = <span class="built_in"><span class="keyword">sizeof</span></span>(client_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不断取出新连接并创建子线程为其服务</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> conn = <span class="built_in">accept</span>(server_sockfd, (struct sockaddr*)&amp;client_addr, &amp;length);</span><br><span class="line">        <span class="keyword">if</span>(conn&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;connect&quot;</span>);<span class="comment">//输出错误原因</span></span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);<span class="comment">//结束程序</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;文件描述符为&quot;</span>&lt;&lt;conn&lt;&lt;<span class="string">&quot;的客户端成功连接\n&quot;</span>;</span><br><span class="line">        sock_arr.<span class="built_in">push_back</span>(conn);</span><br><span class="line">        <span class="comment">//创建线程</span></span><br><span class="line">        <span class="function">thread <span class="title">t</span><span class="params">(server::RecvMsg,conn)</span></span>;</span><br><span class="line">        t.<span class="built_in">detach</span>();<span class="comment">//置为分离状态，不能用join，join会导致主线程阻塞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子线程工作的静态函数</span></span><br><span class="line"><span class="comment">//注意，前面不用加static，否则会编译报错</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::RecvMsg</span><span class="params">(<span class="keyword">int</span> conn)</span></span>&#123;</span><br><span class="line">    <span class="comment">//接收缓冲区</span></span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">1000</span>];</span><br><span class="line">    <span class="comment">//不断接收数据</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(buffer));</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">recv</span>(conn, buffer, <span class="built_in"><span class="keyword">sizeof</span></span>(buffer),<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//客户端发送exit或者异常结束时，退出</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(buffer,<span class="string">&quot;exit&quot;</span>)==<span class="number">0</span> || len&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;收到套接字描述符为&quot;</span>&lt;&lt;conn&lt;&lt;<span class="string">&quot;发来的信息：&quot;</span>&lt;&lt;buffer&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写主函数构建实例进行测试，<code>test_server.cpp</code> 文件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test_server.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;server.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">server <span class="title">serv</span><span class="params">(<span class="number">8023</span>,<span class="string">&quot;127.0.0.1&quot;</span>)</span></span>;<span class="comment">//创建实例，传入端口号和ip作为构造函数参数</span></span><br><span class="line">    serv.<span class="built_in">run</span>();<span class="comment">//启动服务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用makefile进行自动编译，makefile内容如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">test_server: test_server.cpp server.cpp server.h</span></span><br><span class="line">    g++ -o test_server test_server.cpp server.cpp -lpthread</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm test_server</span><br></pre></td></tr></table></figure>

<p>注意：makefile的缩进不能使用空格，要使用制表符（制表符长度4）。</p>
<h2 id="多线程客户端"><a href="#多线程客户端" class="headerlink" title="多线程客户端"></a>多线程客户端</h2><h3 id="实例：多线程客户端"><a href="#实例：多线程客户端" class="headerlink" title="实例：多线程客户端"></a>实例：多线程客户端</h3><h4 id="具体要求-1"><a href="#具体要求-1" class="headerlink" title="具体要求"></a>具体要求</h4><p>将之前的单线程客户端升级为多线程客户端（一个线程用于接收并打印信息、一个线程用于输入并发送信息），为前面实验的多线程服务器添加自动回复客户端的代码，用一个终端运行服务器程序，多个终端运行客户端程序，多个客户端都能发送信息送达服务器并收到服务器的应答，并将应答打印到客户端终端上，当用户在客户端输入 exit 时，要结束两个线程之后再结束客户端进程。</p>
<ol>
<li>编写一个客户端类 client ，有发送线程和接收线程，可以同时发送消息和接收消息。</li>
<li>要编写多个源代码文件：client 头文件给出 client 类声明、<code>client.cpp</code> 给出类方法具体实现、<code>test_client.cpp</code> 中编写主函数创建 client 实例对象并测试。</li>
<li>当用户在客户端输入 exit 时，要结束发送线程和接收线程之后才退出主线程。</li>
<li>服务器程序要在实验 3 的基础上进行一定修改，能够回复消息。</li>
<li>编写 Makefile 进行自动编译，使用 git 管理版本。</li>
</ol>
<h4 id="设计思路-1"><a href="#设计思路-1" class="headerlink" title="设计思路"></a>设计思路</h4><p>客户端应先 connect 服务器建立连接，成功连接之后就创建发送线程和接收线程，与服务器类的设计同理，我们需要将发送线程和接收线程的函数设为静态成员函数，发送线程和接收线程中都使用 while(1) 的循环结构，循环终止的条件是用户输入了 exit 或者对端关闭了连接。</p>
<h4 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h4><p>考虑到 client 类和 server 类会用到许多相同的头文件，因此我们没必要每次都重新写各种头文件，我们可以编写一个 <code>global.h</code>，在里面写上所有我们需要的头文件（甚至全局变量），让 <code>server.h</code> 和 <code>client.h</code> 都引入这个 <code>global.h</code> 即可，这样通过 <code>global.h</code> 就可以包含所有头文件，没那么容易乱。<code>global.h</code> 文件内容：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _GLOBAL_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GLOBAL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>在 <code>client.h</code> 头文件中给出 client 类的成员变量和成员函数声明，该类有三个成员变量，同时有构造函数、析构函数、run 函数、发送线程函数、接收线程函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CLIENT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;global.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">client</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> server_port;<span class="comment">//服务器端口</span></span><br><span class="line">        string server_ip;<span class="comment">//服务器ip</span></span><br><span class="line">        <span class="keyword">int</span> sock;<span class="comment">//与服务器建立连接的套接字描述符</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">client</span>(<span class="keyword">int</span> port,string ip);</span><br><span class="line">        ~<span class="built_in">client</span>();</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;<span class="comment">//启动客户端服务</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendMsg</span><span class="params">(<span class="keyword">int</span> conn)</span></span>;<span class="comment">//发送线程</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RecvMsg</span><span class="params">(<span class="keyword">int</span> conn)</span></span>;<span class="comment">//接收线程</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>在 <code>client.cpp</code> 给出具体的函数定义。构造函数负责初始化服务器 ip 和端口号，析构函数负责关闭套接字描述符：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;client.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">client::<span class="built_in">client</span>(<span class="keyword">int</span> port,string ip):<span class="built_in">server_port</span>(port),<span class="built_in">server_ip</span>(ip)&#123;&#125;</span><br><span class="line">client::~<span class="built_in">client</span>()&#123;</span><br><span class="line">    <span class="built_in">close</span>(sock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run 函数负责建立与服务器的连接并且启动发送线程和接收线程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">client::run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义sockfd</span></span><br><span class="line">    sock = <span class="built_in">socket</span>(AF_INET,SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义sockaddr_in</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    servaddr.sin_port = <span class="built_in">htons</span>(server_port);  <span class="comment">//服务器端口</span></span><br><span class="line">    servaddr.sin_addr.s_addr = <span class="built_in">inet_addr</span>(server_ip.<span class="built_in">c_str</span>());  <span class="comment">//服务器ip</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接服务器，成功返回0，错误返回-1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">connect</span>(sock, (struct sockaddr *)&amp;servaddr, <span class="built_in"><span class="keyword">sizeof</span></span>(servaddr)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;连接服务器成功\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建发送线程和接收线程</span></span><br><span class="line">    <span class="function">thread <span class="title">send_t</span><span class="params">(SendMsg,sock)</span>,<span class="title">recv_t</span><span class="params">(RecvMsg,sock)</span></span>;</span><br><span class="line">    <span class="keyword">send_t</span>.<span class="built_in">join</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;发送线程已结束\n&quot;</span>;</span><br><span class="line">    <span class="keyword">recv_t</span>.<span class="built_in">join</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;接收线程已结束\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送线程负责接收用户的输入并且 send 到服务器端，如果用户输入 exit 或者出现异常时将结束线程</span></span><br><span class="line"><span class="comment">// 注意，前面不用加static！</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">client::SendMsg</span><span class="params">(<span class="keyword">int</span> conn)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> sendbuf[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(sendbuf, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(sendbuf));</span><br><span class="line">        cin&gt;&gt;sendbuf;</span><br><span class="line">        <span class="keyword">int</span> ret=<span class="built_in">send</span>(conn, sendbuf, <span class="built_in">strlen</span>(sendbuf),<span class="number">0</span>); <span class="comment">//发送</span></span><br><span class="line">        <span class="comment">//输入exit或者对端关闭时结束</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(sendbuf,<span class="string">&quot;exit&quot;</span>)==<span class="number">0</span>||ret&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收线程负责接收服务器发来的消息并且打印到终端</span></span><br><span class="line"><span class="comment">// 注意，前面不用加static！</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">client::RecvMsg</span><span class="params">(<span class="keyword">int</span> conn)</span></span>&#123;</span><br><span class="line">    <span class="comment">//接收缓冲区</span></span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">1000</span>];</span><br><span class="line">    <span class="comment">//不断接收数据</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(buffer));</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">recv</span>(conn, buffer, <span class="built_in"><span class="keyword">sizeof</span></span>(buffer),<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//recv返回值小于等于0，退出</span></span><br><span class="line">        <span class="keyword">if</span>(len&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;收到服务器发来的信息：&quot;</span>&lt;&lt;buffer&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端发送线程的结束很容易，输入 exit 之后 break 即可，但是接收线程无法得知用户是否输入了 exit，因此我们需要进行以下处理：服务器收到 exit 之后断开与客户端的连接，使得客户端接收线程的 recv 返回值为 0，这时再 break 即可退出接收线程。</p>
<p>对服务器代码进行修改，让服务器收到exit后立即close掉套接字描述符，因此需要将<code>sock_arr</code>改为<code>vector&lt;bool&gt;</code>类型，初始化的时候就为其分配一定大小的空间，并全部置为 false 表示“未打开”。更改后的 <code>server.h</code> 如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SERVER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;global.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">server</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> server_port;</span><br><span class="line">        <span class="keyword">int</span> server_sockfd;</span><br><span class="line">        string server_ip;</span><br><span class="line">        <span class="keyword">static</span> vector&lt;<span class="keyword">bool</span>&gt; sock_arr;<span class="comment">//改为了静态成员变量，且类型变为vector&lt;bool&gt;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">server</span>(<span class="keyword">int</span> port,string ip);</span><br><span class="line">        ~<span class="built_in">server</span>();</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RecvMsg</span><span class="params">(<span class="keyword">int</span> conn)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>在 <code>server.cpp</code> 中开头加入下面这句代码为 <code>sock_arr</code> 完成初始化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">server::sock_arr</span><span class="params">(<span class="number">10000</span>,<span class="literal">false</span>)</span></span>;    <span class="comment">//将10000个位置都设为false，sock_arr[i]=false表示套接字描述符i未打开（因此不能关闭）</span></span><br></pre></td></tr></table></figure>

<p>当然，具体的大小设为 10000 还是其它数字取决于系统能够打开的文件描述符数量，在 Linux 中我们可以使用 <code>ulimit -n</code> 命令来查看和修改文件描述符数量限制。</p>
<p>接下来添加服务器收到 exit 关闭套接字描述符的代码，修改后的 <code>server::RecvMsg</code> 如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意，前面不用加static！</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::RecvMsg</span><span class="params">(<span class="keyword">int</span> conn)</span></span>&#123;</span><br><span class="line">    <span class="comment">//接收缓冲区</span></span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">1000</span>];</span><br><span class="line">    <span class="comment">//不断接收数据</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(buffer));</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">recv</span>(conn, buffer, <span class="built_in"><span class="keyword">sizeof</span></span>(buffer),<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//客户端发送exit或者异常结束时，退出</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(buffer,<span class="string">&quot;exit&quot;</span>)==<span class="number">0</span> || len&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">close</span>(conn);</span><br><span class="line">            sock_arr[conn]=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;收到套接字描述符为&quot;</span>&lt;&lt;conn&lt;&lt;<span class="string">&quot;发来的信息：&quot;</span>&lt;&lt;buffer&lt;&lt;endl;</span><br><span class="line">        <span class="comment">//回复客户端</span></span><br><span class="line">        string ans=<span class="string">&quot;收到&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">send</span>(conn,ans.<span class="built_in">c_str</span>(),ans.<span class="built_in">length</span>(),<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//服务器收到exit或者异常关闭套接字描述符</span></span><br><span class="line">        <span class="keyword">if</span>(ret&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">close</span>(conn);</span><br><span class="line">            sock_arr[conn]=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，我们需要将 <code>server.cpp</code> 的析构函数改为如下形式，来关闭仍处于打开状态的套接字描述符：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">server::~<span class="built_in">server</span>()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sock_arr.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sock_arr[i])</span><br><span class="line">            <span class="built_in">close</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(server_sockfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，对服务器的修改也完成了，我们接下来编写一个 test_client.cpp 文件来测试客户端：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;client.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">client <span class="title">clnt</span><span class="params">(<span class="number">8023</span>,<span class="string">&quot;127.0.0.1&quot;</span>)</span></span>;</span><br><span class="line">    clnt.<span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来修改 <code>makefile</code>：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">all: test_server.cpp server.cpp server.h test_client.cpp client.cpp client.h global.h</span></span><br><span class="line">    g++ -o test_client test_client.cpp client.cpp -lpthread</span><br><span class="line">    g++ -o test_server test_server.cpp server.cpp -lpthread</span><br><span class="line"><span class="section">test_server: test_server.cpp server.cpp server.h global.h</span></span><br><span class="line">    g++ -o test_server test_server.cpp server.cpp -lpthread</span><br><span class="line"><span class="section">test_client: test_client.cpp client.cpp client.h global.h</span></span><br><span class="line">    g++ -o test_client test_client.cpp client.cpp -lpthread</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm test_server</span><br><span class="line">    rm test_client</span><br></pre></td></tr></table></figure>

<p>接下来 <code>make</code> 并且进行测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">./test_server</span><br><span class="line"><span class="comment"># 新开一个终端</span></span><br><span class="line">./test_client</span><br><span class="line"><span class="comment"># 再新开一个终端</span></span><br><span class="line">./test_client</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>大疆笔试：加权区间调度</title>
    <url>/posts/993cd50e.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="加权任务区间调度"><a href="#加权任务区间调度" class="headerlink" title="加权任务区间调度"></a>加权任务区间调度</h2><p>题目描述：</p>
<p>有一批任务需要调度执行，每个任务的权重为w，开始时间为s，结束时间为f，只有当两个任务的执行时间区间没有重叠的情况，这两个任务才能调度先后执行，否则只能选其中一个执行。</p>
<p>任务：编写一个schedule函数，输入一个有n个任务信息的数组[[wi, si, fi]]  索引 i = 0 …… n-1.返回可调度的最优任务子集（该任务子集的权重和最大）对应的任务索引，输出的索引按照升序进行排列，假设最优子集组合只有一种。</p>
<p>例如：如果两个任务为[10 2 5]和[9 5 7]，则这两个任务执行没有重叠。如果两个任务为[10 2 5]和[9 4 7]，则这两个任务存在重叠区间。</p>
<p>输入：一个n*3的二维数组，n表示n个任务的权重、起始时间和终止时间</p>
<p>输出：一个一维数组，列出最大权重和所对应的任务索引（升序排列）</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">样例输入：</span><br><span class="line">8 3</span><br><span class="line">3<span class="number"> 0 </span>6</span><br><span class="line">1<span class="number"> 1 </span>4</span><br><span class="line">4<span class="number"> 3 </span>5</span><br><span class="line">17<span class="number"> 3 </span>8</span><br><span class="line">9<span class="number"> 4 </span>7</span><br><span class="line">10<span class="number"> 5 </span>9</span><br><span class="line">8<span class="number"> 6 </span>10</span><br><span class="line">1<span class="number"> 8 </span>11</span><br><span class="line">样例输出：</span><br><span class="line">3 7</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p><strong>动态规划求解思路</strong></p>
<p>将任务<strong>按照结束时间升序排列</strong>，需要用一个数组p[j], 记录与任务j相兼容的最近（最大下标）的任务，如下图中，p[8] = 1, p[7] = 3, p[2] = 0. <strong>设置数组p[j]的目的是方便动态规划推导过程中的区间回退。</strong>如果当前区间采用，则向前推到最近的一个不重叠的区间号。</p>
<img src="/posts/20191104143955276.png" alt="在这里插入图片描述" style="zoom: 67%;">

<p>利用dp数组记录最大权重和，dp数组的含义为：dp[i] 为对于只含有1，2…… i （前i个任务）的可相互兼容的子集的最大权重值。注意，<strong>每个区间只有取或者不取这两种状态</strong>。为了方便计算，dp数组的长度为n+1, dp[0] = 0. p数组的长度n+1。</p>
<p>动态规划递推过程：</p>
<ul>
<li>如果dp[i]不选择执行任务i，那么它一定是前i-1个任务的最优解，即dp[i-1]；</li>
<li>如果dp[i]选择执行任务i，那么它是前p[i]个任务的最优解，加上当前任务的权重wi，即dp[p[i]] + wi。</li>
</ul>
<p>综上递推式为，dp[i] = max(dp[i-1], dp[p[i]] + wi), i &gt; 0; dp[0] = 0;</p>
<p>求出最大权重和，还需求出原始数组中需要执行的任务索引，因为在进行按照结束时间排序后，顺序打乱了，因此需要一个哈希表记录每一个任务信息对应的原始任务索引值，key设置为string类型，value为int类型，si = “wi”+”si”+”fi”; map[si] = i;</p>
<p>根据求得的dp数组，需要找出最大权重和对应的子集区间是哪些，这里从dp数组倒序进行遍历，设置最大权重和为maxVal，如果一个位置k &gt; 0的dp[k] == maxVal &amp;&amp; dp[k-1] != maxVal; 说明排序后的第k个区间是执行的，因此存储k区间信息对应的原始索引值，更新maxVal值减去排序后的第k个任务的权重，maxVal -= wk; 或者向前找区间k最近的可执行区间p[k]，将maxVal更新为dp[p[k]].(个人推荐后一种更新maxVal的方法，减少运算合理利用p数组)。</p>
<p>整理代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 注意，比较函数不能直接写在类内部，需加上static静态函数，否则类外调用sort无法访问cmp函数</span></span><br><span class="line">    <span class="comment">// 或者将cmp函数写在类的外部，以及用lambda表达式[&amp;](int&amp; a,int&amp; b)&#123;return a &lt; b;&#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; a, vector&lt;<span class="keyword">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 比较两个任务信息数组，按照结束时间进行升序排序</span></span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">2</span>] &lt; b[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 辅助函数 将任务信息数组转化为string类型便于哈希表存储</span></span><br><span class="line">    <span class="function">string <span class="title">help</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; arr)</span> </span>&#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> a : arr) &#123;</span><br><span class="line">            s += <span class="built_in">to_string</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">schedule</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;string, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">        <span class="comment">// 哈希表存储任务信息列表对应的原始索引值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            mp.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">help</span>(arr[i]), i));</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 便于计算，这里插入一个0进程的调度信息，这样排序后的第i个任务就是arr[i]</span></span><br><span class="line">        arr.<span class="built_in">push_back</span>(&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="comment">// 按照结束时间进行升序排序</span></span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 辅助数组p，记录当前区间之前，最近的一个不重叠区间的位置</span></span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i<span class="number">-1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j][<span class="number">2</span>] &lt;= arr[i][<span class="number">1</span>]) &#123;</span><br><span class="line">                    p[i] = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res; <span class="comment">// 记录结果</span></span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;<span class="comment">// dp数组，记录当前i个区间的最优解，dp[i]为当前的最大权重和</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// dp递推关系</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[p[i]] + arr[i][<span class="number">0</span>] &gt;= dp[i<span class="number">-1</span>]) &#123; <span class="comment">// 执行第i个区间</span></span><br><span class="line">                dp[i] = dp[p[i]] + arr[i][<span class="number">0</span>];</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不执行第i个区间</span></span><br><span class="line">                dp[i] = dp[i - <span class="number">1</span>];</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxVal = dp[n]; <span class="comment">// 区间n的最大权重和</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 倒序遍历dp数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 找到执行的区间位置</span></span><br><span class="line">            <span class="keyword">if</span> (dp[i] == maxVal &amp;&amp; dp[i - <span class="number">1</span>] != maxVal) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">                res.<span class="built_in">push_back</span>(mp[<span class="built_in">help</span>(arr[index])]);</span><br><span class="line">                maxVal = dp[p[index]];</span><br><span class="line">                <span class="comment">//maxVal -= arr[index][0];</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>()); <span class="comment">// 注意结果要求升序排序</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, num;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; num;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">arr</span>(n);</span><br><span class="line">    <span class="keyword">int</span> len  = n;</span><br><span class="line">    <span class="keyword">int</span> wi = <span class="number">0</span>, si = <span class="number">0</span>, fi = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        cin &gt;&gt; wi &gt;&gt; si &gt;&gt; fi;</span><br><span class="line">        arr[len - n - <span class="number">1</span>].<span class="built_in">push_back</span>(wi);</span><br><span class="line">        arr[len - n - <span class="number">1</span>].<span class="built_in">push_back</span>(si);</span><br><span class="line">        arr[len - n - <span class="number">1</span>].<span class="built_in">push_back</span>(fi);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    arr1 = &#123;&#123;2,0,4&#125;, &#123;4,1,6&#125;, &#123;4,5,7&#125;, &#123;7,2,9&#125;, &#123;2,8,10&#125;, &#123;1,8,11&#125;&#125;;</span></span><br><span class="line"><span class="comment">    输出：0 2 4</span></span><br><span class="line"><span class="comment">    arr2 = &#123;&#123;3,0,6&#125;,&#123;1,1,4&#125;,&#123;4,3,5&#125;,&#123;17,3,8&#125;,&#123;9,4,7&#125;,&#123;10,5,9&#125;,&#123;8,6,10&#125;,&#123;1,8,11&#125;&#125;;</span></span><br><span class="line"><span class="comment">    输出：3 7</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    solution test;</span><br><span class="line">    res = test.<span class="built_in">schedule</span>(arr);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : res) &#123;</span><br><span class="line">        cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>备战华为刷题笔记</title>
    <url>/posts/1d3d6b4e.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><h3 id="爱吃香蕉的珂珂"><a href="#爱吃香蕉的珂珂" class="headerlink" title="爱吃香蕉的珂珂"></a>爱吃香蕉的珂珂</h3><p><a href="https://leetcode.cn/problems/koko-eating-bananas/">875. 爱吃香蕉的珂珂</a></p>
<p>珂珂喜欢吃香蕉。这里有<code>n</code>堆香蕉，第<code>i</code>堆中有<code>piles[i]</code>根香蕉。警卫已经离开了，将在<code>h</code>小时后回来。<br>珂珂可以决定她吃香蕉的速度<code>k</code>（单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉k根。如果这堆香蕉少于<code>k</code>根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。<br>珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。<br>返回她可以在<code>h</code>小时内吃掉所有香蕉的最小速度<code>k</code>（<code>k</code>为整数）。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：<span class="attr">piles</span> = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">11</span>], <span class="attr">h</span> = <span class="number">8</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：<span class="attr">piles</span> = [<span class="number">30</span>,<span class="number">11</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">20</span>], <span class="attr">h</span> = <span class="number">5</span></span><br><span class="line">输出：<span class="number">30</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line">输入：<span class="attr">piles</span> = [<span class="number">30</span>,<span class="number">11</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">20</span>], <span class="attr">h</span> = <span class="number">6</span></span><br><span class="line">输出：<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>设吃香蕉的速度为x，二分查找的下界为1，每小时最少吃一根；上界为一堆香蕉最多的总数目。当一堆香蕉的个数是pile，吃掉这堆香蕉需要[pile/x]小时，计算出吃掉所有香蕉的时间。如果在速度为x的情况下可以在h小时内吃完，则最小速度小于或等于x，调整上界为x；否则最小速度一定大于x，因此将下界调整为x+1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minEatingSpeed</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; piles, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">1</span>, right = <span class="number">1000000001</span>;</span><br><span class="line">    <span class="comment">// 寻找最小速度，找左边界</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">f</span>(piles, mid, h)) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义：速度为 x 时，需要 f(x) 小时吃完所有香蕉</span></span><br><span class="line"><span class="comment">// 判断当前速度能否在h小时内完成</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; piles, <span class="keyword">int</span> x, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hours = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; piles.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        hours += piles[i] / x;</span><br><span class="line">        <span class="keyword">if</span> (piles[i] % x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            hours++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hours &lt;= h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有序矩阵中第-K-小的元素"><a href="#有序矩阵中第-K-小的元素" class="headerlink" title="有序矩阵中第 K 小的元素"></a>有序矩阵中第 K 小的元素</h3><p><a href="https://leetcode.cn/problems/kth-smallest-element-in-a-sorted-matrix/">378. 有序矩阵中第 K 小的元素</a></p>
<p>给你一个<code>n x n</code>矩阵<code>matrix</code>，其中每行和每列元素均按升序排序，找到矩阵中第<code>k</code>小的元素。<br>请注意，它是<strong>排序后</strong>的第<code>k</code>小元素，而不是第<code>k</code>个<strong>不同</strong>的元素。<br>你必须找到一个内存复杂度优于 O(n^2) 的解决方案。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：matrix = <span class="string">[[1,5,9],[10,11,13],[12,13,15]]</span>, k = <span class="number">8</span></span><br><span class="line">输出：<span class="number">13</span></span><br><span class="line">解释：矩阵中的元素为 [<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">13</span>,<span class="number">15</span>]，第 <span class="number">8</span> 小元素是 <span class="number">13</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：matrix = <span class="string">[[-5]]</span>, k = <span class="number">1</span></span><br><span class="line">输出：<span class="number">-5</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>二分查找，矩阵内元素从左上到右下递增。<code>matrix[0][0]</code> 为最小值，<code>matrix[n-1][n-1]</code>为最大值，现在我们将其分别记作l和r。可以发现一个性质：任取一个数 mid 满足 l ≤ mid ≤ r，那么矩阵中不大于mid的数，肯定全部分布在矩阵的左上角。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> left = matrix[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> right = matrix[n<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">// 寻找左边界</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - mid) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(matrix, k, mid)) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断不大于mid的总数，是否大于k；</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> k, <span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (tmp &gt;= <span class="number">0</span> &amp;&amp; matrix[tmp][i] &gt; mid) &#123;</span><br><span class="line">            tmp--;</span><br><span class="line">        &#125;</span><br><span class="line">        count += (tmp + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count &gt;= k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="搜索旋转排序数组"><a href="#搜索旋转排序数组" class="headerlink" title="搜索旋转排序数组"></a>搜索旋转排序数组</h3><p><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/">33. 搜索旋转排序数组</a></p>
<p>整数数组<code>nums</code>按升序排列，数组中的值<strong>互不相同</strong> 。<br>在传递给函数之前，<code>nums </code>在预先未知的某个下标<code> k（0 &lt;= k &lt; nums.length）</code>上进行了 旋转，使数组变为<code> [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 从 0 开始 计数）。例如，<code>[0,1,2,4,5,6,7]</code>在下标 3 处经旋转后可能变为<code>[4,5,6,7,0,1,2]</code>。<br>给你 旋转后 的数组<code>nums</code>和一个整数<code>target</code>，如果<code>nums</code>中存在这个目标值<code>target</code>，则返回它的下标，否则返回 -1 。<br>你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], <span class="attr">target</span> = <span class="number">0</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], <span class="attr">target</span> = <span class="number">3</span></span><br><span class="line">输出：-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">1</span>], <span class="attr">target</span> = <span class="number">0</span></span><br><span class="line">输出：-<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>数组局部有序，可以在常规二分查找的时候查看当前 mid 为分割位置分割出来的两个部分 [l, mid] 和 [mid + 1, r] 哪个部分是有序的，并根据有序的那个部分确定我们该如何改变二分查找的上下界，因为我们能够根据有序的那部分判断出 target 在不在这个部分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = n;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= nums[<span class="number">0</span>]) &#123; <span class="comment">// 左半区域有序</span></span><br><span class="line">            <span class="keyword">if</span> (target &gt;= nums[<span class="number">0</span>] &amp;&amp; nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 右半区域有序</span></span><br><span class="line">            <span class="keyword">if</span> (target &lt;= nums[n<span class="number">-1</span>] &amp;&amp; nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array-ii/">81. 搜索旋转排序数组 II</a></p>
<p>已知存在一个按非降序排列的整数数组 nums ，数组中的值不必互不相同。<br>在传递给函数之前，<code>nums </code>在预先未知的某个下标<code>k（0 &lt;= k &lt; nums.length）</code>上进行了 旋转 ，使数组变为<code> [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 从 0 开始 计数）。例如，<code>[0,1,2,4,4,4,5,6,6,7]</code>在下标 5 处经旋转后可能变为<code>[4,5,6,6,7,0,1,2,4,4]</code>。<br>给你 旋转后 的数组<code>nums</code>和一个整数<code>target</code>，请你编写一个函数来判断给定的目标值是否存在于数组中。如果<code>nums</code>中存在这个目标值<code>target</code>，则返回<code>true</code>，否则返回<code> false</code> 。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], <span class="attr">target</span> = <span class="number">0</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], <span class="attr">target</span> = <span class="number">3</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>对于数组中有重复元素的情况，二分查找时可能会有<code> a[l]=a[mid]=a[r]</code>，此时无法判断区间 <code>[l,mid] </code>和区间<code>[mid+1,r]</code>哪个是有序的。例如<code>nums=[3,1,2,3,3,3,3]</code>，<code>target=2</code>，首次二分时无法判断区间<code>[0,3]</code>和区间<code>[4,6]</code>哪个是有序的。<br>对于这种情况，我们只能将当前二分区间的左边界加一，右边界减一，然后在新区间上继续二分查找。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">search</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = n;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] == nums[mid] &amp;&amp; nums[mid] == nums[right<span class="number">-1</span>]) &#123;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt;= nums[left]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target &gt;= nums[left] &amp;&amp; nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (target &lt;= nums[right<span class="number">-1</span>] &amp;&amp; nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在-D-天内送达包裹的能力"><a href="#在-D-天内送达包裹的能力" class="headerlink" title="在 D 天内送达包裹的能力"></a>在 D 天内送达包裹的能力</h3><p><a href="https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days/">1011. 在 D 天内送达包裹的能力</a></p>
<p>传送带上的包裹必须在 days 天内从一个港口运送到另一个港口。<br>传送带上的第 i 个包裹的重量为 weights[i]。每一天，我们都会按给出重量（weights）的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。<br>返回能在 days 天内将传送带上的所有包裹送达的船的最低运载能力。</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：weights = [1,2,3,4,5,6,7,8,9,10], days = 5</span><br><span class="line">输出：15</span><br><span class="line">解释：</span><br><span class="line">船舶最低载重<span class="number"> 15 </span>就能够在<span class="number"> 5 </span>天内送达所有包裹，如下所示：</span><br><span class="line">第<span class="number"> 1 </span>天：1, 2, 3, 4, 5</span><br><span class="line">第<span class="number"> 2 </span>天：6, 7</span><br><span class="line">第<span class="number"> 3 </span>天：8</span><br><span class="line">第<span class="number"> 4 </span>天：9</span><br><span class="line">第<span class="number"> 5 </span>天：10</span><br><span class="line"></span><br><span class="line">请注意，货物必须按照给定的顺序装运，因此使用载重能力为<span class="number"> 14 </span>的船舶并将包装分成 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) 是不允许的。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：weights = [3,2,2,4,1,4], days = 3</span><br><span class="line">输出：6</span><br><span class="line">解释：</span><br><span class="line">船舶最低载重<span class="number"> 6 </span>就能够在<span class="number"> 3 </span>天内送达所有包裹，如下所示：</span><br><span class="line">第<span class="number"> 1 </span>天：3, 2</span><br><span class="line">第<span class="number"> 2 </span>天：2, 4</span><br><span class="line">第<span class="number"> 3 </span>天：1, 4</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：weights = [1,2,3,1,1], days = 4</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">第<span class="number"> 1 </span>天：1</span><br><span class="line">第<span class="number"> 2 </span>天：2</span><br><span class="line">第<span class="number"> 3 </span>天：3</span><br><span class="line">第<span class="number"> 4 </span>天：1, 1</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>二分查找转化为判定问题。假设当船的运载能力为x时，我们可以在days天内运送完所有包裹，那么只要运载能力大于x，我们同样可以在days天内运送完所有包裹：我们只需要使用运载能力为x时的运送方法即可。</p>
<p>二分查找的左边界为一个包裹重量的最大值，即weights数组中的最大值；右边界为weights数组之和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shipWithinDays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; weights, <span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; w : weights) &#123;</span><br><span class="line">        left = <span class="built_in">max</span>(left, w);</span><br><span class="line">        right += w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getDays</span>(weights, mid) &lt;= days) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; weights, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> days = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; weights.<span class="built_in">size</span>();) &#123;</span><br><span class="line">        <span class="keyword">int</span> cap = x;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; weights.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cap &lt; weights[i]) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                cap -= weights[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        days++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="找出第-K-小的数对距离"><a href="#找出第-K-小的数对距离" class="headerlink" title="找出第 K 小的数对距离"></a>找出第 K 小的数对距离</h3><p><a href="https://leetcode.cn/problems/find-k-th-smallest-pair-distance/">719. 找出第 K 小的数对距离</a></p>
<p>数对<code> (a,b)</code>由整数 a 和 b 组成，其数对距离定义为 a 和 b 的绝对差值。<br>给你一个整数数组<code>nums</code>和一个整数 k ，数对由<code>nums[i]</code>和<code>nums[j]</code>组成且满足<code>0 &lt;= i &lt; j &lt; nums.length</code>。返回<strong>所有数对距离中</strong>第 k 小的数对距离。</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>], k = <span class="number">1</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：数对和对应的距离如下：</span><br><span class="line"><span class="function"><span class="params">(<span class="number">1</span>,<span class="number">3</span>)</span> -&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">1</span>,<span class="number">1</span>)</span> -&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">3</span>,<span class="number">1</span>)</span> -&gt;</span> <span class="number">2</span></span><br><span class="line">距离第 <span class="number">1</span> 小的数对是 (<span class="number">1</span>,<span class="number">1</span>) ，距离为 <span class="number">0</span> 。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">1</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>排序+二分+双指针</p>
<p>先将数组排序，第k小的数对距离在区间[0, max(nums) - min(nums)]，令left = 0，right = max(nums) - min(nums)，在该区间内进行二分。对于当前搜索距离mid，计算所有距离小于等于mid的数对数目count，使用双指针：初始左端点i=0，从小到大枚举所有数对的右端点j，移动左端点直到nums[j] - nums[i] &lt;= mid，那么右端点为j且距离小于等于mid的数对数目为j-i，计算这些数目之和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">smallestDistancePair</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums[n<span class="number">-1</span>] - nums[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[j] - nums[i] &gt; mid) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            count += j - i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= k) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分割数组的最大值"><a href="#分割数组的最大值" class="headerlink" title="分割数组的最大值"></a>分割数组的最大值</h3><p><a href="https://leetcode.cn/problems/split-array-largest-sum/">410. 分割数组的最大值</a></p>
<p>给定一个非负整数数组<code>nums</code>和一个整数<code>m</code>，你需要将这个数组分成<code>m</code>个非空的连续子数组。</p>
<p>设计一个算法使得这<code>m</code>个子数组各自和的最大值最小。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">8</span>], <span class="attr">m</span> = <span class="number">2</span></span><br><span class="line">输出：<span class="number">18</span></span><br><span class="line">解释：</span><br><span class="line">一共有四种方法将 nums 分割为 <span class="number">2</span> 个子数组。 </span><br><span class="line">其中最好的方式是将其分为 [<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>] 和 [<span class="number">10</span>,<span class="number">8</span>] 。</span><br><span class="line">因为此时这两个子数组各自的和的最大值为<span class="number">18</span>，在所有情况中最小。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="attr">m</span> = <span class="number">2</span></span><br><span class="line">输出：<span class="number">9</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>], <span class="attr">m</span> = <span class="number">3</span></span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>二分查找+贪心（使……最大值尽可能的小）</p>
<p>选定一个值x，线性的验证是否存在一种分割方案，满足最大分割子数组的和不超过x。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">splitArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>(), left = <span class="number">0</span>, right = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; a : nums) &#123;</span><br><span class="line">        left = <span class="built_in">max</span>(left, a);</span><br><span class="line">        right += a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = mid;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; sum) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    sum -= nums[i++];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= m) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="两球之间的磁力"><a href="#两球之间的磁力" class="headerlink" title="两球之间的磁力"></a>两球之间的磁力</h3><p><a href="https://leetcode.cn/problems/magnetic-force-between-two-balls/">1552. 两球之间的磁力</a></p>
<p>在代号为 C-137 的地球上，Rick 发现如果他将两个球放在他新发明的篮子里，它们之间会形成特殊形式的磁力。Rick 有<code>n</code>个空的篮子，第<code>i</code>个篮子的位置在<code>position[i]</code>，Morty 想把<code>m</code>个球放到这些篮子里，使得任意两球间 <strong>最小磁力</strong> 最大。<br>已知两个球如果分别位于<code>x</code>和<code>y</code>，那么它们之间的磁力为<code>|x - y|</code>。<br>给你一个整数数组<code>position</code>和一个整数<code>m</code>，请你返回最大化的最小磁力。</p>
<img src="/posts/image-20220807181250174.png" alt="image-20220807181250174" style="zoom: 67%;">

<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：position = [1,2,3,4,7], m = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：将<span class="number"> 3 </span>个球分别放入位于 1，4 和<span class="number"> 7 </span>的三个篮子，两球间的磁力分别为 [3, 3, 6]。最小磁力为<span class="number"> 3 </span>。我们没办法让最小磁力大于<span class="number"> 3 </span>。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：position = [5,4,3,2,1,1000000000], m = 2</span><br><span class="line">输出：999999999</span><br><span class="line">解释：我们使用位于<span class="number"> 1 </span>和<span class="number"> 1000000000 </span>的篮子时最小磁力最大。</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>假定最小磁力为ans，小于ans的答案也一定合法。既然我们存在一种放置的方法使得相邻小球间距的最小值大于等于 ans，那么也一定大于 [1,ans−1] 中的任意一个值，而大于 ans 的均不合法，因此我们可以对答案进行二分查找。在区间[left, right]之间查找，每次取mid为平均值：</p>
<ul>
<li>如果当前mid合法，令ans = mid，并将区间缩小为[mid + 1, right];</li>
<li>如果当前mid不合法，则将区间缩小为[left, mid - 1].</li>
</ul>
<p>预先对给定的篮子的位置进行排序，那么从贪心的角度考虑，第一个小球放置的篮子一定是 position 最小的篮子，即排序后的第一个篮子。那么为了满足上述条件，第二个小球放置的位置一定要大于等于 position[0]+x，接下来同理。因此我们从前往后扫 position 数组，看在当前答案 x 下我们最多能在篮子里放多少个小球，我们记这个数量为 cnt，如果 cnt 大于等于 m，那么说明当前答案下我们的贪心策略能放下 m 个小球且它们间距均大于等于 x ，为合法的答案，否则不合法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDistance</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; position, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(position.<span class="built_in">begin</span>(), position.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> n = position.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">1</span>, right = position[n<span class="number">-1</span>] - position[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 寻找满足成立条件的右边界</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(position, mid, m)) &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查以x为最小磁力，得到的分组cnt是否大于等于m</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; position, <span class="keyword">int</span> x, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre = position[<span class="number">0</span>], cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; position.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (position[i] - pre &gt;= x) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            pre = position[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt &gt;= m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小张刷题计划"><a href="#小张刷题计划" class="headerlink" title="小张刷题计划"></a>小张刷题计划</h3><p><a href="https://leetcode.cn/problems/xiao-zhang-shua-ti-ji-hua/">LCP 12. 小张刷题计划</a></p>
<p>为了提高自己的代码能力，小张制定了 LeetCode 刷题计划，他选中了 LeetCode 题库中的 n 道题，编号从 0 到 n-1，并计划在 m 天内按照题目编号顺序刷完所有的题目（注意，小张不能用多天完成同一题）。</p>
<p>在小张刷题计划中，小张需要用 time[i] 的时间完成编号 i 的题目。此外，小张还可以使用场外求助功能，通过询问他的好朋友小杨题目的解法，可以省去该题的做题时间。为了防止“小张刷题计划”变成“小杨刷题计划”，小张每天最多使用一次求助。</p>
<p>我们定义 m 天中做题时间最多的一天耗时为 T（小杨完成的题目不计入做题总时间）。请你帮小张求出最小的 T是多少。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">time</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>], <span class="attr">m</span> = <span class="number">2</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：第一天小张完成前三题，其中第三题找小杨帮忙；第二天完成第四题，并且找小杨帮忙。这样做题时间最多的一天花费了 <span class="number">3</span> 的时间，并且这个值是最小的。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">time</span> = [<span class="number">999</span>,<span class="number">999</span>,<span class="number">999</span>], <span class="attr">m</span> = <span class="number">4</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：在前三天中，小张每天求助小杨一次，这样他可以在三天内完成所有的题目并不花任何时间。</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>题意解析为：给定一个数组，将其划分为M份，使得每份元素之和的最大值最小，每份可以任意减去其中一个元素。</p>
<p>如果不考虑每份可以任意减去一个元素，就是一个经典的二分问题，具有单调最优的性质：如果最大值为 t 可以满足条件划分，那么最大值为 t+1 也可以。所以就直接二分最大值 t，找到最小满足条件的 t 即可。</p>
<p>本题加了一个条件：每份可以删除任意一个数组。为了能够让最大值最小，显然每份中删去的一定是最大元素，所以在二分判定可行性时，维护当前序列的最大值，然后记录删除最大值的结果，也就是说二分的判定是：是否可以让每组删除最大值之后，总和都小于等于 t。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minTime</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; time, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = time.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : time) &#123;</span><br><span class="line">        right += t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getDays</span>(time, mid) &lt;= m) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; time, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> useday = <span class="number">1</span>, totaltime = <span class="number">0</span>, maxtime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextime = <span class="built_in">min</span>(maxtime, time[i]);</span><br><span class="line">        <span class="keyword">if</span> (nextime + totaltime &lt;= x) &#123;</span><br><span class="line">            totaltime += nextime;</span><br><span class="line">            maxtime = <span class="built_in">max</span>(maxtime, time[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            useday++;</span><br><span class="line">            totaltime = <span class="number">0</span>;</span><br><span class="line">            maxtime = time[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> useday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><h3 id="航班预订统计"><a href="#航班预订统计" class="headerlink" title="航班预订统计"></a>航班预订统计</h3><p><a href="https://leetcode.cn/problems/corporate-flight-bookings/">1109. 航班预订统计</a></p>
<p>这里有 n 个航班，它们分别从 1 到 n 进行编号。</p>
<p>有一份航班预订表 bookings ，表中第 i 条预订记录 bookings[i] = [firsti, lasti, seatsi] 意味着在从 firsti 到 lasti （包含 firsti 和 lasti ）的 每个航班 上预订了 seatsi 个座位。</p>
<p>请你返回一个长度为 n 的数组 answer，里面的元素是每个航班预定的座位总数。</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5</span><br><span class="line">输出：[10,55,45,25,25]</span><br><span class="line">解释：</span><br><span class="line">航班编号       <span class="number"> 1 </span> <span class="number"> 2 </span> <span class="number"> 3 </span> <span class="number"> 4 </span>  5</span><br><span class="line">预订记录<span class="number"> 1 </span>：  <span class="number"> 10 </span> 10</span><br><span class="line">预订记录<span class="number"> 2 </span>：      <span class="number"> 20 </span> 20</span><br><span class="line">预订记录<span class="number"> 3 </span>：      <span class="number"> 25 </span><span class="number"> 25 </span><span class="number"> 25 </span> 25</span><br><span class="line">总座位数：     <span class="number"> 10 </span><span class="number"> 55 </span><span class="number"> 45 </span><span class="number"> 25 </span> 25</span><br><span class="line">因此，answer = [10,55,45,25,25]</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：bookings = [[1,2,10],[2,2,15]], n = 2</span><br><span class="line">输出：[10,25]</span><br><span class="line">解释：</span><br><span class="line">航班编号       <span class="number"> 1 </span>  2</span><br><span class="line">预订记录<span class="number"> 1 </span>：  <span class="number"> 10 </span> 10</span><br><span class="line">预订记录<span class="number"> 2 </span>：       15</span><br><span class="line">总座位数：     <span class="number"> 10 </span> 25</span><br><span class="line">因此，answer = [10,25]</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>差分数组：第i个数即为原数组第i-1个元素和第i个元素的差值，也就是说对差分数组求前缀和即可得到原始数组。<br>遍历给定的预定数组，对差分数据进行更新，完成修改。对于预定记录booking=[l,r,inc]，我们需要让d[l−1] 增加 inc，d[r] 减少inc。特别地，当 r 为 n 时，我们无需修改d[r]，因为这个位置溢出了下标范围。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">corpFlightBookings</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; bookings, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bookings.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> first = bookings[i][<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> last = bookings[i][<span class="number">1</span>];</span><br><span class="line">        res[first] += bookings[i][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (last &lt; n) &#123;</span><br><span class="line">            res[last] -= bookings[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        res[i] += res[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="所有排列中的最大和"><a href="#所有排列中的最大和" class="headerlink" title="所有排列中的最大和"></a>所有排列中的最大和</h3><p><a href="https://leetcode.cn/problems/maximum-sum-obtained-of-any-permutation/">1589. 所有排列中的最大和</a></p>
<p>有一个整数数组 nums ，和一个查询数组 requests ，其中 requests[i] = [starti, endi] 。第 i 个查询求 nums[starti] + nums[starti + 1] + … + nums[endi - 1] + nums[endi] 的结果 ，starti 和 endi 数组索引都是 从 0 开始 的。</p>
<p>你可以任意排列 nums 中的数字，请你返回所有查询结果之和的最大值。</p>
<p>由于答案可能会很大，请你将它对 10^9 + 7 取余 后返回。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：nums = <span class="comment">[1,2,3,4,5]</span>, requests = <span class="comment">[<span class="comment">[1,3]</span>,<span class="comment">[0,1]</span>]</span></span><br><span class="line">输出：19</span><br><span class="line">解释：一个可行的 nums 排列为 <span class="comment">[2,1,3,4,5]</span>，并有如下结果：</span><br><span class="line">requests<span class="comment">[0]</span> -&gt; nums<span class="comment">[1]</span> + nums<span class="comment">[2]</span> + nums<span class="comment">[3]</span> = 1 + 3 + 4 = 8</span><br><span class="line">requests<span class="comment">[1]</span> -&gt; nums<span class="comment">[0]</span> + nums<span class="comment">[1]</span> = 2 + 1 = 3</span><br><span class="line">总和为：8 + 3 = 11。</span><br><span class="line">一个总和更大的排列为 <span class="comment">[3,5,4,2,1]</span>，并有如下结果：</span><br><span class="line">requests<span class="comment">[0]</span> -&gt; nums<span class="comment">[1]</span> + nums<span class="comment">[2]</span> + nums<span class="comment">[3]</span> = 5 + 4 + 2 = 11</span><br><span class="line">requests<span class="comment">[1]</span> -&gt; nums<span class="comment">[0]</span> + nums<span class="comment">[1]</span> = 3 + 5  = 8</span><br><span class="line">总和为： 11 + 8 = 19，这个方案是所有排列中查询之和最大的结果。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = <span class="comment">[1,2,3,4,5,6]</span>, requests = <span class="comment">[<span class="comment">[0,1]</span>]</span></span><br><span class="line">输出：11</span><br><span class="line">解释：一个总和最大的排列为 <span class="comment">[6,5,4,3,2,1]</span> ，查询和为 <span class="comment">[11]</span>。</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：nums = <span class="comment">[1,2,3,4,5,10]</span>, requests = <span class="comment">[<span class="comment">[0,2]</span>,<span class="comment">[1,3]</span>,<span class="comment">[1,1]</span>]</span></span><br><span class="line">输出：47</span><br><span class="line">解释：一个和最大的排列为 <span class="comment">[4,10,5,3,2,1]</span> ，查询结果分别为 <span class="comment">[19,18,10]</span>。</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>利用差分数组，求解区间内每个下标被查询的次数，count数组记录每个下标的数据被查询的次数，在得到数组 counts 之后，对数组nums 和数组 counts 排序。倒序遍历数组，当查询次数大于0时，计算最大和 sum += nums[i] * count[i]。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSumRangeQuery</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; requests)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">count</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; req : requests) &#123;</span><br><span class="line">        <span class="keyword">int</span> first = req[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> last = req[<span class="number">1</span>];</span><br><span class="line">        count[first]++;</span><br><span class="line">        <span class="keyword">if</span> (last + <span class="number">1</span> &lt; n) count[last+<span class="number">1</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        count[i] += count[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(count.<span class="built_in">begin</span>(), count.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> Mod = <span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; count[i] &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        sum += (<span class="keyword">long</span> <span class="keyword">long</span>) nums[i] * count[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)(sum % Mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拼车"><a href="#拼车" class="headerlink" title="拼车"></a>拼车</h3><p><a href="https://leetcode.cn/problems/car-pooling/">1094. 拼车</a></p>
<p>车上最初有 capacity 个空座位。车 只能 向一个方向行驶（也就是说，不允许掉头或改变方向）</p>
<p>给定整数 capacity 和一个数组 trips ,  trip[i] = [numPassengersi, fromi, toi] 表示第 i 次旅行有 numPassengersi 乘客，接他们和放他们的位置分别是 fromi 和 toi 。这些位置是从汽车的初始位置向东的公里数。</p>
<p>当且仅当你可以在所有给定的行程中接送所有乘客时，返回 true，否则请返回 false。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：trips = <span class="string">[[2,1,5],[3,3,7]]</span>, capacity = <span class="number">4</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：trips = <span class="string">[[2,1,5],[3,3,7]]</span>, capacity = <span class="number">5</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>构建差分数组，对原始数组进行频繁的区间增减操作，根据trips数组对区间进行增减，1 &lt;= trips.length &lt;= 1000，因此差分数组的长度设为1001.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">carPooling</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; trips, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(<span class="number">1001</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; trip : trips) &#123;</span><br><span class="line">        <span class="keyword">int</span> first = trip[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> last = trip[<span class="number">2</span>];</span><br><span class="line">        res[first] += trip[<span class="number">0</span>];</span><br><span class="line">        res[last] -= trip[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) res[i] += res[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span> (res[i] &gt; capacity) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="会议室"><a href="#会议室" class="headerlink" title="会议室"></a>会议室</h3><p>给定一个会议时间安排的数组，每个会议时间都会包括开始和结束的时间 [[s1,e1],[s2,e2],…] (si &lt; ei)， 为避免会议冲突，同时要考虑充分利用会议室资源，请你计算<strong>至少需要</strong>多少间会议室，才能满足这些会议安排。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: <span class="string">[[0, 30],[5, 10],[15, 20]]</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: <span class="string">[[7,10],[2,4]]</span></span><br><span class="line">输出: <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p><strong>如果把每个会议的起始时间看做一个线段区间，那么题目就是让你求最多有几个重叠区间</strong></p>
<p>把时间线想象成一个初始值为 0 的数组，每个时间区间 <code>[i, j]</code> 就相当于一个子数组，这个时间区间有一个会议，那我就把这个子数组中的元素都加一。最后遍历数组，求最大值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minMeetingRooms</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = intervals.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">begin</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">end</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        begin[i] = intervals[i][<span class="number">0</span>];</span><br><span class="line">        end[i] = intervals[i][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(begin.<span class="built_in">begin</span>(), begin.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(begin.<span class="built_in">begin</span>(), begin.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (begin[i] &lt; end[j]) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count--;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="买卖股票的最佳时机-II"><a href="#买卖股票的最佳时机-II" class="headerlink" title="买卖股票的最佳时机 II"></a>买卖股票的最佳时机 II</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122. 买卖股票的最佳时机 II</a></p>
<p>给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。</p>
<p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。</p>
<p>返回 你能获得的 最大 利润 。</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：prices = [7,1,5,3,6,4]</span><br><span class="line">输出：7</span><br><span class="line">解释：在第<span class="number"> 2 </span>天（股票价格 = 1）的时候买入，在第<span class="number"> 3 </span>天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 =<span class="number"> 5 </span>-<span class="number"> 1 </span>=<span class="number"> 4 </span>。</span><br><span class="line">     随后，在第<span class="number"> 4 </span>天（股票价格 = 3）的时候买入，在第<span class="number"> 5 </span>天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 =<span class="number"> 6 </span>-<span class="number"> 3 </span>=<span class="number"> 3 </span>。</span><br><span class="line">     总利润为<span class="number"> 4 </span>+<span class="number"> 3 </span>=<span class="number"> 7 </span>。</span><br><span class="line">     </span><br><span class="line">示例 2：</span><br><span class="line">输入：prices = [1,2,3,4,5]</span><br><span class="line">输出：4</span><br><span class="line">解释：在第<span class="number"> 1 </span>天（股票价格 = 1）的时候买入，在第<span class="number"> 5 </span>天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 =<span class="number"> 5 </span>-<span class="number"> 1 </span>=<span class="number"> 4 </span>。</span><br><span class="line">     总利润为<span class="number"> 4 </span>。</span><br><span class="line">     </span><br><span class="line">示例 3：</span><br><span class="line">输入：prices = [7,6,4,3,1]</span><br><span class="line">输出：0</span><br><span class="line">解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为<span class="number"> 0 </span>。</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>构建差分数组，count记录获得利润，只加差分为正的值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> diff = prices[i] - prices[i - <span class="number">1</span>]; </span><br><span class="line">        <span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           count += diff;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="省份数量"><a href="#省份数量" class="headerlink" title="省份数量"></a>省份数量</h3><p><a href="https://leetcode.cn/problems/number-of-provinces/">547. 省份数量</a></p>
<p>有 <code>n</code> 个城市，其中一些彼此相连，另一些没有相连。如果城市 <code>a</code> 与城市 <code>b</code> 直接相连，且城市 <code>b</code> 与城市 <code>c</code> 直接相连，那么城市 <code>a</code> 与城市 <code>c</code> 间接相连。</p>
<p><strong>省份</strong> 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p>
<p>给你一个 <code>n x n</code> 的矩阵 <code>isConnected</code> ，其中 <code>isConnected[i][j] = 1</code> 表示第 <code>i</code> 个城市和第 <code>j</code> 个城市直接相连，而 <code>isConnected[i][j] = 0</code> 表示二者不直接相连。</p>
<p>返回矩阵中 <strong>省份</strong> 的数量。</p>
<img src="/posts/image-20220808115241997.png" alt="image-20220808115241997">

<p>解析：</p>
<p>可以把 n 个城市和它们之间的相连关系看成图，城市是图中的节点，相连关系是图中的边，给定的矩阵 isConnected 即为图的邻接矩阵，省份即为图中的连通分量。</p>
<p>使用并查集计算连通分量数，初始时，每个城市都属于不同的连通分量。遍历矩阵 isConnected，如果两个城市之间有相连关系，则它们属于同一个连通分量，对它们进行合并。遍历矩阵 isConnected 的全部元素之后，计算连通分量的总数，即为省份的总数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; parent, <span class="keyword">int</span> index)</span> </span>&#123; <span class="comment">// 寻找根节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent[index] != index) &#123;</span><br><span class="line">        parent[index] = <span class="built_in">Find</span>(parent, parent[index]); </span><br><span class="line">        <span class="comment">// 递归进行路径压缩</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parent[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; parent, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123; <span class="comment">// 建立连通性</span></span><br><span class="line">    parent[<span class="built_in">Find</span>(parent, index1)] = <span class="built_in">Find</span>(parent, index2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; isConnected)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cities = isConnected.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">parent</span><span class="params">(cities, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cities; i++) &#123;</span><br><span class="line">        parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cities; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; cities; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isConnected[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">Union</span>(parent, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> provinces = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cities; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[i] == i) &#123;</span><br><span class="line">            provinces++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> provinces;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="执行交换操作后的最小汉明距离"><a href="#执行交换操作后的最小汉明距离" class="headerlink" title="执行交换操作后的最小汉明距离"></a>执行交换操作后的最小汉明距离</h3><p><a href="https://leetcode.cn/problems/minimize-hamming-distance-after-swap-operations/">1722. 执行交换操作后的最小汉明距离</a></p>
<p>给你两个整数数组 <code>source</code> 和 <code>target</code> ，长度都是 <code>n</code> 。还有一个数组 <code>allowedSwaps</code> ，其中每个 <code>allowedSwaps[i] = [ai, bi]</code> 表示你可以交换数组 <code>source</code> 中下标为 <code>ai</code> 和 <code>bi</code>（<strong>下标从 0 开始</strong>）的两个元素。注意，你可以按 <strong>任意</strong> 顺序 <strong>多次</strong> 交换一对特定下标指向的元素。</p>
<p>相同长度的两个数组 <code>source</code> 和 <code>target</code> 间的 <strong>汉明距离</strong> 是元素不同的下标数量。形式上，其值等于满足 <code>source[i] != target[i]</code> （<strong>下标从 0 开始</strong>）的下标 <code>i</code>（<code>0 &lt;= i &lt;= n-1</code>）的数量。</p>
<p>在对数组 <code>source</code> 执行 <strong>任意</strong> 数量的交换操作后，返回 <code>source</code> 和 <code>target</code> 间的 <strong>最小汉明距离</strong> 。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：source = <span class="comment">[1,2,3,4]</span>, target = <span class="comment">[2,1,4,5]</span>, allowedSwaps = <span class="comment">[<span class="comment">[0,1]</span>,<span class="comment">[2,3]</span>]</span></span><br><span class="line">输出：1</span><br><span class="line">解释：source 可以按下述方式转换：</span><br><span class="line">- 交换下标 0 和 1 指向的元素：source = <span class="comment">[2,1,3,4]</span></span><br><span class="line">- 交换下标 2 和 3 指向的元素：source = <span class="comment">[2,1,4,3]</span></span><br><span class="line">source 和 target 间的汉明距离是 1 ，二者有 1 处元素不同，在下标 3 。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：source = <span class="comment">[1,2,3,4]</span>, target = <span class="comment">[1,3,2,4]</span>, allowedSwaps = <span class="comment">[]</span></span><br><span class="line">输出：2</span><br><span class="line">解释：不能对 source 执行交换操作。</span><br><span class="line">source 和 target 间的汉明距离是 2 ，二者有 2 处元素不同，在下标 1 和下标 2 。</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：source = <span class="comment">[5,1,2,4,3]</span>, target = <span class="comment">[1,5,4,2,3]</span>, allowedSwaps = <span class="comment">[<span class="comment">[0,4]</span>,<span class="comment">[4,2]</span>,<span class="comment">[1,3]</span>,<span class="comment">[1,4]</span>]</span></span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>利用并查集建立连通性关系，遍历 allowedSwaps 数组中所有元素，从而构建 source 数组中位置之间的联通关系。需要使用哈希表记录为每个联通分支维护位置的集合，为每个联通分支 k 维护 target 中对应位置元素的集合。随后，汉明距离的最小值，就是这两个集合之间不同的元素的数量。<br>注意：<strong>允许集合中的元素出现重复</strong>，因此使用<code>C++</code>中的<code>unordered_multiset</code>数据结构。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; parent, <span class="keyword">int</span> index)</span> </span>&#123; <span class="comment">// 寻找根节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent[index] != index) &#123;</span><br><span class="line">        parent[index] = <span class="built_in">Find</span>(parent, parent[index]); </span><br><span class="line">        <span class="comment">// 递归进行路径压缩</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parent[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; parent, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123; <span class="comment">// 建立连通性</span></span><br><span class="line">    parent[<span class="built_in">Find</span>(parent, index1)] = <span class="built_in">Find</span>(parent, index2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minimumHammingDistance</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; source, vector&lt;<span class="keyword">int</span>&gt;&amp; target, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; allowedSwaps)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = source.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">parent</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; allowed : allowedSwaps) &#123;</span><br><span class="line">        <span class="built_in">Union</span>(parent, allowed[<span class="number">0</span>], allowed[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, unordered_multiset&lt;<span class="keyword">int</span>&gt;&gt; s, t;</span><br><span class="line">    <span class="comment">// 为每个联通分支维护位置的集合</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fa = <span class="built_in">Find</span>(parent, i);</span><br><span class="line">        s[fa].<span class="built_in">insert</span>(source[i]);</span><br><span class="line">        <span class="comment">//t[fa].insert(target[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; </span><br><span class="line">        <span class="keyword">auto</span>&amp; m = s[<span class="built_in">Find</span>(parent, i)];</span><br><span class="line">        <span class="comment">// 如果通过下标找到的连通块中,有target[i]这个元素,那么将其删掉,反之res++</span></span><br><span class="line">        <span class="keyword">auto</span> t = m.<span class="built_in">find</span>(target[i]);</span><br><span class="line">        <span class="comment">// 不能使用 m.erase(x),不然会删掉所有的x,应该先定位到其具体位置,再删除</span></span><br><span class="line">        <span class="comment">//（因为该元素已经被用来对应了，后续无法再使用，所以要删除）</span></span><br><span class="line">        <span class="keyword">if</span> (t != m.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            m.<span class="built_in">erase</span>(t);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//if (s.find(i) == s.end()) continue;</span></span><br><span class="line">        <span class="comment">// for (int x : s[i]) &#123;</span></span><br><span class="line">        <span class="comment">//     if (t[i].find(x) == t[i].end()) &#123;</span></span><br><span class="line">        <span class="comment">//         res++;</span></span><br><span class="line">        <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">        <span class="comment">//         t[i].erase(t[i].find(x));</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><h3 id="替换后的最长重复字符"><a href="#替换后的最长重复字符" class="headerlink" title="替换后的最长重复字符"></a>替换后的最长重复字符</h3><p><a href="https://leetcode.cn/problems/longest-repeating-character-replacement/">424. 替换后的最长重复字符</a></p>
<p>给你一个字符串 <code>s</code> 和一个整数 <code>k</code> 。你可以选择字符串中的任一字符，并将其更改为任何其他大写英文字符。该操作最多可执行 <code>k</code> 次。</p>
<p>在执行上述操作后，返回包含相同字母的最长子字符串的长度。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：s = <span class="string">&quot;ABAB&quot;</span>, k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：用两个&#x27;A&#x27;替换为两个&#x27;B&#x27;,反之亦然。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：s = <span class="string">&quot;AABABBA&quot;</span>, k = <span class="number">1</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：</span><br><span class="line">将中间的一个&#x27;A&#x27;替换为&#x27;B&#x27;,字符串变为 <span class="string">&quot;AABBBBA&quot;</span>。</span><br><span class="line">子串 <span class="string">&quot;BBBB&quot;</span> 有最长重复字母, 答案为 <span class="number">4</span>。</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>双指针加滑动窗口：</p>
<p>right指针指向区间右端点，然后找到其最远的left左端点的位置，满足该区间内，出现次数最多的字符数量为maxCnt，区间长度减去maxCnt为剩余的字符数（即非最长重复字符）数量不超过k个。</p>
<p>实际代码中，由于字符串中仅包含大写字母，我们可以使用一个长度为 26 的数组维护每一个字符的出现次数。每次区间右移，我们更新右移位置的字符出现的次数，然后尝试用它更新重复字符出现次数的历史最大值，最后我们使用该最大值计算出区间内非最长重复字符的数量，以此判断左指针是否需要右移即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">characterReplacement</span><span class="params">(string s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxCnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        count[s[right] - <span class="string">&#x27;A&#x27;</span>]++;</span><br><span class="line">        maxCnt = <span class="built_in">max</span>(maxCnt, count[s[right] - <span class="string">&#x27;A&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (right - left + <span class="number">1</span> &gt; maxCnt + k) &#123;</span><br><span class="line">            count[s[left] - <span class="string">&#x27;A&#x27;</span>]--;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, right - left + <span class="number">1</span>);</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a>字符串的排列</h3><p><a href="https://leetcode.cn/problems/permutation-in-string/">567. 字符串的排列</a></p>
<p>给你两个字符串 <code>s1</code> 和 <code>s2</code> ，写一个函数来判断 <code>s2</code> 是否包含 <code>s1</code> 的排列。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>换句话说，<code>s1</code> 的排列之一是 <code>s2</code> 的 <strong>子串</strong> 。</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：<span class="built_in">s1</span> = <span class="string">&quot;ab&quot;</span> <span class="built_in">s2</span> = <span class="string">&quot;eidbaooo&quot;</span></span><br><span class="line">输出：true</span><br><span class="line">解释：<span class="built_in">s2</span> 包含 <span class="built_in">s1</span> 的排列之一 (<span class="string">&quot;ba&quot;</span>).</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：<span class="built_in">s1</span>= <span class="string">&quot;ab&quot;</span> <span class="built_in">s2</span> = <span class="string">&quot;eidboaoo&quot;</span></span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>双指针+滑动窗口，保证窗口的大小为s1的长度n，用一个cnt数组记录s1中各个字符出现的次数，两个指针left和right， right每次右移动一次，统计一次进入区间的字符x，若此时cnt[x] &lt; 0，则向右移动左指针，增加离开区间的字符cnt值直到cnt[x] &gt;= 0。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkInclusion</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s1.<span class="built_in">size</span>(), m = s2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (n &gt; m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; c : s1) &#123;</span><br><span class="line">        count[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; s2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = (s2[right] - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        right++;</span><br><span class="line">        count[x]--;</span><br><span class="line">        <span class="keyword">while</span> (count[x] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            count[s2[left] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right - left == n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="划分字母区间"><a href="#划分字母区间" class="headerlink" title="划分字母区间"></a>划分字母区间</h3><p><a href="https://leetcode.cn/problems/partition-labels/">763. 划分字母区间</a></p>
<p>字符串 <code>S</code> 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">S</span> = <span class="string">&quot;ababcbacadefegdehijhklij&quot;</span></span><br><span class="line">输出：[<span class="number">9</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">解释：</span><br><span class="line">划分结果为 <span class="string">&quot;ababcbaca&quot;</span>, <span class="string">&quot;defegde&quot;</span>, <span class="string">&quot;hijhklij&quot;</span>。</span><br><span class="line">每个字母最多出现在一个片段中。</span><br><span class="line">像 <span class="string">&quot;ababcbacadefegde&quot;</span>, <span class="string">&quot;hijhklij&quot;</span> 的划分是错误的，因为划分的片段数较少。</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>遍历字符串，count数组记录每个字符最后一次出现的位置，即出现最远的位置。双指针left和right初始指向0，对于right访问到的字符，更新right为该字符最后一次出现的位置，遍历left到right之间的窗口，如果窗口内的字符最后一次出现的位置更远则更新右端点right。窗口内的字符检查完毕后，计算窗口长度并记录在res中，将left和right更新到right+1的位置，重复以上步骤直到right到达末尾。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">partitionLabels</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        count[s[i]-<span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        right = count[s[right] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">int</span> index = left + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count[s[index]-<span class="string">&#x27;a&#x27;</span>] &gt; right) &#123;</span><br><span class="line">                right = count[s[index]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        right++;</span><br><span class="line">        res.<span class="built_in">push_back</span>(right - left);</span><br><span class="line">        left = right;        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h3 id="连续的子数组和"><a href="#连续的子数组和" class="headerlink" title="连续的子数组和"></a>连续的子数组和</h3><p><a href="https://leetcode.cn/problems/continuous-subarray-sum/">523. 连续的子数组和</a></p>
<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，编写一个函数来判断该数组是否含有同时满足下述条件的连续子数组：</p>
<ul>
<li>子数组大小 <strong>至少为 2</strong> ，且</li>
<li>子数组元素总和为 <code>k</code> 的倍数。</li>
</ul>
<p>如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>如果存在一个整数 <code>n</code> ，令整数 <code>x</code> 符合 <code>x = n * k</code> ，则称 <code>x</code> 是 <code>k</code> 的一个倍数。<code>0</code> 始终视为 <code>k</code> 的一个倍数。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">23</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>], <span class="attr">k</span> = <span class="number">6</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：[<span class="number">2</span>,<span class="number">4</span>] 是一个大小为 <span class="number">2</span> 的子数组，并且和为 <span class="number">6</span> 。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">23</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>], <span class="attr">k</span> = <span class="number">6</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：[<span class="number">23</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>] 是大小为 <span class="number">5</span> 的子数组，并且和为 <span class="number">42</span> 。 </span><br><span class="line"><span class="number">42</span> 是 <span class="number">6</span> 的倍数，因为 <span class="number">42</span> = <span class="number">7</span> * <span class="number">6</span> 且 <span class="number">7</span> 是一个整数。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">23</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>], <span class="attr">k</span> = <span class="number">13</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>前缀和+哈希表</p>
<p>计算前缀和数组元素与k的余数，当更新后的前缀和数组，出现两个元素的值（前缀和余数）相等，计算两个元素的距离如果大于2，表示存在子数组之和为k的整数倍。利用哈希表存储前缀和余数对应的位置索引。注意：哈希表中设置余数为0的下标为-1，方便计算子数组长度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkSubarraySum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; map;</span><br><span class="line">    map[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> remain = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        remain = (nums[i] + remain) % k;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="built_in">find</span>(remain) != map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = map[remain];</span><br><span class="line">            <span class="keyword">if</span> (i - index &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map[remain] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="和相同的二元子数组"><a href="#和相同的二元子数组" class="headerlink" title="和相同的二元子数组"></a>和相同的二元子数组</h3><p><a href="https://leetcode.cn/problems/binary-subarrays-with-sum/">930. 和相同的二元子数组</a></p>
<p>给你一个二元数组<code>nums</code>，和一个整数<code>goal</code>，请你统计并返回有多少个和为<code>goal</code> 的<strong>非空</strong>子数组。</p>
<p><strong>子数组</strong> 是数组的一段连续部分。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：nums = <span class="comment">[1,0,1,0,1]</span>, goal = 2</span><br><span class="line">输出：4</span><br><span class="line">解释：</span><br><span class="line">有 4 个满足题目要求的子数组：<span class="comment">[1,0,1]</span>、<span class="comment">[1,0,1,0]</span>、<span class="comment">[0,1,0,1]</span>、<span class="comment">[1,0,1]</span></span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = <span class="comment">[0,0,0,0,0]</span>, goal = 0</span><br><span class="line">输出：15</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>哈希表存储每一种前缀和出现的次数，假设原数组前缀和数组为sum，且子数组(i,j]的区间和为goal，那么sum[j] - sum[i] = goal; 因此可枚举j，查询满足条件的i的数量。假设当前枚举到元素nums[j]，只需要查询哈希表中元素sum[j] - goal的数量即可。最后这些元素的总数量即为所有和为 goal的子数组数量。</p>
<h3 id="构建回文串检测"><a href="#构建回文串检测" class="headerlink" title="构建回文串检测"></a>构建回文串检测</h3><p><a href="https://leetcode.cn/problems/can-make-palindrome-from-substring/">1177. 构建回文串检测</a></p>
<p>给你一个字符串 <code>s</code>，请你对 <code>s</code> 的子串进行检测。</p>
<p>每次检测，待检子串都可以表示为 <code>queries[i] = [left, right, k]</code>。我们可以 <strong>重新排列</strong> 子串 <code>s[left], ..., s[right]</code>，并从中选择 <strong>最多</strong> <code>k</code> 项替换成任何小写英文字母。 </p>
<p>如果在上述检测过程中，子串可以变成回文形式的字符串，那么检测结果为 <code>true</code>，否则结果为 <code>false</code>。</p>
<p>返回答案数组 <code>answer[]</code>，其中 <code>answer[i]</code> 是第 <code>i</code> 个待检子串 <code>queries[i]</code> 的检测结果。</p>
<p>注意：在替换时，子串中的每个字母都必须作为 <strong>独立的</strong> 项进行计数，也就是说，如果 <code>s[left..right] = &quot;aaa&quot;</code> 且 <code>k = 2</code>，我们只能替换其中的两个字母。（另外，任何检测都不会修改原始字符串 <code>s</code>，可以认为每次检测都是独立的）</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：s = <span class="string">&quot;abcda&quot;</span>, queries = [[<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>]]</span><br><span class="line">输出：[true,false,false,true,true]</span><br><span class="line">解释：</span><br><span class="line">queries[<span class="number">0</span>] : 子串 = <span class="string">&quot;d&quot;</span>，回文。</span><br><span class="line">queries[<span class="number">1</span>] : 子串 = <span class="string">&quot;bc&quot;</span>，不是回文。</span><br><span class="line">queries[<span class="number">2</span>] : 子串 = <span class="string">&quot;abcd&quot;</span>，只替换 <span class="number">1</span> 个字符是变不成回文串的。</span><br><span class="line">queries[<span class="number">3</span>] : 子串 = <span class="string">&quot;abcd&quot;</span>，可以变成回文的 <span class="string">&quot;abba&quot;</span>。 也可以变成 <span class="string">&quot;baab&quot;</span>，先重新排序变成 <span class="string">&quot;bacd&quot;</span>，然后把 <span class="string">&quot;cd&quot;</span> 替换为 <span class="string">&quot;ab&quot;</span>。</span><br><span class="line">queries[<span class="number">4</span>] : 子串 = <span class="string">&quot;abcda&quot;</span>，可以变成回文的 <span class="string">&quot;abcba&quot;</span>。</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>前缀和暴力求解：</p>
<p>记录某一个区间内的字符出现频率，出现奇数次的字母记录下来，根据奇数次字符出现次数再进行操作，使用一个二维数组<code>pre[i][j]</code>来保存字符串s前i个字符中字符’a’+j(0&lt;=j&lt;=26)出现的次数，最后在区间 [l,r] 中可通过<code>pre[r+1][j]-pre[l][j]</code>来得到某个区间内某字符的出现次数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">canMakePaliQueries</span><span class="params">(string s, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">pre</span>(<span class="number">100005</span>, vector&lt;<span class="keyword">int</span>&gt;(<span class="number">26</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        pre[i][s[i<span class="number">-1</span>]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) &#123;</span><br><span class="line">            pre[i][j] += pre[i<span class="number">-1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> odd = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="keyword">bool</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; q : queries) &#123;</span><br><span class="line">        odd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            odd += (pre[q[<span class="number">1</span>]+<span class="number">1</span>][i] - pre[q[<span class="number">0</span>]][i]) % <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 字符出现奇数次则++</span></span><br><span class="line">        &#125;</span><br><span class="line">        odd /= <span class="number">2</span>;</span><br><span class="line">        res.<span class="built_in">push_back</span>(odd &lt;= q[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最大的幻方"><a href="#最大的幻方" class="headerlink" title="最大的幻方"></a>最大的幻方</h3><p><a href="https://leetcode.cn/problems/largest-magic-square/">1895. 最大的幻方</a></p>
<p>一个 <code>k x k</code> 的 <strong>幻方</strong> 指的是一个 <code>k x k</code> 填满整数的方格阵，且每一行、每一列以及两条对角线的和 <strong>全部****相等</strong> 。幻方中的整数 <strong>不需要互不相同</strong> 。显然，每个 <code>1 x 1</code> 的方格都是一个幻方。</p>
<p>给你一个 <code>m x n</code> 的整数矩阵 <code>grid</code> ，请你返回矩阵中 <strong>最大幻方</strong> 的 <strong>尺寸</strong> （即边长 <code>k</code>）。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/20220806/magicsquare-grid.jpg" alt="img"></p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">输入：grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]</span><br><span class="line">输出：3</span><br><span class="line">解释：最大幻方尺寸为 3 。</span><br><span class="line">每一行，每一列以及两条对角线的和都等于 12 。</span><br><span class="line">- 每一行的和：5<span class="string">+1</span><span class="string">+6</span> = 5<span class="string">+4</span><span class="string">+3</span> = 2<span class="string">+7</span><span class="string">+3</span> = 12</span><br><span class="line">- 每一列的和：5<span class="string">+5</span><span class="string">+2</span> = 1<span class="string">+4</span><span class="string">+7</span> = 6<span class="string">+3</span><span class="string">+3</span> = 12</span><br><span class="line">- 对角线的和：5<span class="string">+4</span><span class="string">+3</span> = 6<span class="string">+4</span><span class="string">+2</span> = 12</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="/20220806/magicsquare2-grid.jpg" alt="img"></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">输入：grid = <span class="string">[[5,1,3,1],[9,3,3,1],[1,3,3,8]]</span></span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>枚举正方形+前缀和优化</p>
<p>按照从大到小的顺序枚举正方形的边长edge，再枚举给定的矩阵grid所有的边长为edge的正方形，并依次判断它们是否满足幻方的要求。可以预处理出矩阵grid每一行与每一列的前缀和，这样每一行或每一列的区间内求和可在O(1)的时间内完成，假设l=min(m, n),egde的范围[1, l]，那么，求和的时间复杂度为O(l)，总时间的复杂度为O(mnl^2)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">largestMagicSquare</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 每一行的前缀和</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">rowsum</span>(m, vector&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        rowsum[i][<span class="number">0</span>] = grid[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            rowsum[i][j] = rowsum[i][j<span class="number">-1</span>] + grid[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每一列的前缀和</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">colsum</span>(m, vector&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        colsum[<span class="number">0</span>][j] = grid[<span class="number">0</span>][j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            colsum[i][j] = colsum[i<span class="number">-1</span>][j] + grid[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从大到小枚举正方形边长edge</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> edge = <span class="built_in">min</span>(m, n); edge &gt;= <span class="number">2</span>; edge--) &#123;</span><br><span class="line">        <span class="comment">// 枚举左上角位置（i，j）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + edge &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + edge &lt;= n; j++) &#123;</span><br><span class="line">                <span class="comment">// 计算每一行、列、对角线的的值</span></span><br><span class="line">                <span class="keyword">int</span> stdsum = rowsum[i][j+edge<span class="number">-1</span>] - (j ? rowsum[i][j<span class="number">-1</span>] : <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">bool</span> check = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> ii = i+<span class="number">1</span>; ii &lt; i + edge; ii++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> num = rowsum[ii][j+edge<span class="number">-1</span>] - (j ? rowsum[ii][j<span class="number">-1</span>] : <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (num != stdsum) &#123;</span><br><span class="line">                        check = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!check) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> jj = j; jj &lt; j + edge; jj++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> num = colsum[i+edge<span class="number">-1</span>][jj] - (i ? colsum[i<span class="number">-1</span>][jj] : <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (num != stdsum) &#123;</span><br><span class="line">                        check = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">if</span> (!check) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> d1 = <span class="number">0</span>, d2 = <span class="number">0</span>; <span class="comment">// 两条对角线的和</span></span><br><span class="line">                <span class="comment">// 不使用前缀和，直接遍历求和</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; edge; k++) &#123;</span><br><span class="line">                    d1 += grid[i+k][j+k];</span><br><span class="line">                    d2 += grid[i+k][j+edge-k<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (d1 == stdsum &amp;&amp; d2 == stdsum) &#123;</span><br><span class="line">                    <span class="keyword">return</span> edge;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="和为目标值且不重叠的非空子数组的最大数目"><a href="#和为目标值且不重叠的非空子数组的最大数目" class="headerlink" title="和为目标值且不重叠的非空子数组的最大数目"></a>和为目标值且不重叠的非空子数组的最大数目</h3><p><a href="https://leetcode.cn/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/">1546. 和为目标值且不重叠的非空子数组的最大数目</a></p>
<p>给你一个数组 <code>nums</code> 和一个整数 <code>target</code> 。</p>
<p>请你返回 <strong>非空不重叠</strong> 子数组的最大数目，且每个子数组中数字和都为 <code>target</code> 。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：nums = <span class="comment">[1,1,1,1,1]</span>, target = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：总共有 2 个不重叠子数组（加粗数字表示） <span class="comment">[1,1,1,1,1]</span> ，它们的和为目标值 2 。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = <span class="comment">[-1,3,5,1,4,2,-9]</span>, target = 6</span><br><span class="line">输出：2</span><br><span class="line">解释：总共有 3 个子数组和为 6 。</span><br><span class="line">(<span class="comment">[5,1]</span>, <span class="comment">[4,2]</span>, <span class="comment">[3,5,1,4,2,-9]</span>) 但只有前 2 个是不重叠的。</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：nums = <span class="comment">[-2,6,6,3,5,4,1,2,8]</span>, target = 10</span><br><span class="line">输出：3</span><br><span class="line"></span><br><span class="line">示例 4：</span><br><span class="line">输入：nums = <span class="comment">[0,0,0]</span>, target = 0</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>贪心解法，满足条件的子数组互不重叠，如果其右端点所有满足条件的子数组的右端点中最小的哪一个，则该子数组一定会被选择。从左到右遍历数组，如果发现有某个以当前下标i为右端点的子数组和为target，就给计数器加一，并从nums数组的下标i+1位置开始，进行下一次寻找。</p>
<p>为了判断是否存在和为target的子数组，在遍历的过程中记录数组的前缀和，并将它们保存在哈希表中。如果位置i对应的前缀和为sum，而sum−target已经存在于哈希表中，就说明找到了一个和为target的子数组。</p>
<p>如果找到一个符合条件的子数组，下一次遍历过程中需要用一个新的哈希表，而不是使用原有的哈希表，需要确保每次找到的子数组的区间不重合。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxNonOverlapping</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        unordered_set&lt;<span class="keyword">int</span>&gt; s&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">find</span>(sum - target) != s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                res++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s.<span class="built_in">insert</span>(sum);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;          </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最高频元素的频数"><a href="#最高频元素的频数" class="headerlink" title="最高频元素的频数"></a>最高频元素的频数</h3><p><a href="https://leetcode.cn/problems/frequency-of-the-most-frequent-element/">1838. 最高频元素的频数</a></p>
<p>元素的 <strong>频数</strong> 是该元素在一个数组中出现的次数。</p>
<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。在一步操作中，你可以选择 <code>nums</code> 的一个下标，并将该下标对应元素的值增加 <code>1</code> 。</p>
<p>执行最多 <code>k</code> 次操作后，返回数组中最高频元素的 <strong>最大可能频数</strong> <em>。</em></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>], <span class="attr">k</span> = <span class="number">5</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：对第一个元素执行 <span class="number">3</span> 次递增操作，对第二个元素执 <span class="number">2</span> 次递增操作，此时 <span class="attr">nums</span> = [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>] 。</span><br><span class="line"><span class="number">4</span> 是数组中最高频元素，频数是 <span class="number">3</span> 。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">13</span>], <span class="attr">k</span> = <span class="number">5</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：存在多种最优解决方案：</span><br><span class="line">- 对第一个元素执行 <span class="number">3</span> 次递增操作，此时 <span class="attr">nums</span> = [<span class="number">4</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">13</span>] 。<span class="number">4</span> 是数组中最高频元素，频数是 <span class="number">2</span> 。</span><br><span class="line">- 对第二个元素执行 <span class="number">4</span> 次递增操作，此时 <span class="attr">nums</span> = [<span class="number">1</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">13</span>] 。<span class="number">8</span> 是数组中最高频元素，频数是 <span class="number">2</span> 。</span><br><span class="line">- 对第三个元素执行 <span class="number">5</span> 次递增操作，此时 <span class="attr">nums</span> = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">13</span>] 。<span class="number">13</span> 是数组中最高频元素，频数是 <span class="number">2</span> 。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line">输入：<span class="attr">nums</span> = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">6</span>], <span class="attr">k</span> = <span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>前缀和+二分</p>
<p>对nums先排序，计算nums对应的前缀和sum。假设右端点为i，区间左侧了l=0，右侧r=i，在区间[l. r]内进行二分，选取合适的mid值，mid=l+(r-l)/2，i固定不变。假设ans=nums[i]*(i-mid+1) - (sum[i]-sum[mid-1]); 假设ans&gt;k; 说明此时该区间不满足条件，需要l=mid+1；假设ans&lt;=k，说明此时该区间满足条件，需要r=mid-1，以求解最优的mid。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxFrequency</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">sum</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    sum[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = i, res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] * (<span class="keyword">long</span> <span class="keyword">long</span>)(i - mid + <span class="number">1</span>) - </span><br><span class="line">                (sum[i] - (mid &gt; <span class="number">0</span> ? sum[mid - <span class="number">1</span>] : <span class="number">0</span>)) &lt;= k) &#123;</span><br><span class="line">                res = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res != <span class="number">-1</span>) ans = <span class="built_in">max</span>(ans, i - res + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化：滑动窗口</p>
<p>令左边界l=0，依次遍历右边界r，每次求相邻柱子的阴影距离sum[i]，计算得到的sum与k比较，如果sum&gt;k，则移动左指针l，直到sum&lt;=k。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxFrequency</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> right = <span class="number">1</span>; right &lt; n; right++) &#123;</span><br><span class="line">        sum += (<span class="keyword">long</span> <span class="keyword">long</span>) (nums[right] - nums[right<span class="number">-1</span>]) * (right - left);</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; k) &#123;</span><br><span class="line">            sum -= nums[right] - nums[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, right - left + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h3 id="矩阵中的最长递增路径"><a href="#矩阵中的最长递增路径" class="headerlink" title="矩阵中的最长递增路径"></a>矩阵中的最长递增路径</h3><p><a href="https://leetcode.cn/problems/longest-increasing-path-in-a-matrix/">329. 矩阵中的最长递增路径</a></p>
<p>给定一个 <code>m x n</code> 整数矩阵 <code>matrix</code> ，找出其中 <strong>最长递增路径</strong> 的长度。</p>
<p>对于每个单元格，你可以往上，下，左，右四个方向移动。 你 <strong>不能</strong> 在 <strong>对角线</strong> 方向上移动或移动到 <strong>边界外</strong>（即不允许环绕）。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/20220806/grid1.jpg" alt="img"></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：matrix = <span class="comment">[<span class="comment">[9,9,4]</span>,<span class="comment">[6,6,8]</span>,<span class="comment">[2,1,1]</span>]</span></span><br><span class="line">输出：4 </span><br><span class="line">解释：最长递增路径为 <span class="comment">[1, 2, 6, 9]</span>。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="/20220806/tmp-grid.jpg" alt="img"></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：matrix = <span class="comment">[<span class="comment">[3,4,5]</span>,<span class="comment">[3,2,6]</span>,<span class="comment">[2,2,1]</span>]</span></span><br><span class="line">输出：4 </span><br><span class="line">解释：最长递增路径是 <span class="comment">[3, 4, 5, 6]</span>。注意不允许在对角线方向上移动。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">输入：matrix = <span class="string">[[1]]</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>将矩阵看作一个有向图，每个单元格对应图中一个节点，若相邻的两个单元格的节点值不相等，则在相邻的两个单元格之间存在一条从较小值指向较大值的有向边。问题转化为在有向图中寻找最长的路径。如果使用朴素深度优先搜索，时间复杂度是指数级，会超出时间限制，因此必须加以优化。</p>
<p>优化方法：记忆化搜索。用矩阵memo作为缓存矩阵，已经计算过的单元格的结果存储到缓存矩阵中。当访问到一个单元格（i，j）时，如果<code>memo[i][j] == 0</code>，说明该单元格还未被计算过，进行搜索将计算结果存入缓存；如果<code>memo[i][j] ！= 0</code>，说明该单元格已经计算过，直接从缓存中读取结果。</p>
<p>遍历完矩阵中的所有单元格之后，即可得到矩阵中的最长递增路径的长度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; dirs = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; memo;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    m = matrix.<span class="built_in">size</span>();</span><br><span class="line">    n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    memo = vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;(m, vector&lt;<span class="keyword">int</span>&gt;(n, <span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, <span class="built_in">dfs</span>(matrix, i, j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (memo[r][c] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> memo[r][c];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = r + dirs[k];</span><br><span class="line">        <span class="keyword">int</span> y = c + dirs[k+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n || matrix[x][y] &lt;= matrix[r][c]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">dfs</span>(matrix, x, y) + <span class="number">1</span>;</span><br><span class="line">        maxLen = <span class="built_in">max</span>(maxLen, len);</span><br><span class="line">    &#125;</span><br><span class="line">    memo[r][c] = maxLen;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h3><p><a href="https://leetcode.cn/problems/number-of-islands/">200. 岛屿数量</a></p>
<p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>
<p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p>
<p>此外，你可以假设该网格的四条边均被水包围。</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：grid = [</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>]</span><br><span class="line">]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：grid = [</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>]</span><br><span class="line">]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>dfs深度优先搜索，将二维网格看成一个无向图，竖直或水平相邻的1之间有边相连。为了求岛屿的数量，扫描二维网格，遇到位置为1的开始进行dfs搜索，再dfs搜索过程中，每个搜到的1都重新标记为0。最终搜索的次数即为岛屿的数量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; dirs &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">    m = grid.<span class="built_in">size</span>();</span><br><span class="line">    n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                res++;</span><br><span class="line">                <span class="built_in">dfs</span>(grid, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    grid[r][c] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = r + dirs[k], y = c + dirs[k+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n || grid[x][y] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(grid, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单词搜索"><a href="#单词搜索" class="headerlink" title="单词搜索"></a>单词搜索</h3><p><a href="https://leetcode.cn/problems/word-search/">79. 单词搜索</a></p>
<p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个字符串单词 <code>word</code> 。如果 <code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/20220806/word2.jpg" alt="img"></p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">输入：board = [[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;E&quot;</span>],[<span class="string">&quot;S&quot;</span>,<span class="string">&quot;F&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;S&quot;</span>],[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;E&quot;</span>,<span class="string">&quot;E&quot;</span>]], word = <span class="string">&quot;ABCCED&quot;</span></span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="/20220806/word-1.jpg" alt="img"></p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">输入：board = [[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;E&quot;</span>],[<span class="string">&quot;S&quot;</span>,<span class="string">&quot;F&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;S&quot;</span>],[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;E&quot;</span>,<span class="string">&quot;E&quot;</span>]], word = <span class="string">&quot;SEE&quot;</span></span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>dfs回溯，从网格（i，j）位置出发，能否搜索到单词word[index…]，如果可以搜到word末尾，返回true，反之返回false，字符串不匹配之间返回false；遍历当前位置的所有相邻位置，如果可以搜到word[index+1]，则返回true，否则返回false。为了防止重复遍历相同的位置，需要额外维护一个与原数组board大小相同的访问数组visited，标识每个位置是否已经访问过，dfs过程中不走回头路。注意dfs访问结束后将当前位置标志为false回溯。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; dirs&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; visited;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">exist</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, string word)</span> </span>&#123;</span><br><span class="line">    m = board.<span class="built_in">size</span>();</span><br><span class="line">    n = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    visited = vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt;(m, vector&lt;<span class="keyword">bool</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] != word[<span class="number">0</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            flag = <span class="built_in">dfs</span>(board, word, i, j, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, string word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (board[i][j] != word[index]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == word.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">bool</span> res = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = i + dirs[k];</span><br><span class="line">        <span class="keyword">int</span> y = j + dirs[k+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!visited[x][y]) &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="built_in">dfs</span>(board, word, x, y, index + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                res = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    visited[i][j] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><h3 id="字母大小写全排列"><a href="#字母大小写全排列" class="headerlink" title="字母大小写全排列"></a>字母大小写全排列</h3><p><a href="https://leetcode.cn/problems/letter-case-permutation/">784. 字母大小写全排列</a></p>
<p>给定一个字符串 <code>s</code> ，通过将字符串 <code>s</code> 中的每个字母转变大小写，我们可以获得一个新的字符串。</p>
<p>返回 <em>所有可能得到的字符串集合</em> 。以 <strong>任意顺序</strong> 返回输出。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;a1b2&quot;</span></span><br><span class="line">输出：[<span class="string">&quot;a1b2&quot;</span>, <span class="string">&quot;a1B2&quot;</span>, <span class="string">&quot;A1b2&quot;</span>, <span class="string">&quot;A1B2&quot;</span>]</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: <span class="attr">s</span> = <span class="string">&quot;3z4&quot;</span></span><br><span class="line">输出: [<span class="string">&quot;3z4&quot;</span>,<span class="string">&quot;3Z4&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>解析：<br>递归求解，从左至右遍历字符，如果字符为字母，将当前已遍历的字符串全排列复制两份，在第一份字符串末尾添加toupper(s[index]), 在第二份字符串末尾添加tolower(s[index])。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">letterCasePermutation</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line">    <span class="built_in">slove</span>(s, ans, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(string s, vector&lt;string&gt;&amp; ans, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(s);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isalpha</span>(s[index])) &#123;</span><br><span class="line">        s[index] = <span class="built_in">toupper</span>(s[index]);</span><br><span class="line">        <span class="built_in">slove</span>(s, ans, index + <span class="number">1</span>);</span><br><span class="line">        s[index] = <span class="built_in">tolower</span>(s[index]);</span><br><span class="line">        <span class="built_in">slove</span>(s, ans, index + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">slove</span>(s, ans, index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="全排列-II"><a href="#全排列-II" class="headerlink" title="全排列 II"></a>全排列 II</h3><p><a href="https://leetcode.cn/problems/permutations-ii/">47. 全排列 II</a></p>
<p>给定一个可包含重复数字的序列 <code>nums</code> ，<em><strong>按任意顺序</strong></em> 返回所有不重复的全排列。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：nums = <span class="comment">[1,1,2]</span></span><br><span class="line">输出：</span><br><span class="line"><span class="comment">[<span class="comment">[1,1,2]</span>,</span></span><br><span class="line"><span class="comment"> <span class="comment">[1,2,1]</span>,</span></span><br><span class="line"><span class="comment"> <span class="comment">[2,1,1]</span>]</span></span><br><span class="line"> </span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = <span class="comment">[1,2,3]</span></span><br><span class="line">输出：<span class="comment">[<span class="comment">[1,2,3]</span>,<span class="comment">[1,3,2]</span>,<span class="comment">[2,1,3]</span>,<span class="comment">[2,3,1]</span>,<span class="comment">[3,1,2]</span>,<span class="comment">[3,2,1]</span>]</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>回溯搜索，序列中包含了重复的数字，要求我们返回不重复的全排列。将这个问题看作有 n 个排列成一行的空格，我们需要从左往右依次填入题目给定的 n 个数，每个数只能使用一次。先对原始数组进行排序，需要一个visited数组记录已经使用过的数，index记录path待填入的位置，如果index==n说明已经填完，找到可行解将path存入res中，递归结束。递归过程中，如果这个数还未使用过，尝试填入继续填下一位置，需要注意的是，数组中存在重复的元素，因此需要先排序，需要保证重复的数字只被填入一次，如果两个相邻的数相同，而且第一个数并未被使用过，则后续相同的数应该跳过循环不填入。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line">vector&lt;<span class="keyword">bool</span>&gt; visited;</span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    visited = vector&lt;<span class="keyword">bool</span>&gt;(nums.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">slove</span>(nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &amp;&amp; !visited[i<span class="number">-1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">slove</span>(nums, index + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="出现次数最多的子树元素和"><a href="#出现次数最多的子树元素和" class="headerlink" title="出现次数最多的子树元素和"></a>出现次数最多的子树元素和</h3><p><a href="https://leetcode.cn/problems/most-frequent-subtree-sum/">508. 出现次数最多的子树元素和</a></p>
<p>给你一个二叉树的根结点 <code>root</code> ，请返回出现次数最多的子树元素和。如果有多个元素出现的次数相同，返回所有出现次数最多的子树元素和（不限顺序）。</p>
<p>一个结点的 <strong>「子树元素和」</strong> 定义为以该结点为根的二叉树上所有结点的元素之和（包括结点本身）。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/20220806/freq1-tree.jpg" alt="img"></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入: root = <span class="comment">[5,2,-3]</span></span><br><span class="line">输出: <span class="comment">[2,-3,4]</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="/20220806/freq2-tree.jpg" alt="img"></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入: root = <span class="comment">[5,2,-5]</span></span><br><span class="line">输出: <span class="comment">[2]</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>从根节点出发dfs遍历，对于每棵子树，其子树元素和等于子树根结点的元素值，加上左子树的元素和，以及右子树的元素和。用哈希表统计每棵子树的元素和的出现次数，计算出现次数的最大值maxCnt，最后将出现次数等于maxCnt的所有元素返回。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; count;</span><br><span class="line"><span class="keyword">int</span> maxCnt = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">findFrequentTreeSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="built_in">sum</span>(root);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it : count) &#123;</span><br><span class="line">        <span class="keyword">if</span> (it.second == maxCnt) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(it.first);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="built_in">sum</span>(root-&gt;left);</span><br><span class="line">    <span class="keyword">int</span> right = <span class="built_in">sum</span>(root-&gt;right);</span><br><span class="line">    <span class="keyword">int</span> res = left + right + root-&gt;val;</span><br><span class="line">    count[res]++;</span><br><span class="line">    maxCnt = <span class="built_in">max</span>(maxCnt, count[res]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在每个树行中找最大值"><a href="#在每个树行中找最大值" class="headerlink" title="在每个树行中找最大值"></a>在每个树行中找最大值</h3><p><a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/">515. 在每个树行中找最大值</a></p>
<p>给定一棵二叉树的根节点 <code>root</code> ，请找出该二叉树中每一层的最大值。</p>
<p><strong>示例1：</strong></p>
<img src="/posts/largest_e1.jpg" alt="img" style="zoom:50%;">

<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入: root = <span class="comment">[1,3,2,5,3,null,9]</span></span><br><span class="line">输出: <span class="comment">[1,3,9]</span></span><br></pre></td></tr></table></figure>

<p><strong>示例2：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入: root = <span class="comment">[1,2,3]</span></span><br><span class="line">输出: <span class="comment">[1,3]</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>两种方法：深度优先搜索与广度优先搜索。</p>
<p>深度优先：用树的「先序遍历」来进行「深度优先搜索」处理，用depth标记遍历到的当前节点的高度，当遍历到depth高度的节点就判断是否更新该层节点的最大值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">largestValues</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="built_in">dfs</span>(root, res, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root, vector&lt;<span class="keyword">int</span>&gt;&amp; res, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (depth == res.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res[depth] = <span class="built_in">max</span>(res[depth], root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;left, res, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;right, res, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>广度优先：队列中存放的是当前层的所有节点，把当前队列中的全部节点拿出来进行拓展，这样能保证每次拓展完的时候队列里存放的是下一层的所有节点，即我们是一层一层地进行拓展，然后每一层我们用maxVal记录该层节点的最大值。当该层全部节点都处理完后，maxVal就是该层全部节点中的最大值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">largestValues</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    queue&lt;TreeNode*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> maxVal = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            TreeNode* cur = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            maxVal = <span class="built_in">max</span>(maxVal, cur-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;left) q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;right) q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(maxVal);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉搜索树中的插入操作"><a href="#二叉搜索树中的插入操作" class="headerlink" title="二叉搜索树中的插入操作"></a>二叉搜索树中的插入操作</h3><p><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/">701. 二叉搜索树中的插入操作</a></p>
<p>给定二叉搜索树（BST）的根节点 <code>root</code> 和要插入树中的值 <code>value</code> ，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 <strong>保证</strong> ，新值和原始二叉搜索树中的任意节点值都不同。</p>
<p><strong>注意</strong>，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 <strong>任意有效的结果</strong> 。</p>
<p><strong>示例 1：</strong></p>
<img src="/posts/insertbst.jpg" alt="img" style="zoom:67%;">

<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">输入：root = <span class="string">[4,2,7,1,3]</span>, val = <span class="number">5</span></span><br><span class="line">输出：<span class="string">[4,2,7,1,3,5]</span></span><br><span class="line">解释：另一个满足题目要求可以通过的树是：</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">root</span> = [<span class="number">40</span>,<span class="number">20</span>,<span class="number">60</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">70</span>], <span class="attr">val</span> = <span class="number">25</span></span><br><span class="line">输出：[<span class="number">40</span>,<span class="number">20</span>,<span class="number">60</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">70</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">25</span>]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">root</span> = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>], <span class="attr">val</span> = <span class="number">5</span></span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>深度优先搜索，对于任意节点root，左子树的节点值小于root的值，右子树的节点值大于root的值。将val插入到以root为根的子树上，根据val与root-&gt;val的大小关系，确定将val插入到哪个子树中。如果子树不为空，将val插入到对应的子树上；如果子树为空，在此处新建一个以val为值的节点，连接到父节点root上。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">insertIntoBST</span><span class="params">(TreeNode* root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        TreeNode* cur = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val &gt; val) &#123;</span><br><span class="line">        root-&gt;left = <span class="built_in">insertIntoBST</span>(root-&gt;left, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val &lt; val) &#123;</span><br><span class="line">        root-&gt;right = <span class="built_in">insertIntoBST</span>(root-&gt;right, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉树中的最大路径和"><a href="#二叉树中的最大路径和" class="headerlink" title="二叉树中的最大路径和"></a>二叉树中的最大路径和</h3><p><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/">124. 二叉树中的最大路径和</a></p>
<p><strong>路径</strong> 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 <strong>至多出现一次</strong> 。该路径 <strong>至少包含一个</strong> 节点，且不一定经过根节点。</p>
<p><strong>路径和</strong> 是路径中各节点值的总和。</p>
<p>给你一个二叉树的根节点 <code>root</code> ，返回其 <strong>最大路径和</strong> 。</p>
<p><strong>示例 1：</strong></p>
<img src="/posts/exx1.jpg" alt="img" style="zoom:67%;">

<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,3]</span><br><span class="line">输出：6</span><br><span class="line">解释：最优路径是<span class="number"> 2 </span>-&gt;<span class="number"> 1 </span>-&gt;<span class="number"> 3 </span>，路径和为<span class="number"> 2 </span>+<span class="number"> 1 </span>+<span class="number"> 3 </span>= 6</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<img src="/posts/exx2.jpg" alt="img" style="zoom:67%;">

<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：root = [-10,9,20,null,null,15,7]</span><br><span class="line">输出：42</span><br><span class="line">解释：最优路径是<span class="number"> 15 </span>-&gt;<span class="number"> 20 </span>-&gt;<span class="number"> 7 </span>，路径和为<span class="number"> 15 </span>+<span class="number"> 20 </span>+<span class="number"> 7 </span>= 42</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>后序遍历，dfs遍历计算单边的最大路径和，最终的最长路径为根节点+左子树的最长单边路径+右子树的单边最长路径。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode* root)</span> </span>&#123;       </span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = INT_MIN;</span><br><span class="line">    <span class="built_in">dfs</span>(root, ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义：计算从根节点 root 为起点的最大单边路径和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode* root, <span class="keyword">int</span>&amp; ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> left_sum = <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">dfs</span>(root-&gt;left, ans));</span><br><span class="line">    <span class="keyword">int</span> right_sum = <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">dfs</span>(root-&gt;right, ans));</span><br><span class="line">	<span class="comment">// 后序遍历位置，顺便更新最大路径和</span></span><br><span class="line">    <span class="keyword">int</span> path_sum = root-&gt;val + left_sum + right_sum;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, path_sum);</span><br><span class="line">    <span class="comment">// 实现函数定义，左右子树的最大单边路径和加上根节点的值</span></span><br><span class="line">    <span class="comment">// 就是从根节点 root 为起点的最大单边路径和</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(left_sum, right_sum) + root-&gt;val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="路径总和-II"><a href="#路径总和-II" class="headerlink" title="路径总和 II"></a>路径总和 II</h3><p><a href="https://leetcode.cn/problems/path-sum-ii/">113. 路径总和 II</a></p>
<p>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 <strong>从根节点到叶子节点</strong> 路径总和等于给定目标和的路径。</p>
<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>
<p><strong>示例 1：</strong></p>
<img src="/posts/pathsumii1.jpg" alt="img" style="zoom: 67%;">

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">输入：root = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">11</span>,null,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,null,null,<span class="number">5</span>,<span class="number">1</span>], targetSum = <span class="number">22</span></span><br><span class="line">输出：<span class="string">[[5,4,11,2],[5,8,4,5]]</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<img src="/posts/pathsum2.jpg" alt="img" style="zoom: 67%;">

<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：root = <span class="comment">[1,2,3]</span>, targetSum = 5</span><br><span class="line">输出：<span class="comment">[]</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：root = <span class="comment">[1,2]</span>, targetSum = 0</span><br><span class="line">输出：<span class="comment">[]</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>深度优先dfs搜索，对树进行一次遍历，在遍历时记录从根节点到当前节点的路径和，以防止重复计算。当遍历到叶子节点，且此时路径和恰好为目标和，就找到一条可行路径。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">pathSum</span>(TreeNode* root, <span class="keyword">int</span> targetSum) &#123;</span><br><span class="line">    <span class="built_in">dfs</span>(root, targetSum);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">    path.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="literal">nullptr</span> &amp;&amp; target == root-&gt;val) &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left) <span class="built_in">dfs</span>(root-&gt;left, target - root-&gt;val);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;right) <span class="built_in">dfs</span>(root-&gt;right, target - root-&gt;val);</span><br><span class="line">    path.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取你好友已观看的视频"><a href="#获取你好友已观看的视频" class="headerlink" title="获取你好友已观看的视频"></a>获取你好友已观看的视频</h3><p><a href="https://leetcode.cn/problems/get-watched-videos-by-your-friends/">1311. 获取你好友已观看的视频</a></p>
<p>有 <code>n</code> 个人，每个人都有一个 <code>0</code> 到 <code>n-1</code> 的唯一 <em>id</em> 。</p>
<p>给你数组 <code>watchedVideos</code> 和 <code>friends</code> ，其中 <code>watchedVideos[i]</code> 和 <code>friends[i]</code> 分别表示 <code>id = i</code> 的人观看过的视频列表和他的好友列表。</p>
<p>Level <strong>1</strong> 的视频包含所有你好友观看过的视频，level <strong>2</strong> 的视频包含所有你好友的好友观看过的视频，以此类推。一般的，Level 为 <strong>k</strong> 的视频包含所有从你出发，最短距离为 <strong>k</strong> 的好友观看过的视频。</p>
<p>给定你的 <code>id</code> 和一个 <code>level</code> 值，请你找出所有指定 <code>level</code> 的视频，并将它们按观看频率升序返回。如果有频率相同的视频，请将它们按字母顺序从小到大排列。</p>
<p><strong>示例 1：</strong></p>
<p><strong><img src="/20220806/leetcode_friends_1.png" alt="img"></strong></p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">输入：watchedVideos = [[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>],[<span class="string">&quot;C&quot;</span>],[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>],[<span class="string">&quot;D&quot;</span>]], friends = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>]], id = <span class="number">0</span>, level = <span class="number">1</span></span><br><span class="line">输出：[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>] </span><br><span class="line">解释：</span><br><span class="line">你的 id 为 <span class="number">0</span>（绿色），你的朋友包括（黄色）：</span><br><span class="line">id 为 <span class="number">1</span> -&gt; watchedVideos = [<span class="string">&quot;C&quot;</span>] </span><br><span class="line">id 为 <span class="number">2</span> -&gt; watchedVideos = [<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>] </span><br><span class="line">你朋友观看过视频的频率为：</span><br><span class="line"><span class="symbol">B</span> -&gt; <span class="number">1</span> </span><br><span class="line"><span class="symbol">C</span> -&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><strong><img src="/20220806/leetcode_friends_2.png" alt="img"></strong></p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">输入：watchedVideos = [[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>],[<span class="string">&quot;C&quot;</span>],[<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>],[<span class="string">&quot;D&quot;</span>]], friends = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>]], id = <span class="number">0</span>, level = <span class="number">2</span></span><br><span class="line">输出：[<span class="string">&quot;D&quot;</span>]</span><br><span class="line">解释：</span><br><span class="line">你的 id 为 <span class="number">0</span>（绿色），你朋友的朋友只有一个人，他的 id 为 <span class="number">3</span>（黄色）。</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>广度优先搜索+set/map应用+排序</p>
<ul>
<li>找出所有 Level k 的好友：使用广度优先的方法，从编号为id的节点开始，得到从id到其余所有节点的最短路径，则所有到id的最短路径为k的节点都是level K的好友</li>
<li>统计好友观看过的视频：哈希表来统计level K的好友观看过的视频，key为视频的名称，value为视频被好友观看过的次数，对于队列中的每个节点x，将watchedVedios[x]中的所有视频依次加入到哈希表中。</li>
<li>将视频按照要求排序：在统计完成之后，我们将哈希映射中的所有键值对存储进数组中，并将它们按照观看次数为第一关键字、视频名称为第二关键字生序排序，即可得到最终的结果。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">watchedVideosByFriends</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; watchedVideos, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; friends, <span class="keyword">int</span> id, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = friends.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">used</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(id);</span><br><span class="line">    used[id] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 寻找id的第level级别的好友将其入队</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= level; k++) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> v : friends[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!used[v]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                    used[v] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unordered_map&lt;string, <span class="keyword">int</span>&gt; freq;</span><br><span class="line">    <span class="comment">// 哈希表存储队列中出现的电影名字与其出现次数</span></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> string&amp; watched : watchedVideos[u]) &#123;</span><br><span class="line">            freq[watched]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;pair&lt;string, <span class="keyword">int</span>&gt;&gt; <span class="built_in">videos</span>(freq.<span class="built_in">begin</span>(), freq.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">// 按照出现次数，影片的名字进行排序</span></span><br><span class="line">    <span class="built_in">sort</span>(videos.<span class="built_in">begin</span>(), videos.<span class="built_in">end</span>(), </span><br><span class="line">         [&amp;](<span class="keyword">const</span> pair&lt;string, <span class="keyword">int</span>&gt;&amp; a, <span class="keyword">const</span> pair&lt;string, <span class="keyword">int</span>&gt;&amp; b) &#123;</span><br><span class="line">         <span class="keyword">return</span> a.second &lt; b.second || (a.second == b.second &amp;&amp; a.first &lt; b.first);</span><br><span class="line">    &#125;);</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : videos) &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(v.first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拓补"><a href="#拓补" class="headerlink" title="拓补"></a>拓补</h2><p><a href="https://leetcode.cn/problems/employee-importance/">690. 员工的重要性</a></p>
<p>给定一个保存员工信息的数据结构，它包含了员工 <strong>唯一的 id</strong> ，<strong>重要度</strong> 和 <strong>直系下属的 id</strong> 。</p>
<p>比如，员工 1 是员工 2 的领导，员工 2 是员工 3 的领导。他们相应的重要度为 15 , 10 , 5 。那么员工 1 的数据结构是 [1, 15, [2]] ，员工 2的 数据结构是 [2, 10, [3]] ，员工 3 的数据结构是 [3, 5, []] 。注意虽然员工 3 也是员工 1 的一个下属，但是由于 <strong>并不是直系</strong> 下属，因此没有体现在员工 1 的数据结构中。</p>
<p>现在输入一个公司的所有员工信息，以及单个员工 id ，返回这个员工和他所有下属的重要度之和。</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：[[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1</span><br><span class="line">输出：11</span><br><span class="line">解释：</span><br><span class="line">员工<span class="number"> 1 </span>自身的重要度是<span class="number"> 5 </span>，他有两个直系下属<span class="number"> 2 </span>和<span class="number"> 3 </span>，而且<span class="number"> 2 </span>和<span class="number"> 3 </span>的重要度均为<span class="number"> 3 </span>。因此员工<span class="number"> 1 </span>的总重要度是<span class="number"> 5 </span>+<span class="number"> 3 </span>+<span class="number"> 3 </span>=<span class="number"> 11 </span>。</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>由于一个员工最多有一个直系领导，可以有零个或若干个直系下属，因此员工之间的领导和下属关系构成树的结构。给定一个员工编号，要求计算这个员工及其所有下属的重要性之和，即为找到以该员工为根节点的子树的结构中，每个员工的重要性之和。</p>
<ol>
<li>深度优先搜索dfs</li>
</ol>
<p>根据给定的员工编号找到员工，从该员工开始遍历，对于每个员工，将其重要性加到总和中，然后对该员工的每个直系下属继续遍历，直到所有下属遍历完毕，此时的总和即为给定的员工及其所有下属的重要性之和。实现过程中，每个员工的编号都不相同，利用哈希表存储每个id对应的员工，即可通过编号找到对应的员工。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getImportance</span><span class="params">(vector&lt;Employee*&gt; employees, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, Employee*&gt; map;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : employees) &#123;</span><br><span class="line">        map[e-&gt;id] = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(id, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> id, unordered_map&lt;<span class="keyword">int</span>, Employee*&gt;&amp; map)</span> </span>&#123;</span><br><span class="line">    Employee* cur = map[id];</span><br><span class="line">    <span class="keyword">int</span> total = cur-&gt;importance;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : cur-&gt;subordinates) &#123;</span><br><span class="line">        total += <span class="built_in">dfs</span>(i, map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>广度优先搜索bfs</li>
</ol>
<p>和深度优先搜索一样，使用哈希表存储每个员工编号和对应的员工，即可通过员工编号得到对应的员工。根据给定的员工编号找到员工，从该员工开始广度优先搜索，对于每个遍历到的员工，将其重要性加到总和中，最终得到的总和即为给定的员工及其所有下属的重要性之和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getImportance</span><span class="params">(vector&lt;Employee*&gt; employees, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, Employee*&gt; map;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : employees) &#123;</span><br><span class="line">        map[e-&gt;id] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(id);</span><br><span class="line">    <span class="comment">//total += map[id]-&gt;importance;</span></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur_id = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        Employee* cur = map[cur_id];</span><br><span class="line">        total += cur-&gt;importance;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : cur-&gt;subordinates) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            <span class="comment">//total += map[i]-&gt;importance;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h2><h3 id="基本计算器-II"><a href="#基本计算器-II" class="headerlink" title="基本计算器 II"></a>基本计算器 II</h3><p><a href="https://leetcode.cn/problems/basic-calculator-ii/">227. 基本计算器 II</a></p>
<p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p>
<p>整数除法仅保留整数部分。</p>
<p>你可以假设给定的表达式总是有效的。所有中间结果将在 <code>[-2^31, 2^31 - 1]</code> 的范围内。</p>
<p><strong>注意：</strong>不允许使用任何将字符串作为数学表达式计算的内置函数，比如 <code>eval()</code> 。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;3+2*2&quot;</span></span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot; 3/2 &quot;</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot; 3+5 / 2 &quot;</span></span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>栈模拟，用一个栈，保存这些（进行乘除运算后的）整数的值。对于加减号后的数字，将其直接压入栈中；对于乘除号后的数字，可以直接与栈顶元素计算，并替换栈顶元素为计算后的结果。遍历字符串s，用变量sign记录每个数字之前的运算符，对于第一个数字，其之前的运算符视为加号，每次遍历到数字末尾时，根据sign确定计算方式，遇到减号则将数字的相反数入栈。代码实现中，若读到一个运算符，或者遍历到字符串末尾，即认为是遍历到了数字末尾。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> sign = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; cal;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i])) &#123;</span><br><span class="line">            d = d * <span class="number">10</span> + (s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isdigit</span>(s[i]) &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span> || i == s.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sign == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                cal.<span class="built_in">push</span>(d);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                cal.<span class="built_in">push</span>(-d);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                cal.<span class="built_in">top</span>() *= d;</span><br><span class="line">                <span class="comment">//int tmp = cal.top() * d;</span></span><br><span class="line">                <span class="comment">// cal.pop();</span></span><br><span class="line">                <span class="comment">// cal.push(tmp);</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                cal.<span class="built_in">top</span>() /= d;</span><br><span class="line">                <span class="comment">// int tmp = cal.top() / d;</span></span><br><span class="line">                <span class="comment">// cal.pop();</span></span><br><span class="line">                <span class="comment">// cal.push(tmp);</span></span><br><span class="line">            &#125;</span><br><span class="line">            sign = s[i];</span><br><span class="line">            d = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!cal.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        res += cal.<span class="built_in">top</span>();</span><br><span class="line">        cal.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="去除重复字母"><a href="#去除重复字母" class="headerlink" title="去除重复字母"></a>去除重复字母</h3><p><a href="https://leetcode.cn/problems/remove-duplicate-letters/">316. 去除重复字母</a></p>
<p>给你一个字符串 <code>s</code> ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 <strong>返回结果的字典序最小</strong>（要求不能打乱其他字符的相对位置）。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;bcabc&quot;</span></span><br><span class="line">输出：<span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;cbacdcbc&quot;</span></span><br><span class="line">输出：<span class="string">&quot;acdb&quot;</span></span><br></pre></td></tr></table></figure>

<p>​         </p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux多进程编程</title>
    <url>/posts/38e1db9d.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="fork系统调用"><a href="#fork系统调用" class="headerlink" title="fork系统调用"></a>fork系统调用</h2><p>fork系统调用：创建新进程</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/types.h＞</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜unistd.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">fork</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	每次调用返回两次，在父进程中返回子进程的PID，在子进程中返回0。</span></span><br><span class="line"><span class="comment">	该返回值是判断当前进程是父进程还是子进程的依据。</span></span><br><span class="line"><span class="comment">	失败返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>fork函数复制当前进程，在内核进程表中创建一个新的进程表项。新的进程表项有很多属性与原进程相同，比如堆栈指针、标志寄存器的值。不同的属性有：该进程的PPID被设置成原进程的PID，信号位图被清除（原进程设置的信号处理函数不再对新进程起作用）。</p>
<p>子进程的代码与父进程完全相同，同时会复制父进程的数据（堆数据、栈数据、静态数据）。数据的复制采用<strong>写时复制，读时共享</strong>。只有在任一进程（父进程或子进程）对数据执行了写操作时，复制才会发生（先是缺页中断，然后操作系统给子进程分配内存并复制父进程的数据）</p>
<p>子进程fork创建后，父进程打开的文件描述符默认在子进程中也是打开的，而且文件描述符的引用计数加一。不仅如此，父进程的用户根目录、当前工作目录等变量的引用计数均会加1。</p>
<h2 id="exec系列系统调用"><a href="#exec系列系统调用" class="headerlink" title="exec系列系统调用"></a>exec系列系统调用</h2><p>exec系列函数：在子进程中执行其他程序，即替换当前进程映像。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜unistd.h＞</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>**environ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execl</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*path,<span class="keyword">const</span> <span class="keyword">char</span>*arg,...)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execlp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*file,<span class="keyword">const</span> <span class="keyword">char</span>*arg,...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execle</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*path,<span class="keyword">const</span> <span class="keyword">char</span>*arg,...,<span class="keyword">char</span>*<span class="keyword">const</span> envp[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*path,<span class="keyword">char</span>*<span class="keyword">const</span> argv[])</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execvp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*file,<span class="keyword">char</span>*<span class="keyword">const</span> argv[])</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*path,<span class="keyword">char</span>*<span class="keyword">const</span> argv[],<span class="keyword">char</span>*<span class="keyword">const</span> envp[])</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	path：指定可执行文件的完整路径</span></span><br><span class="line"><span class="comment">	file：接受文件名，该文件的具体位置则在环境变量PATH中搜寻</span></span><br><span class="line"><span class="comment">	arg：接受可变参数</span></span><br><span class="line"><span class="comment">	argv：接受参数数组，传递给新程序（path或file指定的程序）的main函数</span></span><br><span class="line"><span class="comment">	envp：设置新程序的环境变量；未设置则新程序将使用全局变量environ指定的环境变量</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	一般情况下，exec函数是不返回的，除非出错。它出错时返回-1，并设置errno。</span></span><br><span class="line"><span class="comment">	如果没出错，则原程序中exec调用之后的代码都不会执行，</span></span><br><span class="line"><span class="comment">	因为此时原程序已经被exec的参数指定的程序完全替换（包括代码和数据）。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>exec函数不会关闭原程序打开的文件描述符，除非该文件描述符被设置了类似SOCK_CLOEXEC的属性。</p>
<h2 id="处理僵尸进程"><a href="#处理僵尸进程" class="headerlink" title="处理僵尸进程"></a>处理僵尸进程</h2><p>子进程处于僵尸态：</p>
<ul>
<li>在子进程结束运行之后，父进程读取其退出状态之前，该子进程处于僵尸态。</li>
<li>父进程结束或者异常终止，而子进程继续运行。此时子进程的PPID将被操作系统设置为1，即init进程。<br>init进程接管了该子进程，并等待它结束。在父进程退出之后，子进程退出之前，该子进程处于僵尸态。</li>
</ul>
<p>父进程未正确地处理子进程的返回信息，子进程都会停留在僵尸态，并占据着内核资源。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/types.h＞</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/wait.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span>* stat_loc)</span></span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：阻塞进程，直到该进程的某个子进程结束运行为止。</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	stat_loc：存储子进程的退出状态信息。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	返回结束运行的子进程的PID。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">waitpid</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span>* stat_loc, <span class="keyword">int</span> options)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：只等待pid参数指定的子进程。pid为-1则与wait函数相同，等待任意一个子进程结束。</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	pid：进程pid</span></span><br><span class="line"><span class="comment">	stat_loc：存储子进程的退出状态信息。</span></span><br><span class="line"><span class="comment">	options：控制waitpid函数的行为。常用取值WNOHANG，waitpid调用将是非阻塞的。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	如果pid指定的目标子进程 还没有结束或意外终止，则waitpid立即返回0；</span></span><br><span class="line"><span class="comment">	如果目标子进程确实正常退出了，则waitpid返回该子进程的PID。</span></span><br><span class="line"><span class="comment">	waitpid调用失败时返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>在事件已经发生的情况下执行非阻塞调用才能提高程序的效率。waitpid函数最好在某个子进程退出之后再调用它。</p>
<p>利用SIGCHLD信号，父进程可以得知某个子进程已经退出。当一个进程结束时，它将给其父进程发送一个SIGCHLD信号。可以在父进程中捕获SIGCHLD信号，并在信号处理函数中调用waitpid函数以“彻底结束”一个子进程：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle_child</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid; </span><br><span class="line">    <span class="keyword">int</span> stat; </span><br><span class="line">    <span class="keyword">while</span>((pid = <span class="built_in">waitpid</span>(<span class="number">-1</span>, ＆stat, WNOHANG)) ＞ <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*对结束的子进程进行善后处理*/</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>父进程与子进程间通信的常用手段：管道。</p>
<p>管道能在父、子进程间传递数据，利用的是fork调用之后两个管道文件描述符（fd[0]和fd[1]）都保持打开。一对这样的文件描述符只能保证父、子进程间一个方向的数据传输，父进程和子进程必须有一个关闭 fd[0]，另一个关闭fd[1]。</p>
<p>如果要实现父、子进程之间的双向数据传输，就必须使用两个管道。</p>
<p>父进程通过管道向子进程写数据：</p>
<img src="/posts/image-20220802155324367.png" alt="image-20220802155324367" style="zoom: 67%;">

<p>socket编程接口提供了一个创建全双工管道的系统调用：socketpair。</p>
<p>管道只能用于有关联的两个进程（比如父、子进程）间的通信。System V IPC能用于无关联的多个进程之间的通信，因为它们都使用一个全局唯一的键值来标识一条信道。</p>
<p>FIFO管道（First In First Out，先进先出），特殊的管道，也能用于无关联进程之间的通信。</p>
<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>临界区/关键代码段：程序对共享资源的访问的代码，这段代码引发了进程之间的竞态条件。</p>
<p>信号量是一种特殊的变量，它只能取自然数值并且只支持两种操作：等待（wait）和信号（signal）。在Linux/UNIX中，“等待”和“信号”都已经具有特殊的含义，所以对信号量的这两种操作更常用的称呼是P、V操作。P：传递，进入临界区；V：释放，退出临界区。假设有信号量SV，则对它的P、V操作含义如下：</p>
<ul>
<li>P(SV)，如果SV的值大于0，就将它减1；如果SV的值为0，则挂起进程的执行。</li>
<li>V(SV)，如果有其他进程因为等待SV而挂起，则唤醒之；如果没有，则将SV加1。</li>
</ul>
<p>最常用的、最简单的信号量是二进制信号量，它只能取0和1这两个值。</p>
<img src="/posts/image-20220803103612426.png" alt="image-20220803103612426" style="zoom:67%;">

<p>当关键代码段可用时，二进制信号量SV的值为1，进程A和B都有机会进入关键代码段。如果此时进程A执行了P(SV)操作将SV减1，则进程B若再执行P(SV)操作就会被挂起。直到进程A离开关键代码段，并执行V(SV)操作将SV加1，关键代码段才重新变得可用。如果此时进程B因为等待SV而处于挂起状态，则它将被唤醒，并进入关键代码段。同样，这时进程A如果再执行P(SV)操作，则也只能被操作系统挂起以等待进程B退出关键代码段。</p>
<p>Linux信号量的API都定义在sys/sem.h头文件中，主要包含3个系统调用：semget、semop和semctl。</p>
<h3 id="semget系统调用"><a href="#semget系统调用" class="headerlink" title="semget系统调用"></a>semget系统调用</h3><p>semget系统调用创建一个新的信号量集，或者获取一个已经存在的信号量集。其定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/sem.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key,<span class="keyword">int</span> num_sems,<span class="keyword">int</span> sem_flags)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	key：一个键值，标识一个全局唯一的信号量集。</span></span><br><span class="line"><span class="comment">		通过信号量通信的进程需要使用相同的键值来创建/获取该信号量。</span></span><br><span class="line"><span class="comment">    num_sems：指定要创建/获取的信号量集中信号量的数目。</span></span><br><span class="line"><span class="comment">    	如果是创建信号量，则该值必须被指定；如果是获取已经存在的信号量，则可以把它设置为0</span></span><br><span class="line"><span class="comment">    sem_flags：指定一组标志。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回一个正整数值，它是信号量集的标识符；失败返回-1.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="semop系统调用"><a href="#semop系统调用" class="headerlink" title="semop系统调用"></a>semop系统调用</h3><p>semop系统调用改变信号量的值，即执行P、V操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 与每个信号量关联的一些重要的内核变量：</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> semval; <span class="comment">/*信号量的值*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> semzcnt; <span class="comment">/*等待信号量值变为0的进程数量*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> semncnt; <span class="comment">/*等待信号量值增加的进程数量*/</span></span><br><span class="line"><span class="keyword">pid_t</span> sempid; <span class="comment">/*最后一次执行semop操作的进程ID*/</span></span><br></pre></td></tr></table></figure>

<p>semop对信号量的操作实际上就是对内核变量的操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/sem.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semop</span><span class="params">(<span class="keyword">int</span> sem_id,struct sembuf*sem_ops,<span class="keyword">size_t</span> num_sem_ops)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sem_id：由semget调用返回的信号量集标识符，用以指定被操作的目标信号量集。</span></span><br><span class="line"><span class="comment">	sem_ops：指向一个sembuf结构体类型的数组。</span></span><br><span class="line"><span class="comment">	num_sem_ops：指定要执行的操作个数，即sem_ops数组中元素的个数。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败则返回-1并设置errno。</span></span><br><span class="line"><span class="comment">	失败的时候，sem_ops数组中指定的所有操作都不被执行。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sembuf结构体：</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sem_num; <span class="comment">// 信号量集中信号量的编号，0表示信号量集中的第一个信号量</span></span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> sem_op; <span class="comment">// 指定操作类型，其可选值为正整数、0和负整数。</span></span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> sem_flg; <span class="comment">// 标志位。</span></span><br><span class="line">    	<span class="comment">// IPC_NOWAIT：无论信号量操作是否成功，semop调用都将立即返回，这类似于非阻塞I/O</span></span><br><span class="line">    	<span class="comment">// SEM_UNDO：当进程退出时取消正在进行的semop操作。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="semctl系统调用"><a href="#semctl系统调用" class="headerlink" title="semctl系统调用"></a>semctl系统调用</h3><p>semctl系统调用允许调用者对信号量进行直接控制。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/sem.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semctl</span><span class="params">(<span class="keyword">int</span> sem_id,<span class="keyword">int</span> sem_num,<span class="keyword">int</span> command,...)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sem_id：由semget调用返回的信号量集标识符，用以指定被操作的目标信号量集。</span></span><br><span class="line"><span class="comment">	sem_num：指定被操作的信号量在信号量集中的编号。</span></span><br><span class="line"><span class="comment">	command：指定要执行的命令。有的命令需要调用者传递第4个参数。</span></span><br><span class="line"><span class="comment">		第4个参数的类型由用户自己定义，但sys/sem.h头文件给出了它的推荐格式，</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时的返回值取决于command参数；失败时返回-1，并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><p>共享内存是最高效的IPC机制，因为它不涉及进程之间的任何数据传输。</p>
<p>缺点：必须用其他辅助手段来同步进程对共享内存的访问，否则会产生竞态条件。因此，共享内存通常和其他进程间通信方式一起使用。</p>
<p>Linux共享内存的API都定义在sys/shm.h头文件中，包括4个系统调用：shmget、shmat、shmdt和shmctl。</p>
<h3 id="shmget系统调用"><a href="#shmget系统调用" class="headerlink" title="shmget系统调用"></a>shmget系统调用</h3><p>shmget系统调用创建一段新的共享内存，或者获取一段已经存在的共享内存。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/shm.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key,<span class="keyword">size_t</span> size,<span class="keyword">int</span> shmflg)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	key：一个键值，标识一个全局唯一的共享内存。</span></span><br><span class="line"><span class="comment">	size：指定共享内存的大小，单位字节。</span></span><br><span class="line"><span class="comment">		创建新的共享内存，size需指定大小；获取已存在的共享内存，size设置为0</span></span><br><span class="line"><span class="comment">	shmflg：标志位。</span></span><br><span class="line"><span class="comment">		SHM_HUGETLB，类似于mmap的MAP_HUGETLB标志，系统将使用“大页面”来为共享内存分配空间。</span></span><br><span class="line"><span class="comment">		SHM_NORESERVE，类似于mmap的MAP_NORESERVE标志，不为共享内存保留交换分区（swap空间）。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回一个正整数值，它是共享内存的标识符。</span></span><br><span class="line"><span class="comment">	失败时返回-1，并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="shmat和shmdt系统调用"><a href="#shmat和shmdt系统调用" class="headerlink" title="shmat和shmdt系统调用"></a>shmat和shmdt系统调用</h3><p>共享内存被创建/获取之后，还不能立即访问它，而是需要先将它关联到进程的地址空间中。</p>
<p>使用完共享内存之后，需要将它从进程地址空间中分离。这两项任务分别由如下两个系统调用实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/shm.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shm_id,<span class="keyword">const</span> <span class="keyword">void</span>*shm_addr,<span class="keyword">int</span> shmflg)</span></span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	shm_id：由shmget调用返回的共享内存标识符。</span></span><br><span class="line"><span class="comment">	shm_addr：指定将共享内存关联到进程的哪块地址空间。</span></span><br><span class="line"><span class="comment">		NULL，则被关联的地址由操作系统选择。（推荐）</span></span><br><span class="line"><span class="comment">		非空，并且SHM_RND标志未被设置，则共享内存被关联到addr指定的地址处。</span></span><br><span class="line"><span class="comment">		非空，设置了SHM_RND标志，关联地址向下圆整到离shm_addr最近的SHMLBA的整数倍地址处。</span></span><br><span class="line"><span class="comment">	shmflg：可选标志。</span></span><br><span class="line"><span class="comment">		SHM_RDONLY。进程仅能读取共享内存中的内容。</span></span><br><span class="line"><span class="comment">			若没有指定该标志，则进程可同时对共享内存进行读写操作。</span></span><br><span class="line"><span class="comment">		SHM_REMAP。如果地址shmaddr已经被关联到一段共享内存上，则重新关联。</span></span><br><span class="line"><span class="comment">		SHM_EXEC。它指定对共享内存段的执行权限。执行权限实际上和读权限是一样的。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回共享内存被关联到的地址，失败则返回(void*)-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>*shm_addr)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：</span></span><br><span class="line"><span class="comment">	将关联到shm_addr处的共享内存从进程中分离。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败则返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="shmctl系统调用"><a href="#shmctl系统调用" class="headerlink" title="shmctl系统调用"></a>shmctl系统调用</h3><p>shmctl系统调用控制共享内存的某些属性。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/shm.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shm_id,<span class="keyword">int</span> command,struct shmid_ds*buf)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	shm_id：是由shmget调用返回的共享内存标识符</span></span><br><span class="line"><span class="comment">	command：指定要执行的命令</span></span><br><span class="line"><span class="comment">	buf：与之关联的内核数据结构</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时的返回值取决于command参数，失败时返回-1，并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="共享内存的POSIX方法"><a href="#共享内存的POSIX方法" class="headerlink" title="共享内存的POSIX方法"></a>共享内存的POSIX方法</h3><p>mmap函数，利用MAP_ANONYMOUS标志可以实现父、子进程之间的匿名内存共享。通过打开同一个文件，mmap也可以实现无关进程之间的内存共享。Linux提供了另外一种利用mmap在无关进程之间共享内存的方式。这种方式无须任何文件的支持，但它需要先使用如下函数来创建或打开一个POSIX共享内存对象：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/mman.h＞</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/stat.h＞ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜fcntl.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shm_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*name,<span class="keyword">int</span> oflag,<span class="keyword">mode_t</span> mode)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用：与open系统调用完全相同</span></span><br><span class="line"><span class="comment">	name：指定要创建/打开的共享内存对象。</span></span><br><span class="line"><span class="comment">	oflag：指定创建方式。一个或多个标志按位与。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回一个文件描述符。该文件描述符可用于后续的mmap调用，从而将共享内存关联到调用进程。</span></span><br><span class="line"><span class="comment">	失败返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>和打开的文件最后需要关闭一样，由shm_open创建的共享内存对象使用完之后也需要被删除。这个过程是通过如下函数实现的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/mman.h＞ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/stat.h＞</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜fcntl.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shm_unlink</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*name)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：将name参数指定的共享内存对象标记为等待删除。</span></span><br><span class="line"><span class="comment">	当所有使用该共享内存对象的进程都使用ummap将它从进程中分离之后，</span></span><br><span class="line"><span class="comment">	系统将销毁这个共享内存对象所占据的资源。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>如果代码中使用了上述POSIX共享内存函数，则编译的时候需要指定链接选项-lrt。</p>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>消息队列是在两个进程之间传递二进制块数据的一种简单有效的方式。每个数据块都有一个特定的类型，接收方可以根据类型来有选择地接收数据，而不一定像管道和命名管道那样必须以先进先出的方式接收数据。</p>
<p>Linux消息队列的API都定义在sys/msg.h头文件中，包括4个系统调用：msgget、msgsnd、msgrcv和msgctl。</p>
<h3 id="msgget系统调用"><a href="#msgget系统调用" class="headerlink" title="msgget系统调用"></a>msgget系统调用</h3><p>msgget系统调用创建一个消息队列，或者获取一个已有的消息队列。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/msg.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgget</span><span class="params">(<span class="keyword">key_t</span> key,<span class="keyword">int</span> msgflg)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	key：一个键值，用来标识一个全局唯一的消息队列。</span></span><br><span class="line"><span class="comment">	msgflg：与semget系统调用的sem_flags参数相同。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回一个正整数值，它是消息队列的标识符。</span></span><br><span class="line"><span class="comment">	失败时返回-1，并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>如果msgget用于创建消息队列，则与之关联的内核数据结构msqid_ds将被创建并初始化。</p>
<h3 id="msgsnd系统调用"><a href="#msgsnd系统调用" class="headerlink" title="msgsnd系统调用"></a>msgsnd系统调用</h3><p>msgsnd系统调用把一条消息添加到消息队列中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/msg.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgsnd</span><span class="params">(<span class="keyword">int</span> msqid,<span class="keyword">const</span> <span class="keyword">void</span>*msg_ptr,<span class="keyword">size_t</span> msg_sz,<span class="keyword">int</span> msgflg)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	msqid：由msgget调用返回的消息队列标识符。</span></span><br><span class="line"><span class="comment">	msg_ptr：指向一个准备发送的消息。</span></span><br><span class="line"><span class="comment">	msg_sz：消息的数据部分（mtext）的长度。这个长度可以为0，表示没有消息数据。</span></span><br><span class="line"><span class="comment">	msgflg：控制msgsnd的行为。通常仅支持IPC_NOWAIT标志，即以非阻塞的方式发送消息。</span></span><br><span class="line"><span class="comment">		默认情况下，发送消息时如果消息队列满了，则msgsnd将阻塞。</span></span><br><span class="line"><span class="comment">		若IPC_NOWAIT标志被指定，则msgsnd将立即返回并设置errno为EAGAIN。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败则返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息定义类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msgbuf</span> &#123;</span></span><br><span class="line">	<span class="keyword">long</span> mtype;<span class="comment">/*消息类型*/</span> </span><br><span class="line">    <span class="keyword">char</span> mtext[<span class="number">512</span>];<span class="comment">/*消息数据*/</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="msgrcv系统调用"><a href="#msgrcv系统调用" class="headerlink" title="msgrcv系统调用"></a>msgrcv系统调用</h3><p>msgrcv系统调用从消息队列中获取消息。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/msg·h＞</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgrcv</span><span class="params">(<span class="keyword">int</span> msqid,<span class="keyword">void</span>*msg_ptr,<span class="keyword">size_t</span> msg_sz,<span class="keyword">long</span> <span class="keyword">int</span> msgtype,<span class="keyword">int</span> msgflg)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	msqid：由msgget调用返回的消息队列标识符。</span></span><br><span class="line"><span class="comment">	msg_ptr：用于存储接收的消息。</span></span><br><span class="line"><span class="comment">	msg_sz：消息数据部分的长度。</span></span><br><span class="line"><span class="comment">	msgtype：指定接收何种类型的消息。</span></span><br><span class="line"><span class="comment">		等于0。读取消息队列中的第一个消息。</span></span><br><span class="line"><span class="comment">		大于0。读取消息队列中第一个类型为msgtype的消息。</span></span><br><span class="line"><span class="comment">		小于0。读取消息队列中第一个类型值比msgtype的绝对值小的消息。</span></span><br><span class="line"><span class="comment">	msgflg：控制msgrcv函数的行为。</span></span><br><span class="line"><span class="comment">		IPC_NOWAIT。如果消息队列中没有消息，则msgrcv调用立即返回并设置errno为ENOMSG。 				MSG_EXCEPT。如果msgtype大于0，则接收消息队列中第一个非msgtype类型的消息。 					MSG_NOERROR。如果消息数据部分的长度超过了msg_sz，就将它截断。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败则返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="msgctl系统调用"><a href="#msgctl系统调用" class="headerlink" title="msgctl系统调用"></a>msgctl系统调用</h3><p>msgctl系统调用控制消息队列的某些属性。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/msg.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgctl</span><span class="params">(<span class="keyword">int</span> msqid,<span class="keyword">int</span> command,struct msqid_ds*buf)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	msqid：由msgget调用返回的消息队列标识符。</span></span><br><span class="line"><span class="comment">	command：指定要执行的命令。</span></span><br><span class="line"><span class="comment">	buf：指向内核数据结构msqid_ds</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时的返回值取决于command参数。</span></span><br><span class="line"><span class="comment">	失败时返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="IPC命令"><a href="#IPC命令" class="headerlink" title="IPC命令"></a>IPC命令</h2><p>信号量、共享内存、消息队列，这三种System V IPC进程间通信方式都使用一个全局唯一的键值（key）来描述一个共享资源。当程序调用semget、shmget或者msgget时，就创建了这些共享资源的一个实例。</p>
<p>Linux提供了ipcs命令，以观察当前系统上拥有哪些共享资源实例。</p>
<p>可以使用ipcrm命令来删除遗留在系统中的共享资源。</p>
<h2 id="在进程间传递文件描述符"><a href="#在进程间传递文件描述符" class="headerlink" title="在进程间传递文件描述符"></a>在进程间传递文件描述符</h2><p>由于fork调用之后，父进程中打开的文件描述符在子进程中仍然保持打开，所以文件描述符可以很方便地从父进程传递到子进程。传递一个文件描述符并不是传递一个文件描述符的值，而是要在接收进程中创建一个新的文件描述符，并且该文件描述符和发送进程中被传递的文件描述符指向内核中相同的文件表项。</p>
<p>如何把子进程中打开的文件描述符传递给父进程，或者说，如何在两个不相干的进程之间传递文件描述符，可以利用UNIX域socket在进程间传递特殊的辅助数据，以实现文件描述符的传递。</p>
<p>在进程间传递文件描述符：子进程中打开一个文件描述符，然后将它传递给父进程，父进程则通过读取该文件描述符来获得文件的内容。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 13-5passfd.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> CONTROL_LEN = <span class="built_in">CMSG_LEN</span>( <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送文件描述符，fd为传递信息的UNIX域socket，fd_to_send为待发送的文件描述符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">send_fd</span><span class="params">( <span class="keyword">int</span> fd, <span class="keyword">int</span> fd_to_send )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iov</span>[1];</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    iov[<span class="number">0</span>].iov_base = buf;</span><br><span class="line">    iov[<span class="number">0</span>].iov_len = <span class="number">1</span>;</span><br><span class="line">    msg.msg_name    = <span class="literal">NULL</span>;</span><br><span class="line">    msg.msg_namelen = <span class="number">0</span>;</span><br><span class="line">    msg.msg_iov     = iov;</span><br><span class="line">    msg.msg_iovlen = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    cmsghdr cm;</span><br><span class="line">    cm.cmsg_len = CONTROL_LEN;</span><br><span class="line">    cm.cmsg_level = SOL_SOCKET;</span><br><span class="line">    cm.cmsg_type = SCM_RIGHTS;</span><br><span class="line">    *(<span class="keyword">int</span> *)<span class="built_in">CMSG_DATA</span>( &amp;cm ) = fd_to_send;</span><br><span class="line">    msg.msg_control = &amp;cm; <span class="comment">// 设置辅助数据</span></span><br><span class="line">    msg.msg_controllen = CONTROL_LEN;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sendmsg</span>( fd, &amp;msg, <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收目标文件描述符</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv_fd</span><span class="params">( <span class="keyword">int</span> fd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iov</span>[1];</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    iov[<span class="number">0</span>].iov_base = buf;</span><br><span class="line">    iov[<span class="number">0</span>].iov_len = <span class="number">1</span>;</span><br><span class="line">    msg.msg_name    = <span class="literal">NULL</span>;</span><br><span class="line">    msg.msg_namelen = <span class="number">0</span>;</span><br><span class="line">    msg.msg_iov     = iov;</span><br><span class="line">    msg.msg_iovlen = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    cmsghdr cm;</span><br><span class="line">    msg.msg_control = &amp;cm;</span><br><span class="line">    msg.msg_controllen = CONTROL_LEN;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">recvmsg</span>( fd, &amp;msg, <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd_to_read = *(<span class="keyword">int</span> *)<span class="built_in">CMSG_DATA</span>( &amp;cm );</span><br><span class="line">    <span class="keyword">return</span> fd_to_read;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> fd_to_pass = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 创建父、子进程之间的管道，文件描述符pipefd[0]和pipefd[1]都是UNIX域socket</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">socketpair</span>( PF_UNIX, SOCK_DGRAM, <span class="number">0</span>, pipefd );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">    <span class="built_in">assert</span>( pid &gt;= <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( pid == <span class="number">0</span> ) <span class="comment">// 子进程</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">close</span>( pipefd[<span class="number">0</span>] );</span><br><span class="line">        fd_to_pass = <span class="built_in">open</span>( <span class="string">&quot;test.txt&quot;</span>, O_RDWR, <span class="number">0666</span> );</span><br><span class="line">        <span class="comment">// 子进程通过管道将文件描述符发送到父进程。</span></span><br><span class="line">        <span class="comment">// 如果文件test.txt打开失败，则子进程将标准输入文件描述符发送到父进程</span></span><br><span class="line">        <span class="built_in">send_fd</span>( pipefd[<span class="number">1</span>], ( fd_to_pass &gt; <span class="number">0</span> ) ? fd_to_pass : <span class="number">0</span> );</span><br><span class="line">        <span class="built_in">close</span>( fd_to_pass );</span><br><span class="line">        <span class="built_in">exit</span>( <span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( pipefd[<span class="number">1</span>] );</span><br><span class="line">    fd_to_pass = <span class="built_in">recv_fd</span>( pipefd[<span class="number">0</span>] ); <span class="comment">// 父进程从管道接收目标文件描述</span></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">memset</span>( buf, <span class="string">&#x27;\0&#x27;</span>, <span class="number">1024</span> );</span><br><span class="line">    <span class="built_in">read</span>( fd_to_pass, buf, <span class="number">1024</span> ); <span class="comment">// 读目标文件描述符，以验证其有效性</span></span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;I got fd %d and data %s\n&quot;</span>, fd_to_pass, buf );</span><br><span class="line">    <span class="built_in">close</span>( fd_to_pass );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>I/O复用</title>
    <url>/posts/bbbdabf8.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>I/O复用使得程序能同时监听多个文件描述符，使用I/O复用的情况：</p>
<ul>
<li>客户端程序要同时处理多个socket。</li>
<li>客户端程序要同时处理用户输入和网络连接。</li>
<li>TCP服务器要同时处理监听socket和连接socket。这是I/O复用使用最多的场合。</li>
<li>服务器要同时处理TCP请求和UDP请求。</li>
<li>服务器要同时监听多个端口，或者处理多种服务。</li>
</ul>
<p>I/O复用虽然能同时监听多个文件描述符，但它本身是阻塞的。并且当多个文件描述符同时就绪时，如果不采取额外的措施，程序就只能按顺序依次处理其中的每一个文件描述符，这使得服务器程序看起来像是串行工作的。如果要实现并发，只能使用多进程或多线程等编程手段。</p>
<p>Linux下实现I/O复用的系统调用主要有<strong>select、poll和epoll</strong></p>
<h2 id="select系统调用"><a href="#select系统调用" class="headerlink" title="select系统调用"></a>select系统调用</h2><p>select系统调用：在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写和异常等事件。</p>
<h3 id="select-API"><a href="#select-API" class="headerlink" title="select API"></a>select API</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/select.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, struct timeval* timeout)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	nfds：指定被监听的文件描述符总数。通常被设置为select监听的所有文件描述符中的最大值加1。</span></span><br><span class="line"><span class="comment">	readfds：指向可读事件对应的文件描述符集合</span></span><br><span class="line"><span class="comment">	writefds：指向可写事件对应的文件描述符集合</span></span><br><span class="line"><span class="comment">	exceptfds：指向异常事件对应的文件描述符集合</span></span><br><span class="line"><span class="comment">	timeout：设置select函数的超时时间，指针类型可以内核将修改它以告诉应用程序select等待了多久。</span></span><br><span class="line"><span class="comment">		如果给timeout变量的tv_sec成员和tv_usec成员都传递0，则select将立即返回。</span></span><br><span class="line"><span class="comment">		如果给timeout传递NULL，则select将一直阻塞，直到某个文件描述符就绪。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回就绪（可读、可写和异常）文件描述符的总数；</span></span><br><span class="line"><span class="comment">	如果在超时时间内没有任何文件描述符就绪，select将返回0；</span></span><br><span class="line"><span class="comment">	select失败时返回-1并设置errno；</span></span><br><span class="line"><span class="comment">	如果在select等待期间，程序接收到信号，则select立即返回-1，并设置errno为EINTR。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// timeval结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> tv_sec;<span class="comment">/*秒数*/</span> </span><br><span class="line">    <span class="keyword">long</span> tv_usec;<span class="comment">/*微秒数*/</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="文件描述符就绪条件"><a href="#文件描述符就绪条件" class="headerlink" title="文件描述符就绪条件"></a>文件描述符就绪条件</h3><p>socket可读的情况：</p>
<ul>
<li>socket内核接收缓存区中的字节数大于或等于其低水位标记SO_RCVLOWAT。此时我们可以无阻塞地读该socket，并且读操作返回的字节数大于0。</li>
<li>socket通信的对方关闭连接。此时对该socket的读操作将返回0。</li>
<li>监听socket上有新的连接请求。</li>
<li>socket上有未处理的错误。此时我们可以使用getsockopt来读取和清除该错误。 </li>
</ul>
<p>socket可写的情况：</p>
<ul>
<li>socket内核发送缓存区中的可用字节数大于或等于其低水位标记SO_SNDLOWAT。此时我们可以无阻塞地写该socket，并且写操作返回的字节数大于0。</li>
<li>socket的写操作被关闭。对写操作被关闭的socket执行写操作将触发一个SIGPIPE信号。</li>
<li>socket使用非阻塞connect连接成功或者失败（超时）之后。</li>
<li>socket上有未处理的错误。此时我们可以使用getsockopt来读取和清除该错误。</li>
</ul>
<p>socket异常情况：</p>
<ul>
<li>socket上接收到带外数据。</li>
</ul>
<h3 id="处理带外数据"><a href="#处理带外数据" class="headerlink" title="处理带外数据"></a>处理带外数据</h3><p>socket上接收到普通数据和带外数据都将使select返回，但socket处于不同的就绪状态：前者处于可读状态，后者处于异常状态。</p>
<p>同时接收普通数据和带外数据:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 9-1use_select.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>( argc &lt;= <span class="number">2</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] );</span><br><span class="line">	<span class="built_in">printf</span>( <span class="string">&quot;ip is %s and port is %d\n&quot;</span>, ip, port );</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">        <span class="built_in">bzero</span>( &amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">        address.sin_family = AF_INET;</span><br><span class="line">        <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;address.sin_addr );</span><br><span class="line">        address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> listenfd = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">	<span class="built_in">assert</span>( listenfd &gt;= <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">        ret = <span class="built_in">bind</span>( listenfd, ( struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">	<span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">	ret = <span class="built_in">listen</span>( listenfd, <span class="number">5</span> );</span><br><span class="line">	<span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_address</span>;</span></span><br><span class="line">        <span class="keyword">socklen_t</span> client_addrlength = <span class="built_in"><span class="keyword">sizeof</span></span>( client_address );</span><br><span class="line">	<span class="keyword">int</span> connfd = <span class="built_in">accept</span>( listenfd, ( struct sockaddr* )&amp;client_address, &amp;client_addrlength );</span><br><span class="line">	<span class="keyword">if</span> ( connfd &lt; <span class="number">0</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>( <span class="string">&quot;errno is: %d\n&quot;</span>, errno );</span><br><span class="line">		<span class="built_in">close</span>( listenfd );</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> remote_addr[INET_ADDRSTRLEN];</span><br><span class="line">	<span class="built_in">printf</span>( <span class="string">&quot;connected with ip: %s and port: %d\n&quot;</span>, <span class="built_in">inet_ntop</span>( AF_INET, &amp;client_address.sin_addr, remote_addr, INET_ADDRSTRLEN ), <span class="built_in">ntohs</span>( client_address.sin_port ) );</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">        fd_set read_fds;</span><br><span class="line">        fd_set exception_fds;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">FD_ZERO</span>( &amp;read_fds );</span><br><span class="line">        <span class="built_in">FD_ZERO</span>( &amp;exception_fds );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nReuseAddr = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">setsockopt</span>( connfd, SOL_SOCKET, SO_OOBINLINE, &amp;nReuseAddr, <span class="built_in"><span class="keyword">sizeof</span></span>( nReuseAddr ) );</span><br><span class="line">	<span class="keyword">while</span>( <span class="number">1</span> )</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">// 每次调用select前都要重新在read_fds和exception_fds中设置文件描述符connfd，</span></span><br><span class="line">        <span class="comment">// 因为事件发生之后，文件描述符集合将被内核修改</span></span><br><span class="line">		<span class="built_in">memset</span>( buf, <span class="string">&#x27;\0&#x27;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>( buf ) );</span><br><span class="line">		<span class="built_in">FD_SET</span>( connfd, &amp;read_fds );</span><br><span class="line">		<span class="built_in">FD_SET</span>( connfd, &amp;exception_fds );</span><br><span class="line"></span><br><span class="line">        	ret = <span class="built_in">select</span>( connfd + <span class="number">1</span>, &amp;read_fds, <span class="literal">NULL</span>, &amp;exception_fds, <span class="literal">NULL</span> );</span><br><span class="line">		<span class="built_in">printf</span>( <span class="string">&quot;select one\n&quot;</span> );</span><br><span class="line">        	<span class="keyword">if</span> ( ret &lt; <span class="number">0</span> )</span><br><span class="line">        	&#123;</span><br><span class="line">                	<span class="built_in">printf</span>( <span class="string">&quot;selection failure\n&quot;</span> );</span><br><span class="line">                	<span class="keyword">break</span>;</span><br><span class="line">        	&#125;</span><br><span class="line">	</span><br><span class="line">        	<span class="keyword">if</span> ( <span class="built_in">FD_ISSET</span>( connfd, &amp;read_fds ) )</span><br><span class="line">		&#123; <span class="comment">// 对于可读事件，采用普通的recv函数读取数据</span></span><br><span class="line">        		ret = <span class="built_in">recv</span>( connfd, buf, <span class="built_in"><span class="keyword">sizeof</span></span>( buf )<span class="number">-1</span>, <span class="number">0</span> );</span><br><span class="line">			<span class="keyword">if</span>( ret &lt;= <span class="number">0</span> )</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>( <span class="string">&quot;get %d bytes of normal data: %s\n&quot;</span>, ret, buf );</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>( <span class="built_in">FD_ISSET</span>( connfd, &amp;exception_fds ) )</span><br><span class="line">        	&#123; <span class="comment">// 对于异常事件，采用带MSG_OOB标志的recv函数读取带外数据</span></span><br><span class="line">        		ret = <span class="built_in">recv</span>( connfd, buf, <span class="built_in"><span class="keyword">sizeof</span></span>( buf )<span class="number">-1</span>, MSG_OOB );</span><br><span class="line">			<span class="keyword">if</span>( ret &lt;= <span class="number">0</span> )</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>( <span class="string">&quot;get %d bytes of oob data: %s\n&quot;</span>, ret, buf );</span><br><span class="line">        	&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">close</span>( connfd );</span><br><span class="line">	<span class="built_in">close</span>( listenfd );</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="poll系统调用"><a href="#poll系统调用" class="headerlink" title="poll系统调用"></a>poll系统调用</h2><p>poll系统调用：在指定时间内轮询一定数量的文件描述符，以测试其中是否有就绪者。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜poll.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd* fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	fds：pollfd结构类型的数组，它指定所有感兴趣的文件描述符上发生的可读、可写和异常等事件。</span></span><br><span class="line"><span class="comment">	nfds：指定被监听事件集合fds的大小，无符号长整数unsigned long int</span></span><br><span class="line"><span class="comment">	timeout：指定poll的超时值，单位是毫秒；</span></span><br><span class="line"><span class="comment">		timeout为-1，poll调用将永远阻塞，直到某个事件发生；</span></span><br><span class="line"><span class="comment">		timeout为0，poll调用将立即返回。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	返回值的含义与select相同。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pollfd结构体的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd;<span class="comment">/*文件描述符*/</span> </span><br><span class="line">    <span class="keyword">short</span> events;<span class="comment">/*注册的事件，告诉poll监听fd上的哪些事件，一系列事件的按位或*/</span></span><br><span class="line">    <span class="keyword">short</span> revents;<span class="comment">/*实际发生的事件，由内核填充*/</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>poll支持的事件类型：</p>
<img src="/posts/image-20220728115950782.png" alt="image-20220728115950782" style="zoom: 80%;">

<h2 id="epoll系列系统调用"><a href="#epoll系列系统调用" class="headerlink" title="epoll系列系统调用"></a>epoll系列系统调用</h2><h3 id="内核事件表"><a href="#内核事件表" class="headerlink" title="内核事件表"></a>内核事件表</h3><p>epoll是Linux特有的I/O复用函数。它在实现和使用上与select、poll有很大差异。</p>
<ul>
<li>epoll使用一组函数来完成任务，而不是单个函数。</li>
<li>epoll把用户关心的文件描述符上的事件放在内核里的一个事件表中，从而无须像select和poll那样每次调用都要重复传入文件描述符集或事件集。</li>
<li>需要使用一个额外的文件描述符，来唯一标识内核中的这个事件表。</li>
</ul>
<p>创建epoll一个额外的文件描述符：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/epoll.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	size：现在并不起作用，只是给内核一个提示，告诉它事件表需要多大。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	返回一个文件描述符，将用作其他所有epoll系统调用的第一个参数，以指定要访问的内核事件表。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>操作epoll的内核事件表：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/epoll.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event* event)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	epfd：epoll_create返回的文件描述符，指定要访问的内核事件表</span></span><br><span class="line"><span class="comment">	fd：要操作的文件描述符</span></span><br><span class="line"><span class="comment">	op：指定操作类型。</span></span><br><span class="line"><span class="comment">		EPOLL_CTL_ADD，往事件表中注册fd上的事件。</span></span><br><span class="line"><span class="comment">		EPOLL_CTL_MOD，修改fd上的注册事件。</span></span><br><span class="line"><span class="comment">		EPOLL_CTL_DEL，删除fd上的注册事件。</span></span><br><span class="line"><span class="comment">	event：指定事件，epoll_event结构指针类型</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败则返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// epoll_event的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">    <span class="keyword">__uint32_t</span> events;<span class="comment">/*epoll事件*/</span> </span><br><span class="line">    <span class="keyword">epoll_data_t</span> data;<span class="comment">/*用户数据*/</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="epoll-wait函数"><a href="#epoll-wait函数" class="headerlink" title="epoll_wait函数"></a>epoll_wait函数</h3><p>epoll系列系统调用的主要接口是epoll_wait函数。它在一段超时时间内等待一组文件描述符上的事件，其原型如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/epoll.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event* events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数:</span></span><br><span class="line"><span class="comment">	epfd：epoll_create返回的文件描述符，指定要访问的内核事件表</span></span><br><span class="line"><span class="comment">	events：指定事件，epoll_event结构指针类型</span></span><br><span class="line"><span class="comment">	maxevents：指定最多监听多少个事件，它必须大于0。</span></span><br><span class="line"><span class="comment">	timeout：指定超时值，单位是毫秒；</span></span><br><span class="line"><span class="comment">		timeout为-1，调用将永远阻塞，直到某个事件发生；</span></span><br><span class="line"><span class="comment">		timeout为0，调用将立即返回。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回就绪的文件描述符的个数，失败时返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>epoll_wait函数如果检测到事件，就将所有就绪的事件从内核事件表（由epfd参数指定）中复制到它的第二个参数events指向的数组中。这个数组只用于<strong>输出epoll_wait检测到的就绪事件</strong>，而不像select和poll的数组参数那样既用于传入用户注册的事件，又用于输出内核检测到的就绪事件。这就极大地提高了应用程序索引就绪文件描述符的效率。</p>
<p>poll和epoll在使用上的差别：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*如何索引poll返回的就绪文件描述符*/</span> </span><br><span class="line"><span class="keyword">int</span> ret = <span class="built_in">poll</span>(fds, MAX_EVENT_NUMBER, <span class="number">-1</span>); </span><br><span class="line"><span class="comment">/*必须遍历所有已注册文件描述符并找到其中的就绪者（当然，可以利用ret来稍做优化）*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i ＜ MAX_EVENT_NUMBER; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(fds[i].revents＆POLLIN)<span class="comment">/*判断第i个文件描述符是否就绪*/</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sockfd=fds[i].fd; </span><br><span class="line">        <span class="comment">/*处理sockfd*/</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*如何索引epoll返回的就绪文件描述符*/</span> </span><br><span class="line"><span class="keyword">int</span> ret = <span class="built_in">epoll_wait</span>(epollfd, events, MAX_EVENT_NUMBER, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">/*仅遍历就绪的ret个文件描述符*/</span> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i ＜ ret; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> sockfd = events[i].data.fd; </span><br><span class="line">    <span class="comment">/*sockfd肯定就绪，直接处理*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LT和ET模式"><a href="#LT和ET模式" class="headerlink" title="LT和ET模式"></a>LT和ET模式</h3><p>epoll对文件描述符的操作有两种模式：</p>
<ul>
<li>LT（Level Trigger，电平触发）模式。epoll的默认的工作模式，epoll相当于一个效率较高的poll。</li>
<li>ET（Edge Trigger，边沿触发）模式。epoll的高效工作模式，当epoll内核事件表中注册一个文件描述符上的EPOLLET事件时，epoll将以ET模式来操作该文件描述符。</li>
</ul>
<p>对于采用LT工作模式的文件描述符，当epoll_wait检测到其上有事件发生并将此事件通知应用程序后，应用程序可以不立即处理该事件。这样，当应用程序下一次调用epoll_wait时，epoll_wait还会再次向应用程序通告此事件，直到该事件被处理。</p>
<p>对于采用ET工作模式的文件描述符，当epoll_wait检测到其上有事件发生并将此事件通知应用程序后，应用程序必须立即处理该事件，因为后续的epoll_wait调用将不再向应用程序通知这一事件。</p>
<p><strong>ET模式在很大程度上降低了同一个epoll事件被重复触发的次数，因此效率要比LT模式高。</strong></p>
<p>LT和ET在工作方式上的差异：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 9-3mtlt.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_EVENT_NUMBER 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件描述符设置成非阻塞的</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setnonblocking</span><span class="params">( <span class="keyword">int</span> fd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> old_option = <span class="built_in">fcntl</span>( fd, F_GETFL );</span><br><span class="line">    <span class="keyword">int</span> new_option = old_option | O_NONBLOCK;</span><br><span class="line">    <span class="built_in">fcntl</span>( fd, F_SETFL, new_option );</span><br><span class="line">    <span class="keyword">return</span> old_option;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件描述符fd上的EPOLLIN注册到epollfd指示的epoll内核事件表中</span></span><br><span class="line"><span class="comment">// 参数 enable_et指定是否对fd启用ET模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addfd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd, <span class="keyword">bool</span> enable_et )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = EPOLLIN;</span><br><span class="line">    <span class="keyword">if</span>( enable_et )</span><br><span class="line">    &#123;</span><br><span class="line">        event.events |= EPOLLET;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">epoll_ctl</span>( epollfd, EPOLL_CTL_ADD, fd, &amp;event );</span><br><span class="line">    <span class="built_in">setnonblocking</span>( fd );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LT模式的工作流程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lt</span><span class="params">( epoll_event* events, <span class="keyword">int</span> number, <span class="keyword">int</span> epollfd, <span class="keyword">int</span> listenfd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[ BUFFER_SIZE ];</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sockfd = events[i].data.fd;</span><br><span class="line">        <span class="keyword">if</span> ( sockfd == listenfd )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_address</span>;</span></span><br><span class="line">            <span class="keyword">socklen_t</span> client_addrlength = <span class="built_in"><span class="keyword">sizeof</span></span>( client_address );</span><br><span class="line">            <span class="keyword">int</span> connfd = <span class="built_in">accept</span>( listenfd, ( struct sockaddr* )&amp;client_address, &amp;client_addrlength );</span><br><span class="line">            <span class="built_in">addfd</span>( epollfd, connfd, <span class="literal">false</span> ); <span class="comment">// 调用addfd函数，对connfd禁用ET模式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( events[i].events &amp; EPOLLIN )</span><br><span class="line">        &#123;	<span class="comment">// 只要socket读缓存中还有未读出的数据，这段代码就被触发</span></span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;event trigger once\n&quot;</span> );</span><br><span class="line">            <span class="built_in">memset</span>( buf, <span class="string">&#x27;\0&#x27;</span>, BUFFER_SIZE );</span><br><span class="line">            <span class="keyword">int</span> ret = <span class="built_in">recv</span>( sockfd, buf, BUFFER_SIZE<span class="number">-1</span>, <span class="number">0</span> );</span><br><span class="line">            <span class="keyword">if</span>( ret &lt;= <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">close</span>( sockfd );</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;get %d bytes of content: %s\n&quot;</span>, ret, buf );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;something else happened \n&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ET模式的工作流程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">et</span><span class="params">( epoll_event* events, <span class="keyword">int</span> number, <span class="keyword">int</span> epollfd, <span class="keyword">int</span> listenfd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[ BUFFER_SIZE ];</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sockfd = events[i].data.fd;</span><br><span class="line">        <span class="keyword">if</span> ( sockfd == listenfd )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_address</span>;</span></span><br><span class="line">            <span class="keyword">socklen_t</span> client_addrlength = <span class="built_in"><span class="keyword">sizeof</span></span>( client_address );</span><br><span class="line">            <span class="keyword">int</span> connfd = <span class="built_in">accept</span>( listenfd, ( struct sockaddr* )&amp;client_address, &amp;client_addrlength );</span><br><span class="line">            <span class="built_in">addfd</span>( epollfd, connfd, <span class="literal">true</span> ); <span class="comment">// 对connfd开启ET模式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( events[i].events &amp; EPOLLIN )</span><br><span class="line">        &#123;	<span class="comment">// 这段代码不会被重复触发，所以循环读取数据，以确保把socket读缓存中的所有数据读出</span></span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;event trigger once\n&quot;</span> );</span><br><span class="line">            <span class="keyword">while</span>( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">memset</span>( buf, <span class="string">&#x27;\0&#x27;</span>, BUFFER_SIZE );</span><br><span class="line">                <span class="keyword">int</span> ret = <span class="built_in">recv</span>( sockfd, buf, BUFFER_SIZE<span class="number">-1</span>, <span class="number">0</span> );</span><br><span class="line">                <span class="keyword">if</span>( ret &lt; <span class="number">0</span> )</span><br><span class="line">                &#123;	<span class="comment">// 对于非阻塞IO，下面的条件成立表示数据已经全部读取完毕。</span></span><br><span class="line">                    <span class="comment">// 此后，epoll就能再次触发sockfd上的EPOLLIN事件，以驱动下一次读操作</span></span><br><span class="line">                    <span class="keyword">if</span>( ( errno == EAGAIN ) || ( errno == EWOULDBLOCK ) )</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>( <span class="string">&quot;read later\n&quot;</span> );</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">close</span>( sockfd );</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>( ret == <span class="number">0</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">close</span>( sockfd );</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>( <span class="string">&quot;get %d bytes of content: %s\n&quot;</span>, ret, buf );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;something else happened \n&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;address.sin_addr );</span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> listenfd = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">assert</span>( listenfd &gt;= <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">bind</span>( listenfd, ( struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">listen</span>( listenfd, <span class="number">5</span> );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    epoll_event events[ MAX_EVENT_NUMBER ];</span><br><span class="line">    <span class="keyword">int</span> epollfd = <span class="built_in">epoll_create</span>( <span class="number">5</span> );</span><br><span class="line">    <span class="built_in">assert</span>( epollfd != <span class="number">-1</span> );</span><br><span class="line">    <span class="built_in">addfd</span>( epollfd, listenfd, <span class="literal">true</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">epoll_wait</span>( epollfd, events, MAX_EVENT_NUMBER, <span class="number">-1</span> );</span><br><span class="line">        <span class="keyword">if</span> ( ret &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;epoll failure\n&quot;</span> );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">lt</span>( events, ret, epollfd, listenfd ); <span class="comment">// 使用LT模式</span></span><br><span class="line">        <span class="comment">//et( events, ret, epollfd, listenfd ); // 使用ET模式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( listenfd );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器程序运行该代码，然后telnet到这个服务器程序上并一次传输超过10字节（BUFFER_SIZE的大小）的数据，会发现ET模式下事件被触发的次数要比LT模式下少很多。</p>
<p>注意：每个使用ET模式的文件描述符都应该是非阻塞的。如果文件描述符是阻塞的，那么读或写操作将会因为没有后续的事件而一直处于阻塞状态（饥渴状态）。</p>
<h3 id="EPOLLONESHOT事件"><a href="#EPOLLONESHOT事件" class="headerlink" title="EPOLLONESHOT事件"></a>EPOLLONESHOT事件</h3><p>并发程序中，一个线程（或进程），在读取完某个socket上的数据数据后开始处理这些数据，而在数据的处理过程中该socket上又有新数据可读（EPOLLIN再次被触发），此时另外一个线程被唤醒来读取这些新的数据。于是就出现了两个线程同时操作一个socket的局面。</p>
<p>EPOLLONESHOT事件：使得一个socket连接在任一时刻都只被一个线程处理。</p>
<p>对于注册了EPOLLONESHOT事件的文件描述符，操作系统最多触发其上注册的一个可读、可写或者异常事件，且只触发一次，除非使用epoll_ctl函数重置该文件描述符上注册的EPOLLONESHOT事件。当一个线程在处理某个socket时，其他线程是不可能有机会操作该socket的。</p>
<p>注册了EPOLLONESHOT事件的socket一旦被某个线程处理完毕，该线程就应该立即重置这个socket上的 EPOLLONESHOT事件，以确保这个socket下一次可读时，其EPOLLIN事件能被触发，进而让其他工作线程有机会继续处理这个socket。</p>
<p>EPOLLONESHOT事件的使用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 9-4oneshot.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_EVENT_NUMBER 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存放内核事件表fd和socket连接fd</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fds</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">int</span> epollfd;</span><br><span class="line">   <span class="keyword">int</span> sockfd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将socket连接fd设置为非阻塞</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setnonblocking</span><span class="params">( <span class="keyword">int</span> fd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> old_option = <span class="built_in">fcntl</span>( fd, F_GETFL );</span><br><span class="line">    <span class="keyword">int</span> new_option = old_option | O_NONBLOCK;</span><br><span class="line">    <span class="built_in">fcntl</span>( fd, F_SETFL, new_option );</span><br><span class="line">    <span class="keyword">return</span> old_option;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将fd上的EPOLLIN和EPOLLET事件注册到epollfd指示的epoll内核事件表中 </span></span><br><span class="line"><span class="comment">// 参数oneshot指定是否注册fd上的EPOLLONESHOT事件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addfd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd, <span class="keyword">bool</span> oneshot )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = EPOLLIN | EPOLLET;</span><br><span class="line">    <span class="keyword">if</span>( oneshot )</span><br><span class="line">    &#123;</span><br><span class="line">        event.events |= EPOLLONESHOT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">epoll_ctl</span>( epollfd, EPOLL_CTL_ADD, fd, &amp;event );</span><br><span class="line">    <span class="built_in">setnonblocking</span>( fd );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置fd上的事件。这样操作之后，尽管fd上的EPOLLONESHOT事件被注册，</span></span><br><span class="line"><span class="comment">// 但是操作系统仍然会触发fd上的EPOLLIN事件，且只触发一次</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset_oneshot</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = EPOLLIN | EPOLLET | EPOLLONESHOT;</span><br><span class="line">    <span class="built_in">epoll_ctl</span>( epollfd, EPOLL_CTL_MOD, fd, &amp;event );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工作线程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">worker</span><span class="params">( <span class="keyword">void</span>* arg )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sockfd = ( (fds*)arg )-&gt;sockfd;</span><br><span class="line">    <span class="keyword">int</span> epollfd = ( (fds*)arg )-&gt;epollfd;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;start new thread to receive data on fd: %d\n&quot;</span>, sockfd );</span><br><span class="line">    <span class="keyword">char</span> buf[ BUFFER_SIZE ];</span><br><span class="line">    <span class="built_in">memset</span>( buf, <span class="string">&#x27;\0&#x27;</span>, BUFFER_SIZE );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 循环读取sockfd上的数据，直到遇到EAGAIN错误</span></span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">recv</span>( sockfd, buf, BUFFER_SIZE<span class="number">-1</span>, <span class="number">0</span> );</span><br><span class="line">        <span class="keyword">if</span>( ret == <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">close</span>( sockfd );</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;foreiner closed the connection\n&quot;</span> );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( ret &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( errno == EAGAIN )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">reset_oneshot</span>( epollfd, sockfd );</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">&quot;read later\n&quot;</span> );</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;get content: %s\n&quot;</span>, buf );</span><br><span class="line">            <span class="built_in">sleep</span>( <span class="number">5</span> ); <span class="comment">// 休眠5s。模拟数据处理过程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;end thread receiving data on fd: %d\n&quot;</span>, sockfd );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;address.sin_addr );</span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> listenfd = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">assert</span>( listenfd &gt;= <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">bind</span>( listenfd, ( struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">listen</span>( listenfd, <span class="number">5</span> );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    epoll_event events[ MAX_EVENT_NUMBER ];</span><br><span class="line">    <span class="keyword">int</span> epollfd = <span class="built_in">epoll_create</span>( <span class="number">5</span> );</span><br><span class="line">    <span class="built_in">assert</span>( epollfd != <span class="number">-1</span> );</span><br><span class="line">    <span class="comment">// 注意，监听socket listenfd上是不能注册EPOLLONESHOT事件的，否则应用程序只能处理一个客户连接</span></span><br><span class="line">    <span class="comment">// 因为后续的客户连接请求将不再触发listenfd上的EPOLLIN事件</span></span><br><span class="line">    <span class="built_in">addfd</span>( epollfd, listenfd, <span class="literal">false</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">epoll_wait</span>( epollfd, events, MAX_EVENT_NUMBER, <span class="number">-1</span> );</span><br><span class="line">        <span class="keyword">if</span> ( ret &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;epoll failure\n&quot;</span> );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ret; i++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> sockfd = events[i].data.fd;</span><br><span class="line">            <span class="keyword">if</span> ( sockfd == listenfd )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_address</span>;</span></span><br><span class="line">                <span class="keyword">socklen_t</span> client_addrlength = <span class="built_in"><span class="keyword">sizeof</span></span>( client_address );</span><br><span class="line">                <span class="keyword">int</span> connfd = <span class="built_in">accept</span>( listenfd, ( struct sockaddr* )&amp;client_address, &amp;client_addrlength );</span><br><span class="line">                <span class="comment">// 对每个非监听文件描述符都注册POLLONESHOT事件</span></span><br><span class="line">                <span class="built_in">addfd</span>( epollfd, connfd, <span class="literal">true</span> ); </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( events[i].events &amp; EPOLLIN )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">pthread_t</span> thread;</span><br><span class="line">                fds fds_for_new_worker;</span><br><span class="line">                fds_for_new_worker.epollfd = epollfd;</span><br><span class="line">                fds_for_new_worker.sockfd = sockfd;</span><br><span class="line">                <span class="comment">// 新启动一个工作线程为sockfd服务</span></span><br><span class="line">                <span class="built_in">pthread_create</span>( &amp;thread, <span class="literal">NULL</span>, worker, ( <span class="keyword">void</span>* )&amp;fds_for_new_worker );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">&quot;something else happened \n&quot;</span> );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( listenfd );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>工作线程函数worker中，如果一个工作线程处理完某个socket上的一次请求（用休眠5s来模拟这个过程）之后，又接收到该socket上新的客户请求，则该线程将继续为这个socket服务。并且因为该 socket上注册了EPOLLONESHOT事件，其他线程没有机会接触这个socket，如果工作线程等待5s后仍然没收到该socket上的下一批客户数据，则它将放弃为该socket服务。同时，它调用reset_oneshot函数来重置该socket上的注册事件，这将使epoll有机会再次检测到该socket上的EPOLLIN事件，进而使得其他线程有机会为该socket服务。</p>
<p>尽管一个socket在不同时间可能被不同的线程处理，但同一时刻肯定只有一个线程在为它服务。这就保证了连接的完整性，从而避免了很多可能的竞态条件。</p>
<h2 id="三组I-O复用函数的比较"><a href="#三组I-O复用函数的比较" class="headerlink" title="三组I/O复用函数的比较"></a>三组I/O复用函数的比较</h2><p>select、poll、epoll三组I/O复用系统调用。</p>
<p>这三组系统调用都能同时监听多个文件描述符，等待由timeout参数指定的超时时间，直到一个或者多个文件描述符上有事件发生时返回，返回值是就绪的文件描述符的数量。返回0表示没有事件发生。</p>
<p>select特点：select的参数类型fd_set没有将文件描述符和事件绑定，它仅仅是一个文件描述符集合，因此select需要提供3个这种类型的参数来分别传入和输出可读、可写及异常等事件。因此，select不能处理更多类型的事件，另一方面由于内核对fd_set集合的在线修改，应用程序下次调用select前不得不重置这3个fd_set集合。</p>
<p>poll特点：把文件描述符和事件都定义其中，任何事件都被统一处 理，从而使得编程接口简洁得多。并且内核每次修改的是pollfd结构体的revents成员，而events成员保持不变，因此下次调用poll时应用程序无须重置pollfd类型的事件集参数。</p>
<p>select和poll的时间复杂度：由于每次<strong>select和poll调用都返回整个用户注册的事件集合（其中包括就绪的和未就绪的）</strong>，所以应用程序索引就绪文件描述符的时间复杂度为O（n）。</p>
<p>epoll特点：在内核中维护一个事件表，并提供了一个独立的系统调用epoll_ctl来控制往其中添加、删除、修改事件。这样，<strong>每次epoll_wait调用都直接从该内核事件表中取得用户注册的事件，而无须反复从用户空间读入这些事件</strong>。</p>
<p>epoll的时间复杂度：epoll_wait系统调用的events参数仅用来返回就绪的事件，这使得应用程序索引就绪文件描述符的时间复杂度达到O（1）。</p>
<p>最大文件描述符数量：poll和epoll_wait分别用nfds和maxevents参数指定最多监听多少个文件描述符和事件。这两个数值都能达到系统允许打开的最大文件描述符数目，即65535<br>（cat/proc/sys/fs/file-max）。select允许监听的最大文件描述符数量通常有限制。虽然用户可以修改这个限制，但这可能导致不可预期的后果。</p>
<p>工作模式：select和poll都只能工作在相对低效的LT模式，而epoll则可以工作在ET高效模式。并且epoll还支持EPOLLONESHOT事件。该事件能进一步减少可读、可写和异常等事件被触发的次数。</p>
<p>实现原理：<strong>select和poll采用的都是轮询的方式</strong>，即每次调用都要扫描整个注册文件描述符集合，并将其中就绪的文件描述符返回给用户程序，因此它们检测就绪事件的算法的时间复杂度是O（n）。<br><strong>epoll_wait则不同，它采用的是回调的方式。</strong>内核检测到就绪的文件描 述符时，将触发回调函数，回调函数就将该文件描述符上对应的事件插入内核就绪事件队列。内核最后在适当的时机将该就绪事件队列中的内容拷贝到用户空间。因此epoll_wait无须轮询整个文件描述符集合来检测哪些事件已经就绪，其算法时间复杂度是O（1）。</p>
<p>epoll_wait适用于连接数量多，但活动连接较少的情况。</p>
<p>select、poll和epoll的区别：</p>
<table>
<thead>
<tr>
<th align="center"><span style="display:inline-block;width:100px">系统调用</span></th>
<th align="center"><span style="display:inline-block;width:240px">select</span></th>
<th align="center"><span style="display:inline-block;width:240px">poll</span></th>
<th align="center"><span style="display:inline-block;width:240px">epoll</span></th>
</tr>
</thead>
<tbody><tr>
<td align="center">事件集合</td>
<td align="center">用户通过3个参数来分别传入感兴趣的可读、可写及异常等事件，内核通过对这些参数的在线修改来反馈其中的就绪事件。这使得用户每次调用select都要重置这3个参数。</td>
<td align="center">统一处理所有事件类型，因此只需要一个事件集参数。用户通过pollfd.events传入感兴趣的事件，内核通过修改pollfd.revents反馈其中就绪的事件。</td>
<td align="center">内核通过一个事件表直接管理用户感兴趣的所有事件。因此每次调用epoll_wait时，无须反复传入用户感兴趣的事件。epoll_wait系统调用的参数events仅用来反馈就绪的事件。</td>
</tr>
<tr>
<td align="center">应用程序索引就绪文件描述符的时间复杂度</td>
<td align="center">O(n)</td>
<td align="center">O(n)</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">最大支持文件描述符数</td>
<td align="center">一般有最大值限制</td>
<td align="center">65535</td>
<td align="center">65535</td>
</tr>
<tr>
<td align="center">工作模式</td>
<td align="center">LT</td>
<td align="center">LT</td>
<td align="center">ET</td>
</tr>
<tr>
<td align="center">内核实现和工作效率</td>
<td align="center">采用轮询方式来检测就绪事件，算法时间复杂度为O(n)</td>
<td align="center">采用轮询方式来检测就绪事件，算法时间复杂度为O(n)</td>
<td align="center">采用回调方式来检测就绪事件，算法时间复杂度为O(1)</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Linux网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>高性能服务器程序框架</title>
    <url>/posts/81ce2909.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>按照服务器程序的一般原理，将服务器解构为如下三个主要模块：</p>
<ul>
<li>I/O处理单元。四种I/O模型和两种高效事件处理模式。</li>
<li>逻辑单元。两种高效并发模式，以及高效的逻辑处理方式——有限状态机。</li>
<li>存储单元。服务器程序的可选模块。</li>
</ul>
<h2 id="服务器模型"><a href="#服务器模型" class="headerlink" title="服务器模型"></a>服务器模型</h2><h3 id="C-S模型"><a href="#C-S模型" class="headerlink" title="C/S模型"></a>C/S模型</h3><p>C/S（客户端/服务器）模型：所有客户端都通过访问服务器来获取所需的资源。</p>
<img src="/posts/image-20220726231329183.png" alt="image-20220726231329183" style="zoom:50%;">

<p>采用C/S模型的TCP服务器和TCP客户端的工作流程：</p>
<img src="/posts/image-20220726231424223.png" alt="image-20220726231424223" style="zoom:75%;">

<p>服务器启动后，首先创建一个（或多个）监听socket，并调用bind函数将其绑定到服务器感兴趣的端口上，然后调用listen函数等待客户连接。<br>服务器稳定运行之后，客户端就可以调用connect函数向服务器发起连接了。由于客户连接请求是随机到达的异步事件，服务器需要使用某种I/O模型来监听这一事件。这里服务器使用的是I/O复用技术之一的select系统调用。<br>当监听到连接请求后，服务器就调用accept函数接受它，并分配一个逻辑单元为新的连接服务。逻辑单元可以是新创建的子进程、子线程或者其他。服务器给客户端分配的逻辑单元是由fork系统调用创建的子进 程。逻辑单元读取客户请求，处理该请求，然后将处理结果返回给客户端。<br>客户端接收到服务器反馈的结果之后，可以继续向服务器发送请求，也可以立即主动关闭连接。如果客户端主动关闭连接，则服务器执行被动关闭连接。至此，双方的通信结束。</p>
<p>注意：服务器在处理一个客户请求的同时还会继续监听其他客户请求，否则就变成了效率低下的串行服务器了（必须先处理完前一个客户的请求，才能继续处理下一个客户请求）。这里服务器同时监听多个客户请求是通过select系统调用实现的。</p>
<p>优点：非常适合资源相对集中的场合，实现简单。</p>
<p>缺点：服务器是通信的中心，当访问量过大时，可能所有客户都将得到很慢的响应。</p>
<h3 id="P2P模型"><a href="#P2P模型" class="headerlink" title="P2P模型"></a>P2P模型</h3><p>P2P（Peer to Peer，点对点）模型，摒弃了以服务器为中心的格局，让网络上所有主机重新回归对等的地位。两种P2P模型：</p>
<img src="/posts/image-20220726232111418.png" alt="image-20220726232111418" style="zoom:80%;">

<p>优点：每台机器在消耗服务的同时也给别人提供服务，这样资源能够充分、自由地共享。</p>
<p>缺点：当用户之间传输的请求过多时，网络的负载将加重。</p>
<p>图a的P2P模型的问题，主机之间很难互相发现。实际使用中，需要加入一个专门的发现服务器，如图b，发现服务器通常还提供查找服务（甚至还可以提供内容服务），使每个客户都能尽快地找到自己需要的资源。</p>
<p>从编程角度来讲，P2P模型可以看作C/S模型的扩展：每台主机既是客户端，又是服务器。</p>
<h2 id="服务器编程框架"><a href="#服务器编程框架" class="headerlink" title="服务器编程框架"></a>服务器编程框架</h2><p>虽然服务器程序种类繁多，但其基本框架都一样，不同之处在于逻辑处理。</p>
<p>服务器基本框架如下：</p>
<img src="/posts/image-20220726232518637.png" alt="image-20220726232518637" style="zoom:80%;">

<p>服务器基本模块的功能概述：</p>
<table>
<thead>
<tr>
<th align="center">模块</th>
<th align="center">单个服务器程序</th>
<th align="center">服务器机群</th>
</tr>
</thead>
<tbody><tr>
<td align="center">I/O处理单元</td>
<td align="center">处理客户连接，读写网络数据</td>
<td align="center">作为接入服务器，实现负载均衡</td>
</tr>
<tr>
<td align="center">逻辑单元</td>
<td align="center">业务进程或线程</td>
<td align="center">逻辑服务器</td>
</tr>
<tr>
<td align="center">网络存储单元</td>
<td align="center">本地数据库、文件或缓存</td>
<td align="center">数据库服务器</td>
</tr>
<tr>
<td align="center">请求队列</td>
<td align="center">各单元之间的通信方式</td>
<td align="center">各服务器之间的永久TCP连接</td>
</tr>
</tbody></table>
<p><strong>I/O处理单元：</strong>服务器管理客户连接的模块。主要工作：等待并接受新的客户连接，接收客户数据，将服务器响应数据返回给客户端。但是，数据的收发不一定只在I/O处理单元中执行，也可能在逻辑单元中执行。对于一个服务器机群来说，I/O处理单元是一个专门的接入服务器。它实现负载均衡，从所有逻辑服务器中选取负荷最小的一台来为新客户服务。</p>
<p><strong>逻辑单元：</strong>通常是一个进程或线程。主要工作：分析并处理客户数据，然后将结果传递给I/O处理单元，或者直接发送给客户端（取决于事件处理模式）。对于服务器机群来说，一个逻辑单元本身就是一台逻辑服务器。服务器通常拥有多个逻辑单元，以实现对多个客户任务的并行处理。</p>
<p><strong>网络存储单元：</strong>可以是数据库、缓存和文件，甚至是一台独立的服务器。但它不是必须的，比如ssh、telnet等登录服务就不需要这个单元。</p>
<p><strong>请求队列：</strong>是各单元之间的通信方式的抽象。I/O处理单元接收到客户请求时，需要以某种方式通知一个逻辑单元来处理该请求。多个逻辑单元同时访问一个存储单元时，也需要采用某种机制来协调处理竞态条件。对于服务器机群而言，请求队列是各台服务器之间预先建立的、静态的、永久的TCP连接。这种TCP连接能提高服务器之间交换数据的效率，因为它避免了动态建立TCP连接导致的额外的系统开销。</p>
<h2 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h2><p>阻塞与非阻塞应用于文件描述符包括socket。阻塞的文件描述符为阻塞I/O，非阻塞的文件描述符为非阻塞I/O。</p>
<p><strong>阻塞I/O：</strong>执行的系统调用可能因为无法立即完成而被操作系统挂起，直到等待的事件发生为止。例如，客户端通过connect向服务器发起连接时，connect将首先发送同步报文段给服务器，然后等待服务器返回确认报文段。如果服务器的确认报文段没有立即到达客户端，则connect调用将被挂起，直到客户端收到确认报文段并唤醒connect调用。<br>socket基础API中，可能被阻塞的系统调用包括：accept、send、recv和connect。</p>
<p><strong>非阻塞I/O：</strong>执行的系统调用总是立即返回，而不管事件是否已经发送。如果事件没有立即发生，这些系统调用就返回-1，和出错的情况一样。此时必须根据errno来区分这两种情况。<br>对accept、send和recv而言，事件未发生时errno通常被设置成EAGAIN（意为“再来一次”）或者EWOULDBLOCK（意为“期望阻塞”）；对connect而言，errno则被设置成EINPROGRESS（意为“在处理中”）。</p>
<p>使用条件：只有在事件已经发送的情况下操作非阻塞I/O（读、写等），才能提高程序的效率。非阻塞I/O通常要和其他I/O通知机制一起使用，比如I/O复用和SIGIO信号。</p>
<p><strong>I/O复用：</strong>最常使用的I/O通知机制。应用程序通过I/O复用函数向内核注册一组事件，内核通过I/O复用函数把其中就绪的事件通知给应用程序。Linux常用的I/O复用函数是select、poll和epoll_wait。<strong>I/O复用函数本身是阻塞的</strong>，它们能提高程序效率的原因在于它们<strong>具有同时监听多个I/O事件的能力</strong>。</p>
<p>SIGIO信号：可以用来报告I/O事件。可以为一个目标文件描述符指定宿主进程，那么被指定的宿主进程将捕获到SIGIO信号。这样，当目标文件描述符上有事件发生时，SIGIO信号的信号处理函数将被触发，也就可以在该信号处理函数中对目标文件描述符执行非阻塞I/O操作了。</p>
<p>从理论上说，阻塞I/O、I/O复用和信号驱动I/O都是<strong>同步I/O模型</strong>。这三种I/O模型中，I/O的读写操作，都是在I/O事件发生之后，由应用程序来完成的。</p>
<p>POSIX规范所定义的<strong>异步I/O模型</strong>，用户可以直接对I/O执行读写操作，这些操作告诉内核用户读写缓冲区的位置，以及I/O操作完成之后内核通知应用程序的方式。</p>
<p>同步I/O模型：要求用户代码自行执行I/O操作（将数据从内核缓冲区读入用户缓冲区，或将数据从用户缓冲区写入内核缓冲区）</p>
<p>异步I/O机制：由内核来执行I/O操作（数据在内核缓冲区和用户缓冲区之间的移动是由内核在“后台”完成的）。异步I/O的读写操作总是立即返回，而不论I/O是否是阻塞的，因为真正的读写操作已由内核接管。</p>
<p>同步I/O向应用程序通知的是I/O就绪事件，而异步I/O向应用程序通知的是I/O完成事件</p>
<p>几种I/O模型的差异对比：</p>
<table>
<thead>
<tr>
<th align="left">I/O模型</th>
<th>读写操作和阻塞阶段</th>
</tr>
</thead>
<tbody><tr>
<td align="left">阻塞I/O</td>
<td>程序阻塞于读写函数</td>
</tr>
<tr>
<td align="left">I/O复用</td>
<td>程序阻塞于I/O复用系统调用，但可以同时监听多个I/O事件。对I/O本身的读写操作是非阻塞的</td>
</tr>
<tr>
<td align="left">SIGIO信号</td>
<td>信号触发读写就绪事件，用户程序执行读写操作。程序没有阻塞阶段</td>
</tr>
<tr>
<td align="left">异步I/O</td>
<td>内核执行读写操作并触发读写完成事件。程序没有阻塞阶段</td>
</tr>
</tbody></table>
<h2 id="两种高效的事件处理模式"><a href="#两种高效的事件处理模式" class="headerlink" title="两种高效的事件处理模式"></a>两种高效的事件处理模式</h2><p>服务器程序需要处理的三类事件：I/O事件、信号、定时事件。</p>
<p>两种高效的事件处理模式：Reactor（同步I/O模型）和Proactor（异步I/O模型）。</p>
<h3 id="Reactor模式"><a href="#Reactor模式" class="headerlink" title="Reactor模式"></a>Reactor模式</h3><p>Reactor模式：要求主线程（I/O处理单元，下同）只负责监听文件描述符上是否有事件发生，有的话就立即将该事件通知工作线程（逻辑单元，下同）。除此之外，主线程不做任何其他实质性的工作。读写数据，接受新的连接，以及处理客户请求均在工作线程中完成。</p>
<p>使用同步I/O模型（以epoll_wait为例）实现的Reactor模式的工作流程：</p>
<img src="/posts/image-20220727120151684.png" alt="image-20220727120151684" style="zoom:80%;">

<ol>
<li>主线程往epoll内核事件表中注册socket上的读就绪事件。</li>
<li>主线程调用epoll_wait等待socket上有数据可读。</li>
<li>当socket上有数据可读时，epoll_wait通知主线程。主线程则将socket可读事件放入请求队列。</li>
<li>睡眠在请求队列上的某个工作线程被唤醒，它从socket读取数据，并处理客户请求，然后往epoll内核事件表中注册该socket上的写就绪事件。</li>
<li>主线程调用epoll_wait等待socket可写。</li>
<li>当socket可写时，epoll_wait通知主线程。主线程将socket可写事件放入请求队列。</li>
<li>睡眠在请求队列上的某个工作线程被唤醒，它往socket上写入服务器处理客户请求的结果。</li>
</ol>
<h3 id="Proactor模式"><a href="#Proactor模式" class="headerlink" title="Proactor模式"></a>Proactor模式</h3><p>Proactor模式：将所有I/O操作都交给主线程和内核来处理，工作线程仅仅负责业务逻辑。</p>
<p>Proactor模式的工作流程：</p>
<img src="/posts/image-20220727150928621.png" alt="image-20220727150928621" style="zoom:80%;">

<ol>
<li>主线程调用aio_read函数向内核注册socket上的读完成事件，并告诉内核用户读缓冲区的位置，以及读操作完成时如何通知应用程序。</li>
<li>主线程继续处理其他逻辑。</li>
<li>当socket上的数据被读入用户缓冲区后，内核将向应用程序发送一个信号，以通知应用程序数据已经可用。</li>
<li>应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求。工作线程处理完客户请求之后，调用aio_write函数向内核注册socket上的写完成事件，并告诉内核用户写缓冲区的位置，以及写操作完成时如何通知应用程序。</li>
<li>主线程继续处理其他逻辑。</li>
<li>当用户缓冲区的数据被写入socket之后，内核将向应用程序发送一个信号，以通知应用程序数据已经发送完毕。</li>
<li>应用程序预先定义好的信号处理函数选择一个工作线程来做善后处理，比如决定是否关闭socket。 </li>
</ol>
<p>连接socket上的读写事件是通过aio_read/aio_write向内核注册的，因此内核将通过信号来向应用程序报告连接socket上的读写事件。主线程中的epoll_wait调用，仅能用来检测监听socket上的连接请求事件，而不能用来检测连接socket上的读写事件。</p>
<h3 id="模拟Proactor模式"><a href="#模拟Proactor模式" class="headerlink" title="模拟Proactor模式"></a>模拟Proactor模式</h3><p>使用同步I/O方式模拟出Proactor模式的一种方法：主线程执行数据读写操作，读写完成之后，主线程向工作线程通知这一“完成事件”。那么从工作线程的角度来看，它们就直接获得了数据读写的结果，接下来要做的只是对读写的结果进行逻辑处理。</p>
<p>用同步I/O模拟出的Proactor模式工作流程：</p>
<img src="/posts/image-20220727152705121.png" alt="image-20220727152705121" style="zoom: 67%;">

<ol>
<li>主线程往epoll内核事件表中注册socket上的读就绪事件。</li>
<li>主线程调用epoll_wait等待socket上有数据可读。</li>
<li>当socket上有数据可读时，epoll_wait通知主线程。主线程从socket循环读取数据，直到没有更多数据可读，然后将读取到的数据封装成一个请求对象并插入请求队列。</li>
<li>睡眠在请求队列上的某个工作线程被唤醒，它获得请求对象并处理客户请求，然后往epoll内核事件表中注册socket上的写就绪事件。</li>
<li>主线程调用epoll_wait等待socket可写。</li>
<li>当socket可写时，epoll_wait通知主线程。主线程往socket上写入服务器处理客户请求的结果。</li>
</ol>
<h2 id="两种高效的并发模式"><a href="#两种高效的并发模式" class="headerlink" title="两种高效的并发模式"></a>两种高效的并发模式</h2><p>对于I/O密集型的程序，如经常读写文件、访问数据库等，由于I/O操作的速度远没有CPU的计算速度快，让程序阻塞于I/O将浪费大量的CPU时间，并发编程让程序“同时”执行多个任务。</p>
<p>如果程序有多个执行线程，则当前被I/O操作所阻塞的执行线程可主动放弃CPU（或由操作系统来调度），并将执行权转移到其他线程。这样一来，CPU就可以用来做更加有意义的事情（除非所有线程都同时被I/O操作所阻塞），而不是等待I/O操作完成，因此CPU的利用率显著提升。</p>
<p>并发编程主要有多进程和多线程两种方式。</p>
<p>并发模式：I/O处理单元和多个逻辑单元之间协调完成任务的方法。</p>
<p>服务器主要有两种并发编程模式：</p>
<ul>
<li>半同步/半异步（half-sync/half-async）模式</li>
<li>领导者/追随者（Leader/Followers）模式。</li>
</ul>
<h3 id="半同步-半异步模式"><a href="#半同步-半异步模式" class="headerlink" title="半同步/半异步模式"></a>半同步/半异步模式</h3><p>I/O模型中的同步与异步的区分：</p>
<ul>
<li>内核向应用程序通知的是何种I/O事件（是就绪事件还是完成事件）。</li>
<li>该由谁来完成I/O读写（是应用程序还是内核）。</li>
</ul>
<p>并发模式中的同步与异步：</p>
<ul>
<li>同步：程序完全按照代码序列的顺序执行。</li>
<li>异步：程序的执行需要由系统事件来驱动。常见的系统事件包括中断、信号等。</li>
</ul>
<img src="/posts/image-20220727155301767.png" alt="image-20220727155301767" style="zoom: 67%;">

<p>按照同步方式运行的线程称为同步线程，按照异步方式运行的线程称为异步线程。</p>
<p>异步线程：执行效率高，实时性强，这是很多嵌入式程序采用的模型。但编写以异步方式执行的程序相对复杂，难于调 试和扩展，而且不适合于大量的并发。</p>
<p>同步线程：虽然效率相对较低，实时性较差，但逻辑简单。</p>
<p><strong>半同步/半异步模式：</strong>同步线程用于处理客户逻辑，相当于逻辑处理单元；异步线程用于处理I/O事件，相当于I/O处理单元。</p>
<p>异步线程监听到客户请求后，就将其封装成请求对象并插入请求队列中。请求队列将通知某个工作在同步模式的工作线程来读取并处理该请求对象。具体选择哪个工作线程来为新的客户请求服务，则取决于请求队列的设计。</p>
<p>半同步/半异步模式的工作流程：</p>
<img src="/posts/image-20220727155822372.png" alt="image-20220727155822372" style="zoom:67%;">

<p>服务器程序中，结合考虑两种事件处理模式和几种I/O模型，其中有一种变体称为半同步/半反应堆（half-sync/half-reactive）模式：</p>
<img src="/posts/image-20220727160014636.png" alt="image-20220727160014636" style="zoom:67%;">

<p>图8-10中，异步线程只有一个，由主线程来充当。它负责监听所有socket上的事件。如果监听socket上有可读事件发生，即有新的连接请求到来，主线程就接受之以得到新的连接socket，然后往epoll内核事件表中注册该socket上的读写事件。如果连接socket上有读写事件发生，即有新的客户请求到来或有数据要发送至客户端，主线程就将该连接socket插入请求队列中。<br>所有工作线程都睡眠在请求队列上，当有任务到来时，它们将通过竞争（比如申请互斥锁）获得任务的接管权。这种竞争机制使得只有空闲的工作线程才有机会来处理新任务，这是很合理的。</p>
<p>主线程插入请求队列中的任务是就绪的连接socket。这说明该图所示的半同步/半反应堆模式采用的事件处理模式是Reactor模式：它要求工作线程自己从socket上读取客户请求和往socket写入服务器应答。这就是该模式的名称中“half-reactive”的含义。</p>
<p>半同步/半反应堆模式存在如下缺点：</p>
<ul>
<li>主线程和工作线程共享请求队列。主线程往请求队列中添加任务，或者工作线程从请求队列中取出任务，都需要对请求队列加锁保护，从而白白耗费CPU时间。</li>
<li>每个工作线程在同一时间只能处理一个客户请求。如果客户数量较多，而工作线程较少，则请求队列中将堆积很多任务对象，客户端的响应速度将越来越慢。如果通过增加工作线程来解决这一问题，则工作线程的切换也将耗费大量CPU时间。</li>
</ul>
<p>一种相对高效的半同步/半异步模式，它的每个工作线程都能同时处理多个客户连接：</p>
<img src="/posts/image-20220727161338185.png" alt="image-20220727161338185" style="zoom:67%;">

<p>主线程只管理监听socket，连接socket由工作线程来管理。当有新的连接到来时，主线程就接受之并将新返回的连接socket派发给某个工作线程，此后该新socket上的任何I/O操作都由被选中的工作线程来处理，直到客户关闭连接。<br>主线程向工作线程派发socket的最简单的方式，是往它和工作线程之间的管道里写数据。工作线程检测到管道上有数据可读时，就分析是否是一个新的客户连接请求到来。如果是，则把该新socket上的读写事件注册到自己的epoll内核事件表中。<br>图8-11中，每个线程（主线程和工作线程）都维持自己的事件循环，它们各自独立地监听不同的事件。因此，在这种高效的半同步/半异步模式中，每个线程都工作在异步模式，所以它并非严格意义上的半同步/半异步模式。</p>
<h3 id="领导者-追随者模式"><a href="#领导者-追随者模式" class="headerlink" title="领导者/追随者模式"></a>领导者/追随者模式</h3><p><strong>领导者/追随者模式：</strong>多个工作线程轮流获得事件源集合，轮流监听、分发并处理事件的一种模式。</p>
<p>在任意时间点，程序都仅有一个领导者线程，它负责监听I/O事件。而其他线程则都是追随者，它们休眠在线程池中等待成为新的领导者。当前的领导者如果检测到I/O事件，首先要从线程池中推选出新的领导者线程，然后处理I/O事件。此时，新的领导者等待新的I/O事件，而原来的领导者则处理I/O事件，二者实现了并发。</p>
<p>领导者/追随者模式的组件：句柄集（HandleSet）、线程集（ThreadSet）、事件处理器（EventHandler）和具体的事件处理器（ConcreteEventHandler）。</p>
<img src="/posts/image-20220727162049774.png" alt="image-20220727162049774" style="zoom:67%;">

<h4 id="句柄集"><a href="#句柄集" class="headerlink" title="句柄集"></a>句柄集</h4><p>句柄（Handle）用于表示I/O资源，在Linux下通常就是一个文件描述符。<br>句柄集管理众多句柄，它使用wait_for_event方法来监听这些句柄上的I/O事件，并将其中的就绪事件通知给领导者线程。<br>领导者则调用绑定到Handle上的事件处理器来处理事件。领导者将Handle和事件处理器绑定是通过调用句柄集中的register_handle方法实现的。</p>
<h4 id="线程集"><a href="#线程集" class="headerlink" title="线程集"></a>线程集</h4><p>这个组件是所有工作线程（包括领导者线程和追随者线程）的管理者。它负责各线程之间的同步，以及新领导者线程的推选。线程集中的线程在任一时间必处于如下三种状态之一：</p>
<ul>
<li>Leader：线程当前处于领导者身份，负责等待句柄集上的I/O事件。</li>
<li>Processing：线程正在处理事件。领导者检测到I/O事件之后，可以转移到Processing状态来处理该事件，并调用promote_new_leader方法推选新的领导者；也可以指定其他追随者来处理事件（Event Handoff），此时领导者的地位不变。<br>当处于Processing状态的线程处理完事件之后，如果当前线程集中没有领导者，则它将成为新的领导者，否则它就直接转变为追随者。</li>
<li>Follower：线程当前处于追随者身份，通过调用线程集的join方法等待成为新的领导者，也可能被当前的领导者指定来处理新的任务。</li>
</ul>
<p>三种状态之间的转换关系：</p>
<img src="/posts/image-20220727162626955.png" alt="image-20220727162626955" style="zoom: 50%;">

<p>注意：领导者线程推选新的领导者和追随者等待成为新领导者这两个操作都将修改线程集，因此线程集提供一个成员Synchronizer来同步这两个操作，以避免竞态条件。</p>
<h4 id="事件处理器和具体的事件处理器"><a href="#事件处理器和具体的事件处理器" class="headerlink" title="事件处理器和具体的事件处理器"></a>事件处理器和具体的事件处理器</h4><p>事件处理器通常包含一个或多个回调函数handle_event。这些回调函数用于处理事件对应的业务逻辑。<br>事件处理器在使用前需要被绑定到某个句柄上，当该句柄上有事件发生时，领导者就执行与之绑定的事件处理器中的回调函数。具体的事件处理器是事件处理器的派生类。它们必须重新实现基类的handle_event方法，以处理特定的任务。</p>
<p>领导者/追随者模式的工作流程总结：</p>
<img src="/posts/image-20220727163037306.png" alt="image-20220727163037306" style="zoom: 67%;">

<p>优点：由于领导者线程自己监听I/O事件并处理客户请求，因而领导者/追随者模式不需要在线程之间传递任何额外的数据，也无须像半同步/半反应堆模式那样在线程之间同步对请求队列的访问。</p>
<p>缺点：仅支持一个事件源集合，因此也无法像图8-11所示的那样，让每个工作线程独立地管理多个客户连接。</p>
]]></content>
      <tags>
        <tag>Linux网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux服务器程序规范</title>
    <url>/posts/7295db68.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>Linux服务器程序规范包括：</p>
<ul>
<li>Linux服务器程序一般以后台进程（守护进程）运行，没有控制终端，因而也不会意外接收到用户输入。守护进程的父进程通常是init进程（PID为1的进程）。</li>
<li>日志系统，至少能输出日志到文件，有的高级服务器还能输出日志到专门的UDP服务器。大部分后台进程都在/var/log目录下拥有自己的日志目录。</li>
<li>Linux服务器程序一般以某个专门的非root身份运行，比如mysqld、httpd、syslogd等后台进程，分别拥有自己的运行账户mysql、apache和syslog。 </li>
<li>Linux服务器程序通常是可配置的。服务器程序通常能处理很多命令行选项，如果一次运行的选项太多，则可以用配置文件来管理。绝大多数服务器程序都有配置文件，并存放在/etc目录下。</li>
<li>Linux服务器进程通常会在启动的时候生成一个PID文件并存入/var/run目录中，以记录该后台进程的PID。比如syslogd的PID文件是/var/run/syslogd.pid。</li>
<li>Linux服务器程序通常需要考虑系统资源和限制，以预测自身能承受多大负荷，比如进程可用文件描述符总数和内存总量等。</li>
</ul>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="Linux系统日志"><a href="#Linux系统日志" class="headerlink" title="Linux系统日志"></a>Linux系统日志</h3><p>守护进程syslogd，处理系统日志。现在的Linux系统上使用的都是它的升级版——rsyslogd。 rsyslogd守护进程既能接收用户进程输出的日志，又能接收内核日志。</p>
<p>用户进程是通过调用syslog函数生成系统日志的。该函数将日志输出到一个UNIX本地域socket类型（AF_UNIX）的文件/dev/log中，rsyslogd则监听该文件以获取用户进程的输出。</p>
<p>内核日志由printk等函数打印至内核的环状缓存（ring buffer）中。环状缓存的内容直接映射到/proc/kmsg文件中。rsyslogd则通过读取该文件获得内核日志。 </p>
<p>rsyslogd的主配置文件是/etc/rsyslog.conf，其中主要可以设置的项包括：内核日志输入路径，是否接收UDP日志及其监听端口（默认是514，见/etc/services文件），是否接收TCP日志及其监听端口，日志文件的权限，包含哪些子配置文件（比如/etc/rsyslog.d/*.conf）。rsyslogd的子配置文件则指定各类日志的目标存储文件。</p>
<p>Linux的系统日志体系：</p>
<p><img src="/20220726/image-20220726200803717.png" alt="image-20220726200803717"></p>
<h3 id="syslog函数"><a href="#syslog函数" class="headerlink" title="syslog函数"></a>syslog函数</h3><p>应用程序使用syslog函数与rsyslogd守护进程通信。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜syslog.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">syslog</span><span class="params">(<span class="keyword">int</span> priority, <span class="keyword">const</span> <span class="keyword">char</span>* message,...)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	priority：设施值与日志级别的按位或，设施值的默认值是LOG_USER</span></span><br><span class="line"><span class="comment">	message, ...：可变参数，结构化输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志级别：</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜syslog.h＞ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_EMERG 0<span class="comment">/*系统不可用*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_ALERT 1<span class="comment">/*报警，需要立即采取动作*/</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_CRIT 2<span class="comment">/*非常严重的情况*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_ERR 3<span class="comment">/*错误*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_WARNING 4<span class="comment">/*警告*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_NOTICE 5<span class="comment">/*通知*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_INFO 6<span class="comment">/*信息*/</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_DEBUG 7<span class="comment">/*调试*/</span></span></span><br></pre></td></tr></table></figure>

<p>改变syslog的默认输出方式，进一步结构化日志内容：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜syslog.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">openlog</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* ident, <span class="keyword">int</span> logopt, <span class="keyword">int</span> facility)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	ident：指定的字符串将被添加到日志消息的日期和时间之后，通常为程序的名字</span></span><br><span class="line"><span class="comment">	logopt：对后续syslog调用的行为进行配 置，它可取下列值的按位或</span></span><br><span class="line"><span class="comment">	facility：用来修改syslog函数中的默认设施值		</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_PID 0x01<span class="comment">/*在日志消息中包含程序PID*/</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_CONS 0x02<span class="comment">/*如果消息不能记录到日志文件，则打印至终端*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_ODELAY 0x04<span class="comment">/*延迟打开日志功能直到第一次调用syslog*/</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_NDELAY 0x08<span class="comment">/*不延迟打开日志功能*/</span></span></span><br></pre></td></tr></table></figure>

<p>日志的过滤，设置日志掩码，使日志级别大于日志掩码的日志信息被系统忽略。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜syslog.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setlogmask</span><span class="params">(<span class="keyword">int</span> maskpri)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	maskpri：指定日志掩码值</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	该函数始终会成功，它返回调用进程先前的日志掩码值。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>关闭日志功能：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜syslog.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">closelog</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><h3 id="UID、EUID、GID和EGID"><a href="#UID、EUID、GID和EGID" class="headerlink" title="UID、EUID、GID和EGID"></a>UID、EUID、GID和EGID</h3><p>UID：真实用户ID<br>EUID：有效用户ID<br>GID：真实组<br>EGID：有效组ID</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/types.h＞ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜unistd.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">uid_t</span> <span class="title">getuid</span><span class="params">()</span></span>;<span class="comment">/*获取真实用户ID*/</span> </span><br><span class="line"><span class="function"><span class="keyword">uid_t</span> <span class="title">geteuid</span><span class="params">()</span></span>;<span class="comment">/*获取有效用户ID*/</span> </span><br><span class="line"><span class="function"><span class="keyword">gid_t</span> <span class="title">getgid</span><span class="params">()</span></span>;<span class="comment">/*获取真实组ID*/</span> </span><br><span class="line"><span class="function"><span class="keyword">gid_t</span> <span class="title">getegid</span><span class="params">()</span></span>;<span class="comment">/*获取有效组ID*/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setuid</span><span class="params">(<span class="keyword">uid_t</span> uid)</span></span>;<span class="comment">/*设置真实用户ID*/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">seteuid</span><span class="params">(<span class="keyword">uid_t</span> uid)</span></span>;<span class="comment">/*设置有效用户ID*/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setgid</span><span class="params">(<span class="keyword">gid_t</span> gid)</span></span>;<span class="comment">/*设置真实组ID*/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setegid</span><span class="params">(<span class="keyword">gid_t</span> gid)</span></span>;<span class="comment">/*设置有效组ID*/</span></span><br></pre></td></tr></table></figure>

<p>一个进程拥有两个用户ID：UID和EUID。<br>EUID存在的目的是方便资源访问：它使得运行程序的用户拥有该程序的有效用户的权限。</p>
<p>任何普通用户运行su程序时，其有效用户就是该程序的所有者root。任何运行su程序的普通用户都能够访问/etc/passwd文件。</p>
<p>有效用户为root的进程称为特权进程（privileged processes）。EGID的含义与EUID类似：给运行目标程序的组用户提供有效组的权限。</p>
<p>测试进程的UID和EUID的区别：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uid_t</span> uid = <span class="built_in">getuid</span>();</span><br><span class="line">    <span class="keyword">uid_t</span> euid = <span class="built_in">geteuid</span>();</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;userid is %d, effective userid is: %d\n&quot;</span>, uid, euid );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译该文件，将生成的可执行文件（名为test_uid）的所有者设置为root，并设置该文件的set-user-id标志，然后运行该程序以查看UID和EUID。具体操作如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sudo chown root:root test_uid<span class="comment">#修改目标文件的所有者为root</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo chmod+s test_uid<span class="comment">#设置目标文件的set-user-id标志</span></span> </span><br><span class="line"><span class="meta">$</span><span class="bash">./test_uid<span class="comment">#运行程序</span></span> </span><br><span class="line">userid is 1000,effective userid is:0</span><br></pre></td></tr></table></figure>

<p>从测试程序的输出来看，进程的UID是启动程序的用户的ID，而 EUID则是root账户（文件所有者）的ID。</p>
<h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><p>将以root身份启动的进程切换为以一个普通用户身份运行：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">switch_to_user</span><span class="params">( <span class="keyword">uid_t</span> user_id, <span class="keyword">gid_t</span> gp_id )</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">    <span class="comment">// 确保目标用户不是root</span></span><br><span class="line">    <span class="keyword">if</span> ( ( user_id == <span class="number">0</span> ) &amp;&amp; ( gp_id == <span class="number">0</span> ) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 确保当前用户是合法用户：root或者目标用户</span></span><br><span class="line">    <span class="keyword">gid_t</span> gid = <span class="built_in">getgid</span>();</span><br><span class="line">    <span class="keyword">uid_t</span> uid = <span class="built_in">getuid</span>();</span><br><span class="line">    <span class="keyword">if</span> ( ( ( gid != <span class="number">0</span> ) || ( uid != <span class="number">0</span> ) ) &amp;&amp; ( ( gid != gp_id ) || ( uid != user_id ) ) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 如果不是root</span></span><br><span class="line">    <span class="keyword">if</span> ( uid != <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 切换到目标用户</span></span><br><span class="line">    <span class="keyword">if</span> ( ( <span class="built_in">setgid</span>( gp_id ) &lt; <span class="number">0</span> ) || ( <span class="built_in">setuid</span>( user_id ) &lt; <span class="number">0</span> ) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="进程间关系"><a href="#进程间关系" class="headerlink" title="进程间关系"></a>进程间关系</h2><h3 id="进程组"><a href="#进程组" class="headerlink" title="进程组"></a>进程组</h3><p>Linux下每个进程都隶属于一个进程组，除了PID信息外，还有进程组ID（PGID）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜unistd.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">getpgid</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：获取指定进程的PGID</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	pid：进程识别号</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	返回进程pid所属进程组的PGID，失败返回-1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>每个进程组都有一个首领进程，其PGID和PID相同。进程组将一直存在，直到其中所有进程都退出，或者加入到其他进程组。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜unistd.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setpgid</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">pid_t</span> pgid)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：设置PGID，将PID为pid的进程的PGID设置为pgid</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	pid：进程号</span></span><br><span class="line"><span class="comment">	pgid：进程组号</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回0，失败返回-1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>如果pid和pgid相同，则由pid指定的进程将被设置为进程组首领；如果pid为0，则表示设置当前进程的PGID为pgid；如果pgid为0，则使用pid作为目标PGID。</p>
<p>一个进程只能设置自己或者其子进程的PGID。并且，当子进程调用exec系列函数后，我们也不能再在父进程中对它设置PGID。</p>
<h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>一些有关联的进程组将形成一个会话（session）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜unistd.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">setsid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：创建一个会话</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回新的进程组的PGID，失败则返回-1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>该函数不能由进程组的首领进程调用，否则将产生一个错误。对于非组首领的进程，调用该函数不仅创建新会话，而且有如下额外效果：</p>
<ul>
<li>调用进程成为会话的首领，此时该进程是新会话的唯一成员。</li>
<li>新建一个进程组，其PGID就是调用进程的PID，调用进程成为该组的首领。</li>
<li>调用进程将甩开终端（如果有的话）。</li>
</ul>
<p>Linux进程并未提供所谓会话ID（SID）的概念，但Linux系统认为它等于会话首领所在的进程组的PGID，并提供了如下函数来读取SID：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜unistd.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">getsid</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="用ps命令查看进程关系"><a href="#用ps命令查看进程关系" class="headerlink" title="用ps命令查看进程关系"></a>用ps命令查看进程关系</h3><p>执行ps命令可查看进程、进程组和会话之间的关系：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">ps-o pid,ppid,pgid,sid,comm|less</span></span><br><span class="line">PID PPID PGID SID COMMAND </span><br><span class="line">1943 1942 1943 1943 bash </span><br><span class="line">2298 1943 2298 1943 ps</span><br><span class="line">2299 1943 2298 1943 less</span><br></pre></td></tr></table></figure>

<p>bash shell下执行ps和less命令，因此以ps和less命令的父进程是bash命令，这可以从PPID（父进程PID）一列看出。这3条命令创建了1个会话（SID是1943）和2个进程组（PGID分别是1943和2298）。bash命令的PID、PGID和SID都相同，很明显它既是会话的首领，也是组1943的首领。ps命令则是组2298的首领，因为其PID也是2298。</p>
<p>进程间关系：</p>
<img src="/posts/image-20220726214000802.png" alt="image-20220726214000802" style="zoom:67%;">

<h2 id="系统资源限制"><a href="#系统资源限制" class="headerlink" title="系统资源限制"></a>系统资源限制</h2><p>读取和设置Linux系统资源限制的函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/resource.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getrlimit</span><span class="params">(<span class="keyword">int</span> resource, struct rlimit* rlim)</span></span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：获取系统资源限制</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	resource：指定资源限制类型，见表7-1</span></span><br><span class="line"><span class="comment">	rlim：指向rlimit结构体</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败则返回-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setrlimit</span><span class="params">(<span class="keyword">int</span> resource, <span class="keyword">const</span> struct rlimit* rlim)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：设置系统资源限制</span></span><br><span class="line"><span class="comment">参数，返回值：参考getrlimit</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rlimit结构体的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> &#123;</span></span><br><span class="line">    <span class="keyword">rlim_t</span> rlim_cur; <span class="comment">// 描述资源级别，指定资源的软限制，软限制是一个建议性的、最好不要超越的限制，如果超越的话，系统可能向进程发送信号以终止其运行。</span></span><br><span class="line">    <span class="keyword">rlim_t</span> rlim_max; <span class="comment">// 指定资源的硬限制，软限制的上限，只有以root身份运行的程序才能增加硬限制</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/20220726/image-20220726214838702.png" alt="image-20220726214838702"></p>
<h2 id="改变工作目录和根目录"><a href="#改变工作目录和根目录" class="headerlink" title="改变工作目录和根目录"></a>改变工作目录和根目录</h2><p>一般来说，Web服务器的逻辑根目录并非文件系统的根目录“/”，而是站点的根目录（对于Linux的Web服务来说，该目录一般是/var/www/）。</p>
<p>获取进程当前工作目录的改变进程工作目录的函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜unistd.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getcwd</span><span class="params">(<span class="keyword">char</span>* buf, <span class="keyword">size_t</span> size)</span></span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：获取当前工作目录</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	buf：指向的内存存储当前工作路径的绝对路径名</span></span><br><span class="line"><span class="comment">	size：buf路径的长度</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	如果当前工作目录的绝对路径的长度（再加上一个空结束字符“\0”）超过了size，则getcwd将返回NULL，并设置errno为 ERANGE；</span></span><br><span class="line"><span class="comment">	如果buf为NULL并且size非0，则getcwd可能在内部使用 malloc动态分配内存，并将进程的当前工作目录存储在其中。（需自己释放getcwd在内部创建的这块内存）；</span></span><br><span class="line"><span class="comment">	成功返回一个指向目标存储区的指针，失败返回NULL。	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* path)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：修改当前工作路径</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	path：指定要切换到的目标目录</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败时返回-1并设置errno</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chroot</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* path)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：修改进程根目录</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	path：指定要切换到的目标根目录</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败时返回-1并设置errno</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>chroot并不改变进程的当前工作目录，所以调用chroot之后，仍然需要使用chdir(“/”)来将工作目录切换至新的根目录。</p>
<p>改变进程的根目录之后，程序可能无法访问类似/dev的文件（和目录），因为这些文件（和目录）并非处于新的根目录之下。不过好在调用chroot之后，进程原先打开的文件描述符依然生效，所以可以利用这些早先打开的文件描述符，来访问调用chroot之后不能直接访问的文件（和目录），尤其是一些日志文件。此外，只有特权进程才能改变根目录。</p>
<h2 id="服务器程序后台化"><a href="#服务器程序后台化" class="headerlink" title="服务器程序后台化"></a>服务器程序后台化</h2><p>在代码中让一个服务器进程以守护进程的方式运行：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">daemonize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建子进程，父进程关闭，这样可使程序在后台运行</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> ( pid &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( pid &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">exit</span>( <span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 设置文件权掩码。当进程创建新文件（使用open(const char*pathname,int flags,mode_t mode)系统调用）时，文件的权限将是mode＆0777</span></span><br><span class="line">    <span class="built_in">umask</span>( <span class="number">0</span> );</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 创建新的会话，设置本进程为进程组的首领</span></span><br><span class="line">    <span class="keyword">pid_t</span> sid = <span class="built_in">setsid</span>();</span><br><span class="line">    <span class="keyword">if</span> ( sid &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切换工作目录</span></span><br><span class="line">    <span class="keyword">if</span> ( ( <span class="built_in">chdir</span>( <span class="string">&quot;/&quot;</span> ) ) &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Log the failure */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭标准输入设备、标准输出设备和标准错误输出设备</span></span><br><span class="line">    <span class="built_in">close</span>( STDIN_FILENO );</span><br><span class="line">    <span class="built_in">close</span>( STDOUT_FILENO );</span><br><span class="line">    <span class="built_in">close</span>( STDERR_FILENO );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭其他已经打开的文件描述符，代码省略</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 将标准输入、标准输出和标准错误输出都定向到/dev/null文件</span></span><br><span class="line">    <span class="built_in">open</span>( <span class="string">&quot;/dev/null&quot;</span>, O_RDONLY );</span><br><span class="line">    <span class="built_in">open</span>( <span class="string">&quot;/dev/null&quot;</span>, O_RDWR );</span><br><span class="line">    <span class="built_in">open</span>( <span class="string">&quot;/dev/null&quot;</span>, O_RDWR );</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上，Linux提供了完成同样功能的库函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜unistd.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">daemon</span><span class="params">(<span class="keyword">int</span> nochdir, <span class="keyword">int</span> noclose)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	nochdir：用于指定是否改变工作目录，传值为0，则工作目录被设置为“/”（根目录），否则继续使用当前工作目录。</span></span><br><span class="line"><span class="comment">	noclose：参数为0时，标准输入、标准输出和标准错误输出都被重定向到/dev/null文件，否则依然使用原来的设备。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败 则返回-1并设置errno</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux高级I/O函数</title>
    <url>/posts/4131876a.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>常用Linux网络编程相关的高级I/O函数：</p>
<ul>
<li>用于创建文件描述符的函数，包括pipe、dup/dup2函数</li>
<li>用于读写数据的函数，包括readv/writev、sendfile、mmap/munmap、splice和tee函数</li>
<li>用于控制I/O行为和属性的函数，包括fctnl函数</li>
</ul>
<h2 id="pipe函数"><a href="#pipe函数" class="headerlink" title="pipe函数"></a>pipe函数</h2><p>pipe函数：创建一个管道，以实现进程间的通信。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜unistd.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> fd[<span class="number">2</span>])</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：创建管道的两端fd[0]和fd[1]，向fd[1]写入的数据可以从fd[0]读出。fd[0]只能用于从管道读出数据，fd[1]只能用于向管道写入数据，不可以反过来用。</span></span><br><span class="line"><span class="comment">如果要实现双向传输，需要建立两个管道。</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	fd[2]：包含两个int型的数组指针（传出参数）</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回0，并将一对打开的文件描述符值，填入参数指向的数组；</span></span><br><span class="line"><span class="comment">	失败返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>默认情况下，一对文件描述符都是阻塞的。如果用read系统调用来读取一个空的管道，则read将被阻塞，直到管道内有数据可读；如果用write系统调用来往一个满的管道中写入数据，则write亦将被阻塞，直到管道有足够多的空闲空间可用。<br>如果应用程序将fd[0]和fd[1]都设置为非阻塞的，则read和write会有不同的行为。</p>
<p>如果写端fd[1]的引用计数减少到0，表面没有任何进程需要向管道内写入数据，则该管道的读端fd[0]和read操作将返回0，即读取到了文件结束标记EOF。</p>
<p>如果读端fd[0]的引用计数减少到0，表面没有任何进程需要从管道内读取数据，则该管道的写端fd[1]和write操作将失败，并引发SIGPIPE信号。</p>
<p>管道内部传输的数据是字节流。管道容量的大小默认是65536字节。可以使用fcntl函数来修改管道容量。</p>
<p>socket的基础API中有一个socketpair函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/types.h＞ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞ </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socketpair</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol, <span class="keyword">int</span> fd[<span class="number">2</span>])</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：创建双向管道，这对文件描述符都是既可读又可写的。</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	domain：底层的协议族。只能使用UNIX本地域协议族AF_UNIX，仅能在本地使用双向管道。</span></span><br><span class="line"><span class="comment">	type：指定服务类型。</span></span><br><span class="line"><span class="comment">		SOCK_STREAM（TCP）、SOCK_UGRAM（UDP）、SOCK_NONBLOCK（非阻塞的）、SOCK_CLOEXEC</span></span><br><span class="line"><span class="comment">	protocol：选择协议，通常由前两个参数决定。</span></span><br><span class="line"><span class="comment">		设置为0，使用默认协议</span></span><br><span class="line"><span class="comment">	fd[2]：指向两个int型整数。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回0，并将一对打开的文件描述符值，填入参数指向的数组；</span></span><br><span class="line"><span class="comment">	失败返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="dup和dup2函数"><a href="#dup和dup2函数" class="headerlink" title="dup和dup2函数"></a>dup和dup2函数</h2><p>把标准输入重定向到一个文件，或者把标准输出重定向到一个网络连接。通过用于复制文件描述符的dup或dup2函数实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜unistd.h＞ </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup</span><span class="params">(<span class="keyword">int</span> file_descriptor)</span></span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：复制文件描述符</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	file_descriptor：旧的文件描述符</span></span><br><span class="line"><span class="comment">返回值：成功，返回新的文件描述符；失败，返回-1</span></span><br><span class="line"><span class="comment">	fd = 3, int fd1 = dup(fd);</span></span><br><span class="line"><span class="comment">	fd指向a.txt, fd1也指向a.txt，从空闲的文件描述符表中找一个最小的，作为新的拷贝的文件描述符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2</span><span class="params">(<span class="keyword">int</span> file_descriptor_one, <span class="keyword">int</span> file_descriptor_two)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：重定向文件描述符</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	file_descriptor_one：旧的文件描述符，必须是一个有效的文件描述符</span></span><br><span class="line"><span class="comment">	file_descriptor_two：新的文件描述符，和file_descriptor_one相同，相当于什么都没做</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功，返回新的文件描述符；失败，返回-1</span></span><br><span class="line"><span class="comment">	file_descriptor_one 指向a.txt，file_descriptor_two 指向b.txt，</span></span><br><span class="line"><span class="comment">	调用函数成功后：file_descriptor_two 和b.txt 做close，file_descriptor_two 指向a.txt</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>注意：通过dup和dup2创建的文件描述符并不继承原文件描述符的属性，比如close-on-exec和non-blocking等。</p>
<p>利用dup函数实现了一个基本的CGI服务器：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6-1testdup.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket地址结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;address.sin_addr );</span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建TCP类型的socket</span></span><br><span class="line">    <span class="keyword">int</span> sock = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">assert</span>( sock &gt;= <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">bind</span>( sock, ( struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听socket连接</span></span><br><span class="line">    ret = <span class="built_in">listen</span>( sock, <span class="number">5</span> );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端socket地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_addrlength = <span class="built_in"><span class="keyword">sizeof</span></span>( client );</span><br><span class="line">    <span class="comment">// 接受客户端的连接</span></span><br><span class="line">    <span class="keyword">int</span> connfd = <span class="built_in">accept</span>( sock, ( struct sockaddr* )&amp;client, &amp;client_addrlength );</span><br><span class="line">    <span class="keyword">if</span> ( connfd &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;errno is: %d\n&quot;</span>, errno );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;   <span class="comment">// 接受连接成功</span></span><br><span class="line">        <span class="built_in">close</span>( STDOUT_FILENO ); <span class="comment">// 关闭标准输出文件描述符（STDOUT_FILENO值为1）</span></span><br><span class="line">        <span class="built_in">dup</span>( connfd ); <span class="comment">// 复制connfd，这里dup返回值实际上是1，即之前关闭的标准输出文件描述符的值</span></span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;abcd\n&quot;</span> ); <span class="comment">// 服务器输出到标准输出的内容，会直接发送到与客户连接对应的socket上</span></span><br><span class="line">        <span class="comment">// 此printf调用的输出将被客户端获得（而不是显示在服务器 程序的终端上）</span></span><br><span class="line">        <span class="built_in">close</span>( connfd );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( sock ); <span class="comment">// 关闭本地连接</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="readv和writev函数"><a href="#readv和writev函数" class="headerlink" title="readv和writev函数"></a>readv和writev函数</h2><p>readv函数：将数据从文件描述符读到分散的内存块中，分散读。<br>writev函数：将多块分散的内存数据一并写入文件描述符中，集中写。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/uio.h＞</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">readv</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> struct iovec* vector, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	fd：目标文件描述符</span></span><br><span class="line"><span class="comment">	vector：指向iovec结构数组，该结构体描述一块内存区</span></span><br><span class="line"><span class="comment">	count：vector数组的长度，即有多少内存数据需要从fd读出。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回读出fd的字节数，失败则返回-1并设置errno，简化版的recvmsg函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">writev</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> struct iovec* vector, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	fd：目标文件描述符</span></span><br><span class="line"><span class="comment">	vector：指向iovec结构数组，该结构体描述一块内存区</span></span><br><span class="line"><span class="comment">	count：vector数组的长度，即有多少内存数据需要写入到fd。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回写入fd的字节数，失败则返回-1并设置errno，简化版的sendmsg函数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>Web服务器上的集中写：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6-2testwritev.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/uio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两种HTTP状态码和状态信息</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* status_line[<span class="number">2</span>] = &#123; <span class="string">&quot;200 OK&quot;</span>, <span class="string">&quot;500 Internal server error&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number filename\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] );</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* file_name = argv[<span class="number">3</span>]; <span class="comment">// 将目标文件作为程序的第三个参数传入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;address.sin_addr );</span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">int</span> sock = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">assert</span>( sock &gt;= <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket地址信息</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">bind</span>( sock, ( struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听socket连接</span></span><br><span class="line">    ret = <span class="built_in">listen</span>( sock, <span class="number">5</span> );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建客户端socket地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_addrlength = <span class="built_in"><span class="keyword">sizeof</span></span>( client );</span><br><span class="line">    <span class="comment">// 接受socket连接</span></span><br><span class="line">    <span class="keyword">int</span> connfd = <span class="built_in">accept</span>( sock, ( struct sockaddr* )&amp;client, &amp;client_addrlength );</span><br><span class="line">    <span class="keyword">if</span> ( connfd &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;errno is: %d\n&quot;</span>, errno );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;   <span class="comment">// 接受连接成功</span></span><br><span class="line">        <span class="comment">// 设置缓冲区，用于保存HTTP应答的状态行、头部字段和一个空行</span></span><br><span class="line">        <span class="keyword">char</span> header_buf[ BUFFER_SIZE ]; </span><br><span class="line">        <span class="built_in">memset</span>( header_buf, <span class="string">&#x27;\0&#x27;</span>, BUFFER_SIZE );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>* file_buf; <span class="comment">// 用于存放目标文件内容的应用程序缓存</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">file_stat</span>;</span> <span class="comment">// 用于获取目标文件的属性，比如是否为目录，文件大小等</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> valid = <span class="literal">true</span>; <span class="comment">// 记录目标文件是否是有效文件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>; <span class="comment">// 缓存区header_buf目前已经使用了多少字节的空间</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">stat</span>( file_name, &amp;file_stat ) &lt; <span class="number">0</span> ) <span class="comment">// 目标文件不存在</span></span><br><span class="line">        &#123;</span><br><span class="line">            valid = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( <span class="built_in">S_ISDIR</span>( file_stat.st_mode ) ) <span class="comment">// 目标文件是一个目录</span></span><br><span class="line">            &#123;</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( file_stat.st_mode &amp; S_IROTH ) <span class="comment">// 当前用户有读取目标文件的权限</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// *动态分配缓存区file_buf，并指定其大小为目标文件的大小file_stat.st_size加1，</span></span><br><span class="line">                <span class="comment">// 然后将目标文件读入缓存区file_buf中</span></span><br><span class="line">                <span class="keyword">int</span> fd = <span class="built_in">open</span>( file_name, O_RDONLY );</span><br><span class="line">                file_buf = <span class="keyword">new</span> <span class="keyword">char</span> [ file_stat.st_size + <span class="number">1</span> ];</span><br><span class="line">                <span class="built_in">memset</span>( file_buf, <span class="string">&#x27;\0&#x27;</span>, file_stat.st_size + <span class="number">1</span> );</span><br><span class="line">                <span class="keyword">if</span> ( <span class="built_in">read</span>( fd, file_buf, file_stat.st_size ) &lt; <span class="number">0</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    valid = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>( valid ) <span class="comment">// 如果目标文件有效，则发送正常的HTTP应答</span></span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="comment">// 将HTTP应答的状态行、“Content-Length”头部字段和一个空行依次 加入header_buf中</span></span><br><span class="line">            ret = <span class="built_in">snprintf</span>( header_buf, BUFFER_SIZE<span class="number">-1</span>, <span class="string">&quot;%s %s\r\n&quot;</span>, <span class="string">&quot;HTTP/1.1&quot;</span>, status_line[<span class="number">0</span>] );</span><br><span class="line">            len += ret;</span><br><span class="line">            ret = <span class="built_in">snprintf</span>( header_buf + len, BUFFER_SIZE<span class="number">-1</span>-len, </span><br><span class="line">                             <span class="string">&quot;Content-Length: %d\r\n&quot;</span>, file_stat.st_size );</span><br><span class="line">            len += ret;</span><br><span class="line">            ret = <span class="built_in">snprintf</span>( header_buf + len, BUFFER_SIZE<span class="number">-1</span>-len, <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;\r\n&quot;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 利用writev将header_buf和file_buf的内容一并写出</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iv</span>[2];</span></span><br><span class="line">            iv[ <span class="number">0</span> ].iov_base = header_buf;</span><br><span class="line">            iv[ <span class="number">0</span> ].iov_len = <span class="built_in">strlen</span>( header_buf );</span><br><span class="line">            iv[ <span class="number">1</span> ].iov_base = file_buf;</span><br><span class="line">            iv[ <span class="number">1</span> ].iov_len = file_stat.st_size;</span><br><span class="line">            ret = <span class="built_in">writev</span>( connfd, iv, <span class="number">2</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;   <span class="comment">// 如果目标文件无效，则通知客户端服务器发生了“内部错误”</span></span><br><span class="line">            ret = <span class="built_in">snprintf</span>( header_buf, BUFFER_SIZE<span class="number">-1</span>, <span class="string">&quot;%s %s\r\n&quot;</span>, <span class="string">&quot;HTTP/1.1&quot;</span>, status_line[<span class="number">1</span>] );</span><br><span class="line">            len += ret;</span><br><span class="line">            ret = <span class="built_in">snprintf</span>( header_buf + len, BUFFER_SIZE<span class="number">-1</span>-len, <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;\r\n&quot;</span> );</span><br><span class="line">            <span class="built_in">send</span>( connfd, header_buf, <span class="built_in">strlen</span>( header_buf ), <span class="number">0</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>( connfd );</span><br><span class="line">        <span class="keyword">delete</span> [] file_buf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( sock );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="sendfile函数"><a href="#sendfile函数" class="headerlink" title="sendfile函数"></a>sendfile函数</h2><p>sendfile函数：在两个文件描述符之间直接传递数据（完全在内核中操作），避免了内核缓冲区和用户缓冲区之间的数据拷贝，效率很高，这被称为零拷贝。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/sendfile.h＞</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sendfile</span><span class="params">(<span class="keyword">int</span> out_fd, <span class="keyword">int</span> in_fd, <span class="keyword">off_t</span>* offset, <span class="keyword">size_t</span> count)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	out_fd：待写入内容的文件描述符</span></span><br><span class="line"><span class="comment">	in_fd：待读出内容的文件描述符</span></span><br><span class="line"><span class="comment">	offset：指定从读入文件流的哪个位置开始读，若为空，则使用读入文件流默认的起始位置</span></span><br><span class="line"><span class="comment">	count：指定在文件描述符in_fd和out_fd之间传输的字节数</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回传输的字节数，失 败则返回-1并设置errno</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>注：in_fd必须是支持类似mmap函数的文件描述符，即它必须指向真实的文件，不能是socket和管道；out_fd必须是一个socket。</p>
<p>利用sendfile函数将服务器上的一个文件传送给客户端：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6-3testsendfile.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sendfile.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number filename\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] );</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* file_name = argv[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开本地文件</span></span><br><span class="line">    <span class="keyword">int</span> filefd = <span class="built_in">open</span>( file_name, O_RDONLY );</span><br><span class="line">    <span class="built_in">assert</span>( filefd &gt; <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取目标文件属性</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat_buf</span>;</span></span><br><span class="line">    <span class="built_in">fstat</span>( filefd, &amp;stat_buf );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;address.sin_addr );</span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">int</span> sock = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">assert</span>( sock &gt;= <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命名socket</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">bind</span>( sock, ( struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听socket连接</span></span><br><span class="line">    ret = <span class="built_in">listen</span>( sock, <span class="number">5</span> );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端socket地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_addrlength = <span class="built_in"><span class="keyword">sizeof</span></span>( client );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收连接</span></span><br><span class="line">    <span class="keyword">int</span> connfd = <span class="built_in">accept</span>( sock, ( struct sockaddr* )&amp;client, &amp;client_addrlength );</span><br><span class="line">    <span class="keyword">if</span> ( connfd &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;errno is: %d\n&quot;</span>, errno );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="comment">// 接收连接成功，使用sendfile发送数据</span></span><br><span class="line">        <span class="built_in">sendfile</span>( connfd, filefd, <span class="literal">NULL</span>, stat_buf.st_size );</span><br><span class="line">        <span class="built_in">close</span>( connfd ); <span class="comment">// 关闭客户端连接</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( sock ); <span class="comment">// 关闭本地连接</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将目标文件作为第3个参数传递给服务器程序，客户telnet到该服务器上即可获得该文件。<br>与6-2estwritev.cpp相比，6-3testsendfile.cpp没有为目标文件分布任何用户空间的缓存，也没有执行读取文件的操作，同样实现了文件的发送，显然效率更高。</p>
<h2 id="mmap和munmap函数"><a href="#mmap和munmap函数" class="headerlink" title="mmap和munmap函数"></a>mmap和munmap函数</h2><p>mmap函数：用于申请一段内存空间。可以将这段内存作为进程间通信的共享内存，也可以将文件直接映射到其中。<br>munmap函数：释放由mmap创建的这段内存空间。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/mman.h＞ </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">mmap</span><span class="params">(<span class="keyword">void</span>* start, <span class="keyword">size_t</span> length, <span class="keyword">int</span> prot, <span class="keyword">int</span> flags, <span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset)</span></span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：申请内存空间，以实现进程间共享内存</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	start：允许用户使用某个特定的地址作为这段内存的起始地址，设置成NULL，则系统自动分配一个地址</span></span><br><span class="line"><span class="comment">	length：指定内存的长度</span></span><br><span class="line"><span class="comment">	prot：设置内存段的访问权限，取值有：</span></span><br><span class="line"><span class="comment">		PROT_READ，内存段可读</span></span><br><span class="line"><span class="comment">		PROT_WRITE，内存段可写</span></span><br><span class="line"><span class="comment">		PROT_EXEC，内存段可执行</span></span><br><span class="line"><span class="comment">		PROT_NONE，内存段不能被访问</span></span><br><span class="line"><span class="comment">	flags：控制内存段内容被修改后程序的行为，见表6-1按位或</span></span><br><span class="line"><span class="comment">		（MAP_SHARED和MAP_PRIVATE是互斥的，不能同时指定）</span></span><br><span class="line"><span class="comment">	fd：被映射文件对应的文件描述符</span></span><br><span class="line"><span class="comment">	offset：设置从文件的何处开始映射</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回指向目标内存区域的指针，失败则返回 MAP_FAILED（(void*)-1）并设置errno</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">munmap</span><span class="params">(<span class="keyword">void</span>* start,<span class="keyword">size_t</span> length)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：释放空间</span></span><br><span class="line"><span class="comment">参数：参考mmap</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败则返回-1并设置errno。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><img src="/20220725/image-20220725234309852.png" alt="image-20220725234309852"></p>
<h2 id="splice函数"><a href="#splice函数" class="headerlink" title="splice函数"></a>splice函数</h2><p>splice函数：用于在两个文件描述符之间移动数据，也是零拷贝操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜fcntl.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">splice</span><span class="params">(<span class="keyword">int</span> fd_in, <span class="keyword">loff_t</span>* off_in, <span class="keyword">int</span> fd_out, <span class="keyword">loff_t</span>* off_out, <span class="keyword">size_t</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	fd_in：待输入数据的文件描述符</span></span><br><span class="line"><span class="comment">		如果fd_in是一个管道文件 描述符，那么off_in参数必须被设置为NULL；</span></span><br><span class="line"><span class="comment">	off_in：从输入数据流的何处开始读取数据，设置为NULL表示从输入数据流的当前偏移位置读入</span></span><br><span class="line"><span class="comment">	fd_out：输出数据流的文件描述符</span></span><br><span class="line"><span class="comment">	off_out：输出数据流的偏移量</span></span><br><span class="line"><span class="comment">	len：指定移动数据的长度</span></span><br><span class="line"><span class="comment">	flags：控制数据如何移动，它可以被设置为表6-2中的某些值的按位或</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回移动字节的数量。可能返回0，表示没有数据需要移动（从管道中读取数据（fd_in是管道文件描述 符）而该管道没有被写入任何数据）；</span></span><br><span class="line"><span class="comment">	失败返回-1并设置 errno</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>使用splice函数时，fd_in和fd_out必须至少有一个是管道文件描述符。</p>
<p><img src="/20220725/image-20220725234325910.png" alt="image-20220725234325910"></p>
<p><img src="/20220725/image-20220725234520263.png" alt="image-20220725234520263"></p>
<p>使用splice函数来实现一个零拷贝的回射服务器，它将客户端发送的数据原样返回给客户端：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6-4testsplice.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;address.sin_addr );</span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sock = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">assert</span>( sock &gt;= <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">bind</span>( sock, ( struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听连接</span></span><br><span class="line">    ret = <span class="built_in">listen</span>( sock, <span class="number">5</span> );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_addrlength = <span class="built_in"><span class="keyword">sizeof</span></span>( client );</span><br><span class="line">    <span class="comment">// 接收连接</span></span><br><span class="line">    <span class="keyword">int</span> connfd = <span class="built_in">accept</span>( sock, ( struct sockaddr* )&amp;client, &amp;client_addrlength );</span><br><span class="line">    <span class="keyword">if</span> ( connfd &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;errno is: %d\n&quot;</span>, errno );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;   <span class="comment">// 接收连接成功</span></span><br><span class="line">        <span class="keyword">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line">        ret = <span class="built_in">pipe</span>( pipefd ); <span class="comment">// 创建管道</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将connfd上流入的客户数据定向到管道中，splice函数将客户端的内容读入到pipefd[1]中</span></span><br><span class="line">        ret = <span class="built_in">splice</span>( connfd, <span class="literal">NULL</span>, pipefd[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">32768</span>, SPLICE_F_MORE | SPLICE_F_MOVE ); </span><br><span class="line">        <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将管道的输出定向到connfd客户连接文件描述符，splice函数从pipefd[0]中读出该内容到客户端</span></span><br><span class="line">        ret = <span class="built_in">splice</span>( pipefd[<span class="number">0</span>], <span class="literal">NULL</span>, connfd, <span class="literal">NULL</span>, <span class="number">32768</span>, SPLICE_F_MORE | SPLICE_F_MOVE );</span><br><span class="line">        <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line">        <span class="built_in">close</span>( connfd );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( sock );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过splice函数将客户端的内容读入到pipefd[1]中，然后再使用splice函数从pipefd[0]中读出该内容到客户端，从而实现了简单高效的回射服务。整个过程未执行recv/send操作，因此也未涉及用户空间和内核空间之间的数据拷贝。</p>
<h2 id="tee函数"><a href="#tee函数" class="headerlink" title="tee函数"></a>tee函数</h2><p>tee函数：在两个管道文件描述符之间复制数据，也是零拷贝操作。它不消耗数据，因此源文件描述符上的数据仍然可以用于后续的读操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜fcntl.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">tee</span><span class="params">(<span class="keyword">int</span> fd_in, <span class="keyword">int</span> fd_out, <span class="keyword">size_t</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	fd_in：待输入数据的管道文件描述符</span></span><br><span class="line"><span class="comment">	fd_out：管道文件描述符</span></span><br><span class="line"><span class="comment">	len：指定移动数据的长度</span></span><br><span class="line"><span class="comment">	flags：控制数据如何移动</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回在两个文件描述符之间复制的数据数量（字节数）。</span></span><br><span class="line"><span class="comment">	返回0表示没有复制任何数据。</span></span><br><span class="line"><span class="comment">	失败时返回-1并设置 errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>利用tee函数和splice函数，实现Linux下tee程序的基本功能（同时输出数据到终端和文件的程序，不要和tee函数混淆）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6-5testtee.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ( argc != <span class="number">2</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>( <span class="string">&quot;usage: %s &lt;file&gt;\n&quot;</span>, argv[<span class="number">0</span>] );</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 打开本地文件</span></span><br><span class="line">	<span class="keyword">int</span> filefd = <span class="built_in">open</span>( argv[<span class="number">1</span>], O_CREAT | O_WRONLY | O_TRUNC, <span class="number">0666</span> );</span><br><span class="line">	<span class="built_in">assert</span>( filefd &gt; <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建管道</span></span><br><span class="line">	<span class="keyword">int</span> pipefd_stdout[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="built_in">pipe</span>( pipefd_stdout );</span><br><span class="line">	<span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> pipefd_file[<span class="number">2</span>];</span><br><span class="line">        ret = <span class="built_in">pipe</span>( pipefd_file );</span><br><span class="line">	<span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">	<span class="comment">//close( STDIN_FILENO );</span></span><br><span class="line">	<span class="comment">// dup2( pipefd_stdout[1], STDIN_FILENO );</span></span><br><span class="line">	<span class="comment">//write( pipefd_stdout[1], &quot;abc\n&quot;, 4 );</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将标准输入内容输入管道pipefd_stdout</span></span><br><span class="line">	ret = <span class="built_in">splice</span>( STDIN_FILENO, <span class="literal">NULL</span>, pipefd_stdout[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">32768</span>, SPLICE_F_MORE | SPLICE_F_MOVE );</span><br><span class="line">	<span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将管道pipefd_stdout的输出复制到管道pipefd_file的输入端</span></span><br><span class="line">	ret = <span class="built_in">tee</span>( pipefd_stdout[<span class="number">0</span>], pipefd_file[<span class="number">1</span>], <span class="number">32768</span>, SPLICE_F_NONBLOCK ); </span><br><span class="line">	<span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将管道pipefd_file的输出定向到文件描述符filefd上，从而将标准输入的内容写入文件</span></span><br><span class="line">	ret = <span class="built_in">splice</span>( pipefd_file[<span class="number">0</span>], <span class="literal">NULL</span>, filefd, <span class="literal">NULL</span>, <span class="number">32768</span>, SPLICE_F_MORE | SPLICE_F_MOVE );</span><br><span class="line">	<span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将管道pipefd_stdout的输出定向到标准输出，其内容和写入文件的内容完全一致</span></span><br><span class="line">	ret = <span class="built_in">splice</span>( pipefd_stdout[<span class="number">0</span>], <span class="literal">NULL</span>, STDOUT_FILENO, <span class="literal">NULL</span>, <span class="number">32768</span>, SPLICE_F_MORE | SPLICE_F_MOVE );</span><br><span class="line">	<span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">	<span class="built_in">close</span>( filefd );</span><br><span class="line">        <span class="built_in">close</span>( pipefd_stdout[<span class="number">0</span>] );</span><br><span class="line">        <span class="built_in">close</span>( pipefd_stdout[<span class="number">1</span>] );</span><br><span class="line">        <span class="built_in">close</span>( pipefd_file[<span class="number">0</span>] );</span><br><span class="line">        <span class="built_in">close</span>( pipefd_file[<span class="number">1</span>] );</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="fcntl函数"><a href="#fcntl函数" class="headerlink" title="fcntl函数"></a>fcntl函数</h2><p>fcntl函数：提供了对文件描述符的各种控制操作。对于控制文件描述符常用的属性和行为，fcntl函数是由POSIX规范指定的首选方法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜fcntl.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd,…)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：获取或修改文件的属性</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	fd：需要操作的文件描述符</span></span><br><span class="line"><span class="comment">	cmd：对文件描述符进行如何操作</span></span><br><span class="line"><span class="comment">		- F_DUPFD：复制第一个参数文件描述符fd，得到一个新的文件描述符（返回值）</span></span><br><span class="line"><span class="comment">			int ret = fnctl(fd, F_DUPFD);</span></span><br><span class="line"><span class="comment">		- F_GETFL：获取指定的文件描述符的文件状态flag（与open函数传递的文件权限flag是相同的）</span></span><br><span class="line"><span class="comment">		- F_SETFL：设置文件描述符的文件状态flag</span></span><br><span class="line"><span class="comment">            必选项：O_RONLY, O_WRONLY, O_RDWR 不可以被修改（文件访问、创建权限）</span></span><br><span class="line"><span class="comment">            可选项：O_APPEND, O_NONBLOCK</span></span><br><span class="line"><span class="comment">                O_APPEND 表示追加数据</span></span><br><span class="line"><span class="comment">                O_NONBLOCK 设置成非阻塞</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>在网络编程中，fcntl函数通常用来将一个文件描述符设置为非阻塞的。</p>
<p>将文件描述符设置成非阻塞的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setnonblocking</span><span class="params">(<span class="keyword">int</span> fd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> old_option = <span class="built_in">fcntl</span>(fd, F_GETFL); <span class="comment">/*获取文件描述符旧的状态标志*/</span> </span><br><span class="line">    <span class="keyword">int</span> new_option = old_option | O_NONBLOCK; <span class="comment">/*设置非阻塞标志*/</span> </span><br><span class="line">    <span class="built_in">fcntl</span>(fd,F_SETFL,new_option); </span><br><span class="line">    <span class="keyword">return</span> old_option; <span class="comment">/*返回文件描述符旧的状态标志，以便日后恢复该状态标志*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/20220725/image-20220726152218986.png" alt="image-20220726152218986"></p>
<p><img src="/20220725/image-20220726152238201.png" alt="image-20220726152238201"></p>
<p>SIGIO和SIGURG这两个信号与其他Linux信号不同，它们必须与某个文件描述符相关联方可使用：当被关联的文件描述符可读或可写时，系统将触发SIGIO信号；当被关联的文件描述符（而且必须是一个socket）上有带外数据可读时，系统将触发SIGURG信号。<br>使用SIGIO时，还需要利用fcntl设置其O_ASYNC标志（异步I/O标志，不过SIGIO信号模型并非真正意义上的异步I/O模型）。</p>
]]></content>
      <tags>
        <tag>Linux网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux网络编程基础API</title>
    <url>/posts/47fa327.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>Linux网络API：</p>
<ul>
<li>socket地址API。一个ip地址和端口对(ip, port)。唯一表示使用TCP通信的一端</li>
<li>socket基础API。头文件&lt;sys/socket.h&gt;，包括创建socket、命名socket、监听socket、接受连接、发起连接、读写数据、获取地址信息、检测带外标记，以及读取和设置socket选项。</li>
<li>网络信息API。Linux提供的网络信息API，实现主机名和IP地址之间的转换，以及服务名称和端口号之间的转换。头文件&lt;netdb.h&gt;中。</li>
</ul>
<h2 id="1-socket地址API"><a href="#1-socket地址API" class="headerlink" title="1.socket地址API"></a>1.socket地址API</h2><h3 id="主机字节序和网络字节序"><a href="#主机字节序和网络字节序" class="headerlink" title="主机字节序和网络字节序"></a>主机字节序和网络字节序</h3><ul>
<li>大端字节序：一个整数的高位字节（23～31 bit）存储在内存的低地址处，低位字节（0～7bit）存储在内存的高地址处</li>
<li>小端字节序：整数的高位字节存储在内存的高地址处，而低位字节则存储在内存的低地址处</li>
</ul>
<p><strong>现代PC大多采用小端字节序，因此小端字节序又被称为主机字节序。</strong><br>Linux提供了如下4个函数来完成主机字节序和网络字节序之间的转换：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜netinet/in.h＞ </span></span><br><span class="line"><span class="comment">// host to network long 将长整型（32bit）的主机字节序数据转化为网络字节序数据</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">htonl</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> hostlong)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> <span class="title">htons</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> hostshort)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">ntohl</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> netlong)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> <span class="title">ntohs</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> netshort)</span></span>;</span><br></pre></td></tr></table></figure>

<p>长整型函数通常用来转换IP地址，短整型函数用来转换端口号。</p>
<h3 id="通用socket地址"><a href="#通用socket地址" class="headerlink" title="通用socket地址"></a>通用socket地址</h3><p>结构体sockaddr，定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜bits/socket.h＞ </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sa_family; <span class="comment">// 地址族类型，与协议族类型相对应</span></span><br><span class="line">    <span class="keyword">char</span> sa_data[<span class="number">14</span>]; <span class="comment">// 存放socket地址值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常见协议族与对应的地址族的关系：</p>
<table>
<thead>
<tr>
<th align="center">协议族</th>
<th align="center">地址族</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PF_UNIX</td>
<td align="center">AF_UNIX</td>
<td align="center">UNIX本地域协议族</td>
</tr>
<tr>
<td align="center">PF_INET</td>
<td align="center">AF_INET</td>
<td align="center">TCP/IPv4协议族</td>
</tr>
<tr>
<td align="center">PF_INET6</td>
<td align="center">AF_INET6</td>
<td align="center">TCP/IPv6协议族</td>
</tr>
</tbody></table>
<p>宏<code>PF_*</code>和<code>AF_*</code>都定义在<code>bits/socket.h</code>头文件中，且后者与前者有完全相同的值，所以二者通常混用。</p>
<p>不同的协议族的地址值具有不同的含义和长度。14字节的sa_data根本无法完全容纳多数协议族的地址值。因此，Linux定义了下面这个新的通用socket地址结构体：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜bits/socket.h＞</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> &#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sa_family;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> int__ss_align;</span><br><span class="line">	char__ss_padding[<span class="number">128</span>-<span class="built_in"><span class="keyword">sizeof</span></span>(__ss_align)]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不仅提供了足够大的空间用于存放地址值，而且是内存对齐的（这是<code>__ss_align</code>成员的作用）</p>
<h3 id="专用socket地址"><a href="#专用socket地址" class="headerlink" title="专用socket地址"></a>专用socket地址</h3><p>Linux为各个协议族提供了专门的socket地址结构体。  </p>
<p>UNIX本地域协议族的专用socket地址<code>sockaddr_un</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/un.h＞ </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> &#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sin_family;<span class="comment">/*地址族：AF_UNIX*/</span> </span><br><span class="line">    <span class="keyword">char</span> sun_path[<span class="number">108</span>];<span class="comment">/*文件路径名*/</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>TCP/IP协议族:<code>sockaddr_in</code>(IPV4)和<code>sockaddr_in6</code>(IPV6)地址结构体</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sin_family;<span class="comment">/*地址族：AF_INET*/</span> </span><br><span class="line">    <span class="keyword">u_int16_t</span> sin_port;<span class="comment">/*端口号，要用网络字节序表示*/</span> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span><span class="comment">/*IPv4地址结构体，见下面*/</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> &#123;</span></span><br><span class="line">    <span class="keyword">u_int32_t</span> s_addr;<span class="comment">/*IPv4地址，要用网络字节序表示*/</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in6</span> &#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sin6_family;<span class="comment">/*地址族：AF_INET6*/</span></span><br><span class="line">    <span class="keyword">u_int16_t</span> sin6_port;<span class="comment">/*端口号，要用网络字节序表示*/</span></span><br><span class="line">    <span class="keyword">u_int32_t</span> sin6_flowinfo;<span class="comment">/*流信息，应设置为0*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span> <span class="title">sin6_addr</span>;</span><span class="comment">/*IPv6地址结构体，见下面*/</span> </span><br><span class="line">    <span class="keyword">u_int32_t</span> sin6_scope_id;<span class="comment">/*scope ID，尚处于实验阶段*/</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sa_addr[<span class="number">16</span>];<span class="comment">/*IPv6地址，要用网络字节序表示*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>所有专用socket地址（以及sockaddr_storage）类型的变量在实际使用时都需要转化为通用socket地址类型sockaddr（强制转换即可），因为所有socket编程接口使用的地址参数的类型都是sockaddr。 </p>
<h3 id="IP地址转换函数"><a href="#IP地址转换函数" class="headerlink" title="IP地址转换函数"></a>IP地址转换函数</h3><p>IPV4地址：点分十进制字符串<br>IPV6地址：十六进制字符串<br>编程中需要将他们转化为整数（二进制数）使用，记录日志则相反，需要由整数转化为可读的字符串。</p>
<p>用于用点分十进制字符串表示的IPv4地址和用网络字节序整数表示的IPv4地址之间的转换： </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜arpa/inet.h＞ </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">in_addr_t</span> <span class="title">inet_addr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*strptr)</span></span>; </span><br><span class="line"><span class="comment">// 点分十进制字符串-&gt;网络字节序整数，失败返回INADDR_NONE</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_aton</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*cp,struct in_addr*inp)</span></span>; </span><br><span class="line"><span class="comment">// 功能与inet_addr相同，结果存在inp指向的地址结构（传出参数），成功返回1，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>*<span class="title">inet_ntoa</span><span class="params">(struct in_addr in)</span></span>;</span><br><span class="line"><span class="comment">// 网络字节序整数-&gt;点分十进制字符串。函数内部用一个静态变量存储转化结果，函数的返回值指向该静态内存</span></span><br><span class="line"><span class="comment">// inet_ntoa是不 可重入的，例如：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* szValue1 = <span class="built_in">inet_ntoa</span>(“<span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span>”); </span><br><span class="line"><span class="keyword">char</span>* szValue2 = <span class="built_in">inet_ntoa</span>(“<span class="number">10.194</span><span class="number">.71</span><span class="number">.60</span>”); </span><br><span class="line"><span class="built_in">printf</span>(“address <span class="number">1</span>:%s\n”, szValue1); </span><br><span class="line"><span class="built_in">printf</span>(“address <span class="number">2</span>:%s\n”, szValue2);</span><br><span class="line"><span class="comment">// 返回结果为：</span></span><br><span class="line"><span class="comment">// address1:10.194.71.60 </span></span><br><span class="line"><span class="comment">// address2:10.194.71.60</span></span><br></pre></td></tr></table></figure>

<p>更新函数适用于IPV4和IPV6：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜arpa/inet.h＞</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_pton</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">void</span>* dst)</span></span>;</span><br><span class="line"><span class="comment">// 字符串IP地址src-&gt;网络字节序整数，结果存储在dst指向的内存中</span></span><br><span class="line"><span class="comment">// 参数af：指定地址族，AF_INET或者AF_INET6</span></span><br><span class="line"><span class="comment">// 成功返回1，失败返回0并设置errno</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">inet_ntop</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">const</span> <span class="keyword">void</span>* src, <span class="keyword">char</span>* dst,<span class="keyword">socklen_t</span> cnt)</span></span>;</span><br><span class="line"><span class="comment">// 网络字节序整数-&gt;字符串IP地址src，前三个参数与之前的函数相同</span></span><br><span class="line"><span class="comment">// 参数cnt：指定目标存储单元的大小，定义两个宏帮助指定大小（分别用于IPV4和IPV6）</span></span><br><span class="line"><span class="comment">// 成功返回目标存储单元的地址，失败返回NULL并设置errno</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜netinet/in.h＞</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INET_ADDRSTRLEN 16 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INET6_ADDRSTRLEN 46</span></span><br></pre></td></tr></table></figure>

<h2 id="创建socket"><a href="#创建socket" class="headerlink" title="创建socket"></a>创建socket</h2><p>UNIX/Linux系统中：所有东西都是文件。<br>socket，可读可写、可控制、可关闭的文件描述符。<br>socket系统调用创建一个socket：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/types.h＞</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain,<span class="keyword">int</span> type,<span class="keyword">int</span> protocol)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	domain：底层的协议族。</span></span><br><span class="line"><span class="comment">		PF_INET（IPv4）、 PF_INET6（IPv6）、PF_UNIX（本地域）</span></span><br><span class="line"><span class="comment">	type：指定服务类型。</span></span><br><span class="line"><span class="comment">		SOCK_STREAM（TCP）、SOCK_UGRAM（UDP）、SOCK_NONBLOCK（非阻塞的）、SOCK_CLOEXEC</span></span><br><span class="line"><span class="comment">	protocol：选择协议，通常由前两个参数决定。</span></span><br><span class="line"><span class="comment">		设置为0，使用默认协议</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回一个socket文件描述符，失败返回-1并设置errno</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="命名socket"><a href="#命名socket" class="headerlink" title="命名socket"></a>命名socket</h2><p>命名socket：将一个socket与socket地址绑定。<br>服务器程序中，命名后客户端才知道如何连接它。<br>命名socket的系统调用：bind函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr* my_addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockfd：未命名的sockfd文件描述符</span></span><br><span class="line"><span class="comment">	my_addr：指向socket地址</span></span><br><span class="line"><span class="comment">	addrlen：socket地址的长度</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回0，失败返回-1并设置errno。</span></span><br><span class="line"><span class="comment">	错误：</span></span><br><span class="line"><span class="comment">		EACCES，被绑定的地址是受保护的地址，仅超级用户能够访问。</span></span><br><span class="line"><span class="comment">		EADDRINUSE，被绑定的地址正在使用中。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="监听socket"><a href="#监听socket" class="headerlink" title="监听socket"></a>监听socket</h2><p>创建一个监听队列以存放待处理的客户连接，listen函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockfd：指定被监听的socket</span></span><br><span class="line"><span class="comment">	backlog：提示内核监听队列的最大长度。如果监听队列的长度超过backlog，服务器不受理新的客户连接，客户端收到ECONNREFUSED错误信息。backlog典型值为5</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回0，失败返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>backlog函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5-3testlisten.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> stop = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// SIGTERM信号的处理函数，触发时结束主程序中的循环</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle_term</span><span class="params">( <span class="keyword">int</span> sig )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stop = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// testlisten函数接收三个参数：IP地址，端口号，backlog值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">signal</span>( SIGTERM, handle_term );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number backlog\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>]; <span class="comment">// ip地址</span></span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] ); <span class="comment">// 端口号</span></span><br><span class="line">    <span class="keyword">int</span> backlog = <span class="built_in">atoi</span>( argv[<span class="number">3</span>] ); <span class="comment">// backlog值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sock = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> ); <span class="comment">// 创建ipv4 socket文件描述符</span></span><br><span class="line">    <span class="built_in">assert</span>( sock &gt;= <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span> <span class="comment">// 创建一个ipv4 socket地址</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;address.sin_addr ); <span class="comment">// 字符串ip地址转化为网络字节序整数</span></span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>( port ); <span class="comment">// 主机字节序转化为网络字节序，短整型函数转化端口号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命名socket</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">bind</span>( sock, ( struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听socket</span></span><br><span class="line">    ret = <span class="built_in">listen</span>( sock, backlog );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环等待连接，直到有SIGTERM信号将它中断</span></span><br><span class="line">    <span class="keyword">while</span> ( ! stop )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sleep</span>( <span class="number">1</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( sock ); <span class="comment">// 关闭socket</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器程序testlisten，接受3个参数：IP地址，端口号，backlog值。<br>服务器运行该程序，客户端多次执行telnet命令连接该服务器程序。使用telnet建立连接，执行netstat命令查看服务器上连接的状态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">./testlisten 192.168.1.109 12345 5<span class="comment">#监听12345端口，给backlog传递典型 值5</span></span> </span><br><span class="line"><span class="meta">$</span><span class="bash">telnet 192.168.1.109 12345<span class="comment">#多次执行之</span></span> </span><br><span class="line"><span class="meta">$</span><span class="bash">netstat-nt|grep 12345<span class="comment">#多次执行之</span></span></span><br></pre></td></tr></table></figure>

<p>在监听队列中，处于ESTABLISHED状态的连接只有6个（backlog值加1），其他的连接都处于SYN_RCVD状态。即完整连接最多有（backlog+1）个。在不同的系统上，运行结果会有些差别，不过监听队列中完整连接的上限通常比backlog值略大。</p>
<h2 id="接受连接"><a href="#接受连接" class="headerlink" title="接受连接"></a>接受连接</h2><p>从listen监听队列中接受一个连接，accept函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/types.h＞ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞ </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr*addr, <span class="keyword">socklen_t</span>* addrlen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockfd：执行过listen系统调用的监听socket（处于LISTEN状态的socket，而所有处于ESTABLISHED状态的socket则称为连接socket）</span></span><br><span class="line"><span class="comment">	addr：获取被接受的远端socket地址</span></span><br><span class="line"><span class="comment">	addrlen：socket地址的长度	</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回一个新的连接socket，该socket唯一地标识了被接受的这个连接，服务器可通过读写该socket来与被接受连接对应的客户端通信；</span></span><br><span class="line"><span class="comment">	失败返回-1并设置errno。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>接受一个异常的连接：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5-5testaccept.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>]; <span class="comment">// ipv4地址</span></span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] ); <span class="comment">// 端口号</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span> <span class="comment">// 创建socket地址结构体，传入ip地址和端口号</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;address.sin_addr );</span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sock = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> ); <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="built_in">assert</span>( sock &gt;= <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket地址结构体与socket文件描述符，命名socket</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">bind</span>( sock, ( struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">listen</span>( sock, <span class="number">5</span> ); <span class="comment">// 监听socket</span></span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*暂停20秒以等待客户端连接和相关操作（掉线或者退出）完成*/</span> </span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span> <span class="comment">// 客户端socket地址结构体</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_addrlength = <span class="built_in"><span class="keyword">sizeof</span></span>( client );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// accept接收连接调用，返回值connfd</span></span><br><span class="line">    <span class="keyword">int</span> connfd = <span class="built_in">accept</span>( sock, ( struct sockaddr* )&amp;client, &amp;client_addrlength );</span><br><span class="line">    <span class="keyword">if</span> ( connfd &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;errno is: %d\n&quot;</span>, errno );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 接受连接成功，打印客户端地址和端口号</span></span><br><span class="line">        <span class="keyword">char</span> remote[INET_ADDRSTRLEN ];</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;connected with ip: %s and port: %d\n&quot;</span>, </span><br><span class="line">            <span class="built_in">inet_ntop</span>( AF_INET, &amp;client.sin_addr, remote, INET_ADDRSTRLEN ), <span class="built_in">ntohs</span>( client.sin_port ) );</span><br><span class="line">        <span class="built_in">close</span>( connfd );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( sock ); <span class="comment">// 关闭socket</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器运行testaccept程序，在客户端执行telnet命令连接该服务器的程序：<br>(服务器ip地址：192.168.1.109)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">./testaccept 192.168.1.109 54321<span class="comment">#监听54321端口</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">telnet 192.168.1.109 54321</span></span><br></pre></td></tr></table></figure>

<p>启动telnet客户端程序，立即断开该客户端的网络连接（建立和断开连接的过程要在服务器启动后20秒内完成）。结果发现accept调用能够正常返回，服务器输出如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">connected with ip:192.168.1.108 and port:38545</span><br></pre></td></tr></table></figure>

<p>服务器运行netstat命令查看accept返回socket连接的状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">netstat-nt|grep 54321</span></span><br><span class="line">tcp 0 0 192.168.1.109:54321 192.168.1.108:38545 ESTABLISHED</span><br></pre></td></tr></table></figure>

<p>accept调用对于客户端网络断开毫不知情。重新执行上述过程，不过这次不断开客户端网络连接，而是在建立连接后立即退出客户端程序。这次accept调用同样正常返回。服务器运行netstat命令查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">netstat-nt|grep 54321</span></span><br><span class="line">tcp 1 0 192.168.1.109:54321 192.168.1.108:52070 CLOSE_WAIT</span><br></pre></td></tr></table></figure>

<p>由此可见，accept只是从监听队列中取出连接，而不论连接处于何种状态（如上面的ESTABLISHED状态和CLOSE_WAIT状态），更不关心任何网络状况的变化。</p>
<h2 id="发起连接"><a href="#发起连接" class="headerlink" title="发起连接"></a>发起连接</h2><p>服务器通过listen调用，被动接受连接；客户端通过connect调用，主动与服务器建立连接：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/types.h＞ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr* serv_addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockfd：socket系统调用返回的socket文件描述符</span></span><br><span class="line"><span class="comment">	serv_addr：服务器监听的socket地址</span></span><br><span class="line"><span class="comment">	addrlen：指定地址的长度</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回0，一旦成功建立连接，sockfd就唯一地标识了这个连接，客户端就可以通过读写sockfd来与服务器通信。失败返回-1并设置errno。</span></span><br><span class="line"><span class="comment">	常见错误：</span></span><br><span class="line"><span class="comment">		ECONNREFUSED：目标端口不存在，连接被拒绝</span></span><br><span class="line"><span class="comment">		ETIMEDOUT：连接超时</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h2><p>关闭该连接所对应的socket，通过关闭普通文件描述符的系统调用完成：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜unistd.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	参数fd：待关闭的socket</span></span><br><span class="line"><span class="comment">	close函数将fd的引用计数减1，只有当fd的引用计数为0时，才真正关闭连接。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>多进程程序中，一次fork系统调用默认使父进程中打开的socket的引用计数加1，因此，必须在父进程和子进程中都对该socket执行close调用，才能将连接关闭。</p>
<p>如果无论如何都要立即终止连接（而不是将socket的引用计数减1），可以使用如下的shutdown系统调用（相对于close来说，它是专门为网络编程设计的）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shutdown</span><span class="params">(<span class="keyword">int</span> sockfd,<span class="keyword">int</span> howto)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockfd：待关闭的socket</span></span><br><span class="line"><span class="comment">	howto：决定shutdown的行为，可选择：</span></span><br><span class="line"><span class="comment">		SHUT_RD：关闭sockfd的读，应用程序无法对socket文件描述符执行读操作</span></span><br><span class="line"><span class="comment">		SHUT_WR：关闭sockfd的写，应用程序无法对socket文件描述符指向写操作，连接处于半关闭状态</span></span><br><span class="line"><span class="comment">		SHUT_RDWD：同时关闭sockfd上的读和写</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败则返回-1并设置errno</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>shutdown能够分别关闭socket上的读或写，或者都关闭。而close在关闭连接时只能将socket上的读和写同时关闭。</p>
<h2 id="数据读写"><a href="#数据读写" class="headerlink" title="数据读写"></a>数据读写</h2><h3 id="TCP数据读写"><a href="#TCP数据读写" class="headerlink" title="TCP数据读写"></a>TCP数据读写</h3><p>对文件的读写操作read和write同样适用于socket。用于TCP流数据读写的系统调用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/types.h＞ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞ </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recv</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">recv作用：读取sockfd上的数据</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockfd：要读取的sockfd文件描述符</span></span><br><span class="line"><span class="comment">	buf：指定读缓冲区的位置（传出参数）</span></span><br><span class="line"><span class="comment">	len：缓冲区大小</span></span><br><span class="line"><span class="comment">	flags：通常设置为0</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	可能要多次调用recv，才能读取到完整的数据。</span></span><br><span class="line"><span class="comment">	返回0表示通信对方已经关闭连接，失败返回-1并设置errno</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">send作用：向sockfd上写入数据</span></span><br><span class="line"><span class="comment">	sockfd：要写入数据的sockfd文件描述符</span></span><br><span class="line"><span class="comment">	buf：指定读缓冲区的位置（传出参数）</span></span><br><span class="line"><span class="comment">	len：缓冲区大小</span></span><br><span class="line"><span class="comment">	flags：数据收发的额外控制</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>发送带外数据：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5-6oobsend.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ip地址与端口号</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket地址结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_address</span>;</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;server_address, <span class="built_in"><span class="keyword">sizeof</span></span>( server_address ) );</span><br><span class="line">    server_address.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;server_address.sin_addr );</span><br><span class="line">    server_address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">int</span> sockfd = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">assert</span>( sockfd &gt;= <span class="number">0</span> );</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">connect</span>( sockfd, ( struct sockaddr* )&amp;server_address, <span class="built_in"><span class="keyword">sizeof</span></span>( server_address ) ) &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;connection failed\n&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123; <span class="comment">// 发起连接成功</span></span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;send oob data out\n&quot;</span> );</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* oob_data = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* normal_data = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="comment">// 写入数据发送</span></span><br><span class="line">        <span class="built_in">send</span>( sockfd, normal_data, <span class="built_in">strlen</span>( normal_data ), <span class="number">0</span> );</span><br><span class="line">        <span class="built_in">send</span>( sockfd, oob_data, <span class="built_in">strlen</span>( oob_data ), MSG_OOB ); <span class="comment">// 发送或接受紧急数据</span></span><br><span class="line">        <span class="built_in">send</span>( sockfd, normal_data, <span class="built_in">strlen</span>( normal_data ), <span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( sockfd );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接受带外数据：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5-7oobrecv.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读取ip地址与端口号</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受地址socket</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;address.sin_addr );</span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">int</span> sock = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">assert</span>( sock &gt;= <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket文件描述符与socket地址信息</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">bind</span>( sock, ( struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// socket地址监听</span></span><br><span class="line">    ret = <span class="built_in">listen</span>( sock, <span class="number">5</span> );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端socket地址结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_addrlength = <span class="built_in"><span class="keyword">sizeof</span></span>( client );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听的socket接受连接</span></span><br><span class="line">    <span class="keyword">int</span> connfd = <span class="built_in">accept</span>( sock, ( struct sockaddr* )&amp;client, &amp;client_addrlength );</span><br><span class="line">    <span class="keyword">if</span> ( connfd &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;errno is: %d\n&quot;</span>, errno );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123; <span class="comment">// 接受连接成功</span></span><br><span class="line">        <span class="keyword">char</span> buffer[ BUF_SIZE ]; <span class="comment">// 缓冲区</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取socket中的数据，写入到buffer缓冲区中，打印缓冲区</span></span><br><span class="line">        <span class="built_in">memset</span>( buffer, <span class="string">&#x27;\0&#x27;</span>, BUF_SIZE );</span><br><span class="line">        ret = <span class="built_in">recv</span>( connfd, buffer, BUF_SIZE<span class="number">-1</span>, <span class="number">0</span> );</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;got %d bytes of normal data &#x27;%s&#x27;\n&quot;</span>, ret, buffer );</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>( buffer, <span class="string">&#x27;\0&#x27;</span>, BUF_SIZE );</span><br><span class="line">        ret = <span class="built_in">recv</span>( connfd, buffer, BUF_SIZE<span class="number">-1</span>, MSG_OOB );</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;got %d bytes of oob data &#x27;%s&#x27;\n&quot;</span>, ret, buffer );</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>( buffer, <span class="string">&#x27;\0&#x27;</span>, BUF_SIZE );</span><br><span class="line">        ret = <span class="built_in">recv</span>( connfd, buffer, BUF_SIZE<span class="number">-1</span>, <span class="number">0</span> );</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;got %d bytes of normal data &#x27;%s&#x27;\n&quot;</span>, ret, buffer );</span><br><span class="line"></span><br><span class="line">        <span class="built_in">close</span>( connfd ); <span class="comment">// 关闭socket</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( sock );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在服务器上启动5-7oobrecv.cpp服务器程序testoobrecv，客户端执行5-6oobsend.cpp客户端程序testoobsend，向服务器发送带外数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">./testoobrecv 192.168.1.109 54321 <span class="comment">#在Kongming20上执行服务器程序，监听 54321端口 $./testoobsend 192.168.1.109 54321 #在ernest-laptop上执行客户端程序</span></span> </span><br><span class="line"><span class="meta">$</span><span class="bash">sudo tcpdump-ntx-i eth0 port 54321</span></span><br></pre></td></tr></table></figure>

<p>服务器的输出如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">got 5 bytes of normal data&#x27;123ab&#x27; </span><br><span class="line">got 1 bytes of oob data&#x27;c&#x27; </span><br><span class="line">got 3 bytes of normal data&#x27;123&#x27;</span><br></pre></td></tr></table></figure>

<p>客户端发送给服务器的3字节的带外数据“abc”中，仅有最后一个字符“c”被服务器当成真正的带外数据接收。并且，服务器对正常数据的接收将被带外数据截断，即前一部分正常数据“123ab”和后续的正常数据“123”是不能被一个recv调用全部读出的。</p>
<h3 id="UDP数据读写"><a href="#UDP数据读写" class="headerlink" title="UDP数据读写"></a>UDP数据读写</h3><p>用于UDP数据报读写的系统调用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/types.h＞ </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞ </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recvfrom</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, struct sockaddr* src_addr, <span class="keyword">socklen_t</span>* addrlen)</span></span>; </span><br><span class="line"><span class="comment">/* recvfrom调用</span></span><br><span class="line"><span class="comment">作用：读取sockfd上的数据</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockfd：要读取的socket文件描述符</span></span><br><span class="line"><span class="comment">	buf：指定缓冲区位置</span></span><br><span class="line"><span class="comment">	len：缓冲区的大小</span></span><br><span class="line"><span class="comment">	flags：额外控制</span></span><br><span class="line"><span class="comment">	src_addr：获取发送端的socket的地址</span></span><br><span class="line"><span class="comment">	addrlen：发送端socket地址的大小</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sendto</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, <span class="keyword">const</span> struct sockaddr* dest_addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="comment">/* sendto调用：</span></span><br><span class="line"><span class="comment">作用：向sockfd上写入数据</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockfd：要写入数据的socket文件描述符</span></span><br><span class="line"><span class="comment">	buf：指定缓冲区位置</span></span><br><span class="line"><span class="comment">	len：缓冲区的大小</span></span><br><span class="line"><span class="comment">	flags：额外控制</span></span><br><span class="line"><span class="comment">	dest_addr：指定接收端的socket的地址</span></span><br><span class="line"><span class="comment">	addrlen：接收端socket地址的大小</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>recvfrom/sendto系统调用也可以用于面向连接（STREAM）的socket的数据读写，只需要把最后两个参数都设置为NULL以忽略发送端/接收端的socket地址（因为我们已经和对方建立了连接，所以已经知道其socket地址了）。</p>
<h3 id="通用数据读写函数"><a href="#通用数据读写函数" class="headerlink" title="通用数据读写函数"></a>通用数据读写函数</h3><p>不仅适用于TCP流数据，也能用于UDP数据报：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞ </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recvmsg</span><span class="params">(<span class="keyword">int</span> sockfd, struct msghdr* msg, <span class="keyword">int</span> flags)</span></span>; </span><br><span class="line"><span class="comment">/* recvmsg调用：</span></span><br><span class="line"><span class="comment">作用：接收读取sockfd上的数据</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockfd：要读取的socket文件描述符</span></span><br><span class="line"><span class="comment">	msg：指向msghdr结构体</span></span><br><span class="line"><span class="comment">	flags：额外控制</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sendmsg</span><span class="params">(<span class="keyword">int</span> sockfd, struct msghdr *msg, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：向sockfd上写入数据</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockfd：要写入数据的socket文件描述符</span></span><br><span class="line"><span class="comment">	msg：指向msghdr结构体</span></span><br><span class="line"><span class="comment">	flags：额外控制</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// msghdr结构体定义：</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span>* msg_name; <span class="comment">/*socket地址*/</span> </span><br><span class="line">    <span class="keyword">socklen_t</span> msg_namelen; <span class="comment">/*socket地址的长度*/</span> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span>* <span class="title">msg_iov</span>;</span> <span class="comment">/*分散的内存块，见后文*/</span> </span><br><span class="line">    <span class="keyword">int</span> msg_iovlen; <span class="comment">/*分散内存块的数量*/</span></span><br><span class="line">    <span class="keyword">void</span>* msg_control; <span class="comment">/*指向辅助数据的起始位置*/</span> </span><br><span class="line">    <span class="keyword">socklen_t</span> msg_controllen; <span class="comment">/*辅助数据的大小*/</span></span><br><span class="line">    <span class="keyword">int</span> msg_flags; <span class="comment">/*复制函数中的flags参数，并在调用过程中更新*/</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// iovec结构体定义：</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span>* iov_base; <span class="comment">/*内存起始地址*/</span> </span><br><span class="line">    <span class="keyword">size_t</span> iov_len; <span class="comment">/*这块内存的长度*/</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>msghdr结构体中，msg_name成员指向一个socket地址结构变量。它指定通信对方的socket地址。对于面向连接的TCP协议，该成员没有意义，必须被设置为NULL。这是因为对数据流socket而言，对方的地址已经知道。</p>
<p>iovec结构体封装了一块内存的起始位置和长度。</p>
<p>分散读（scatter read）：recvmsg调用，数据将被读取并存放在msg_iovlen块分散的内存中，这些内存的位置和长度则由msg_iov指向的数组指定。</p>
<p>集中写（gather write）：sendmsg调用，msg_iovlen块分散内存中的数据将被一并发送。</p>
<p>msg_flags成员无须设定，它会复制recvmsg/sendmsg的flags参数的内容以影响数据读写过程。recvmsg还会在调用结束前，将某些更新后的标志设置到msg_flags中。</p>
<h2 id="带外标记"><a href="#带外标记" class="headerlink" title="带外标记"></a>带外标记</h2><p>内核通知应用进程带外数据抵达的两种方式：</p>
<ul>
<li>I/O复用产生的异常事件</li>
<li>SIGURG信号</li>
</ul>
<p>即使应用程序得到了有带外数据需要接收的通知，还需要知道带外数据在数据流中的具体位置，才能准确接收带外数据。使用sockatmark调用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sockatmark</span><span class="params">(<span class="keyword">int</span> sockfd)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：判断sockfd是否处于带外标记，即下一个被读取的数据是否是带外数据</span></span><br><span class="line"><span class="comment">参数fd：需要判断的socket文件描述符</span></span><br><span class="line"><span class="comment">返回值：若是带外数据，返回1，此时可以利用带MSG_OOB标志的recv调用来接收带外数据；若不是，返回0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="地址信息函数"><a href="#地址信息函数" class="headerlink" title="地址信息函数"></a>地址信息函数</h2><p>获取一个连接socket的本端socket地址，以及远端的socket地址。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞ </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsockname</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr* address, <span class="keyword">socklen_t</span>* address_len)</span></span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：获取sockfd对应的本端socket地址，存储在address指向的内存中。如果实际socket地址的长度大于address所指内存区的大小，那么该socket地址将被截断。</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockfd：需要获取的socket文件描述符</span></span><br><span class="line"><span class="comment">	address：指向socket地址结构体的指针，传出参数</span></span><br><span class="line"><span class="comment">	address_len：socket地址的长度</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败返回-1并设置errno</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getpeername</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr* address, <span class="keyword">socklen_t</span>* address_len)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：获取sockfd对应的远端socket地址</span></span><br><span class="line"><span class="comment">参数，返回值的含义与getsockname调用的相同</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="socket选项"><a href="#socket选项" class="headerlink" title="socket选项"></a>socket选项</h2><p>读取和设置socket文件描述符属性的方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞ </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsockopt</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> level, <span class="keyword">int</span> option_name, <span class="keyword">void</span>* option_value, <span class="keyword">socklen_t</span>* <span class="keyword">restrict</span> option_len)</span></span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：读取sockfd的属性</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockfd：指定被操作的目标socket文件描述符</span></span><br><span class="line"><span class="comment">	level：指定要操作的协议属性（IPV4、IPV6、TCP等）</span></span><br><span class="line"><span class="comment">	option_name：指定选项的名字，socket选项</span></span><br><span class="line"><span class="comment">	option_value：被操作选项的值</span></span><br><span class="line"><span class="comment">	option_len：被操作选项的长度</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功返回0，失败时返回-1并设置errno</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setsockopt</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> level, <span class="keyword">int</span> option_name, <span class="keyword">const</span> <span class="keyword">void</span>* option_value, <span class="keyword">socklen_t</span> option_len)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用：设置sockfd的属性</span></span><br><span class="line"><span class="comment">参数，返回值：参照getsockopt调用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><img src="/20220723/image-20220724232946013.png" alt="image-20220724232946013"></p>
<p>对于服务器，有部分socket选项只能在调用listen系统调用前针对监听socket设置才有效。因为连接socket只能由accept调用返回，而accept从listen监听队列中接受的连接至少已经完成了TCP三次握手的前两个步骤，这说明服务器已经往被接受连接上发送出了TCP同步报文段。但有的socket选项却应该在TCP同步报文段中设置，比如TCP最大报文段选项。</p>
<p>解决方法：对监听socket设置socket选项，那么accept返回的连接socket将自动继承这些选项。这些socket选项包括：SO_DEBUG、SO_DONTROUTE、SO_KEEPALIVE、SO_LINGER、SO_OOBINLINE、SO_RCVBUF、SO_RCVLOWAT、SO_SNDBUF、SO_SNDLOWAT、TCP_MAXSEG和TCP_NODELAY。</p>
<p>对于客户端，socket选项则应该在调用connect函数之前设置，因为connect调用成功返回之后，TCP三次握手已完成。</p>
<h3 id="SO-REUSEADDR选项"><a href="#SO-REUSEADDR选项" class="headerlink" title="SO_REUSEADDR选项"></a>SO_REUSEADDR选项</h3><p>服务器程序可以通过设置socket选项SO_REUSEADDR，来强制使用被处于TIME_WAIT状态的连接占用的socket地址。重用本地地址：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5-9reuse_address.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建TCP socket文件描述符</span></span><br><span class="line">    <span class="keyword">int</span> sock = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">assert</span>( sock &gt;= <span class="number">0</span> );</span><br><span class="line">    <span class="comment">// 设置socket属性为SO_REUSEADDR，重用本地地址</span></span><br><span class="line">    <span class="keyword">int</span> reuse = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setsockopt</span>( sock, SOL_SOCKET, SO_REUSEADDR, &amp;reuse, <span class="built_in"><span class="keyword">sizeof</span></span>( reuse ) );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket地址并绑定socket</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;address.sin_addr );</span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">bind</span>( sock, ( struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听socket</span></span><br><span class="line">    ret = <span class="built_in">listen</span>( sock, <span class="number">5</span> );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端接收socket地址，accept调用</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_addrlength = <span class="built_in"><span class="keyword">sizeof</span></span>( client );</span><br><span class="line">    <span class="keyword">int</span> connfd = <span class="built_in">accept</span>( sock, ( struct sockaddr* )&amp;client, &amp;client_addrlength );</span><br><span class="line">    <span class="keyword">if</span> ( connfd &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;errno is: %d\n&quot;</span>, errno );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;   <span class="comment">// 接收连接成功并打印</span></span><br><span class="line">        <span class="keyword">char</span> remote[INET_ADDRSTRLEN ];</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;connected with ip: %s and port: %d\n&quot;</span>, </span><br><span class="line">            <span class="built_in">inet_ntop</span>( AF_INET, &amp;client.sin_addr, remote, INET_ADDRSTRLEN ), <span class="built_in">ntohs</span>( client.sin_port ) );</span><br><span class="line">        <span class="built_in">close</span>( connfd ); <span class="comment">// 关闭客户端连接</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( sock ); <span class="comment">// 关闭服务器连接</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SO-RCVBUF和SO-SNDBUF选项"><a href="#SO-RCVBUF和SO-SNDBUF选项" class="headerlink" title="SO_RCVBUF和SO_SNDBUF选项"></a>SO_RCVBUF和SO_SNDBUF选项</h3><p>SO_RCVBUF选项：TCP接收缓冲区的大小，最小值256字节<br>SO_SNDBUF选项：TCP发送缓冲区的大小，最小值2048字节<br>用setsockopt来设置TCP的接收缓冲区和发送缓冲区的大小时，系统都会将其值加倍，并且不得小于某个最小值。系统这样做的目的，主要是确保一个TCP连接拥有足够的空闲缓冲区来处理拥塞。</p>
<p>修改TCP发送缓冲区的大小：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5-10set_send_buffer.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 512</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number send_bufer_size\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务器socket地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_address</span>;</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;server_address, <span class="built_in"><span class="keyword">sizeof</span></span>( server_address ) );</span><br><span class="line">    server_address.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;server_address.sin_addr );</span><br><span class="line">    server_address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">int</span> sock = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">assert</span>( sock &gt;= <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置TCP发送缓冲区的大小</span></span><br><span class="line">    <span class="keyword">int</span> sendbuf = <span class="built_in">atoi</span>( argv[<span class="number">3</span>] );</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in"><span class="keyword">sizeof</span></span>( sendbuf );</span><br><span class="line">    <span class="built_in">setsockopt</span>( sock, SOL_SOCKET, SO_SNDBUF, &amp;sendbuf, <span class="built_in"><span class="keyword">sizeof</span></span>( sendbuf ) );</span><br><span class="line">    <span class="built_in">getsockopt</span>( sock, SOL_SOCKET, SO_SNDBUF, &amp;sendbuf, ( <span class="keyword">socklen_t</span>* )&amp;len );</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;the tcp send buffer size after setting is %d\n&quot;</span>, sendbuf );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主动发起连接成功</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">connect</span>( sock, ( struct sockaddr* )&amp;server_address, <span class="built_in"><span class="keyword">sizeof</span></span>( server_address ) ) != <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> buffer[ BUFFER_SIZE ];</span><br><span class="line">        <span class="built_in">memset</span>( buffer, <span class="string">&#x27;a&#x27;</span>, BUFFER_SIZE );</span><br><span class="line">        <span class="built_in">send</span>( sock, buffer, BUFFER_SIZE, <span class="number">0</span> ); <span class="comment">// 发送数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( sock ); <span class="comment">// 关闭连接</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改TCP接收缓存区的大小：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5-11set_recv_buffer.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s ip_address port_number receive_buffer_size\n&quot;</span>, <span class="built_in">basename</span>( argv[<span class="number">0</span>] ) );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    <span class="built_in">bzero</span>( &amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    <span class="built_in">inet_pton</span>( AF_INET, ip, &amp;address.sin_addr );</span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sock = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">assert</span>( sock &gt;= <span class="number">0</span> );</span><br><span class="line">    <span class="keyword">int</span> recvbuf = <span class="built_in">atoi</span>( argv[<span class="number">3</span>] );</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in"><span class="keyword">sizeof</span></span>( recvbuf );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置socket属性，设置接收缓冲区大小</span></span><br><span class="line">    <span class="built_in">setsockopt</span>( sock, SOL_SOCKET, SO_RCVBUF, &amp;recvbuf, <span class="built_in"><span class="keyword">sizeof</span></span>( recvbuf ) );</span><br><span class="line">    <span class="built_in">getsockopt</span>( sock, SOL_SOCKET, SO_RCVBUF, &amp;recvbuf, ( <span class="keyword">socklen_t</span>* )&amp;len );</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;the receive buffer size after settting is %d\n&quot;</span>, recvbuf );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket地址与socket文件描述符</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">bind</span>( sock, ( struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听socket连接</span></span><br><span class="line">    ret = <span class="built_in">listen</span>( sock, <span class="number">5</span> );</span><br><span class="line">    <span class="built_in">assert</span>( ret != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端socket地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_addrlength = <span class="built_in"><span class="keyword">sizeof</span></span>( client );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收连接accept调用</span></span><br><span class="line">    <span class="keyword">int</span> connfd = <span class="built_in">accept</span>( sock, ( struct sockaddr* )&amp;client, &amp;client_addrlength );</span><br><span class="line">    <span class="keyword">if</span> ( connfd &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;errno is: %d\n&quot;</span>, errno );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;   <span class="comment">// 接收连接成功</span></span><br><span class="line">        <span class="keyword">char</span> buffer[ BUFFER_SIZE ];</span><br><span class="line">        <span class="built_in">memset</span>( buffer, <span class="string">&#x27;\0&#x27;</span>, BUFFER_SIZE );</span><br><span class="line">        <span class="keyword">while</span>( <span class="built_in">recv</span>( connfd, buffer, BUFFER_SIZE<span class="number">-1</span>, <span class="number">0</span> ) &gt; <span class="number">0</span> )&#123;&#125;</span><br><span class="line">        <span class="built_in">close</span>( connfd ); <span class="comment">// 关闭客户端连接</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>( sock ); <span class="comment">// 关闭本地连接</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器端运行5-11set_recv_buffer.cpp（set_recv_buffer程序），在客户端上运行5-10set_send_buffer.cpp（set_send_buffer程序），客户端向服务器发送512字节的数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">./set_recv_buffer 192.168.1.108 12345 50<span class="comment">#将TCP接收缓冲区的大小设置为 50字节</span></span></span><br><span class="line">the tcp receive buffer size after settting is 256 </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash">./set_send_buffer 192.168.1.108 12345 2000<span class="comment">#将TCP发送缓冲区的大小设置 为2000字节</span></span> </span><br><span class="line">the tcp send buffer size after setting is 4000</span><br></pre></td></tr></table></figure>

<p>从服务器的输出来看，系统允许的TCP接收缓冲区最小为256字节。当我们设置TCP接收缓冲区的大小为50字节时，系统将忽略我们的设置。从客户端的输出来看，我们设置的TCP发送缓冲区的大小被系统增加了一倍。</p>
<h3 id="SO-RCVLOWAT和SO-SNDLOWAT选项"><a href="#SO-RCVLOWAT和SO-SNDLOWAT选项" class="headerlink" title="SO_RCVLOWAT和SO_SNDLOWAT选项"></a>SO_RCVLOWAT和SO_SNDLOWAT选项</h3><p>SO_RCVLOWAT选项：TCP接收缓冲区的低水位标记，可读数据总数大于其低水位标记，I/O复用系统调用将通知应用程序可以从对应的socket上读取数据。<br>SO_SNDLOWAT选项：TCP发送缓冲区的低水位标记，缓冲区的空闲空间（可写入数据的空间）大于其低水位标记，I/O复用系统调用将通知应用程序可以往对应的socke上写入数据。<br>一般被I/O复用系统调用，用来判断socket是否可读或可写</p>
<p>默认情况下，TCP接收缓冲区的低水位标记和TCP发送缓冲区的低水位标记均为1字节。 </p>
<h3 id="SO-LINGER选项"><a href="#SO-LINGER选项" class="headerlink" title="SO_LINGER选项"></a>SO_LINGER选项</h3><p>SO_LINGER选项：用于控制close系统调用在关闭TCP连接时的行为。</p>
<p>默认情况下，使用close系统调用来关闭一个socket时，close将立即返回，TCP模块负责把该socket对应的TCP发送缓冲区中残留的数据发送给对方。</p>
<p>设置（获取）SO_LINGER选项的值时，需要给setsockopt（getsockopt）系统调用传递一个linger类型的结构体，其定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜sys/socket.h＞ </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linger</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l_onoff;<span class="comment">/*开启（非0）还是关闭（0）该选项*/</span> </span><br><span class="line">    <span class="keyword">int</span> l_linger;<span class="comment">/*滞留时间*/</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>close系统调用可能产生的3种行为：</p>
<ul>
<li>l_onoff等于0。此时SO_LINGER选项不起作用，close用默认行为关闭socket。</li>
<li>l_onoff不为0，l_linger等于0。此时close系统调用立即返回，TCP模块将丢弃被关闭的socket对应的TCP发送缓冲区中残留的数据，同时给对方发送一个复位报文段。因此，这种情况给服务器提供了异常终止一个连接的方法。</li>
<li>l_onoff不为0，l_linger大于0。close的行为取决于两个条件： <ul>
<li>被关闭的socket对应的TCP发送缓冲区中是否还有残留的数据。</li>
<li>该socket是阻塞的，还是非阻塞的。<br>对于阻塞的socket，close将等待一段长为l_linger的时间，直到TCP模块发送完所有残留数据并得到对方的确认。如果这段时间内TCP模块没有发送完残留数据并得到对方的确认，那么close系统调用将返回-1并设置errno为EWOULDBLOCK。<br>如果socket是非阻塞的，close将立即返回，此时我们需要根据其返回值和errno来判断残留数据是否已经发送完毕。</li>
</ul>
</li>
</ul>
<h2 id="网络信息API"><a href="#网络信息API" class="headerlink" title="网络信息API"></a>网络信息API</h2><p>socket地址的两个要素，即IP地址和端口号，都是用数值表示的。这不便于记忆，也不便于扩展（比如从IPv4转移到IPv6）。可以用主机名来访问一台机器，而避免直接使用其IP地址，用服务名称来代替端口号。比如，下面两条telnet命令具有完全相同的作用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">telnet 127.0.0.1 80 </span><br><span class="line">telnet localhost www</span><br></pre></td></tr></table></figure>

<p>telnet客户端程序，通过调用某些网络信息API，来实现主机名到IP地址的转换，以及服务名称到端口号的转换。</p>
<h3 id="gethostbyname和gethostbyaddr"><a href="#gethostbyname和gethostbyaddr" class="headerlink" title="gethostbyname和gethostbyaddr"></a>gethostbyname和gethostbyaddr</h3><p>gethostbyname函数：根据主机名称获取主机的完整信息。通常先在本地的/etc/hosts配置文件中查找主机，如果没有找到，再去访问DNS服务器。<br>gethostbyaddr函数：根据IP地址获取主机的完整信息。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜netdb.h＞</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct hostent* <span class="title">gethostbyname</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name)</span></span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数name：指定目标主机的主机名</span></span><br><span class="line"><span class="comment">返回值：指向hostent结构体类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct hostent* <span class="title">gethostbyaddr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* addr, <span class="keyword">size_t</span> len, <span class="keyword">int</span> type)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：	</span></span><br><span class="line"><span class="comment">	addr：指定目标主机的IP地址</span></span><br><span class="line"><span class="comment">	len：IP地址的长度</span></span><br><span class="line"><span class="comment">	type：IP地址的类型，合法取值有AF_INET（用于IPv4地址）和AF_INET6（用于IPv6地址）</span></span><br><span class="line"><span class="comment">返回值：指向hostent结构体类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hostnet结构体定义：</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜netdb.h＞ </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span>* h_name; <span class="comment">/*主机名*/</span> </span><br><span class="line">    <span class="keyword">char</span>** h_aliases; <span class="comment">/*主机别名列表，可能有多个*/</span> </span><br><span class="line">    <span class="keyword">int</span> h_addrtype; <span class="comment">/*地址类型（地址族）*/</span> </span><br><span class="line">    <span class="keyword">int</span> h_length; <span class="comment">/*地址长度*/</span> </span><br><span class="line">    <span class="keyword">char</span>** h_addr_list <span class="comment">/*按网络字节序列出的主机IP地址列表*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="getservbyname和getservbyport"><a href="#getservbyname和getservbyport" class="headerlink" title="getservbyname和getservbyport"></a>getservbyname和getservbyport</h3><p>getservbyname函数：根据名称获取某个服务的完整信息。<br>getservbyport函数：根据端口号获取某个服务的完整信息。<br>它们实际上都是通过读取/etc/services文件来获取服务的信息的。这两个函数的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜netdb.h＞</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct servent* <span class="title">getservbyname</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">const</span> <span class="keyword">char</span>* proto)</span></span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	name：指定服务的名字</span></span><br><span class="line"><span class="comment">	proto：指定服务类型</span></span><br><span class="line"><span class="comment">返回值：指向servent结构体类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct servent* <span class="title">getservbyport</span><span class="params">(<span class="keyword">int</span> port, <span class="keyword">const</span> <span class="keyword">char</span>* proto)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	port：指定目标服务对应的端口号</span></span><br><span class="line"><span class="comment">	proto：指定服务类型</span></span><br><span class="line"><span class="comment">返回值：指向servent结构体类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// servent结构体定义：</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜netdb.h＞ </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">servent</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span>* s_name; <span class="comment">/*服务名称*/</span></span><br><span class="line">    <span class="keyword">char</span>** s_aliases; <span class="comment">/*服务的别名列表，可能有多个*/</span></span><br><span class="line">    <span class="keyword">int</span> s_port; <span class="comment">/*端口号*/</span> </span><br><span class="line">    <span class="keyword">char</span>* s_proto; <span class="comment">/*服务类型,通常是tcp或者udp*/</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>通过主机名和服务名来访问目标服务器上的daytime服务，以获取该机器的系统时间：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5-12access_daytime.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">assert</span>( argc == <span class="number">2</span> );</span><br><span class="line">	<span class="keyword">char</span> *host = argv[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取目标主机的地址信息</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hostent</span>* <span class="title">hostinfo</span> =</span> <span class="built_in">gethostbyname</span>( host );</span><br><span class="line">	<span class="built_in">assert</span>( hostinfo );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取daytime服务信息</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">servent</span>* <span class="title">servinfo</span> =</span> <span class="built_in">getservbyname</span>( <span class="string">&quot;daytime&quot;</span>, <span class="string">&quot;tcp&quot;</span> );</span><br><span class="line">	<span class="built_in">assert</span>( servinfo );</span><br><span class="line">	<span class="built_in">printf</span>( <span class="string">&quot;daytime port is %d\n&quot;</span>, <span class="built_in">ntohs</span>( servinfo-&gt;s_port ) );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建socket地址</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">	address.sin_family = AF_INET;</span><br><span class="line">	address.sin_port = servinfo-&gt;s_port;</span><br><span class="line">	<span class="comment">// 因为h_addr_list本身是使用网络字节序的地址列表，所以使用其中的IP地址时，无须对目标IP地址转换字节序</span></span><br><span class="line">	address.sin_addr = *( struct in_addr* )*hostinfo-&gt;h_addr_list;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建socket文件描述符，主动发起连接</span></span><br><span class="line">	<span class="keyword">int</span> sockfd = <span class="built_in">socket</span>( AF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">	<span class="keyword">int</span> result = <span class="built_in">connect</span>( sockfd, (struct sockaddr* )&amp;address, <span class="built_in"><span class="keyword">sizeof</span></span>( address ) );</span><br><span class="line">	<span class="built_in">assert</span>( result != <span class="number">-1</span> );</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> buffer[<span class="number">128</span>];</span><br><span class="line">	result = <span class="built_in">read</span>( sockfd, buffer, <span class="built_in"><span class="keyword">sizeof</span></span>( buffer ) );</span><br><span class="line">	<span class="built_in">assert</span>( result &gt; <span class="number">0</span> );</span><br><span class="line">	buffer[ result ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	<span class="built_in">printf</span>( <span class="string">&quot;the day item is: %s&quot;</span>, buffer );</span><br><span class="line">	<span class="built_in">close</span>( sockfd );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：以上讨论的4个函数都是不可重入的，即非线程安全的。不过netdb.h头文件给出了它们的可重入版本。这些函数的函数名是在原函数名尾部加上_r（re-entrant）。</p>
<h3 id="getaddrinfo"><a href="#getaddrinfo" class="headerlink" title="getaddrinfo"></a>getaddrinfo</h3><p>getaddrinfo函数：既能通过主机名获得IP地址（内部使用的是gethostbyname函数），也能通过服务名获得端口号（内部使用的是getservbyname函数）。<br>是否可重入取决于其内部调用的gethostbyname和getservbyname函数是否是它们的可重入版本。该函数的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜netdb.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getaddrinfo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* hostname, <span class="keyword">const</span> <span class="keyword">char</span>* service, <span class="keyword">const</span> struct addrinfo* hints, struct addrinfo** result)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	hostname：可以接收主机名，也可接收字符串表示的IP地址。</span></span><br><span class="line"><span class="comment">	service：可以接收服务名，也可以接收字符串表示的十进制端口号。</span></span><br><span class="line"><span class="comment">	hints：应用程序给getaddrinfo的一个提示，以对getaddrinfo的输出进行更精确的控制。</span></span><br><span class="line"><span class="comment">		可以设置为NULL，表示允许getaddrinfo反馈任何可用的结果。</span></span><br><span class="line"><span class="comment">	result：指向一个链表，存储getaddrinfo反馈的结果（传出参数）。</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败则返回错误码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// addrinfo结构体定义：</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ai_flags; <span class="comment">/*标志位，可以按位与*/</span></span><br><span class="line">    <span class="keyword">int</span> ai_family; <span class="comment">/*地址族*/</span> </span><br><span class="line">    <span class="keyword">int</span> ai_socktype; <span class="comment">/*服务类型，SOCK_STREAM或SOCK_DGRAM*/</span></span><br><span class="line">    <span class="keyword">int</span> ai_protocol; <span class="comment">/*具体的网络协议，通常设置为0*/</span> </span><br><span class="line">    <span class="keyword">socklen_t</span> ai_addrlen; <span class="comment">/*socket地址ai_addr的长度*/</span> </span><br><span class="line">    <span class="keyword">char</span>* ai_canonname; <span class="comment">/*主机的别名*/</span> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>* <span class="title">ai_addr</span>;</span> <span class="comment">/*指向socket地址*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span>* <span class="title">ai_next</span>;</span> <span class="comment">/*指向下一个sockinfo结构的对象*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/20220723/image-20220725111725849.png" alt="image-20220725111725849"></p>
<p>使用hints参数的时候，可以设置其ai_flags，ai_family，ai_socktype和ai_protocol四个字段，其他字段则必须被设置为NULL。</p>
<p>利用hints参数获取主机ernest-laptop上的“daytime”流服务信息：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> <span class="title">hints</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span>* <span class="title">res</span>;</span></span><br><span class="line"><span class="built_in">bzero</span>(＆hints, <span class="built_in"><span class="keyword">sizeof</span></span>(hints)); </span><br><span class="line">hints.ai_socktype = SOCK_STREAM;</span><br><span class="line"><span class="built_in">getaddrinfo</span>(<span class="string">&quot;ernest-laptop&quot;</span>, <span class="string">&quot;daytime&quot;</span>, ＆hints, ＆res);</span><br></pre></td></tr></table></figure>

<p> getaddrinfo将隐式地分配堆内存（可以通过valgrind等工具查看），因为res指针原本是没有指向一块合法内存的，所以，getaddrinfo调用结束后，我们必须使用如下配对函数来释放这块内存： </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜netdb.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeaddrinfo</span><span class="params">(struct addrinfo* res)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="getnameinfo"><a href="#getnameinfo" class="headerlink" title="getnameinfo"></a>getnameinfo</h3><p>getnameinfo函数：通过socket地址同时获得以字符串表示的主机名（内部使用的是gethostbyaddr函数）和服务名（内部使用的是getservbyport函数）。函数定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜netdb.h＞ </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getnameinfo</span><span class="params">(<span class="keyword">const</span> struct sockaddr* sockaddr, <span class="keyword">socklen_t</span> addrlen, <span class="keyword">char</span>* host, <span class="keyword">socklen_t</span> hostlen, <span class="keyword">char</span>* serv, <span class="keyword">socklen_t</span> servlen, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">	sockaddr：socket地址结构体</span></span><br><span class="line"><span class="comment">	addrlen：socket地址长度</span></span><br><span class="line"><span class="comment">	host：存储主机名</span></span><br><span class="line"><span class="comment">	hostlen：主机名长度</span></span><br><span class="line"><span class="comment">	serv：存储服务名</span></span><br><span class="line"><span class="comment">	servlen：服务名长度</span></span><br><span class="line"><span class="comment">	flags：控制getnameinfo的行为</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">	成功时返回0，失败则返回错误码</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><img src="/20220723/image-20220725112716763.png" alt="image-20220725112716763"></p>
<p><img src="/20220723/image-20220725112747241.png" alt="image-20220725112747241"></p>
<p>Linux下strerror函数能将数值错误码errno转换成易读的字符串形式。同样，下面的函数可将表5-8中的错误码转换成其字符串形式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>＜netdb.h＞</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">gai_strerror</span><span class="params">(<span class="keyword">int</span> error)</span></span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>面试金典题解</title>
    <url>/posts/e017732d.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="数组与字符串"><a href="#数组与字符串" class="headerlink" title="数组与字符串"></a>数组与字符串</h2><h3 id="1-1-确定字符互异"><a href="#1-1-确定字符互异" class="headerlink" title="1.1 确定字符互异"></a>1.1 确定字符互异</h3><p>描述：</p>
<p>给定一个字符串string str，请返回一个bool值,<strong>True</strong>代表字符串的所有字符全都不同，<strong>False</strong>代表存在相同的字符。保证字符串中的字符为ASCII字符且不允许使用额外的存储结构，字符串的长度小于等于3000。大小写字母算不同的字符</p>
<p>测试样例：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;aeiou&quot;</span></span><br><span class="line">返回：<span class="literal">True</span></span><br><span class="line"><span class="string">&quot;BarackObama&quot;</span></span><br><span class="line">返回：<span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>假设不使用额外的数据结构。</p>
<p>解法：</p>
<p>假定字符集为ASCII，若字符串的长度大于字母表的字符个数，直接返回false；字母表一共只有256个字符。<br>构建一个布尔值的数组，索引值i对应的标记该字符串是否含有字母表的第i个字符。若这个字符第二次出现，返回false。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkDifferent</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="built_in">size</span>() &gt; <span class="number">256</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">char_set</span><span class="params">(<span class="number">256</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = str[i];</span><br><span class="line">        <span class="keyword">if</span> (char_set[val]) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 这个字符已在字符串中出现过</span></span><br><span class="line">        char_set[val] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-原串翻转"><a href="#1-2-原串翻转" class="headerlink" title="1.2 原串翻转"></a>1.2 原串翻转</h3><p>描述：</p>
<p>给定一个string <strong>iniString</strong>，请返回一个string，为该字符串翻转后的结果。要求不使用额外数据结构和储存空间，可以使用单个过程变量，保证字符串的长度小于等于5000。</p>
<p>测试样例：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;This is nowcoder&quot;</span></span><br><span class="line">返回：<span class="string">&quot;redocwon si sihT&quot;</span></span><br></pre></td></tr></table></figure>

<p>解法：</p>
<p>不分配额外空间，直接就地翻转字符串。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">reverseString</span><span class="params">(string iniString)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (iniString.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> iniString;</span><br><span class="line">    <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = iniString.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123; <span class="comment">// 字符串首尾开始交换两个字符，直至两个指针在中间碰头</span></span><br><span class="line">        tmp = iniString[i];</span><br><span class="line">        iniString[i++] = iniString[j];</span><br><span class="line">        iniString[j--] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> iniString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-确定两串乱序同构"><a href="#1-3-确定两串乱序同构" class="headerlink" title="1.3 确定两串乱序同构"></a>1.3 确定两串乱序同构</h3><p>描述：</p>
<p>给定string <strong>stringA</strong>和string <strong>stringB</strong>，编写程序确认两字符串包含的字符是否完全相同，注意大小写为不同字符，且考虑字符串中的空格，返回一个bool，代表两串是否由一样的字符组成。保证两串的长度都小于等于5000。</p>
<figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line">示例<span class="number">1</span></span><br><span class="line">输入：<span class="comment">&quot;This is nowcoder&quot;</span>,<span class="comment">&quot;is This nowcoder&quot;</span></span><br><span class="line">返回值：<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">示例<span class="number">2</span></span><br><span class="line">输入：<span class="comment">&quot;Here you are&quot;</span>,<span class="comment">&quot;Are you here&quot;</span></span><br><span class="line">返回值：<span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<p>注：变位词区分大小写，空白也考虑在内。比较两个如果长度不同，就不可能是变位词。</p>
<p>解法1：排序字符串</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkSam</span><span class="params">(string stringA, string stringB)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (stringA.<span class="built_in">size</span>() != stringB.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">sort</span>(stringA.<span class="built_in">begin</span>(), stringA.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(stringB.<span class="built_in">begin</span>(), stringB.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> stringA == stringB;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解法2：检查两个字符串的各字符数是否相等</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkSam</span><span class="params">(string stringA, string stringB)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (stringA.<span class="built_in">size</span>() != stringB.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">letters</span><span class="params">(<span class="number">256</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : stringA) &#123;</span><br><span class="line">        letters[c]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> d : stringB) &#123;</span><br><span class="line">        letters[d]--;</span><br><span class="line">        <span class="keyword">if</span> (letters[d] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-空格替换"><a href="#1-4-空格替换" class="headerlink" title="1.4 空格替换"></a>1.4 空格替换</h3><p>描述：</p>
<p>给定一个string <strong>iniString</strong> 及其长度 int <strong>len</strong>, 已知该字符串中有空格，现要求编写程序将字符串中空格替换为“%20”。返回更改后的string。假设该字符串有足够的空间存放新增的字符，并且知道原字符的长度(小于等于1000)，同时保证字符串由大小写的英文字母组成。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">示例<span class="number">1</span></span><br><span class="line">输入：<span class="string">&quot;Mr John Smith&quot;</span>,<span class="number">13</span></span><br><span class="line">返回值：<span class="string">&quot;Mr%20John%20Smith&quot;</span></span><br><span class="line"></span><br><span class="line">示例<span class="number">2</span></span><br><span class="line">输入：<span class="string">&quot;Hello  World&quot;</span>,<span class="number">12</span></span><br><span class="line">返回值：<span class="string">&quot;Hello%20%20World&quot;</span></span><br></pre></td></tr></table></figure>

<p>解法：</p>
<p>处理字符串操作问题，常用做法是从字符串尾部开始编辑，从后向前反向操作。因为字符串尾部有额外的缓存，可以直接修改，不必担心会覆写原来的数据。</p>
<p>两次扫描，一次先数出字符串中有多少空格，从而算出最终的字符串的长度；第二次扫描反向编辑字符串。检测到空格将%20复制到下一个位置，若不是空白，就复制原来的字符。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">replaceSpace</span><span class="params">(string iniString, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>, newLength = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (iniString[i] == <span class="string">&#x27; &#x27;</span>) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    newLength = length + <span class="number">2</span> * count;</span><br><span class="line">    <span class="function">string <span class="title">res</span><span class="params">(newLength, <span class="string">&#x27; &#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (iniString[i] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            res[newLength - <span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            res[newLength - <span class="number">2</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">            res[newLength - <span class="number">3</span>] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">            newLength -= <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res[newLength - <span class="number">1</span>] = iniString[i];</span><br><span class="line">            newLength--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-基本字符串压缩"><a href="#1-5-基本字符串压缩" class="headerlink" title="1.5 基本字符串压缩"></a>1.5 基本字符串压缩</h3><p>描述：</p>
<p>现给定一个string iniString字符串(长度小于等于10000)，请按连续重复字母压缩的方式将该字符串压缩，返回结果为string，比如，字符串“aabbcccccaaa”经压缩会变成“a2b2c5a3”，若压缩后的字符串没有变短，则返回原先的字符串。注意保证串内字符均由大小写英文字母组成。</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">示例<span class="number">1</span></span><br><span class="line">输入：<span class="string">&quot;aabcccccaaa&quot;</span></span><br><span class="line">返回值：<span class="string">&quot;a2b1c5a3&quot;</span></span><br><span class="line"></span><br><span class="line">示例<span class="number">2</span></span><br><span class="line">输入：<span class="string">&quot;welcometonowcoderrrrr&quot;</span></span><br><span class="line">返回值：<span class="string">&quot;welcometonowcoderrrrr&quot;</span></span><br><span class="line"></span><br><span class="line">说明：welcometonowcoderrrrr转换成重复字母压缩的结果是w<span class="number">1e1</span>l<span class="number">1</span><span class="keyword">c</span><span class="number">1</span>o<span class="number">1</span>m<span class="number">1e1</span>t<span class="number">1</span>o<span class="number">1</span>n<span class="number">1</span>o<span class="number">1</span>w<span class="number">1</span><span class="keyword">c</span><span class="number">1</span>o<span class="number">1</span>d<span class="number">1e1</span>r<span class="number">5</span>，比原字符串的长度还要长，所以返回原先的字符串。 </span><br></pre></td></tr></table></figure>

<p>解法：</p>
<p>加入压缩长度检查，算出压缩后的长度，构建相应大小的字符串。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">zipString</span><span class="params">(string iniString)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> size = <span class="built_in">countCompression</span>(iniString);</span><br><span class="line">    <span class="keyword">if</span> (size &gt;= iniString.<span class="built_in">size</span>()) <span class="keyword">return</span> iniString;</span><br><span class="line">    <span class="function">string <span class="title">res</span><span class="params">(size, <span class="string">&#x27; &#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">1</span>, count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> last = iniString[<span class="number">0</span>];</span><br><span class="line">    res[<span class="number">0</span>] = last;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; iniString.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (iniString[i] == last) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last = iniString[i];</span><br><span class="line">            string tmp = <span class="built_in">to_string</span>(count);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> d : tmp) &#123;</span><br><span class="line">                res[index++] = d;</span><br><span class="line">            &#125;</span><br><span class="line">            res[index++] = last;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string tmp = <span class="built_in">to_string</span>(count);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> d : tmp) &#123;</span><br><span class="line">        res[index++] = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countCompression</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> last = str[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>, count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == last) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last = str[i];</span><br><span class="line">            size += <span class="number">1</span> + <span class="built_in">to_string</span>(count).<span class="built_in">size</span>();</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    size += <span class="number">1</span> + <span class="built_in">to_string</span>(count).<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-6-像素翻转"><a href="#1-6-像素翻转" class="headerlink" title="1.6 像素翻转"></a>1.6 像素翻转</h3><p>描述：</p>
<p>现有一个NxN的矩阵，阶数为N，请编写一个算法将矩阵顺时针旋转90度并将其作为返回值。要求不使用缓存矩阵，保证N不大于500，元素不大于256，每个元素用int表示。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">测试样例：</span><br><span class="line"><span class="string">[[1,2,3],[4,5,6],[7,8,9]]</span>,<span class="number">3</span></span><br><span class="line">返回：<span class="string">[[7,4,1],[8,5,2],[9,6,3]]</span></span><br></pre></td></tr></table></figure>

<p>解法：</p>
<p>按索引一个一个进行交换，从最外层开始逐渐向里，在每一层进行交换。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">transformImage</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; mat, <span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> layer = <span class="number">0</span>; layer &lt; n / <span class="number">2</span>; layer++) &#123;</span><br><span class="line">        <span class="keyword">int</span> first = layer, last = n - <span class="number">1</span> - layer;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt; last; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> offset = i - first;</span><br><span class="line">            <span class="comment">// 存储上边</span></span><br><span class="line">            <span class="keyword">int</span> top = mat[first][i];</span><br><span class="line">            mat[first][i] = mat[last - offset][first]; <span class="comment">// 左到上</span></span><br><span class="line">            mat[last - offset][first] = mat[last][last - offset]; <span class="comment">// 下到左</span></span><br><span class="line">            mat[last][last - offset] = mat[i][last]; <span class="comment">// 右到下</span></span><br><span class="line">            mat[i][last] = top; <span class="comment">// 上到右</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-7-清除行列"><a href="#1-7-清除行列" class="headerlink" title="1.7 清除行列"></a>1.7 清除行列</h3><p>描述：给定一个N阶方阵<code>int[][]</code>(C++中为<code>vector&lt;vector&gt;&lt;int&gt;&gt;</code>)<strong>mat</strong>及其阶数<strong>n</strong>，若方阵中某个元素为0，则将其所在的行与列清零。返回改变后的<code>int[][]</code>方阵(C++中为<code>vector&lt;vector&gt;&lt;int&gt;&gt;</code>)，保证n小于等于300，矩阵中的元素在nt范围内。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">测试样例：</span><br><span class="line"><span class="string">[[1,2,3],[0,1,2],[0,0,1]]</span></span><br><span class="line">返回：<span class="string">[[0,0,3],[0,0,0],[0,0,0]]</span></span><br></pre></td></tr></table></figure>

<p>解法：</p>
<p>避免陷阱将矩阵所有元素清零。用两个数组记录包含零的所有行与列，第二次遍历矩阵时，若所在行或列标记为零，则将元素清零。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">clearZero</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; mat, <span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">row</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">col</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                row[i] = <span class="literal">true</span>;</span><br><span class="line">                col[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (row[i] || col[j]) &#123;</span><br><span class="line">                mat[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-8-翻转子串"><a href="#1-8-翻转子串" class="headerlink" title="1.8 翻转子串"></a>1.8 翻转子串</h3><p>描述：</p>
<p>给定2个字符串s1和s2，请判断s2是否为s1旋转而成，返回bool值。字符串中字符为英文字母和空格，区分大小写，字符串长度小于等于1000。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">测试样例：</span><br><span class="line"><span class="string">&quot;Hello world&quot;</span>,<span class="string">&quot;worldhello &quot;</span></span><br><span class="line">返回：<span class="literal">false</span></span><br><span class="line"><span class="string">&quot;waterbottle&quot;</span>,<span class="string">&quot;erbottlewat&quot;</span></span><br><span class="line">返回：<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>解法：</p>
<p>假定s2由s1旋转而成，将s1划分为两部分：x和y，满足xy = s1和yx = s2.无论分割点在哪里，yx肯定是xyxy的子串，即s2为s1s1的子串。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkReverseEqual</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> len = s1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (len == s2.<span class="built_in">size</span>() &amp;&amp; len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        string s1s1 = s1 + s1;</span><br><span class="line">        <span class="keyword">if</span> (s1s1.<span class="built_in">find</span>(s2) != <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="2-1-访问单个节点的删除"><a href="#2-1-访问单个节点的删除" class="headerlink" title="2.1 访问单个节点的删除"></a>2.1 访问单个节点的删除</h3><p>描述：</p>
<p>编写代码，移除未排序链表中的重复节点。<br>进阶：不使用临时缓冲区</p>
<p>解法：</p>
<p>使用散列表，直接迭代访问整个链表，将每个节点加入散列表，若发现重复元素，将该节点从链表中删除，然后继续迭代。一次扫描完成。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="keyword">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteDups</span><span class="params">(ListNode* n)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; map;</span><br><span class="line">    ListNode* pre = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="built_in">find</span>(n-&gt;val) != map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            pre-&gt;next = n-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map[n-&gt;val] = <span class="number">1</span>;</span><br><span class="line">            pre = n;</span><br><span class="line">        &#125;</span><br><span class="line">        n = n-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进阶：不使用缓冲区。<br>用两个指针来迭代：current迭代访问整个链表，runner用于检查后续的节点是否重复。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteDups</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">    ListNode* current = head;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// 移除后续值相同的节点</span></span><br><span class="line">        ListNode* runner = current;</span><br><span class="line">        <span class="keyword">while</span> (runner-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (runner-&gt;next-&gt;val == current-&gt;val) &#123;</span><br><span class="line">                runner-&gt;next = runner-&gt;next-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                runner = runner-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 空间复杂度O(1), 时间复杂度O(N^2)</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-倒数第k个节点"><a href="#2-2-倒数第k个节点" class="headerlink" title="2.2 倒数第k个节点"></a>2.2 倒数第k个节点</h3><p>描述：</p>
<p>实现一个算法，找出单向链表中倒数第K个节点。</p>
<p>解法1：链表长度已知</p>
<p>若链表长度已知，那么倒数第k个节点就是第(length - k)个节点，直接迭代访问即可，比较简单。</p>
<p>解法2：递归</p>
<p>递归访问整个链表，当抵达链表末端时，该方法回传一个置为零的计数器，之后每次调用都会计数器加一。当计数器等于k时，表示访问的是倒数第k个节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">nthToLast</span><span class="params">(ListNode* head, <span class="keyword">int</span> k, <span class="keyword">int</span>&amp; i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode* node = <span class="built_in">nthToLast</span>(head-&gt;next, k, i);</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span> (i == k) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ListNode* l1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">10</span>);</span><br><span class="line">    l1 = <span class="built_in">fun</span>(l1);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    ListNode* node = <span class="built_in">nthToLast</span>(l1, <span class="number">3</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-删除某个节点"><a href="#2-3-删除某个节点" class="headerlink" title="2.3 删除某个节点"></a>2.3 删除某个节点</h3><p>描述：</p>
<p>实现一个算法，删除单向链表中间的某个节点，假定只能访问该节点。</p>
<p>解法：</p>
<p>访问不到链表的首节点，只能访问待删除节点。解法很简单，直接将后继节点的数据复制到当前节点，然后删除该节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteNode</span><span class="params">(ListNode* n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="literal">nullptr</span> || n-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* next = n-&gt;next;</span><br><span class="line">    n-&gt;val = next-&gt;val;</span><br><span class="line">    n-&gt;next = next-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> next;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，若待删除节点为链表的尾节点，则这个问题无解。</p>
<h3 id="2-4-链表分割"><a href="#2-4-链表分割" class="headerlink" title="2.4 链表分割"></a>2.4 链表分割</h3><p>描述：</p>
<p>现有一链表的头指针 ListNode* <strong>pHead</strong>，给一定值x，以x为基准将链表分割成两部分，编写一段代码将所有小于x的结点排在其余结点之前，且不能改变原来的数据顺序，返回重新排列后的链表的头指针。</p>
<p>解法：</p>
<p>不必移动和交换元素，直接创建两个链表，一个链表存储小于x的元素，一个链表存储大于等于x的元素。迭代访问整个链表，将元素插入before或after链表中。一旦抵达链表末端，表面拆分完成，最后合并两个链表。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">partition</span><span class="params">(ListNode* pHead, in</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">// write code here</span></span></span></span><br><span class="line"><span class="params"><span class="function">    ListNode* beforeStart = <span class="literal">nullptr</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    ListNode* beforeEnd = <span class="literal">nullptr</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    ListNode* afterStart = <span class="literal">nullptr</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    ListNode* afterEnd = <span class="literal">nullptr</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    ListNode* cur = pHead;</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">// 分割链表</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        ListNode* next = cur-&gt;next; <span class="comment">// 临时变量记录后继结点</span></span></span></span><br><span class="line"><span class="params"><span class="function">        cur-&gt;next = <span class="literal">nullptr</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">if</span> (cur-&gt;val &lt; x) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="comment">// 将节点插入before链表</span></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">if</span> (beforeStart == <span class="literal">nullptr</span>)</span></span></span><br><span class="line"><span class="params"><span class="function">                beforeStart = cur;</span></span></span><br><span class="line"><span class="params"><span class="function">                beforeEnd = cur;</span></span></span><br><span class="line"><span class="params"><span class="function">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                beforeEnd-&gt;next = cur;</span></span></span><br><span class="line"><span class="params"><span class="function">                beforeEnd = beforeEnd-&gt;</span></span></span><br><span class="line"><span class="params"><span class="function">            &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        	<span class="comment">// 将节点插入after链表</span></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">if</span> (afterStart == <span class="literal">nullptr</span>) </span></span></span><br><span class="line"><span class="params"><span class="function">                afterStart = cur;</span></span></span><br><span class="line"><span class="params"><span class="function">                afterEnd = cur;</span></span></span><br><span class="line"><span class="params"><span class="function">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                afterEnd-&gt;next = cur;</span></span></span><br><span class="line"><span class="params"><span class="function">                afterEnd = afterEnd-&gt;ne</span></span></span><br><span class="line"><span class="params"><span class="function">            &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">        cur = next;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">if</span> (beforeStart == <span class="literal">nullptr</span>) <span class="keyword">return</span> afterStart;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">// 合并链表</span></span></span></span><br><span class="line"><span class="params"><span class="function">    beforeEnd-&gt;next = afterStart;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> beforeStart;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-链式A-B"><a href="#2-5-链式A-B" class="headerlink" title="2.5 链式A+B"></a>2.5 链式A+B</h3><p>描述：</p>
<p>将两个反向存储在链表中的整数求和（即整数的个位存放在了链表首部，一位数对应一个节点），返回的结果仍用链表形式。给定两个链表ListNode* <strong>A</strong>，ListNode* <strong>B</strong>，请返回A+B的结果(ListNode*)。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">测试样例：</span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;1,2,3&#125;</span><span class="xml">,</span><span class="template-variable">&#123;3,2,1&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">返回：</span><span class="template-variable">&#123;4,4,4&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;7,1,6&#125;</span><span class="xml">,</span><span class="template-variable">&#123;5,9,2&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">返回：</span><span class="template-variable">&#123;2,1,9&#125;</span></span><br></pre></td></tr></table></figure>

<p>解法：</p>
<p>递归模拟，两个节点的值相加，如有进位则转入下一节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">plusAB</span><span class="params">(ListNode* a, ListNode* b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">addList</span>(a, b, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ListNode* <span class="title">addList</span><span class="params">(ListNode* a, ListNode* b, <span class="keyword">int</span> carry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">nullptr</span> &amp;&amp; b == <span class="literal">nullptr</span> &amp;&amp; carry == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode* res = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> val = carry;</span><br><span class="line">    <span class="keyword">if</span> (a != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        val += a-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        val += b-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    res-&gt;val = val % <span class="number">10</span>;</span><br><span class="line">    ListNode* more = <span class="built_in">addList</span>(a == <span class="literal">nullptr</span> ? <span class="literal">nullptr</span> : a-&gt;next, b == <span class="literal">nullptr</span> ?</span><br><span class="line">                             <span class="literal">nullptr</span> : b-&gt;next, val &gt;= <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    res-&gt;next = more;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>迭代遍历：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">plusAB</span><span class="params">(ListNode* a, ListNode* b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    ListNode* haha = b;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        b-&gt;val += a-&gt;val;</span><br><span class="line">        <span class="keyword">if</span> (b-&gt;val &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            b-&gt;val %= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (b-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">                b-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b-&gt;next-&gt;val++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            b-&gt;next = a-&gt;next;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a-&gt;next;</span><br><span class="line">        b = b-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> haha;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-有环链表的环路开头节点"><a href="#2-6-有环链表的环路开头节点" class="headerlink" title="2.6 有环链表的环路开头节点"></a>2.6 有环链表的环路开头节点</h3><p>描述：</p>
<p>给定一个有环链表，实现一个算法返回环路的开头节点。</p>
<p>解法：</p>
<ul>
<li>创建两个指针：fast和slow；</li>
<li>slow每走1步，fast走2步；</li>
<li>两者碰在一起时，将slow指向链表的头节点head，fast保持不变</li>
<li>以相同的速度移动slow和fast，一次走1步，返回新的碰撞处。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">findBeginning</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* slow = head;</span><br><span class="line">    ListNode* fast = head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找出第一次相遇的位置</span></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast) <span class="keyword">break</span>;<span class="comment">// 碰撞</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 错误检查：没有碰撞即没有环路</span></span><br><span class="line">    <span class="keyword">if</span> (fast == <span class="literal">nullptr</span> || fast-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// slow指向链表首部，fast不变，直到第二次相遇</span></span><br><span class="line">    slow = head;</span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回环路起始点</span></span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7-回文链表"><a href="#2-7-回文链表" class="headerlink" title="2.7 回文链表"></a>2.7 回文链表</h3><p>描述：编写一个函数，检查链表是否为回文。 </p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">测试样例：</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line">返回：<span class="literal">true</span></span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">返回：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>解法1：反转并比较</p>
<p>反转整个链表，然后比较反转链表和原始链表。若两者相同，则该链表为回文。<br>注意，在比较原始链表和反转链表时，其实只需比较链表的前半部分。若原始链表和反转链表的前半部分相同，那么，两者的后半部分肯定相同。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    ListNode* revered = <span class="built_in">reverseList</span>(pHead);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isEqual</span>(pHead, revered);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* res = <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        ListNode* n = <span class="keyword">new</span> <span class="built_in">ListNode</span>(cur-&gt;val);</span><br><span class="line">        n-&gt;next = res;</span><br><span class="line">        res = n;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEqual</span><span class="params">(ListNode* a, ListNode* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="literal">nullptr</span> &amp;&amp; b != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a-&gt;val != b-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a-&gt;next;</span><br><span class="line">        b = b-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a == <span class="literal">nullptr</span> &amp;&amp; b == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解法2：迭代法</p>
<p>将链表前半部分反转，利用栈来实现。<br>入栈有两种方式，若链表长度已知：可以用for循环迭代访问前半部分节点，将每个节点入栈；<br>若链表长度未知，使用快慢指针，迭代访问链表，在快指针到达链表尾部时，慢指针刚好在链表中间位置。<br>至此，栈里就存放了链表前半部分的所有节点，不过顺序是相反的。接下来，只需迭代访问链表余下节点。每次迭代时，比较当前节点和栈顶元素，若完成迭代时比较结果完全相同，则该链表是回文序列。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">    ListNode* slow = pHead;</span><br><span class="line">    ListNode* fast = pHead;</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">	<span class="comment">// 链表前半部分元素入栈，偶数个节点fast最后指向nullptr，奇数个节点fast最后指向最后一个节点</span></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        st.<span class="built_in">push</span>(slow-&gt;val);</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 奇数个节点，跳过中间节点</span></span><br><span class="line">    <span class="keyword">if</span> (fast != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (slow != <span class="literal">nullptr</span> &amp;&amp; !st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> top = st.<span class="built_in">top</span>();</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// 判断回文</span></span><br><span class="line">        <span class="keyword">if</span> (top != slow-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解法3：递归法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ListNode* myLeft = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">    myLeft = pHead;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tranverse</span>(pHead);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">tranverse</span><span class="params">(ListNode* right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(right == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;       </span><br><span class="line">    <span class="keyword">bool</span> res = <span class="built_in">tranverse</span>(right-&gt;next);       </span><br><span class="line">    res = (res &amp;&amp; right-&gt;val == myLeft-&gt;val);</span><br><span class="line">    myLeft = myLeft-&gt;next;                  </span><br><span class="line">    <span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><h3 id="3-1-三合一"><a href="#3-1-三合一" class="headerlink" title="3.1 三合一"></a>3.1 三合一</h3><p>描述：</p>
<p>如何只用一个数组来实现三个栈。</p>
<p>解法：</p>
<p>固定分割：将整个数组三等分，并将每个栈的增长限制在各自的空间里。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FixedMultiStack</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> numberOfStacks = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> stackCapacity;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; values;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; sizes;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FixedMultiStack</span>(<span class="keyword">int</span> stackSize) : <span class="built_in">stackCapacity</span>(stackSize) &#123;</span><br><span class="line">        values.<span class="built_in">resize</span>(stackSize * numberOfStacks);</span><br><span class="line">        sizes.<span class="built_in">resize</span>(numberOfStacks);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将值压入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> stackNum, <span class="keyword">int</span> value)</span> throws FullStackException </span>&#123; </span><br><span class="line">		<span class="comment">/* 检查有空间容纳下一个元素 */</span> </span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">isFull</span>(stackNum)) &#123; </span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">FullStackException</span>(); </span><br><span class="line">		&#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 对栈顶指针加 1 并更新顶部的值 */</span> </span><br><span class="line">        sizes[stackNum]++; </span><br><span class="line">        values[<span class="built_in">indexOfTop</span>(stackNum)] = value; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> stackNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isEmpty</span>(stackNum)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">EmptyStackException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> topIndex = <span class="built_in">indexOfTop</span>(stackNum);</span><br><span class="line">        <span class="keyword">int</span> value = values[topIndex]; <span class="comment">// 获取顶部元素</span></span><br><span class="line">        values[topIndex] = <span class="number">0</span>; <span class="comment">// 清零</span></span><br><span class="line">        sizes[stackNum]--; <span class="comment">// 缩减大小</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查栈是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(<span class="keyword">int</span> stackNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sizes[stackNum] == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查栈是否已满</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(<span class="keyword">int</span> stackNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sizes[stackNum] == stackCapacity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回栈顶元素索引</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">IndexOfTop</span><span class="params">(<span class="keyword">int</span> stackNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> offset = stackNum * stackCapacity;</span><br><span class="line">        <span class="keyword">int</span> size = sizes[stackNum];</span><br><span class="line">        <span class="keyword">return</span> offset + size - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-栈的最小值"><a href="#3-2-栈的最小值" class="headerlink" title="3.2 栈的最小值"></a>3.2 栈的最小值</h3><p>描述：</p>
<p>请设计一个栈，除了 pop 与 push 函数，还支持 min 函数，其可返回栈元素中的最小值。执行 push、pop 和 min 操作的时间复杂度必须为O(1)。</p>
<p>解法：</p>
<p>每个节点记录当前最小值。这么一来，要找到 min，直接查看栈顶元素就能得到最小值。缺点是栈很大时，每个元素都要记录min，会浪费大量空间。改进：用其他的栈来记录。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackWithMin</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s1; <span class="comment">// 数据栈</span></span><br><span class="line">    satck&lt;<span class="keyword">int</span>&gt; s2; <span class="comment">// 辅助栈</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val &lt;= <span class="built_in">min</span>()) &#123;</span><br><span class="line">            s2.<span class="built_in">push</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">        s1.<span class="built_in">push</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = s1.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="built_in">min</span>()) &#123;</span><br><span class="line">            s2.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        s1.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s2.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> INT_MAX;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> s2.<span class="built_in">top</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-集合栈"><a href="#3-3-集合栈" class="headerlink" title="3.3 集合栈"></a>3.3 集合栈</h3><p>描述：</p>
<p>请实现一种数据结构SetOfStacks，由多个大小为size的栈组成，当前一个栈填满时，则新建一个栈，且也可以与普通栈一样拥有相同的push和pop操作。<br>现给定一个操作序列<code>int[][2] </code>ope(C++为<code>vector&lt;vector&lt;int&gt;&gt;</code>)，若执行push操作则第一个数为1，第二个数为应push的数字；若执行pop操作，则第一个数为2，第二个数为空。返回值为int[]<a href="C++%E4%B8%BA%60vector%3Cvector%3Cint%3E%3E%60"></a>，即为变动后的SetOfStacks，顺序从下到上，初始SetOfStacks为空，并保证数据合法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">setOfStacks</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; ope, <span class="keyword">int</span> size) &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> len = ope.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ope[i][<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans.<span class="built_in">empty</span>() || ans.<span class="built_in">back</span>().<span class="built_in">size</span>() == size) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(&#123;&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">back</span>().<span class="built_in">push_back</span>(ope[i][<span class="number">1</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans.<span class="built_in">back</span>().<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="keyword">if</span> (ans.<span class="built_in">back</span>().<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                ans.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-双栈排序"><a href="#3-4-双栈排序" class="headerlink" title="3.4 双栈排序"></a>3.4 双栈排序</h3><p>描述：</p>
<p>给定一个<code>int[] numbers</code>(C++中为<code>vector&lt;int&gt;</code>)，其中第一个元素为栈顶，请编写程序将栈进行升序排列（即<strong>最大元素位于栈顶</strong>），返回排序后的栈。要求最多使用一个额外的栈存放临时数据，但不得将元素复制到别的数据结构中。并注意这是一个栈，意味着排序过程中只能访问到最后一个元素。</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">测试样例：</span><br><span class="line"><span class="string">[1,2,3,4,5]</span></span><br><span class="line">返回：<span class="string">[5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>

<p>解法：</p>
<p>s1为原先的栈，s2为最终排好序的栈，若要对s1排序，可以从s1逐一弹出元素，然后按顺序插入s2中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoStacksSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; numbers)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : numbers) &#123;</span><br><span class="line">        s1.<span class="built_in">push</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">    <span class="keyword">while</span> (!s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">// 把s1中的每个元素有序地插入到tmp中</span></span><br><span class="line">        <span class="keyword">int</span> top = s1.<span class="built_in">top</span>();</span><br><span class="line">        s1.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">while</span> (!tmp.<span class="built_in">empty</span>() &amp;&amp; tmp.<span class="built_in">top</span>() &gt; top) &#123;</span><br><span class="line">            s1.<span class="built_in">push</span>(tmp.<span class="built_in">top</span>());</span><br><span class="line">            tmp.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.<span class="built_in">push</span>(top);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="comment">// 将tmp中元素复制回s</span></span><br><span class="line">    <span class="keyword">while</span> (!tmp.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> top = tmp.<span class="built_in">top</span>();</span><br><span class="line">        s1.<span class="built_in">push</span>(top);</span><br><span class="line">        res.<span class="built_in">push_back</span>(top);</span><br><span class="line">        tmp.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="树与图"><a href="#树与图" class="headerlink" title="树与图"></a>树与图</h2><h3 id="4-1-二叉树平衡检查"><a href="#4-1-二叉树平衡检查" class="headerlink" title="4.1 二叉树平衡检查"></a>4.1 二叉树平衡检查</h3><p>描述：</p>
<p>平衡的定义如下，已知对于树中的任意一个结点，若其两颗子树的高度差不超过1，则我们称该树平衡。现给定指向树根结点的指针<code>TreeNode* root</code>，请编写函数返回一个bool，表示该二叉树是否平衡。</p>
<p>解法：</p>
<p>递归访问整棵树，计算每个节点的两个子树的高度。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct TreeNode *left;</span></span><br><span class="line"><span class="comment">    struct TreeNode *right;</span></span><br><span class="line"><span class="comment">    TreeNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBalance</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">int</span> diff = <span class="built_in">getHeight</span>(root-&gt;left) - <span class="built_in">getHeight</span>(root-&gt;right);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(diff) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 递归</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isBalance</span>(root-&gt;left) &amp;&amp; <span class="built_in">isBalance</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">getHeight</span>(root -&gt; left), <span class="built_in">getHeight</span>(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改进：<code>getHeight</code>函数不仅可以检查高度，还能检查这棵树是否平衡。从根节点递归向下检查每棵子树的高度，设计<code>checkHeight</code>函数，若子树平衡返回子树的实际高度，若子树不平衡返回-1并中断执行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBalance</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">checkHeight</span>(root) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkHeight</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 高度为0</span></span><br><span class="line">    <span class="comment">// 检查左子树是否平衡</span></span><br><span class="line">    <span class="keyword">int</span> leftHeight = <span class="built_in">checkHeight</span>(root-&gt;left);</span><br><span class="line">    <span class="keyword">if</span> (leftHeight == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 检查右子树是否平衡</span></span><br><span class="line">    <span class="keyword">int</span> rightHeight = <span class="built_in">checkHeight</span>(root-&gt;right);</span><br><span class="line">    <span class="keyword">if</span> (rightHeight == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 检查当前节点是否平衡</span></span><br><span class="line">    <span class="keyword">int</span> diff = leftHeight - rightHeight;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(diff) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 不平衡</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(leftHeight, rightHeight) + <span class="number">1</span>; <span class="comment">// 返回高度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-高度最小的BST"><a href="#4-2-高度最小的BST" class="headerlink" title="4.2 高度最小的BST"></a>4.2 高度最小的BST</h3><p>描述：</p>
<p>给定一个元素各不相同的有序序列int[] vals（升序排列）,请编写算法创建一棵高度最小的二叉查找树，并返回二叉查找树的高度。</p>
<p>解法：</p>
<p>递归方法创建高度最小的BST。将数组中间位置的元素插入树中，数组左半部分插入左子树，数组右半部分插入右子树，递归处理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buildMinimalBST</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; vals)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    TreeNode* root = <span class="built_in">createMinBST</span>(vals, <span class="number">0</span>, vals.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getHeight</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">createMinBST</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; vals, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (end &lt; start) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">    TreeNode* n = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(vals[mid]);</span><br><span class="line">    n-&gt;left = <span class="built_in">createMinBST</span>(vals, start, mid - <span class="number">1</span>);</span><br><span class="line">    n-&gt;right = <span class="built_in">createMinBST</span>(vals, mid + <span class="number">1</span>, end);</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">getHeight</span>(root -&gt; left), <span class="built_in">getHeight</span>(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-输出单层节点"><a href="#4-3-输出单层节点" class="headerlink" title="4.3 输出单层节点"></a>4.3 输出单层节点</h3><p>描述：</p>
<p>已知二叉树的根结点指针TreeNode* root以及链表上结点的深度，请设计算法返回一个链表ListNode，该链表代表该深度上所有结点的值，并按树上从左往右的顺序链接，深度不能超过树的高度，且树上结点的值为不大于100000的非负整数。</p>
<p>解法：</p>
<p>广度优先遍历，从根节点开始迭代，处于第i层时，表明访问过第i-1层的所有节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">getTreeLevel</span><span class="params">(TreeNode* root, <span class="keyword">int</span> dep)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    queue&lt;TreeNode*&gt; q;</span><br><span class="line">    ListNode* node = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    ListNode* res = node;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">int</span> deep = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            TreeNode* cur = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (deep == dep - <span class="number">1</span>) &#123;</span><br><span class="line">                ListNode* tmp = <span class="keyword">new</span> <span class="built_in">ListNode</span>(cur-&gt;val);</span><br><span class="line">                node-&gt;next = tmp;</span><br><span class="line">                node = node-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;left) q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;right) q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        deep++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-检查是否为BST"><a href="#4-4-检查是否为BST" class="headerlink" title="4.4 检查是否为BST"></a>4.4 检查是否为BST</h3><p>描述：</p>
<p>现给定树的根结点指针TreeNode* <strong>root</strong>，编辑函数返回一个bool值，判断该树是否为二叉查找树。</p>
<p>解法：</p>
<p>假定没有重复的值，可以采用中序遍历。BST中序遍历结果为递增序列。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">    <span class="built_in">process</span>(arr, root);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i<span class="number">-1</span>] &gt; arr[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中序遍历BST</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">process</span>(arr, root-&gt;left);</span><br><span class="line">    arr.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">    <span class="built_in">process</span>(arr, root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解法二：最小与最大法</p>
<p>二叉搜索树的条件：所有左边的节点必须小于或等于当前节点，而当前节点必须小于所有右边的节点。<br>迭代遍历整个树，自上而下传递最小与最大值，逐渐变窄的范围检查各个节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">check</span>(root, INT_MIN, INT_MAX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(TreeNode* root, <span class="keyword">int</span> minval, <span class="keyword">int</span> maxval)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val &lt; minval || root-&gt;val &gt; maxval) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">check</span>(root-&gt;left, minval, root-&gt;val) &amp;&amp; </span><br><span class="line">        <span class="built_in">check</span>(root-&gt;right, root-&gt;val, maxval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-寻找下一个节点"><a href="#4-5-寻找下一个节点" class="headerlink" title="4.5 寻找下一个节点"></a>4.5 寻找下一个节点</h3><p>描述：</p>
<p>给定树的根结点指针TreeNode* root和结点的值int p，编写一个函数，寻找该二叉树中指定结点的下一个结点（即中序遍历的后继），并返回p结点的后继结点的值。保证结点的值是小于等于100000的正数且没有重复值，若不存在后继返回-1。</p>
<p>解法：</p>
<p>递归中序遍历。当节点值等于p，标记为true，返回遍历的下一个节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findSucc</span><span class="params">(TreeNode* root, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">findSuccCore</span>(root, p, sign);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findSuccCore</span><span class="params">(TreeNode* root, <span class="keyword">int</span> p, <span class="keyword">bool</span>&amp; sign)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 左子树中寻找</span></span><br><span class="line">    <span class="keyword">int</span> left = <span class="built_in">findSuccCore</span>(root-&gt;left, p, sign);</span><br><span class="line">    <span class="keyword">if</span> (left != <span class="number">-1</span>) <span class="keyword">return</span> left;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (sign == <span class="literal">true</span>) <span class="keyword">return</span> root-&gt;val;</span><br><span class="line">    <span class="comment">// 当前值等于p，将标记置为true</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val == p) sign = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">findSuccCore</span>(root-&gt;right, p, sign);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-最近公共祖先"><a href="#4-6-最近公共祖先" class="headerlink" title="4.6 最近公共祖先"></a>4.6 最近公共祖先</h3><p>描述：</p>
<p>设计并实现一个算法，找出二叉树中某两个节点的第一个共同祖先。不得将其他的节点存储在另外的数据结构中。注意：这不一定是二叉搜索树。</p>
<p>解法：</p>
<p>顺着一条 p 和 q 都在同一边的链子查找，也就是说，若 p 和 q 都在某节点的左边，就到左子树中查找共同祖先，若都在右边，则在右子树中查找共同祖先。要是 p 和 q不在同一边，那就表示已经找到第一个共同祖先。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">commonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 错误检查，一个节点不在树中</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">cover</span>(root, p) || !<span class="built_in">cover</span>(root, q)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">helper</span>(root, p, q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 辅助函数</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">helper</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span> || root == p || root == q) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> pIsOnLeft = <span class="built_in">cover</span>(root-&gt;left, p);</span><br><span class="line">    <span class="keyword">bool</span> pIsOnRight = <span class="built_in">cover</span>(root-&gt;right, q);</span><br><span class="line">    <span class="keyword">if</span> (pIsOnLeft != pIsOnRight) &#123; <span class="comment">// 两个节点位于不同的两边</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* childSize = pIsOnLeft ? root-&gt;left : root-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">helper</span>(childSize, p, q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cover</span><span class="params">(TreeNode* root, TreeNode* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (root == p) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cover</span>(root-&gt;left, p) || <span class="built_in">cover</span>(root-&gt;right, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-7-求和路径"><a href="#4-7-求和路径" class="headerlink" title="4.7 求和路径"></a>4.7 求和路径</h3><p>描述：</p>
<p>给定一棵二叉树，其中每个节点都含有一个整数数值（该值或正或负）。设计一个算法，打印节点数值总和等于某个给定值的所有路径。注意，路径不一定非得从二叉树的根节点或叶节点开始或结束，但是其方向必须向下（只能从父节点指向子节点方向）。</p>
<p>解法1：暴力解法</p>
<p>遍历每个节点。对于每个节点，用递归法尝试所有向下的路径，并随着递归的进行跟踪路径的和。每当得到目标和，将发现的路径数目加一。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPathWithSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 从root开始，符合目标和的路径进行计数</span></span><br><span class="line">    <span class="keyword">int</span> pathFromRoot = <span class="built_in">countPathWithSumFromRoot</span>(root, target, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 左节点与右节点</span></span><br><span class="line">    <span class="keyword">int</span> pathFromLeft = <span class="built_in">countPathWithSum</span>(root-&gt;left, target);</span><br><span class="line">    <span class="keyword">int</span> pathFromRight = <span class="built_in">countPathWithSum</span>(root-&gt;right, target);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pathFromRoot + pathFromLeft + pathFromRight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回从根节点开始，符合目标和的路径总数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPathWithSumFromRoot</span><span class="params">(TreeNode* node, <span class="keyword">int</span> target, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    sum += node-&gt;val;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> totalPath = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (sum == target) &#123; <span class="comment">// 找到一条从root开始的路径</span></span><br><span class="line">        totalPath++;</span><br><span class="line">    &#125;</span><br><span class="line">    totalPath += <span class="built_in">countPathWithSumFromRoot</span>(node-&gt;left, target, sum);</span><br><span class="line">    totalPath += <span class="built_in">countPathWithSumFromRoot</span>(node-&gt;right, target, sum);</span><br><span class="line">    <span class="keyword">return</span> totalPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解法2：优化算法</p>
<p>使用哈希表减少重复计算。使用深度优先查找对树进行遍历。当我们访问每个节点时，执行以下操作。(1) 跟踪 runningSum 的值。我们将使该变量成为函数的一个参数，并对其增加 node.value。<br>(2) 在散列表中查找 runningSum - targetSum。我们从散列表获得的值为路径的总数。将变量 totalPaths 的值设置为该值。<br>(3) 如果 runningSum == targetSum，则发现了另外一条从根节点开始的路径。将变量 totalPaths加 1。<br>(4) 将 runningSum 加入到散列表中（如果 runningSum 已经存在，则将增加其值）。<br>(5) 对左子树和右子树进行递归，计算和为 targetSum 的路径的条数。<br>(6) 对左子树和右子树的递归调用结束后，减少散列表中 runningSum 对应的值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPathWithSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; map;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process</span>(root, target, <span class="number">0</span>, map);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 辅助函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">(TreeNode* node, <span class="keyword">int</span> target, <span class="keyword">int</span> sum, unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; map)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 基础情况</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对终止于该节点，符合目标和的路径进行计数</span></span><br><span class="line">    sum += node-&gt;val;</span><br><span class="line">    <span class="keyword">int</span> diff = sum - target;</span><br><span class="line">    <span class="comment">//map[diff] = 0;</span></span><br><span class="line">    <span class="keyword">int</span> totalPath = map[diff];</span><br><span class="line">    <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">        totalPath++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    map[sum]++;</span><br><span class="line">    totalPath += <span class="built_in">countPathWithSum</span>(node-&gt;left, target, sum, map);</span><br><span class="line">    totalPath += <span class="built_in">countPathWithSum</span>(node-&gt;right, target, sum, map);</span><br><span class="line">    map[sum]--;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> totalPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="递归与动态规划"><a href="#递归与动态规划" class="headerlink" title="递归与动态规划"></a>递归与动态规划</h2><h3 id="5-1-加到n"><a href="#5-1-加到n" class="headerlink" title="5.1 加到n"></a>5.1 加到n</h3><p>描述：</p>
<p>给定一个正整数int <strong>n</strong>，从0开始加到n，每次可增加1、2或3，直到其大于等于n，请返回一个数，代表加到n的方案的个数。保证n小于等于100000，并为了防止溢出，请将结果Mod 1000000007。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">测试样例1：</span><br><span class="line">1</span><br><span class="line">返回：1</span><br><span class="line">测试样例2：</span><br><span class="line">3</span><br><span class="line">返回：4</span><br><span class="line">测试样例3：</span><br><span class="line">4</span><br><span class="line">返回：7</span><br></pre></td></tr></table></figure>

<p>解法：</p>
<p>暴力解求解：递归，指数级增长，会超时。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">countWays</span>(n - <span class="number">1</span>) + <span class="built_in">countWays</span>(n - <span class="number">2</span>) + <span class="built_in">countWays</span>(n - <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改进：制表法，利用memo数组记录中间过程的值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">memo</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="comment">//memo[1] = 1;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">countWaysCore</span>(n, memo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countWaysCore</span><span class="params">(<span class="keyword">int</span> n, vector&lt;<span class="keyword">int</span>&gt;&amp; memo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (memo[n] &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> memo[n];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        memo[n] = ((<span class="built_in">countWaysCore</span>(n - <span class="number">1</span>, memo)  </span><br><span class="line">                    + <span class="built_in">countWaysCore</span>(n - <span class="number">2</span>, memo))% <span class="number">1000000007</span></span><br><span class="line">                   + <span class="built_in">countWaysCore</span>(n - <span class="number">3</span>, memo))% <span class="number">1000000007</span>;</span><br><span class="line">        <span class="keyword">return</span> memo[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-机器人走方格I"><a href="#5-2-机器人走方格I" class="headerlink" title="5.2 机器人走方格I"></a>5.2 机器人走方格I</h3><p>描述：</p>
<p>给定两个正整数int <strong>x</strong>,int <strong>y</strong>，代表一个x乘y的网格，现有一个机器人要从网格左上角顶点走到右下角，每次只能走一步且只能向右或向下走，返回机器人有多少种走法。保证x＋y小于等于12。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">测试样例：</span><br><span class="line">2,2</span><br><span class="line">返回：2</span><br></pre></td></tr></table></figure>

<p>解法：</p>
<p>假设网格r行c列，移动到(r, c), 需要先移动到相邻点(r-1, c)或(r, c-1)。<br>动态规划，用一个二维表dp记录每个点的走法，<code>dp[r][c] = dp[r - 1][c] + dp[r][c - 1]</code>.<br>需要注意边界的情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countWays</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> dp[x + <span class="number">1</span>][y + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//dp[1][1] = 1;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= y; j++) &#123;</span><br><span class="line">        dp[<span class="number">1</span>][j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= y; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[x][y];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-机器人走方格II"><a href="#5-3-机器人走方格II" class="headerlink" title="5.3 机器人走方格II"></a>5.3 机器人走方格II</h3><p>描述：</p>
<p>给定一个int[][] <strong>map</strong>(C++ 中为vector &gt;)网格图，若map[i][j]为1则该点不是障碍点，否则为障碍点。另外给定int <strong>x</strong>,int <strong>y</strong>，表示网格的大小。现有一个机器人要从网格左上角走到右下角，只能走格点且只能向右或向下走。请返回机器人从(0,0)走到(x - 1,y - 1)有多少种走法。请将结果Mod 1000000007以防止溢出，并保证x和y均小于等于50。</p>
<p>解法：</p>
<p>动态规划，建立dp表存储中间结果，如果<code>map[r][c]</code>值不为1，则<code>dp[r][c] = 0</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countWays</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; map, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(x, vector&lt;<span class="keyword">int</span>&gt;(y, <span class="number">0</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map[i][<span class="number">0</span>] != <span class="number">1</span>) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map[<span class="number">0</span>][j] != <span class="number">1</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; x; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; y; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i][j] = (dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>]) % <span class="number">1000000007</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[x - <span class="number">1</span>][y - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-魔术索引"><a href="#5-4-魔术索引" class="headerlink" title="5.4 魔术索引"></a>5.4 魔术索引</h3><p>描述：</p>
<p>已知数组<strong>A</strong>[0..n-1]和数组大小<strong>n</strong>（升序数组，元素值各不相同），若存在A[i]=i则称该数组有魔术索引，请判断该数组是否存在魔术索引，返回值为bool，要求复杂度优于o(n)。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">测试样例：</span><br><span class="line"><span class="string">[1,2,3,4,5]</span></span><br><span class="line">返回：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>解法：</p>
<p>有序数组，二分查找，要找出元素k，会先拿它跟数组中间的元素 x比较，确定k位于x的左边还是右边。递归二分查找：（数组中没有重复的值）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findMagicIndex</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process</span>(A, <span class="number">0</span>, A.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">process</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] == mid) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; mid)&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">process</span>(arr, start, mid - <span class="number">1</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">process</span>(arr, mid + <span class="number">1</span>, end); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进阶：数组中有重复的值，判断是否存在魔术索引。</p>
<p>解法：如果数组元素有重复值，前面的算法就会失效。如果 A[mid] &lt; mid，我们无法断定魔术索引位于数组哪一边。它可能在数组右侧，也可能在左侧。<br>二分递归：（也适用于不存在重复的值，暴力解法）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">findMagicIndex</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process</span>(A, <span class="number">0</span>, A.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">process</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] == mid) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process</span>(arr, start, mid - <span class="number">1</span>) || <span class="built_in">process</span>(arr, mid + <span class="number">1</span>, end); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-子集"><a href="#5-5-子集" class="headerlink" title="5.5 子集"></a>5.5 子集</h3><p>描述：</p>
<p>已知数组<strong>A</strong>和其大小<strong>n</strong>，请返回A的所有非空子集。要求A中元素个数不大于20且互异。各子集内部从大到小排序,子集间字典逆序排序。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">测试样例：</span><br><span class="line"><span class="selector-attr">[123,456,789]</span></span><br><span class="line">返回：&#123;<span class="selector-attr">[789,456,123]</span>,<span class="selector-attr">[789,456]</span>,<span class="selector-attr">[789,123]</span>,<span class="selector-attr">[789]</span>,<span class="selector-attr">[456 123]</span>,<span class="selector-attr">[456]</span>,<span class="selector-attr">[123]</span>&#125;</span><br></pre></td></tr></table></figure>

<p>解法：</p>
<p>递归，path记录中间过程。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">getSubsets</span>(vector&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(),[](<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;<span class="keyword">return</span> a &gt; b;&#125;);</span><br><span class="line">    <span class="comment">// res.clear();</span></span><br><span class="line">    <span class="comment">// path.clear();</span></span><br><span class="line">    <span class="built_in">recur</span>(A, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recur</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!path.<span class="built_in">empty</span>()) res.<span class="built_in">push_back</span>(path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= arr.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= index; i--) &#123;</span><br><span class="line">        path.<span class="built_in">push_back</span>(arr[i]);</span><br><span class="line">        <span class="built_in">recur</span>(arr, i + <span class="number">1</span>);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>C++并发编程笔记</title>
    <url>/posts/20a59019.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h1 id="1-并发"><a href="#1-并发" class="headerlink" title="1.并发"></a>1.并发</h1><p>并发，指两个或两个以上的独立活动同时发生。</p>
<p>计算机的并发，指在单个系统里同时执行多个独立的任务。</p>
<p>并发的两种方式：真正并行 vs 任务切换</p>
<p><img src="/20220627/1-1.png" alt="1-1"></p>
<p>四个任务在双核处理器上的任务切换，仍是将任务整齐地划分为同等大小子任务块的理想情况。实际上，许多因素会使得任务分割不均或调度不规则。</p>
<p><img src="/20220627/1-2.png" alt="1-2"></p>
<p>四个任务在两个核心之间的切换</p>
<h2 id="并发的方式"><a href="#并发的方式" class="headerlink" title="并发的方式"></a>并发的方式</h2><ul>
<li>多进程并发</li>
<li>多线程并发</li>
</ul>
<p><strong>多进程并发：</strong>将应用程序分为多个独立的进程同时运行，就像同时进行网页浏览和文字处理一样。</p>
<p>独立的进程可以通过进程间的通信渠道传递讯息(信号、套接字、文件、管道等等)。</p>
<p><img src="/20220627/1-3.png" alt="1-3"></p>
<p>缺点：</p>
<ul>
<li>进程间的通信非常复杂，速度很慢，因为操作系统会对进程进行保护，以避免一个进程去修改另一个进程的数据。</li>
<li>运行多个进程的固定开销大：需要时间启动进程，操作系统需要资源来管理进程等等。</li>
</ul>
<p><strong>多线程并发：</strong>在单进程中运行多个线程。</p>
<p>线程很像轻量级的进程：每个线程相互独立运行，并且可以在不同的指令序列中运行。不过，进程中的所有线程都共享地址空间，并且能访问到大部分数据———全局变量仍然是全局的，指针、对象的引用或数据可以在线程之间传递。</p>
<p><img src="/20220627/1-4.png" alt="1-4"></p>
<p>一个进程中的两个线程，正在通过共享内存进行通信。</p>
<p>地址空间共享，以及缺少线程间的数据保护，使得操作系统记录的工作量减小，所以使用多线程的开销远远小于多进程。不过，共享内存的灵活性是有代价的：如果多个线程访问数据，那么必须确保每个线程所访问到的数据一致，这就需要对线程通信做大量的工作。</p>
<h2 id="使用并发的原因"><a href="#使用并发的原因" class="headerlink" title="使用并发的原因"></a>使用并发的原因</h2><p>原因有二：分离关注点（SOC）、性能</p>
<ul>
<li><p>分离关注点。通过将相关的代码与无关的代码分离，可以使程序更容易理解和测试，从而减少出错的可能。即使一些操作需要同时进行，依旧可以使用并发，分离不同的功能区域。</p>
</li>
<li><p>性能。两种利用并发提高性能的方式：</p>
<ul>
<li>任务并行：将一个单个任务分成几部分并行运行，从而降低总运行时间</li>
<li>数据并行：一个线程执行算法的一部分，而另一个线程执行算法的另一个部分，每个线程在不同的数据块上执行相同的操作</li>
</ul>
</li>
</ul>
<p><strong>什么时候不使用并发：</strong></p>
<p>收益比不上成本。使用并发的代码在很多情况下难以理解，因此编写和维护多线程代码会产生脑力成本，而增加的复杂性也可能会引起更多的错误。</p>
<p>线程的资源有限。如果太多的线程同时运行，则会消耗很多操作系统资源，从而使得操作系统整体上运行得更加缓慢。不仅如此，因为每个线程都需要一个独立的堆栈，所以运行太多的线程也会耗尽进程的可用内存或地址空间。</p>
<p>运行越多的线程，操作系统就需要越多的上下文切换，每一次切换都需要耗费时间。所以在某些时候，增加线程实际上会降低应用的整体性能。</p>
<h2 id="并发程序"><a href="#并发程序" class="headerlink" title="并发程序"></a>并发程序</h2><p>C++多线程程序和其他C++程序差不多。唯一的区别在于某些函数可以并发运行，所以需要确保共享数据在并发访问时是安全的。</p>
<p>例子：打印“Hello World”的程序</p>
<p>单线程运行：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Hello World\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动独立的线程显示信息：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span>  <span class="comment">// 1 标准库中对多线程支持的声明</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span>  <span class="comment">// 2 独立的函数打印信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Hello Concurrent World\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::thread <span class="title">t</span><span class="params">(hello)</span></span>;  <span class="comment">// 3 构造名为t的std::thread对象拥有新函数hello()作为其执行函数</span></span><br><span class="line">  t.<span class="built_in">join</span>();  <span class="comment">// 4 当前线程等待t线程终止之后才从t.join()返回。创建线程等待std::thread对象创建的线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-线程管理"><a href="#2-线程管理" class="headerlink" title="2.线程管理"></a>2.线程管理</h1><h2 id="线程基本操作"><a href="#线程基本操作" class="headerlink" title="线程基本操作"></a>线程基本操作</h2><h3 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h3><p>使用C++线程库启动线程，就是构造<code>std::thread</code>对象：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_some_work</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">std::thread <span class="title">my_thread</span><span class="params">(do_some_work)</span></span>;</span><br></pre></td></tr></table></figure>

<p>需要包含<code>&lt;thread&gt;</code>头文件，<code>std::thread</code>可以通过有函数操作符类型的实例进行构造：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">background_task</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">do_something</span>();</span><br><span class="line">    <span class="built_in">do_something_else</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">background_task f;</span><br><span class="line"><span class="function">std::thread <span class="title">my_thread</span><span class="params">(f)</span></span>;</span><br></pre></td></tr></table></figure>

<p>代码中，提供的函数对象会复制到新线程的存储空间中，函数对象的执行和调用都在线程的内存空间中进行。</p>
<p>Lambda表达式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::thread <span class="title">my_thread</span><span class="params">([]&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  do_something();</span></span></span><br><span class="line"><span class="params"><span class="function">  do_something_else();</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br></pre></td></tr></table></figure>

<p>线程启动后是要等待线程结束，还是让其自主运行。</p>
<p>当<code>std::thread</code>对象销毁之前还没有做出决定，程序就会终止。</p>
<p>即便是有异常存在，也需要确保线程能够正确<em>汇入</em>(joined)或<em>分离</em>(detached)。</p>
<p>如果不等待线程汇入 ，就必须保证线程结束之前，访问数据的有效性。</p>
<p>代码2.1：函数已经返回，线程依旧访问局部变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">func</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span>&amp; i;</span><br><span class="line">  <span class="built_in">func</span>(<span class="keyword">int</span>&amp; i_) : <span class="built_in">i</span>(i_) &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> j=<span class="number">0</span> ; j&lt;<span class="number">1000000</span> ; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">do_something</span>(i);           <span class="comment">// 1 潜在访问隐患：空引用</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">oops</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> some_local_state=<span class="number">0</span>;</span><br><span class="line">  <span class="function">func <span class="title">my_func</span><span class="params">(some_local_state)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">my_thread</span><span class="params">(my_func)</span></span>;</span><br><span class="line">  my_thread.<span class="built_in">detach</span>();          <span class="comment">// 2 不等待线程结束</span></span><br><span class="line">&#125;                              <span class="comment">// 3 新线程可能还在运行</span></span><br></pre></td></tr></table></figure>

<p>可能会出现新线程访问已经销毁的变量。过程如下：</p>
<table>
<thead>
<tr>
<th align="center">主线程</th>
<th align="center">新线程</th>
</tr>
</thead>
<tbody><tr>
<td align="center">使用some_local_state构造my_func</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">开启新线程my_thread</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">启动</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">调用func::operator()</td>
</tr>
<tr>
<td align="center">将my_thread分离</td>
<td align="center">执行func::operator();可能会在do_something中调用some_local_state的引用</td>
</tr>
<tr>
<td align="center">销毁some_local_state</td>
<td align="center">持续运行</td>
</tr>
<tr>
<td align="center">退出oops函数</td>
<td align="center">持续执行func::operator()；可能会在do_something中调用some_local_state的引用 –&gt; 导致未定义行为</td>
</tr>
</tbody></table>
<p>常规处理方法：</p>
<ul>
<li><p>将数据复制到线程中。对于对象中包含的指针和引用需谨慎。使用访问局部变量的函数去创建线程是一个糟糕的主意。</p>
</li>
<li><p>可以通过join()函数来确保线程在主函数完成前结束。</p>
</li>
</ul>
<h3 id="等待线程完成"><a href="#等待线程完成" class="headerlink" title="等待线程完成"></a>等待线程完成</h3><p>如需等待线程，需要使用**join()**。</p>
<p>将例2-1中的<code>my_thread.detach()</code>替换为<code>my_thread.join()</code>，就可以确保局部变量在线程完成后才销毁。</p>
<p>只能对一个线程使用一次join()，一旦使用过join()，<code>std::thread</code>对象就不能再次汇入了。当对其使用joinable()时，将返回false。</p>
<h3 id="特殊情况下的等待"><a href="#特殊情况下的等待" class="headerlink" title="特殊情况下的等待"></a>特殊情况下的等待</h3><p>避免应用被抛出的异常所终止。通常，在无异常的情况下使用join()时，需要在异常处理过程中调用join()，从而避免生命周期的问题。</p>
<p>代码2.2 等待线程完成</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">func</span>;</span> <span class="comment">// 定义在代码2.1中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> some_local_state=<span class="number">0</span>;</span><br><span class="line">  <span class="function">func <span class="title">my_func</span><span class="params">(some_local_state)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">t</span><span class="params">(my_func)</span></span>;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">do_something_in_current_thread</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in"><span class="keyword">catch</span></span>(...)</span><br><span class="line">  &#123;</span><br><span class="line">    t.<span class="built_in">join</span>();  <span class="comment">// 1 抛出异常</span></span><br><span class="line">    <span class="keyword">throw</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  t.<span class="built_in">join</span>();  <span class="comment">// 2 正常退出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用“资源获取即初始化方式”(RAII，Resource Acquisition Is Initialization)，提供一个类，在析构函数中使用join()。</p>
<p>代码2.3 使用RAII等待线程完成</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">thread_guard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  std::thread&amp; t;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">thread_guard</span><span class="params">(std::thread&amp; t_)</span>:</span></span><br><span class="line"><span class="function">    t(t_)</span></span><br><span class="line"><span class="function">  &#123;</span>&#125;</span><br><span class="line">  ~<span class="built_in">thread_guard</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(t.<span class="built_in">joinable</span>()) <span class="comment">// 1 判断线程是否可以汇入</span></span><br><span class="line">    &#123;</span><br><span class="line">      t.<span class="built_in">join</span>();      <span class="comment">// 2 汇入</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">thread_guard</span>(thread_guard <span class="keyword">const</span>&amp;)=<span class="keyword">delete</span>;   <span class="comment">// 3 不让编译器自动生成拷贝或赋值</span></span><br><span class="line">  thread_guard&amp; <span class="keyword">operator</span>=(thread_guard <span class="keyword">const</span>&amp;)=<span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">func</span>;</span> <span class="comment">// 定义在代码2.1中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> some_local_state=<span class="number">0</span>;</span><br><span class="line">  <span class="function">func <span class="title">my_func</span><span class="params">(some_local_state)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">t</span><span class="params">(my_func)</span></span>;</span><br><span class="line">  <span class="function">thread_guard <span class="title">g</span><span class="params">(t)</span></span>;</span><br><span class="line">  <span class="built_in">do_something_in_current_thread</span>();</span><br><span class="line">&#125;    <span class="comment">// 4 thread_guard对象g是第一个被销毁的，</span></span><br><span class="line"><span class="comment">// 即使do_something_in_current_thread抛出一个异常，这个销毁依旧会发生。</span></span><br></pre></td></tr></table></figure>

<h3 id="后台运行线程"><a href="#后台运行线程" class="headerlink" title="后台运行线程"></a>后台运行线程</h3><p>detach()会让线程在后台运行，这就意味着与主线程不能直接交互。</p>
<p>守护线程（daemon threads）：分离线程，UNIX中是指没有任何显示的接口，在后台运行的线程。特点是长时间运行。</p>
<p>分离线程只能确定线程什么时候结束，发后即忘的任务使用分离线程。</p>
<p>代码2-4 使用分离线程处理文档</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">edit_document</span><span class="params">(std::string <span class="keyword">const</span>&amp; filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">open_document_and_display_gui</span>(filename);</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">done_editing</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    user_command cmd=<span class="built_in">get_user_input</span>();</span><br><span class="line">    <span class="keyword">if</span>(cmd.type==open_new_document)</span><br><span class="line">    &#123;</span><br><span class="line">      std::string <span class="keyword">const</span> new_name=<span class="built_in">get_filename_from_user</span>();</span><br><span class="line">      <span class="function">std::thread <span class="title">t</span><span class="params">(edit_document,new_name)</span></span>;  <span class="comment">// 1 打开新文档，可以传入函数名和函数所需参数</span></span><br><span class="line">      t.<span class="built_in">detach</span>();  <span class="comment">// 2 分离线程，新线程打开另一个文件，edit_document函数可以复用，并通过传参的形式打开新的文件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">process_user_input</span>(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>向可调用对象或函数传递参数很简单，只需要将这些参数作为 <code>std::thread</code>构造函数的附加参数即可。</p>
<p>即使函数中的参数是引用的形式，拷贝操作也会执行。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i, std::string <span class="keyword">const</span>&amp; s)</span></span>;</span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(f, <span class="number">3</span>, <span class="string">&quot;hello&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>代码创建了一个调用f(3, “hello”)的线程。函数f需要一个<code>std::string</code>对象作为第二个参数，但这里使用的是字符串的字面值，也就是<code>char const *</code>类型，线程的上下文完成字面值向<code>std::string</code>的转化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i,std::string <span class="keyword">const</span>&amp; s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">not_oops</span><span class="params">(<span class="keyword">int</span> some_param)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buffer[<span class="number">1024</span>]; <span class="comment">// buffer是一个指针变量，指向局部变量</span></span><br><span class="line">  <span class="built_in">sprintf</span>(buffer,<span class="string">&quot;%i&quot;</span>,some_param);</span><br><span class="line">  <span class="function">std::thread <span class="title">t</span><span class="params">(f,<span class="number">3</span>,std::string(buffer))</span></span>;  <span class="comment">// 使用std::string，将字面值转化为std::string避免悬空指针</span></span><br><span class="line">  t.<span class="built_in">detach</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部代码会将拷贝的参数以右值的方式进行传递，这是为了那些只支持移动的类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_data_for_widget</span><span class="params">(widget_id w,widget_data&amp; data)</span></span>; <span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">oops_again</span><span class="params">(widget_id w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  widget_data data;</span><br><span class="line">  <span class="function">std::thread <span class="title">t</span><span class="params">(update_data_for_widget,w,data)</span></span>; <span class="comment">// 2</span></span><br><span class="line">  <span class="built_in">display_status</span>();</span><br><span class="line">  t.<span class="built_in">join</span>();</span><br><span class="line">  <span class="built_in">process_widget_data</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为函数期望的是一个非常量引用作为参数(而非右值)，所以会在编译时出错。可以使用<code>std::ref</code>将参数转换成引用的形式。因此可将线程的调用改为以下形式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(update_data_for_widget,w,std::ref(data))</span></span>;</span><br></pre></td></tr></table></figure>

<p>update_data_for_widget就会收到data的引用，而非data的拷贝副本，这样代码就能顺利的通过编译了。</p>
<p>如果提供的参数支持移动（move），不能拷贝。</p>
<p><code>std::unique_ptr</code>(C++11中的智能指针)，为动态分配的对象提供内存自动管理机制(类似垃圾回收机制)。同一时间内，只允许一个<code>std::unique_ptr</code>实例指向一个对象，并且当这个实例销毁时，指向的对象也将被删除。</p>
<p><em>移动构造函数</em>(move constructor)和<em>移动赋值操作符</em>(move assignment operator)允许一个对象的所有权在多个<code>std::unique_ptr</code>实例中传递。使用“移动”转移对象所有权后，就会留下一个空指针。</p>
<p><code>std::move</code>转移动态对象的所有权到线程中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_big_object</span><span class="params">(std::unique_ptr&lt;big_object&gt;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::unique_ptr&lt;big_object&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> big_object)</span></span>;</span><br><span class="line">p-&gt;<span class="built_in">prepare_data</span>(<span class="number">42</span>);</span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(process_big_object,std::move(p))</span></span>;</span><br><span class="line"><span class="comment">// big_object 对象的所有权首先被转移到新创建线程的的内部存储中，之后再传递给process_big_object函数。</span></span><br></pre></td></tr></table></figure>

<p>线程的所有权可以在多个<code>std::thread</code>实例中转移，这依赖于<code>std::thread</code>实例的<strong>可移动</strong>且<strong>不可复制</strong>性。</p>
<p>可移动性：使得开发者可以自己决定，哪个实例拥有线程实际执行的所有权。</p>
<p>不可复制性：在某一时间点，一个<code>std::thread</code>实例只能关联一个执行线程。</p>
<h2 id="转移所有权"><a href="#转移所有权" class="headerlink" title="转移所有权"></a>转移所有权</h2><p>例子，创建两个执行进程，并在<code>std::thread</code>实例之间(t1，t2和t3)转移所有权：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">some_function</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">some_other_function</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">std::thread <span class="title">t1</span><span class="params">(some_function)</span></span>;            <span class="comment">// 1 新线程与t1相关联</span></span><br><span class="line">std::thread t2 = std::<span class="built_in">move</span>(t1);            <span class="comment">// 2 t1所有权转移给t2，执行some_function的函数线程与t2关联。</span></span><br><span class="line">t1=std::<span class="built_in">thread</span>(some_other_function);    <span class="comment">// 3 临时std::thread对象相关的线程启动</span></span><br><span class="line">std::thread t3;                            <span class="comment">// 4 默认构造方式创建，没有与任何线程进行关联</span></span><br><span class="line">t3=std::<span class="built_in">move</span>(t2); <span class="comment">// 5 移动操作后，t1与执行some_other_function的线程相关联，t2与任何线程都无关联，t3与执行some_function的线程相关联。</span></span><br><span class="line">t1=std::<span class="built_in">move</span>(t3);                        <span class="comment">// 6 赋值操作将使程序崩溃</span></span><br></pre></td></tr></table></figure>

<p>最后的移动操作，将some_function线程的所有权转移给t1，但是t1已经有了一个关联的线程（执行some_other_function的线程），所以这里系统直接调用<code>std::terminate()</code>终止程序继续运行。</p>
<p><code>std::terminate()</code>不抛出异常，是noexpect函数，保证与<code>std::thread</code>的析构函数的行为一致。</p>
<p>线程对象析构前，显式的等待线程完成或分离它，即不能通过赋新值给<code>std::thread</code>对象的方式”丢弃“一个线程。</p>
<p><code>std::thread</code>支持移动，线程的所有权可以在函数外进行转移。</p>
<p>代码2.5 函数返回<code>std::thread</code>对象</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::thread <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">some_function</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">thread</span>(some_function);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::thread <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">some_other_function</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">t</span><span class="params">(some_other_function,<span class="number">42</span>)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有权可以在函数内部传递，允许<code>std::thread</code>实例作为参数进行传递：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(std::thread t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">some_function</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="built_in">f</span>(std::<span class="built_in">thread</span>(some_function));</span><br><span class="line">  <span class="function">std::thread <span class="title">t</span><span class="params">(some_function)</span></span>;</span><br><span class="line">  <span class="built_in">f</span>(std::<span class="built_in">move</span>(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了确保线程在程序退出前完成，定义了scoped_thread类。</p>
<p>代码2.6 scoped_thread的用法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scoped_thread</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  std::thread t;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">scoped_thread</span><span class="params">(std::thread t_)</span>: // <span class="number">1</span></span></span><br><span class="line"><span class="function">    t(std::move(t_))</span></span><br><span class="line"><span class="function">  &#123;</span></span><br><span class="line">    <span class="keyword">if</span>(!t.<span class="built_in">joinable</span>())  <span class="comment">// 2 检测线程是否可汇入放在构造函数中，不可汇入则抛出异常</span></span><br><span class="line">      <span class="keyword">throw</span> std::<span class="built_in">logic_error</span>(“No thread”);</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">scoped_thread</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    t.<span class="built_in">join</span>(); <span class="comment">// 3</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">scoped_thread</span>(scoped_thread <span class="keyword">const</span>&amp;)=<span class="keyword">delete</span>;</span><br><span class="line">  scoped_thread&amp; <span class="keyword">operator</span>=(scoped_thread <span class="keyword">const</span>&amp;)=<span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">func</span>;</span> <span class="comment">// 定义在代码2.1中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> some_local_state;</span><br><span class="line">  <span class="function">scoped_thread <span class="title">t</span><span class="params">(std::thread(func(some_local_state)))</span></span>;    <span class="comment">// 4 新线程会直接传递到scoped_thread中</span></span><br><span class="line">  <span class="built_in">do_something_in_current_thread</span>();</span><br><span class="line">&#125; <span class="comment">// 5 scoped_thread对象就会销毁，然后在析构函数中完成汇入3</span></span><br></pre></td></tr></table></figure>

<p>代码2.7 joining_thread类的实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">joining_thread</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  std::thread t;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">joining_thread</span>() <span class="keyword">noexcept</span>=<span class="keyword">default</span>;</span><br><span class="line">  <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Callable,<span class="keyword">typename</span> ... Args&gt;</span></span><br><span class="line"><span class="function">  <span class="keyword">explicit</span> <span class="title">joining_thread</span><span class="params">(Callable&amp;&amp; func,Args&amp;&amp; ... args)</span>:</span></span><br><span class="line"><span class="function">    t(std::forward&lt;Callable&gt;(func),std::forward&lt;Args&gt;(args)...)</span></span><br><span class="line"><span class="function">  &#123;</span>&#125;</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">joining_thread</span><span class="params">(std::thread t_)</span> <span class="keyword">noexcept</span>:</span></span><br><span class="line"><span class="function">    t(std::move(t_))</span></span><br><span class="line"><span class="function">  &#123;</span>&#125;</span><br><span class="line">  <span class="built_in">joining_thread</span>(joining_thread&amp;&amp; other) <span class="keyword">noexcept</span>:</span><br><span class="line">    <span class="built_in">t</span>(std::<span class="built_in">move</span>(other.t))</span><br><span class="line">  &#123;&#125;</span><br><span class="line">  joining_thread&amp; <span class="keyword">operator</span>=(joining_thread&amp;&amp; other) <span class="keyword">noexcept</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>（<span class="built_in">joinable</span>()）&#123;</span><br><span class="line">      <span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    t = std::<span class="built_in">move</span>(other.t);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  joining_thread&amp; <span class="keyword">operator</span>=(std::thread other) <span class="keyword">noexcept</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">joinable</span>())</span><br><span class="line">      <span class="built_in">join</span>();</span><br><span class="line">    t=std::<span class="built_in">move</span>(other);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ~<span class="built_in">joining_thread</span>() <span class="keyword">noexcept</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">joinable</span>())</span><br><span class="line">    <span class="built_in">join</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(joining_thread&amp; other)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    t.<span class="built_in">swap</span>(other.t);</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="function">thread::id <span class="title">get_id</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.<span class="built_in">get_id</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">joinable</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.<span class="built_in">joinable</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    t.<span class="built_in">join</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">detach</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    t.<span class="built_in">detach</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">std::thread&amp; <span class="title">as_thread</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> std::thread&amp; <span class="title">as_thread</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>std::thread</code>中对移动语义的支持，也适用于使用<code>std::thread</code>的<strong>移动敏感</strong>(move-aware)容器(比如，<code>std::vector&lt;&gt;</code>)。了解这些后，就可以量产了一些线程，并且等待它们结束，代码如下所示。</p>
<p>代码2.8 量产线程，等待它们结束</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_work</span><span class="params">(<span class="keyword">unsigned</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::vector&lt;std::thread&gt; threads;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    threads.<span class="built_in">emplace_back</span>(do_work,i); <span class="comment">// 产生线程</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; entry : threads) <span class="comment">// 对每个线程调用 join()</span></span><br><span class="line">    entry.<span class="built_in">join</span>();       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码2.8中每个线程所做的工作都是独立的，并且结果会受到共享数据的影响。</p>
<p>如果f()有返回值，这个返回值就依赖于线程得到的结果。写入返回值之前，程序会检查使用共享数据的线程是否终止。</p>
<h2 id="确定线程数量"><a href="#确定线程数量" class="headerlink" title="确定线程数量"></a>确定线程数量</h2><p><code>std::thread::hardware_concurrency()</code>在新版C++中非常有用，返回并发线程的数量。</p>
<p>代码2.9将整体工作拆分成小任务，交给每个线程去做，并设置最小任务数，避免产生太多的线程，程序会在操作数量为0时抛出异常。比如，<code>std::thread</code>无法启动线程，就会抛出异常。</p>
<p>代码2.9 并行版的<code>std::accumulate</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Iterator,<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">accumulate_block</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Iterator first,Iterator last,T&amp; result)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    result=std::<span class="built_in">accumulate</span>(first,last,result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Iterator,<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">parallel_accumulate</span><span class="params">(Iterator first,Iterator last,T init)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> length=std::<span class="built_in">distance</span>(first,last);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!length) <span class="comment">// 1 输入范围为空，返回init的值</span></span><br><span class="line">    <span class="keyword">return</span> init;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> min_per_thread=<span class="number">25</span>; <span class="comment">// 线程中最小任务数</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> max_threads=</span><br><span class="line">      (length+min_per_thread<span class="number">-1</span>)/min_per_thread; <span class="comment">// 2 启动线程最大数量</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> hardware_threads=</span><br><span class="line">      std::thread::<span class="built_in">hardware_concurrency</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> num_threads= <span class="comment">// 3 std::thread::hardware_concurrency()返回0时，选择一个合适数字</span></span><br><span class="line">      std::<span class="built_in">min</span>(hardware_threads != <span class="number">0</span> ? hardware_threads : <span class="number">2</span>, max_threads);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> block_size=length/num_threads; <span class="comment">// 4 每个线程中处理的元素数量</span></span><br><span class="line"></span><br><span class="line">  <span class="function">std::vector&lt;T&gt; <span class="title">results</span><span class="params">(num_threads)</span></span>; <span class="comment">//  存放中间结果</span></span><br><span class="line">  <span class="function">std::vector&lt;std::thread&gt; <span class="title">threads</span><span class="params">(num_threads<span class="number">-1</span>)</span></span>;  <span class="comment">// 5 在启动之前已经有了一个线程(主线程)，所以启动的线程数必须比num_threads少1</span></span><br><span class="line"></span><br><span class="line">  Iterator block_start=first;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span> i=<span class="number">0</span>; i &lt; (num_threads<span class="number">-1</span>); ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    Iterator block_end=block_start;</span><br><span class="line">    std::<span class="built_in">advance</span>(block_end,block_size);  <span class="comment">// 6 block_end迭代器指向当前块的末尾，把一个迭代器移动 n 个位置</span></span><br><span class="line">    threads[i]=std::<span class="built_in">thread</span>(     <span class="comment">// 7 启动一个新线程为当前块累加结果</span></span><br><span class="line">        accumulate_block&lt;Iterator,T&gt;(),</span><br><span class="line">        block_start,block_end,std::<span class="built_in">ref</span>(results[i]));</span><br><span class="line">    block_start=block_end;  <span class="comment">// 8 当迭代器指向当前块的末尾时，启动下一个块</span></span><br><span class="line">  &#125;</span><br><span class="line">  accumulate_block&lt;Iterator,T&gt;()(</span><br><span class="line">      block_start,last,results[num_threads<span class="number">-1</span>]); <span class="comment">// 9 处理最终块的结果</span></span><br><span class="line">      </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; entry : threads)</span><br><span class="line">    entry.<span class="built_in">join</span>();  <span class="comment">// 10 创建线程</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">accumulate</span>(results.<span class="built_in">begin</span>(),results.<span class="built_in">end</span>(),init); <span class="comment">// 11 累加所有结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p>T类型的加法不满足结合律(比如，对于float型或double型，在进行加法操作时，系统很可能会做截断操作)，因为对范围中元素的分组，会导致parallel_accumulate得到的结果可能与<code>std::accumulate</code>的结果不同。</p>
</li>
<li><p>迭代器必须是前向迭代器。</p>
</li>
<li><p>对于results容器，需要保证T有默认构造函数。</p>
</li>
</ul>
<h2 id="线程标识"><a href="#线程标识" class="headerlink" title="线程标识"></a>线程标识</h2><p><code>std::thread::id</code>类型，获取方式：</p>
<ul>
<li>调用<code>std::thread</code>对象的成员函数<code>get_id()</code>来直接获取。如果<code>std::thread</code>对象没有与任何执行线程相关联，<code>get_id()</code>将返回<code>std::thread::type</code>默认构造值，这个值表示“无线程”。</li>
<li>当前线程中调用<code>std::this_thread::get_id()</code>(这个函数定义在<code>&lt;thread&gt;</code>头文件中)也可以获得线程标识。</li>
</ul>
<p><code>std::thread::id</code>对象可以<strong>自由的拷贝和对比</strong>，因为<strong>标识符可以复用</strong>。</p>
<p>如果两个对象的<code>std::thread::id</code>相等，那就是同一个线程，或者都“无线程”。</p>
<p>如果不等，那么就代表了两个不同线程，或者一个有线程，另一没有线程。</p>
<p>标准库提供<code>std::hash&lt;std::thread::id&gt;</code>容器，<code>std::thread::id</code>也可以作为无序容器的键值。</p>
<p>启动其他线程前，可以通过<code>std::this_thread::get_id()</code>得到自己的线程ID。每个线程都要检查一下，其拥有的线程ID是否与初始线程的ID相同。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::thread::id master_thread;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">some_core_part_of_algorithm</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(std::this_thread::<span class="built_in">get_id</span>()==master_thread)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">do_master_thread_work</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">do_common_work</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程ID在容器中可作为键值.</p>
<p>可以使用输出流(<code>std::cout</code>)来记录一个<code>std::thread::id</code>对象的值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::cout &lt;&lt; std::this_thread::<span class="built_in">get_id</span>();</span><br></pre></td></tr></table></figure>

<h1 id="3-共享数据"><a href="#3-共享数据" class="headerlink" title="3.共享数据"></a>3.共享数据</h1><p>线程间的问题在于修改共享数据，会使不变量遭到破坏。</p>
<p>并行中常见错误：条件竞争(race condition)。</p>
<h2 id="共享数据的问题"><a href="#共享数据的问题" class="headerlink" title="共享数据的问题"></a>共享数据的问题</h2><h3 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h3><p>并发中的竞争条件，取决于一个以上线程的执行顺序，每个线程都抢着完成自己的任务。</p>
<p>当不变量遭到破坏时，才会产生条件竞争。</p>
<p>操作要访问两个独立的数据块，独立的指令会对数据块将进行修改，并且其中一个线程可能正在进行修改，另一个线程就对数据块进行了访问。因为出现的概率低，很难查找，也很难复现。</p>
<h3 id="避免恶性条件竞争"><a href="#避免恶性条件竞争" class="headerlink" title="避免恶性条件竞争"></a>避免恶性条件竞争</h3><ul>
<li><p>最简单的办法：对数据结构采用某种保护机制，确保只有修改线程才能看到不变量的中间状态。</p>
<p>从其他访问线程的角度来看，修改不是已经完成了，就是还没开始。</p>
</li>
<li><p>对数据结构和不变量进行修改，修改完的结构必须能完成一系列不可分割的变化，也就保证了每个不变量的状态，这就是所谓的<strong>无锁编程</strong>。</p>
</li>
<li><p>使用事务的方式去处理数据结构的更新。一些数据和读取都存储在事务日志中，然后将之前的操作进行合并，再进行提交。当数据结构被另一个线程修改后，或处理已经重启的情况下，提交就会无法进行，这称作为“软件事务内存”(software transactional memory (STM))</p>
</li>
</ul>
<h2 id="使用互斥量"><a href="#使用互斥量" class="headerlink" title="使用互斥量"></a>使用互斥量</h2><p>访问共享数据前，将数据锁住，在访问结束后，再将数据解锁。线程库需要保证，当线程使用互斥量锁住共享数据时，其他的线程都必须等到之前那个线程对数据进行解锁后，才能进行访问数据。</p>
<p>互斥量会造成死锁，或对数据保护的太多(或太少)</p>
<h3 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h3><p>实例化<code>std::mutex</code>创建互斥量实例，成员函数lock()可对互斥量上锁，unlock()为解锁。</p>
<p>不推荐直接去调用成员函数，调用成员函数就意味着，必须在每个函数出口都要去调用unlock()(包括异常的情况)。</p>
<p><code>std::lock_guard</code>：在构造时就能提供已锁的互斥量，并在析构时进行解锁，从而保证了互斥量能被正确解锁。</p>
<p>代码3.1 使用互斥量保护列表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::list&lt;<span class="keyword">int</span>&gt; some_list;    <span class="comment">// 1 全局变量</span></span><br><span class="line">std::mutex some_mutex;    <span class="comment">// 2 全局的互斥量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_to_list</span><span class="params">(<span class="keyword">int</span> new_value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(some_mutex)</span></span>;    <span class="comment">// 3 加锁，对数据访问互斥的</span></span><br><span class="line">  some_list.<span class="built_in">push_back</span>(new_value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">list_contains</span><span class="params">(<span class="keyword">int</span> value_to_find)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(some_mutex)</span></span>;    <span class="comment">// 4 加锁后，看不到add_to_list()修改的列表</span></span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">find</span>(some_list.<span class="built_in">begin</span>(),some_list.<span class="built_in">end</span>(),value_to_find) != some_list.<span class="built_in">end</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>C++17中添加了一个新特性，称为模板类参数推导，类似<code>std::lock_guard</code>这样简单的模板类型，其模板参数列表可以省略。③和④的代码可以简化成：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::lock_guard <span class="title">guard</span><span class="params">(some_mutex)</span></span>;</span><br></pre></td></tr></table></figure>

<p>C++17中的一种加强版数据保护机制——<code>std::scoped_lock</code>，所以在C++17的环境下，上面的这行代码也可以写成：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::scoped_lock <span class="title">guard</span><span class="params">(some_mutex)</span></span>;</span><br></pre></td></tr></table></figure>

<p>大多数情况下，互斥量通常会与需要保护的数据放在同一类中，而不是定义成全局变量。</p>
<p>当其中一个成员函数返回的是保护数据的指针或引用时，也会破坏数据。具有访问能力的指针或引用可以访问(并可能修改)保护数据，而不会被互斥锁限制。这就需要对接口谨慎设计，要确保互斥量能锁住数据访问，并且不留后门。</p>
<h3 id="保护共享数据"><a href="#保护共享数据" class="headerlink" title="保护共享数据"></a>保护共享数据</h3><p>代码3.2 无意中传递了保护数据的引用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">some_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line">  std::string b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">do_something</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">data_wrapper</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  some_data data;</span><br><span class="line">  std::mutex m;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Function&gt;</span></span><br><span class="line"><span class="function">  <span class="keyword">void</span> <span class="title">process_data</span><span class="params">(Function func)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">l</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="built_in">func</span>(data);    <span class="comment">// 1 传递“保护”数据给用户函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">some_data* unprotected;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">malicious_function</span><span class="params">(some_data&amp; protected_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  unprotected=&amp;protected_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data_wrapper x;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x.<span class="built_in">process_data</span>(malicious_function);    <span class="comment">// 2 传递一个恶意函数</span></span><br><span class="line">  unprotected-&gt;<span class="built_in">do_something</span>();    <span class="comment">// 3 在无保护的情况下访问保护数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子中process_data看起来没有问题，<code>std::lock_guard</code>对数据做了很好的保护，但调用用户提供的函数func①，就意味着foo能够绕过保护机制将函数<code>malicious_function</code>传递进去②，可以在没有锁定互斥量的情况下调用<code>do_something()</code>。</p>
<p>函数<code>foo()</code>中调用<code>unprotected-&gt;do_something()</code>的代码未能被标记为互斥。</p>
<p>切勿将受保护数据的指针或引用传递到互斥锁作用域之外。</p>
<h3 id="接口间的条件竞争"><a href="#接口间的条件竞争" class="headerlink" title="接口间的条件竞争"></a>接口间的条件竞争</h3><p>代码3.3 <code>std::stack</code>容器的实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> Container=std::deque&lt;T&gt; &gt;</span><br><span class="line">class stack</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">explicit</span> <span class="built_in">stack</span>(<span class="keyword">const</span> Container&amp;);</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">stack</span><span class="params">(Container&amp;&amp; = Container())</span></span>;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span> <span class="function"><span class="keyword">explicit</span> <span class="title">stack</span><span class="params">(<span class="keyword">const</span> Alloc&amp;)</span></span>;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span> <span class="built_in">stack</span>(<span class="keyword">const</span> Container&amp;, <span class="keyword">const</span> Alloc&amp;);</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span> <span class="built_in">stack</span>(Container&amp;&amp;, <span class="keyword">const</span> Alloc&amp;);</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span> <span class="built_in">stack</span>(stack&amp;&amp;, <span class="keyword">const</span> Alloc&amp;);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function">T&amp; <span class="title">top</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">T <span class="keyword">const</span>&amp; <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T <span class="keyword">const</span>&amp;)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T&amp;&amp;)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(stack&amp;&amp;)</span></span>;</span><br><span class="line">  <span class="keyword">template</span> &lt;class... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">emplace</span><span class="params">(Args&amp;&amp;... args)</span></span>; <span class="comment">// C++14的新特性</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>虽然empty()和size()可能在返回时是正确的，但结果不可靠。当返回后，其他线程就可以自由地访问栈，并且可能push()多个新元素到栈中，也可能pop()一些已在栈中的元素。这样的话，之前从empty()和size()得到的数值就有问题了。</p>
<p>非共享的栈对象，如果栈非空，使用empty()检查再调用top()访问栈顶部的元素是安全的。如下代码所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">if</span> (! s.<span class="built_in">empty</span>())&#123;    <span class="comment">// 1 判断栈是否为空</span></span><br><span class="line">  <span class="keyword">int</span> <span class="keyword">const</span> value = s.<span class="built_in">top</span>();    <span class="comment">// 2 非空调用栈顶</span></span><br><span class="line">  s.<span class="built_in">pop</span>();    <span class="comment">// 3 弹出栈顶元素</span></span><br><span class="line">  <span class="built_in">do_something</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于共享的栈对象，这样的调用顺序就不再安全，因为在调用empty()①和调用top()②之间，可能有来自另一个线程的pop()调用并删除了最后一个元素。这是一个经典的条件竞争，使用互斥量对栈内部数据进行保护，但依旧不能阻止条件竞争的发生，这就是接口固有的问题。</p>
<p>解决：改变接口的设计</p>
<p>先获取顶部元素(top())，然后从栈中移除(pop())。这样，在不能安全的将元素拷贝出去的情况下，栈中的这个数据还依旧存在，没有丢失。当问题是堆空间不足，应用可能会释放一些内存，然后再进行尝试。</p>
<p>不幸的是，这样的分割却制造了本想避免的条件竞争。</p>
<p><strong>选项1：传入一个引用</strong></p>
<p>将变量的引用作为参数，传入pop()函数中获取“弹出值”：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">some_stack.<span class="built_in">pop</span>(result);</span><br></pre></td></tr></table></figure>

<p>缺点：需要构造出一个栈中类型的实例，用于接收目标值。对于一些类型，这样做是不现实的，因为临时构造一个实例，从时间和资源的角度上来看都不划算。</p>
<p><strong>选项2：无异常抛出的拷贝构造函数或移动构造函数</strong></p>
<p>一个有用的选项可以限制对线程安全栈的使用，并且能让栈安全的返回所需的值，而不抛出异常。虽然安全，但非可靠。</p>
<p>那些有抛出异常的拷贝构造函数，但没有移动构造函数的类型往往更多。</p>
<p><strong>选项3：返回指向弹出值的指针</strong></p>
<p>指针的优势是自由拷贝，并且不会产生异常，这样就能避免Cargill提到的异常问题了。</p>
<p>缺点就是返回指针需要对对象的内存分配进行管理，对于简单数据类型(比如:int)，内存管理的开销要远大于直接返回值。</p>
<p>使用<code>std::shared_ptr</code>，不仅能避免内存泄露(因为当对象中指针销毁时，对象也会被销毁)，而且标准库能够完全控制内存分配方案，就不需要new和delete操作。</p>
<p><strong>例：定义线程安全的堆栈</strong></p>
<p>代码3.4中是一个接口没有条件竞争的堆栈类定义，它实现了选项1和选项3：重载了pop()，使用局部引用去存储弹出值，并返回<code>std::shared_ptr&lt;&gt;</code>对象。它有一个简单的接口，只有两个函数：push()和pop();</p>
<p>代码3.4 线程安全的堆栈类定义(概述)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span>  <span class="comment">// For std::shared_ptr&lt;&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">empty_stack</span>:</span> std::exception</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">what</span><span class="params">()</span> <span class="keyword">const</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threadsafe_stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">threadsafe_stack</span>();</span><br><span class="line">  <span class="built_in">threadsafe_stack</span>(<span class="keyword">const</span> threadsafe_stack&amp;);</span><br><span class="line">  threadsafe_stack&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> threadsafe_stack&amp;) = <span class="keyword">delete</span>; <span class="comment">// 1 赋值操作被删除</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T new_value)</span></span>;</span><br><span class="line">  <span class="function">std::shared_ptr&lt;T&gt; <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(T&amp; value)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当栈为空时，pop()函数会抛出一个empty_stack异常，所以在empty()函数被调用后，其他部件还能正常工作。</p>
<p>使用<code>std::shared_ptr</code>可以避免内存分配管理的问题，并避免多次使用new和delete操作。堆栈中的五个操作，现在就剩下三个：push(), pop()和empty()(这里empty()都有些多余)。</p>
<p>简化接口更有利于数据控制，可以保证互斥量将操作完全锁住。</p>
<p>代码3.5 扩充(线程安全)堆栈</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">empty_stack</span>:</span> std::exception</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">what</span><span class="params">()</span> <span class="keyword">const</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;empty stack!&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threadsafe_stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  std::stack&lt;T&gt; data;</span><br><span class="line">  <span class="keyword">mutable</span> std::mutex m;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">threadsafe_stack</span>()</span><br><span class="line">	: <span class="built_in">data</span>(std::stack&lt;T&gt;())&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">threadsafe_stack</span>(<span class="keyword">const</span> threadsafe_stack&amp; other)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(other.m)</span></span>;</span><br><span class="line">    data = other.data; <span class="comment">// 1 在构造函数体中的执行拷贝</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  threadsafe_stack&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> threadsafe_stack&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T new_value)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(m)</span></span>;</span><br><span class="line">    data.<span class="built_in">push</span>(new_value);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">std::shared_ptr&lt;T&gt; <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(data.<span class="built_in">empty</span>()) <span class="keyword">throw</span> <span class="built_in">empty_stack</span>(); <span class="comment">// 在调用pop前，检查栈是否为空</span></span><br><span class="line">	</span><br><span class="line">    <span class="function">std::shared_ptr&lt;T&gt; <span class="keyword">const</span> <span class="title">res</span><span class="params">(std::make_shared&lt;T&gt;(data.top()))</span></span>; <span class="comment">// 在修改堆栈前，分配出返回值</span></span><br><span class="line">    data.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(T&amp; value)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(data.<span class="built_in">empty</span>()) <span class="keyword">throw</span> <span class="built_in">empty_stack</span>();</span><br><span class="line">	</span><br><span class="line">    value=data.<span class="built_in">top</span>();</span><br><span class="line">    data.<span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="built_in">empty</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>堆栈可以拷贝——拷贝构造函数对互斥量上锁，再拷贝堆栈。构造函数体中①的拷贝使用互斥量来确保复制结果的正确性，这样的方式比成员初始化列表好。</p>
<p>一个给定操作需要两个或两个以上的互斥量时，另一个潜在的问题将出现：死锁。与条件竞争完全相反——不同的两个线程会互相等待，从而什么都没做。</p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>线程有对锁的竞争：一对线程需要对他们所有的互斥量做一些操作，其中每个线程都有一个互斥量，且等待另一个解锁。因为他们都在等待对方释放互斥量，没有线程能工作。</p>
<p>避免死锁：让两个互斥量以相同顺序上锁。某些情况下是可以这样用，因为不同的互斥量用于不同的地方。</p>
<p>选择一个固定的顺序(例如，实例提供的第一互斥量作为第一个参数，提供的第二个互斥量为第二个参数)，可能会适得其反：在参数交换了之后，两个线程试图在相同的两个实例间进行数据交换时，程序又死锁了！</p>
<p><code>std::lock</code>——可以一次性锁住多个(两个以上)的互斥量，并且没有副作用(死锁风险)。</p>
<p>代码3.6 交换操作中使用<code>std::lock()</code>和<code>std::lock_guard</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里的std::lock()需要包含&lt;mutex&gt;头文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">some_big_object</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(some_big_object&amp; lhs,some_big_object&amp; rhs)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  some_big_object some_detail;</span><br><span class="line">  std::mutex m;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">X</span>(some_big_object <span class="keyword">const</span>&amp; sd):<span class="built_in">some_detail</span>(sd)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(X&amp; lhs, X&amp; rhs)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(&amp;lhs==&amp;rhs)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    std::<span class="built_in">lock</span>(lhs.m,rhs.m); <span class="comment">// 1 锁住两个互斥量</span></span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock_a</span><span class="params">(lhs.m,std::adopt_lock)</span></span>; <span class="comment">// 2 创建实例</span></span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock_b</span><span class="params">(rhs.m,std::adopt_lock)</span></span>; <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">swap</span>(lhs.some_detail,rhs.some_detail);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>std::adopt_lock</code>参数除了表示<code>std::lock_guard</code>可获取锁之外，还将锁交由<code>std::lock_guard</code>管理，就不需要<code>std::lock_guard</code>再去构建新的锁了。</p>
<p><code>std::lock</code>要么将两个锁都锁住，要不一个都不锁。</p>
<p>C++17中，<code>std::scoped_lock&lt;&gt;</code>是一种新的RAII模板类型，与<code> std::lock_guard&lt;&gt;</code>的功能相同，这个新类型能接受不定数量的互斥量类型作为模板参数，以及相应的互斥量(数量和类型)作为构造参数。</p>
<p>互斥量支持构造时上锁，与<code>std::lock</code>的用法相同，解锁在析构中进行。代码3.6中swap()操作可以重写如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(X&amp; lhs, X&amp; rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(&amp;lhs==&amp;rhs)</span><br><span class="line">    	<span class="keyword">return</span>;</span><br><span class="line">	<span class="function">std::scoped_lock <span class="title">guard</span><span class="params">(lhs.m,rhs.m)</span></span>; <span class="comment">// 1 通过传递的对象类型来构造实例，等价于</span></span><br><span class="line">  	<span class="comment">//std::scoped_lock&lt;std::mutex,std::mutex&gt; guard(lhs.m,rhs.m);</span></span><br><span class="line">	<span class="built_in">swap</span>(lhs.some_detail,rhs.some_detail);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>C++17新特性：自动推导模板参数。隐式参数模板类型推导机制。</p>
<p><code> std::scoped_lock</code>的好处在于，可以将所有<code>std::lock</code>替换掉，从而减少错误的发生。</p>
<h3 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h3><p>无锁的情况下，仅需要两个线程<code>std::thread</code>对象互相调用join()就能产生死锁。这种情况下，没有线程可以继续运行，因为他们正在互相等待。</p>
<p><strong>避免嵌套锁</strong></p>
<p>线程获得一个锁时，就别再去获取第二个。每个线程只持有一个锁，就不会产生死锁。</p>
<p>当需要获取多个锁，使用<code>std::lock</code>来做这件事(对获取锁的操作上锁)，避免产生死锁。</p>
<p><strong>避免在持有锁时调用外部代码</strong></p>
<p>外部程序可能做任何事情，包括获取锁。在持有锁的情况下，如果用外部代码要获取一个锁，就会违反第一个指导意见，并造成死锁。</p>
<p><strong>使用固定顺序获取锁</strong></p>
<p>当硬性要求获取两个或两个以上的锁，并且不能使用<code>std::lock</code>单独操作来获取它们时，最好在每个线程上，用固定的顺序获取它们(锁)。</p>
<p>例如，不同线程以相反顺序访问列表所造成的死锁。当节点A和B在列表中相邻，当前线程可能会同时尝试获取A和B上的锁。另一个线程可能已经获取了节点B上的锁，并试图获取节点A上的锁——经典的死锁场景。</p>
<table>
<thead>
<tr>
<th align="center">线程1</th>
<th align="center">线程2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">锁住主入口的互斥量</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">读取头结点指针</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">锁住头结点互斥量</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">解锁主入口互斥量</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">锁住主入口互斥量</td>
</tr>
<tr>
<td align="center">读取head-&gt;next指针</td>
<td align="center">锁住尾结点互斥量</td>
</tr>
<tr>
<td align="center">锁住next结点的互斥量</td>
<td align="center">读取tail-&gt;prev指针</td>
</tr>
<tr>
<td align="center">读取next-&gt;next指针</td>
<td align="center">解锁尾结点的互斥量</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
</tr>
<tr>
<td align="center">锁住A结点的互斥量</td>
<td align="center">锁住C结点的互斥量</td>
</tr>
<tr>
<td align="center">读取A-&gt;next指针(也就是B结点)</td>
<td align="center">读取C-&gt;next指针(也就是B结点)</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">锁住B结点互斥量</td>
</tr>
<tr>
<td align="center">阻塞，尝试锁住B结点的互斥量</td>
<td align="center">解锁C结点互斥量</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">读取B-&gt;prev指针(也就是A结点)</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">阻塞，尝试锁住A结点的互斥量</td>
</tr>
<tr>
<td align="center">死锁！</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>当A、C节点中间的B节点删除时，有线程在已获取A和C上的锁后，还要获取B节点上的锁时，就可能发生死锁。</p>
<p>解决：定义遍历的顺序，一个线程必须先锁住A才能获取B的锁，在锁住B之后才能获取C的锁。这将消除死锁，不允许反向遍历链表。</p>
<p><strong>使用层次锁结构</strong></p>
<p>当代码试图对互斥量上锁，而低层已持有该层锁时，不允许锁定。可以通过每个互斥量对应的层数，以及每个线程使用的互斥量，在运行时检查锁定操作是否可以进行。</p>
<p>层级互斥量不可能死锁，因为互斥量本身会严格遵循约定进行上锁。当多个互斥量在是在同一级上时，不能同时持有多个锁。</p>
<p>代码3.7 使用层次锁来避免死锁</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">hierarchical_mutex <span class="title">high_level_mutex</span><span class="params">(<span class="number">10000</span>)</span></span>; <span class="comment">// 1 3个hierarchical_mutex实例，逐渐递减的层级构造</span></span><br><span class="line"><span class="function">hierarchical_mutex <span class="title">low_level_mutex</span><span class="params">(<span class="number">5000</span>)</span></span>;  <span class="comment">// 2</span></span><br><span class="line"><span class="function">hierarchical_mutex <span class="title">other_mutex</span><span class="params">(<span class="number">6000</span>)</span></span>; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_low_level_stuff</span><span class="params">()</span></span>; <span class="comment">// 假设do_low_level_stuff不会对任何互斥量进行上锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">low_level_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;hierarchical_mutex&gt; <span class="title">lk</span><span class="params">(low_level_mutex)</span></span>; <span class="comment">// 4 low_level_func为层级最低的函数，并且会对low_level_mutex进行上锁</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">do_low_level_stuff</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">high_level_stuff</span><span class="params">(<span class="keyword">int</span> some_param)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">high_level_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;hierarchical_mutex&gt; <span class="title">lk</span><span class="params">(high_level_mutex)</span></span>; <span class="comment">// 6 锁的层级更高</span></span><br><span class="line">  <span class="built_in">high_level_stuff</span>(<span class="built_in">low_level_func</span>()); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_a</span><span class="params">()</span>  <span class="comment">// 7 遵守规则，运行成功</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">high_level_func</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_other_stuff</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">other_stuff</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">high_level_func</span>();  <span class="comment">// 10</span></span><br><span class="line">  <span class="built_in">do_other_stuff</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_b</span><span class="params">()</span> <span class="comment">// 8 other_stuff()调用high_level_func()时，就违反了层级结构,运行失败</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::lock_guard&lt;hierarchical_mutex&gt; <span class="title">lk</span><span class="params">(other_mutex)</span></span>; <span class="comment">// 9 中层级的数据已被保护</span></span><br><span class="line">  <span class="built_in">other_stuff</span>(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码3.8 简单的层级互斥量实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hierarchical_mutex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  std::mutex internal_mutex;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> hierarchy_value;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> previous_hierarchy_value;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">thread_local</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> this_thread_hierarchy_value;  <span class="comment">// 1 当前线程的层级值</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">check_for_hierarchy_violation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(this_thread_hierarchy_value &lt;= hierarchy_value)  <span class="comment">// 2 判断层级抛出异常</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">throw</span> std::<span class="built_in">logic_error</span>(“mutex hierarchy violated”);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update_hierarchy_value</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    previous_hierarchy_value=this_thread_hierarchy_value;  <span class="comment">// 3</span></span><br><span class="line">    this_thread_hierarchy_value=hierarchy_value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">hierarchical_mutex</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> value)</span>:</span></span><br><span class="line"><span class="function">      hierarchy_value(value),</span></span><br><span class="line"><span class="function">      previous_hierarchy_value(<span class="number">0</span>)</span></span><br><span class="line"><span class="function">  &#123;</span>&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">check_for_hierarchy_violation</span>();</span><br><span class="line">    internal_mutex.<span class="built_in">lock</span>();  <span class="comment">// 4 lock()代表内部互斥锁已锁住</span></span><br><span class="line">    <span class="built_in">update_hierarchy_value</span>();  <span class="comment">// 5 一旦成功锁住，更新层级值</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(this_thread_hierarchy_value!=hierarchy_value)</span><br><span class="line">      <span class="keyword">throw</span> std::<span class="built_in">logic_error</span>(“mutex hierarchy violated”);  <span class="comment">// 9</span></span><br><span class="line">    this_thread_hierarchy_value=previous_hierarchy_value;  <span class="comment">// 6 对层级值进行保存</span></span><br><span class="line">    internal_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">try_lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">check_for_hierarchy_violation</span>();</span><br><span class="line">    <span class="keyword">if</span>(!internal_mutex.<span class="built_in">try_lock</span>())  <span class="comment">// 7 try_lock()与lock()的功能相似，除了在调用internal_mutex的try_lock()失败时，不能持有对应锁，所以不必更新层级值，并直接返回false。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">update_hierarchy_value</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">thread_local</span> <span class="keyword">unsigned</span> <span class="keyword">long</span></span></span><br><span class="line"><span class="function">     <span class="title">hierarchical_mutex::this_thread_hierarchy_value</span><span class="params">(ULONG_MAX)</span></span>;  <span class="comment">// 8 初始化为最大值</span></span><br></pre></td></tr></table></figure>

<p><strong>超越锁的延伸扩展</strong></p>
<p>死锁不仅仅会发生在锁之间，也会发生在同步构造中(可能会产生一个等待循环)</p>
<p>如果去等待一个线程结束，应该确定这个线程的层级，这样一个线程只需要等待比其层级低的线程结束即可。</p>
<p><code>std::lock()</code>和<code>std::lock_guard</code>可组成简单的锁，并覆盖大多数情况，但有时需要更多的灵活性，可以使用标准库提供的<code>std::unique_lock</code>模板。</p>
<h3 id="std-unique-lock——灵活的锁"><a href="#std-unique-lock——灵活的锁" class="headerlink" title="std::unique_lock——灵活的锁"></a><code>std::unique_lock</code>——灵活的锁</h3><p><code>std::unique_lock</code>实例不带互斥量：信息已存储，且已更新。在创建时自动加锁，在销毁时自动解锁****</p>
<p><strong>unique_lock是对lock_guard的扩展，允许在生命周期内再调用lock和unlock来加解锁以切换锁的状态。</strong></p>
<p>但是内存会占用比较多的空间，并且比<code>std::lock_guard</code>稍慢一些。</p>
<p>使用时<code>std::lock_guard&lt;std::mutex&gt; lk(mtx);</code>直接替换成<code>std::unique_lock&lt;std::mutex&gt; lk(mtx);</code></p>
<p><strong>lock_guard和unique_lock第二参数的作用:</strong></p>
<ul>
<li><p><code>std::adopt_lock</code>: 假设调用一方已经拥有了互斥量的所有权（已经lock成功了）；通知lock_guard不需要再构造函数中lock这个互斥量了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(g_mtx, std::adopt_lock)</span></span>;</span><br><span class="line">    g_mtx.<span class="built_in">lock</span>();</span><br><span class="line">    临界区或临界资源</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>对于lock_guard第二参数类型只有一种，锁管理器构造的时候不会自动对可锁对象上锁；由可锁对象自己加锁；等锁管理器析构的时候自动解锁。</p>
<p>如果指定了第二参数，但是没有lock，锁管理器析构的时候解锁了无拥有权的可锁对象，导致异常。</p>
<p>多锁场景下，会调用<code>std::lock</code>避免死锁的出现，但是这个方法要求锁管理器不能拥有可锁对象，由<code>std::lock</code>方法执行锁操作。如果没有提供第二参数构造函数，那么就无法使用该方法。</p>
<p>注意：使用该参数类型构造的锁管理器必须只能通过可锁对象进行lock，不可通过锁管理器进行lock，误用会导致程序异常。</p>
</li>
<li><p><code>std::defer_lock</code>: 初始化了一个没有加锁的mutex。前提是自己不能先lock否则报异常。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(g_mtx, std::defer_lock)</span></span>;</span><br><span class="line">    lock.<span class="built_in">lock</span>();           <span class="comment">// 不能用g_mtx.lock()，第二次锁的时候会崩溃</span></span><br><span class="line">    临界区或临界资源</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>锁管理器在构造的时候不主动lock且不拥有可锁对象；如果后续执行lock，锁管理器析构的时候自动解锁。</p>
<p>注意：该类型构造的锁管理器只能通过锁管理器执行lock且拥有可锁对象。如果直接调用可锁对象进行锁操作后，会导致程序异常。</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">some_big_object</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(some_big_object&amp; lhs,some_big_object&amp; rhs)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  some_big_object some_detail;</span><br><span class="line">  std::mutex m;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">X</span>(some_big_object <span class="keyword">const</span>&amp; sd):<span class="built_in">some_detail</span>(sd)&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(X&amp; lhs, X&amp; rhs)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(&amp;lhs==&amp;rhs)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock_a</span><span class="params">(lhs.m,std::defer_lock)</span></span>; <span class="comment">// 1 </span></span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock_b</span><span class="params">(rhs.m,std::defer_lock)</span></span>; <span class="comment">// 1 std::defer_lock 留下未上锁的互斥量</span></span><br><span class="line">    std::<span class="built_in">lock</span>(lock_a,lock_b); <span class="comment">// 2 互斥量在这里上锁</span></span><br><span class="line">    <span class="built_in">swap</span>(lhs.some_detail,rhs.some_detail);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>std::unique_lock</code>支持lock(), try_lock()和unlock()成员函数</p>
<h3 id="不同域中互斥量的传递"><a href="#不同域中互斥量的传递" class="headerlink" title="不同域中互斥量的传递"></a>不同域中互斥量的传递</h3><p><code>std::unique_lock</code>是可移动，但不可赋值的类型。</p>
<p>函数get_lock()锁住了互斥量，然后准备数据，返回锁的调用函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">get_lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">extern</span> std::mutex some_mutex;</span><br><span class="line">  <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(some_mutex)</span></span>;</span><br><span class="line">  <span class="built_in">prepare_data</span>();</span><br><span class="line">  <span class="keyword">return</span> lk;  <span class="comment">// 1 lk在函数中被声明为自动变量，它不需要调用std::move()，可以直接返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(get_lock())</span></span>;  <span class="comment">// 2 process_data()函数直接转移std::unique_lock实例的所有权</span></span><br><span class="line">  <span class="built_in">do_something</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>std::unique_lock</code>的灵活性同样也允许实例在销毁之前放弃拥有的锁。可以使用unlock()来做这件事，如同一个互斥量：<code>std::unique_lock</code>的成员函数提供类似于锁定和解锁的功能。</p>
<h3 id="锁的粒度"><a href="#锁的粒度" class="headerlink" title="锁的粒度"></a>锁的粒度</h3><p>锁的粒度：用来描述通过一个锁保护着的数据量大小。<em>一个细粒度锁</em>(a fine-grained lock)能够保护较小的数据量，<em>一个粗粒度锁</em>(a coarse-grained lock)能够保护较多的数据量。</p>
<p>如果很多线程正在等待同一个资源(等待收银员对自己拿到的商品进行清点)，当有线程持有锁的时间过长，这就会增加等待的时间(别等到结账的时候，才想起来蔓越莓酱没拿)。</p>
<p><code>std::unique_lock</code>在这种情况下工作正常，调用unlock()时，代码不需要再访问共享数据。当再次需要对共享数据进行访问时，再调用lock()就可以了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_and_process_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">my_lock</span><span class="params">(the_mutex)</span></span>;</span><br><span class="line">  some_class data_to_process=<span class="built_in">get_next_data_chunk</span>();</span><br><span class="line">  my_lock.<span class="built_in">unlock</span>();  <span class="comment">// 1 不要让锁住的互斥量越过process()函数的调用</span></span><br><span class="line">  result_type result=<span class="built_in">process</span>(data_to_process);</span><br><span class="line">  my_lock.<span class="built_in">lock</span>(); <span class="comment">// 2 为了写入数据，对互斥量再次上锁</span></span><br><span class="line">  <span class="built_in">write_result</span>(data_to_process,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不需要让锁住的互斥量越过对process()函数的调用，所以可以在函数调用①前对互斥量进行手动解锁，之后对其再次上锁②。</p>
<p>代码3.10 比较操作符中一次锁住一个互斥量</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">int</span> some_detail;</span><br><span class="line">  <span class="keyword">mutable</span> std::mutex m;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">get_detail</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock_a</span><span class="params">(m)</span></span>;  <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> some_detail;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Y</span>(<span class="keyword">int</span> sd):<span class="built_in">some_detail</span>(sd)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(Y <span class="keyword">const</span>&amp; lhs, Y <span class="keyword">const</span>&amp; rhs)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(&amp;lhs==&amp;rhs)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> lhs_value=lhs.<span class="built_in">get_detail</span>();  <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> rhs_value=rhs.<span class="built_in">get_detail</span>();  <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">return</span> lhs_value==rhs_value;  <span class="comment">// 4</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>比较操作符首先通过调用get_detail()成员函数检索要比较的值②③，函数在索引时被锁保护着①。比较操作符会在之后比较索引出来的值④。</p>
<p>虽然锁只持有一次的操作能减少锁持有的时间(这样能消除死锁的可能性)，但这里有一个微妙的语义操作同时对两个锁住的值进行比较。</p>
<p>当操作符返回true时，就意味着在这个时间点上的lhs.some_detail与另一个时间点的rhs.some_detail相同。</p>
<p>这两个值在读取之后，可能会以任意方式修改。两个值会在②和③处进行交换，这样就会失去了比较的意义。比较可能会返回true，表明这两个值是相等的，实际上这两个值相等的情况可能就发生在一瞬间。</p>
<p>当持有锁的时间没有达到整个操作时间，就会让自己处于条件竞争的状态。</p>
<h2 id="保护共享数据的方式"><a href="#保护共享数据的方式" class="headerlink" title="保护共享数据的方式"></a>保护共享数据的方式</h2><h3 id="保护共享数据的初始化过程"><a href="#保护共享数据的初始化过程" class="headerlink" title="保护共享数据的初始化过程"></a>保护共享数据的初始化过程</h3><p>假设有一个共享源，构建代价很昂贵，它可能会打开一个数据库连接或分配出很多的内存。</p>
<p>延迟初始化(Lazy initialization)在单线程代码很常见————每一个操作都需要先对源进行检查，为了了解数据是否被初始化，然后在其使用前决定，数据是否需要初始化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::shared_ptr&lt;some_resource&gt; resource_ptr;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!resource_ptr)</span><br><span class="line">  &#123;</span><br><span class="line">    resource_ptr.<span class="built_in">reset</span>(<span class="keyword">new</span> some_resource);  <span class="comment">// 1</span></span><br><span class="line">  &#125;</span><br><span class="line">  resource_ptr-&gt;<span class="built_in">do_something</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转为多线程代码时，只有①处需要保护，这样共享数据对于并发访问就是安全的。</p>
<p>代码3.11 使用延迟初始化(线程安全)的过程</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::shared_ptr&lt;some_resource&gt; resource_ptr;</span><br><span class="line">std::mutex resource_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(resource_mutex)</span></span>;  <span class="comment">// 所有线程在此序列化 </span></span><br><span class="line">  <span class="keyword">if</span>(!resource_ptr)</span><br><span class="line">  &#123;</span><br><span class="line">    resource_ptr.<span class="built_in">reset</span>(<span class="keyword">new</span> some_resource);  <span class="comment">// 只有初始化过程需要保护 </span></span><br><span class="line">  &#125;</span><br><span class="line">  lk.<span class="built_in">unlock</span>();</span><br><span class="line">  resource_ptr-&gt;<span class="built_in">do_something</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码3.12 使用<code>std::call_once</code>作为类成员的延迟初始化(线程安全)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  connection_info connection_details;</span><br><span class="line">  connection_handle connection;</span><br><span class="line">  std::once_flag connection_init_flag;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">open_connection</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    connection=connection_manager.<span class="built_in">open</span>(connection_details);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">X</span>(connection_info <span class="keyword">const</span>&amp; connection_details_):</span><br><span class="line">      <span class="built_in">connection_details</span>(connection_details_)</span><br><span class="line">  &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">send_data</span><span class="params">(data_packet <span class="keyword">const</span>&amp; data)</span>  <span class="comment">// 1</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    std::<span class="built_in">call_once</span>(connection_init_flag,&amp;X::open_connection,<span class="keyword">this</span>);  <span class="comment">// 2</span></span><br><span class="line">    connection.<span class="built_in">send_data</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">data_packet <span class="title">receive_data</span><span class="params">()</span>  <span class="comment">// 3</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    std::<span class="built_in">call_once</span>(connection_init_flag,&amp;X::open_connection,<span class="keyword">this</span>);  <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">return</span> connection.<span class="built_in">receive_data</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>例子中第一次调用send_data()①或receive_data()③的线程完成初始化过程。使用成员函数open_connection()去初始化数据，也需要将this指针传进去。</p>
<p><code>std::mutex</code>和<code>std::once_flag</code>的实例不能拷贝和移动，需要通过显式定义相应的成员函数，对这些类成员进行操作。</p>
<h3 id="保护不常更新的数据机构"><a href="#保护不常更新的数据机构" class="headerlink" title="保护不常更新的数据机构"></a>保护不常更新的数据机构</h3><p>互斥量“读者-作者锁”，其允许两种不同的使用方式：一个“作者”线程独占访问和共享访问，让多个“读者”线程并发访问。</p>
<p>c++17标准库提供了两种非常好的互斥量——<code>std::shared_mutex</code>和<code>std::shared_timed_mutex</code>。</p>
<p>对于更新操作，可以使用<code>std::lock_guard&lt;std::shared_mutex&gt;</code>和<code>std::unique_lock&lt;std::shared_mutex&gt;</code>上锁。</p>
<p>代码3.13 使用<code>std::shared_mutex</code>对数据结构进行保护</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;shared_mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dns_entry</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dns_cache</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  std::map&lt;std::string,dns_entry&gt; entries;</span><br><span class="line">  <span class="keyword">mutable</span> std::shared_mutex entry_mutex;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">dns_entry <span class="title">find_entry</span><span class="params">(std::string <span class="keyword">const</span>&amp; domain)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::shared_lock&lt;std::shared_mutex&gt; <span class="title">lk</span><span class="params">(entry_mutex)</span></span>;  <span class="comment">// 1 使用std::shared_lock&lt;&gt;来保护共享和只读权限</span></span><br><span class="line">    std::map&lt;std::string,dns_entry&gt;::const_iterator <span class="keyword">const</span> it=</span><br><span class="line">       entries.<span class="built_in">find</span>(domain);</span><br><span class="line">    <span class="keyword">return</span> (it==entries.<span class="built_in">end</span>())?<span class="built_in">dns_entry</span>():it-&gt;second;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update_or_add_entry</span><span class="params">(std::string <span class="keyword">const</span>&amp; domain,</span></span></span><br><span class="line"><span class="params"><span class="function">                           dns_entry <span class="keyword">const</span>&amp; dns_details)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::shared_mutex&gt; <span class="title">lk</span><span class="params">(entry_mutex)</span></span>;  <span class="comment">// 2 使用std::lock_guard&lt;&gt;实例，当表格需要更新时②，为其提供独占访问权限</span></span><br><span class="line">    entries[domain]=dns_details;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>多线程可以同时调用find_entry()，且不会出错。</p>
<p>update_or_add_entry()函数调用时，独占锁会阻止其他线程对数据结构进行修改，并且阻止线程调用find_entry()。</p>
<h3 id="嵌套锁"><a href="#嵌套锁" class="headerlink" title="嵌套锁"></a>嵌套锁</h3><p>线程对已经获取的<code>std::mutex</code>(已经上锁)再次上锁是错误的，尝试这样做会导致未定义行为。</p>
<p>C++标准库提供了<code>std::recursive_mutex</code>类。除了可以在同一线程的单个实例上多次上锁，其他功能与<code>std::mutex</code>相同。</p>
<p>其他线程对互斥量上锁前，当前线程必须释放拥有的所有锁，所以如果你调用lock()三次，也必须调用unlock()三次。</p>
<p>使用<code>std::lock_guard&lt;std::recursive_mutex&gt;</code>和<code>std::unique_lock&lt;std::recursive_mutex&gt;</code></p>
<p>嵌套锁一般用在可并发访问的类上。每个公共成员函数都会对互斥量上锁，然后完成对应的操作后再解锁互斥量。不过，有时成员函数会调用另一个成员函数，这种情况下，第二个成员函数也会试图锁住互斥量，这就会导致未定义行为的发生。</p>
<p>解决方案为将互斥量转为嵌套锁，第二个成员函数就能成功的进行上锁，并且函数能继续执行。</p>
<p>缺点：对应类的不变量通常会被破坏。当不变量被破坏时，第二个成员函数还需要继续执行。</p>
<p>一个比较好的方式是，从中提取出一个函数作为类的私有成员，这个私有成员函数不会对互斥量进行上锁(调用前必须获得锁)。然后，需要仔细考虑一下，这种情况调用新函数时数据的状态。</p>
<h1 id="4-同步操作"><a href="#4-同步操作" class="headerlink" title="4.同步操作"></a>4.同步操作</h1><h2 id="等待事件或条件"><a href="#等待事件或条件" class="headerlink" title="等待事件或条件"></a>等待事件或条件</h2><p>当一个线程等待另一个线程完成时，可以持续的检查共享数据标志(用于做保护工作的互斥量)，直到另一线程完成工作时对这个标识进行重置。但是，这种方式会消耗线程的执行时间检查标识，并且当互斥量上锁后，其他线程就没有办法获取锁，就会持续等待。</p>
<p>在等待线程在检查间隙，使用<code>std::this_thread::sleep_for()</code>进行周期性的间歇</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line">std::mutex m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait_for_flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(m)</span></span>;</span><br><span class="line">  <span class="keyword">while</span>(!flag)</span><br><span class="line">  &#123;</span><br><span class="line">    lk.<span class="built_in">unlock</span>();  <span class="comment">// 1 解锁互斥量</span></span><br><span class="line">    std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));  <span class="comment">// 2 休眠100ms</span></span><br><span class="line">    lk.<span class="built_in">lock</span>();   <span class="comment">// 3 再锁互斥量</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当线程休眠时没有浪费执行时间，但很难确定正确的休眠时间。</p>
<p>条件变量：通过另一线程触发等待事件的机制是最基本的唤醒方式(例如：流水线上存在额外的任务时)</p>
<p>条件变量会与多个事件或其他条件相关，并且一个或多个线程会等待条件的达成。当某些线程被终止时，为了唤醒等待线程(允许等待线程继续执行)，终止线程将会向等待着的线程广播“条件达成”的信息。</p>
<h3 id="等待条件达成"><a href="#等待条件达成" class="headerlink" title="等待条件达成"></a>等待条件达成</h3><p>c++标准库条件变量的实现：<code>std::condition_variable</code>和<code>std::condition_variable_any</code>，这两个实现都包含在<code>&lt;condition_variable&gt;</code>头文件的声明中。</p>
<p>两者都需要与互斥量一起才能工作(互斥量是为了同步)，前者仅能与<code>std::mutex</code>一起工作，而后者可以和合适的互斥量一起工作，从而加上了<code>_any</code>的后缀。</p>
<p><code> std::condition_variable_any</code>更加通用，不过在性能和系统资源的使用方面会有更多的开销，所以通常会将<code>std::condition_variable</code>作为首选类型。</p>
<p>代码4.1 使用<code>std::condition_variable</code>处理数据等待</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::mutex mut;</span><br><span class="line">std::queue&lt;data_chunk&gt; data_queue;  <span class="comment">// 1 队列中中有两个线程，两个线程之间会对数据进行传递</span></span><br><span class="line">std::condition_variable data_cond;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">data_preparation_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">more_data_to_prepare</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    data_chunk <span class="keyword">const</span> data=<span class="built_in">prepare_data</span>();</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mut)</span></span>;</span><br><span class="line">    data_queue.<span class="built_in">push</span>(data);  <span class="comment">// 2 数据压入队列</span></span><br><span class="line">    data_cond.<span class="built_in">notify_one</span>();  <span class="comment">// 3 对等待的线程(如果有等待线程)进行通知</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">data_processing_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mut)</span></span>;  <span class="comment">// 4 对互斥量上锁</span></span><br><span class="line">    data_cond.<span class="built_in">wait</span>(</span><br><span class="line">         lk,[]&#123;<span class="keyword">return</span> !data_queue.<span class="built_in">empty</span>();&#125;);  <span class="comment">// 5 传递一个锁和一个Lambda表达式(作为等待的条件)</span></span><br><span class="line">    data_chunk data=data_queue.<span class="built_in">front</span>();</span><br><span class="line">    data_queue.<span class="built_in">pop</span>();</span><br><span class="line">    lk.<span class="built_in">unlock</span>();  <span class="comment">// 6</span></span><br><span class="line">    <span class="built_in">process</span>(data);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">is_last_chunk</span>(data))</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>wait()会去检查这些条件(通过Lambda函数)，当条件满足(Lambda函数返回true)时返回。如果条件不满足(Lambda函数返回false)，wait()将解锁互斥量，并且将线程(处理数据的线程)置于阻塞或等待状态。当准备数据的线程调用notify_one()通知条件变量时，处理数据的线程从睡眠中苏醒，重新获取互斥锁，并且再次进行条件检查。在条件满足的情况下，从wait()返回并继续持有锁。当条件不满足时，线程将对互斥量解锁，并重新等待。</p>
<p>用<code>std::unique_lock</code>而不使用<code>std::lock_guard</code>的原因：等待中的线程必须在等待期间解锁互斥量，并对互斥量再次上锁，而<code>std::lock_guard</code>没有这么灵活。</p>
<p>可以不使用lambda表达式，写一个检查函数传入到wait()。调用wait()的过程中，在互斥量锁定时，可能会去检查条件变量若干次，当提供测试条件的函数返回true就会立即返回。</p>
<p><strong>伪唤醒：</strong>当等待线程重新获取互斥量并检查条件变量时，并非直接响应另一个线程的通知。</p>
<p>当多个线程同时在等待同一条件，此时条件满足发起唤醒则可能会唤醒多个线程，但是如果对应的资源不够所有唤醒线程使用，则剩余线程的唤醒就是无意义的，也就被称作虚假唤醒。</p>
<p>避免方法：在睡眠返回之后重新检查条件判断（while代替if）</p>
<p><code> std::condition_variable::wait</code>是“忙碌-等待”的优化。下面用简单的循环实现了一个“忙碌-等待”：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Predicate&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">minimal_wait</span><span class="params">(std::unique_lock&lt;std::mutex&gt;&amp; lk, Predicate pred)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">pred</span>())&#123;</span><br><span class="line">    lk.<span class="built_in">unlock</span>();</span><br><span class="line">    lk.<span class="built_in">lock</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="构建线程安全队列"><a href="#构建线程安全队列" class="headerlink" title="构建线程安全队列"></a>构建线程安全队列</h3><p>代码4.3 线程安全队列的接口</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span> <span class="comment">// 为了使用std::shared_ptr</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threadsafe_queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">threadsafe_queue</span>();</span><br><span class="line">  <span class="built_in">threadsafe_queue</span>(<span class="keyword">const</span> threadsafe_queue&amp;);</span><br><span class="line">  threadsafe_queue&amp; <span class="keyword">operator</span>=(</span><br><span class="line">      <span class="keyword">const</span> threadsafe_queue&amp;) = <span class="keyword">delete</span>;  <span class="comment">// 不允许简单的赋值</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T new_value)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">try_pop</span><span class="params">(T&amp; value)</span></span>;  <span class="comment">// 1 返回队列中值的状态</span></span><br><span class="line">  <span class="function">std::shared_ptr&lt;T&gt; <span class="title">try_pop</span><span class="params">()</span></span>;  <span class="comment">// 2 直接返回检索值，当没有值可检索时，这个函数返回NULL。</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">wait_and_pop</span><span class="params">(T&amp; value)</span></span>;</span><br><span class="line">  <span class="function">std::shared_ptr&lt;T&gt; <span class="title">wait_and_pop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>裁剪了很多构造函数，并禁止简单赋值。需要提供两个版本的try_pop()和wait_for_pop()。</p>
<p>代码4.4 从代码4.1中提取push()和wait_and_pop()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threadsafe_queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  std::mutex mut;</span><br><span class="line">  std::queue&lt;T&gt; data_queue;</span><br><span class="line">  std::condition_variable data_cond;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T new_value)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mut)</span></span>;</span><br><span class="line">    data_queue.<span class="built_in">push</span>(new_value);</span><br><span class="line">    data_cond.<span class="built_in">notify_one</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">wait_and_pop</span><span class="params">(T&amp; value)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mut)</span></span>;</span><br><span class="line">    data_cond.<span class="built_in">wait</span>(lk,[<span class="keyword">this</span>]&#123;<span class="keyword">return</span> !data_queue.<span class="built_in">empty</span>();&#125;);</span><br><span class="line">    value=data_queue.<span class="built_in">front</span>();</span><br><span class="line">    data_queue.<span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">threadsafe_queue&lt;data_chunk&gt; data_queue;  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">data_preparation_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">more_data_to_prepare</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    data_chunk <span class="keyword">const</span> data=<span class="built_in">prepare_data</span>();</span><br><span class="line">    data_queue.<span class="built_in">push</span>(data);  <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">data_processing_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    data_chunk data;</span><br><span class="line">    data_queue.<span class="built_in">wait_and_pop</span>(data);  <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">process</span>(data);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">is_last_chunk</span>(data))</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程队列中有互斥量和条件变量，所以独立的变量就不需要了①，并且push()不需要外部同步②。当然，wait_and_pop()还要兼顾条件变量的等待③。</p>
<p>代码4.5 使用条件变量的线程安全队列(完整版)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threadsafe_queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">mutable</span> std::mutex mut;  <span class="comment">// 1 互斥量必须是可变的 </span></span><br><span class="line">  std::queue&lt;T&gt; data_queue;</span><br><span class="line">  std::condition_variable data_cond;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">threadsafe_queue</span>()</span><br><span class="line">  &#123;&#125;</span><br><span class="line">  <span class="built_in">threadsafe_queue</span>(threadsafe_queue <span class="keyword">const</span>&amp; other)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(other.mut)</span></span>;</span><br><span class="line">    data_queue=other.data_queue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T new_value)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mut)</span></span>;</span><br><span class="line">    data_queue.<span class="built_in">push</span>(new_value);</span><br><span class="line">    data_cond.<span class="built_in">notify_one</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">wait_and_pop</span><span class="params">(T&amp; value)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mut)</span></span>;</span><br><span class="line">    data_cond.<span class="built_in">wait</span>(lk,[<span class="keyword">this</span>]&#123;<span class="keyword">return</span> !data_queue.<span class="built_in">empty</span>();&#125;);</span><br><span class="line">    value=data_queue.<span class="built_in">front</span>();</span><br><span class="line">    data_queue.<span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::shared_ptr&lt;T&gt; <span class="title">wait_and_pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mut)</span></span>;</span><br><span class="line">    data_cond.<span class="built_in">wait</span>(lk,[<span class="keyword">this</span>]&#123;<span class="keyword">return</span> !data_queue.<span class="built_in">empty</span>();&#125;);</span><br><span class="line">    <span class="function">std::shared_ptr&lt;T&gt; <span class="title">res</span><span class="params">(std::make_shared&lt;T&gt;(data_queue.front()))</span></span>;</span><br><span class="line">    data_queue.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">try_pop</span><span class="params">(T&amp; value)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mut)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(data_queue.<span class="built_in">empty</span>())</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    value=data_queue.<span class="built_in">front</span>();</span><br><span class="line">    data_queue.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::shared_ptr&lt;T&gt; <span class="title">try_pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mut)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(data_queue.<span class="built_in">empty</span>())</span><br><span class="line">      <span class="keyword">return</span> std::shared_ptr&lt;T&gt;();</span><br><span class="line">    <span class="function">std::shared_ptr&lt;T&gt; <span class="title">res</span><span class="params">(std::make_shared&lt;T&gt;(data_queue.front()))</span></span>;</span><br><span class="line">    data_queue.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(mut)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> data_queue.<span class="built_in">empty</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>empty()是一个const成员函数，并且传入拷贝构造函数的other形参是一个const引用。因为其他线程可能有非const引用对象，并调用变种成员函数，所以这里有必要对互斥量上锁。又因为锁住互斥量是个可变操作，所以互斥量成员必须为mutable①才能在empty()和拷贝构造函数中进行上锁。</p>
<p>当数据准备完成时，调用notify_one()将会唤醒一个正在wait()的线程，检查条件和wait()函数的返回状态(因为仅是向data_queue添加了一个数据项)。</p>
<h2 id="使用future"><a href="#使用future" class="headerlink" title="使用future"></a>使用future</h2><p>future：当线程需要等待特定事件时，某种程度上来说就需要知道期望的结果。之后，线程会周期性(较短的周期)的等待或检查事件是否触发(检查信息板)，检查期间也会执行其他任务(品尝昂贵的咖啡)。另外，等待任务期间也可以先执行另外的任务，直到对应的任务触发，而后等待future的状态会变为就绪状态。</p>
<p>当事件发生时(状态为就绪)，这个future就不能重置了。</p>
<p>c++标准库中，声明在<code>&lt;future&gt;</code>头文件中: unique future(<code>std::future&lt;&gt;</code>)和shared futures(<code>std::shared_future&lt;&gt;</code>)，与了<code>std::unique_ptr</code>和<code>std::shared_ptr</code>非常类似。</p>
<p><code>std::future</code>只能与指定事件相关联，而<code>std::shared_future</code>就能关联多个事件。后者的实现中，所有实例会在同时变为就绪状态，并且可以访问与事件相关的数据。</p>
<p>当多个线程需要访问一个独立future对象时，必须使用互斥量或类似同步机制进行保护。</p>
<h3 id="后台任务的返回值"><a href="#后台任务的返回值" class="headerlink" title="后台任务的返回值"></a>后台任务的返回值</h3><p>当不着急让任务结果时，可以使用<code>std::async</code>启动一个异步任务。与<code>std::thread</code>对象等待的方式不同，<code>std::async</code>会返回一个<code>std::future</code>对象，这个对象持有最终计算出来的结果。当需要这个值时，只需要调用这个对象的get()成员函数，就会阻塞线程直到future为就绪为止，并返回计算结果。</p>
<p>代码4.6 <code>std::future</code>从异步任务中获取返回值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_the_answer_to_ltuae</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_other_stuff</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::future&lt;<span class="keyword">int</span>&gt; the_answer=std::<span class="built_in">async</span>(find_the_answer_to_ltuae);</span><br><span class="line">  <span class="built_in">do_other_stuff</span>();</span><br><span class="line">  std::cout&lt;&lt;<span class="string">&quot;The answer is &quot;</span>&lt;&lt;the_answer.<span class="built_in">get</span>()&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>std::async</code>允许通过添加额外的调用参数，向函数传递额外的参数。第一个参数是指向成员函数的指针，第二个参数提供这个函数成员类的具体对象(是通过指针，也可以包装在<code>std::ref</code>中)，剩余的参数可作为函数的参数传入。</p>
<p>代码4.7 使用<code>std::async</code>向函数传递参数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span>,std::string <span class="keyword">const</span>&amp;)</span></span>;</span><br><span class="line">  <span class="function">std::string <span class="title">bar</span><span class="params">(std::string <span class="keyword">const</span>&amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">X x;</span><br><span class="line"><span class="keyword">auto</span> f1=std::<span class="built_in">async</span>(&amp;X::foo,&amp;x,<span class="number">42</span>,<span class="string">&quot;hello&quot;</span>);  <span class="comment">// 调用p-&gt;foo(42, &quot;hello&quot;)，p是指向x的指针</span></span><br><span class="line"><span class="keyword">auto</span> f2=std::<span class="built_in">async</span>(&amp;X::bar,x,<span class="string">&quot;goodbye&quot;</span>);  <span class="comment">// 调用tmpx.bar(&quot;goodbye&quot;)， tmpx是x的拷贝副本</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Y</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">Y y;</span><br><span class="line"><span class="keyword">auto</span> f3=std::<span class="built_in">async</span>(<span class="built_in">Y</span>(),<span class="number">3.141</span>);  <span class="comment">// 调用tmpy(3.141)，tmpy通过Y的移动构造函数得到</span></span><br><span class="line"><span class="keyword">auto</span> f4=std::<span class="built_in">async</span>(std::<span class="built_in">ref</span>(y),<span class="number">2.718</span>);  <span class="comment">// 调用y(2.718)</span></span><br><span class="line"><span class="function">X <span class="title">baz</span><span class="params">(X&amp;)</span></span>;</span><br><span class="line">std::<span class="built_in">async</span>(baz,std::<span class="built_in">ref</span>(x));  <span class="comment">// 调用baz(x)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">move_only</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">move_only</span>();</span><br><span class="line">  <span class="built_in">move_only</span>(move_only&amp;&amp;)</span><br><span class="line">  <span class="built_in">move_only</span>(move_only <span class="keyword">const</span>&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">  move_only&amp; <span class="keyword">operator</span>=(move_only&amp;&amp;);</span><br><span class="line">  move_only&amp; <span class="keyword">operator</span>=(move_only <span class="keyword">const</span>&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> f5=std::<span class="built_in">async</span>(<span class="built_in">move_only</span>());  <span class="comment">// 调用tmp()，tmp是通过std::move(move_only())构造得到</span></span><br></pre></td></tr></table></figure>

<p>future的等待取决于<code>std::async</code>是否启动一个线程，或是否有任务在进行同步。</p>
<p>可以在函数调用之前向<code>std::async</code>传递一个额外参数:</p>
<p><code>std::launch::async</code>，表明函数必须在其所在的独立线程上执行；</p>
<p><code>std::launch::defered</code>，表明函数调用延迟到wait()或get()函数调用时才执行。</p>
<p><code>std::launch::deferred | std::launch::async</code>表明实现可以选择这两种方式的一种（默认选项）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> f6=std::<span class="built_in">async</span>(std::launch::async,<span class="built_in">Y</span>(),<span class="number">1.2</span>);  <span class="comment">// 在新线程上执行</span></span><br><span class="line"><span class="keyword">auto</span> f7=std::<span class="built_in">async</span>(std::launch::deferred,baz,std::<span class="built_in">ref</span>(x));  <span class="comment">// 在wait()或get()调用时执行</span></span><br><span class="line"><span class="keyword">auto</span> f8=std::<span class="built_in">async</span>(</span><br><span class="line">              std::launch::deferred | std::launch::async,</span><br><span class="line">              baz,std::<span class="built_in">ref</span>(x));  <span class="comment">// 实现选择执行方式</span></span><br><span class="line"><span class="keyword">auto</span> f9=std::<span class="built_in">async</span>(baz,std::<span class="built_in">ref</span>(x));</span><br><span class="line">f7.<span class="built_in">wait</span>();  <span class="comment">//  调用延迟函数</span></span><br></pre></td></tr></table></figure>

<h3 id="future与任务关联"><a href="#future与任务关联" class="headerlink" title="future与任务关联"></a>future与任务关联</h3><p><code>std::packaged_task&lt;&gt;</code>会将future与函数或可调用对象进行绑定。当调用<code>std::packaged_task&lt;&gt;</code>对象时，就会调用相关函数或可调用对象，当future状态为就绪时，会存储返回值。</p>
<p>构造<code>std::packaged_task&lt;&gt;</code>实例时，就必须传入函数或可调用对象。这个函数或可调用的对象，需要能接收指定的参数和返回(可转换为指定返回类型的)值。类型可以不完全匹配，因为这里类型可以隐式转换，可以用int类型参数和返回float类型的函数，来构建<code>std::packaged_task&lt;double(double)&gt;</code>实例。</p>
<p>函数签名的返回类型可以用来标识从get_future()返回的<code>std::future&lt;&gt;</code>的类型，而函数签名的参数列表，可用来指定packaged_task的函数调用操作符。例如，模板偏特化</p>
<p>代码4.8 <code>std::packaged_task&lt;&gt;</code>的偏特化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">packaged_task</span>&lt;</span>std::<span class="built_in">string</span>(std::vector&lt;<span class="keyword">char</span>&gt;*,<span class="keyword">int</span>)&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Callable&gt;</span></span><br><span class="line"><span class="function">  <span class="keyword">explicit</span> <span class="title">packaged_task</span><span class="params">(Callable&amp;&amp; f)</span></span>;</span><br><span class="line">  <span class="function">std::future&lt;std::string&gt; <span class="title">get_future</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(std::vector&lt;<span class="keyword">char</span>&gt;*,<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当<code>std::packaged_task</code>作为函数调用时，实参将由函数调用操作符传递至底层函数，并且返回值作为异步结果存储在<code>std::future</code>中，并且可通过get_future()获取。</p>
<p><code>std::packaged_task</code>对任务进行打包，并适时的取回future。当异步任务需要返回值时，可以等待future状态变为“就绪”。</p>
<p><strong>线程间传递任务</strong></p>
<p>代码4.9 使用<code>std::packaged_task</code>执行一个图形界面线程</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::mutex m;</span><br><span class="line">std::deque&lt;std::packaged_task&lt;<span class="keyword">void</span>()&gt; &gt; tasks;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">gui_shutdown_message_received</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_and_process_gui_message</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gui_thread</span><span class="params">()</span>  <span class="comment">// 1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">gui_shutdown_message_received</span>())  <span class="comment">// 2 关闭图形界面的信息</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">get_and_process_gui_message</span>();  <span class="comment">// 3 关闭界面前，进行轮询界面消息处理</span></span><br><span class="line">    std::packaged_task&lt;<span class="built_in"><span class="keyword">void</span></span>()&gt; task;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(m)</span></span>;</span><br><span class="line">      <span class="keyword">if</span>(tasks.<span class="built_in">empty</span>())  <span class="comment">// 4 当队列中没有任务时，循环将继续</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      task=std::<span class="built_in">move</span>(tasks.<span class="built_in">front</span>());  <span class="comment">// 5 能在队列中提取出一个任务</span></span><br><span class="line">      tasks.<span class="built_in">pop_front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">task</span>();  <span class="comment">// 6 释放队列上的锁，并且执行任务</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::thread <span class="title">gui_bg_thread</span><span class="params">(gui_thread)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Func&gt;</span></span><br><span class="line"><span class="function">std::future&lt;<span class="keyword">void</span>&gt; <span class="title">post_task_for_gui_thread</span><span class="params">(Func f)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="function">std::packaged_task&lt;<span class="title">void</span><span class="params">()</span>&gt; <span class="title">task</span><span class="params">(f)</span></span>;  <span class="comment">// 7 提供一个打包好的任务</span></span><br><span class="line">  std::future&lt;<span class="keyword">void</span>&gt; res=task.<span class="built_in">get_future</span>();  <span class="comment">// 8 用get_future()成员函数获取future对象</span></span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(m)</span></span>;</span><br><span class="line">  tasks.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(task));  <span class="comment">// 9 任务推入列表</span></span><br><span class="line">  <span class="keyword">return</span> res; <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>std::packaged_task</code>是一个类模板，顾名思义是用来打包的，将一个可调用对象封装起来，然后可以将其的返回值传给future。<code>std::packaged_task&lt;函数返回类型(参数类型)&gt; 变量名(函数名)</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	x++;</span><br><span class="line">	x *= <span class="number">10</span>;</span><br><span class="line">	std::cout &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">	std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">5</span>));</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">std::packaged_task&lt;<span class="title">int</span><span class="params">(<span class="keyword">int</span>)</span>&gt; <span class="title">pt</span><span class="params">(fun)</span></span>;         <span class="comment">// 将函数打包起来</span></span><br><span class="line">	std::future&lt;<span class="keyword">int</span>&gt; fu = pt.<span class="built_in">get_future</span>();        <span class="comment">// 并将结果返回给future</span></span><br><span class="line">	<span class="function">std::thread <span class="title">t</span><span class="params">(std::ref(pt), <span class="number">1</span>)</span></span>;</span><br><span class="line">	std::cout &lt;&lt; fu.<span class="built_in">get</span>() &lt;&lt; std::endl;</span><br><span class="line">	std::cout &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line">	t.<span class="built_in">join</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用std-promises"><a href="#使用std-promises" class="headerlink" title="使用std::promises"></a>使用std::promises</h3><p>当线程处理多个连接事件，来自不同的端口连接的数据包基本上以乱序方式进行处理。同样的，数据包也将以乱序的方式进入队列。很多情况下，一些应用不是等待数据成功的发送，就是等待(新的)指定网络接口数据的接收成功。</p>
<p><code>std::promise</code>是一个类模板，它的作用是在不同的线程中实现数据的同步，与future结合使用，也间接实现了future在不同线程间的同步。</p>
<p><code>std::promise/std::future</code>对提供一种机制：future可以阻塞等待线程，提供数据的线程可以使用promise对相关值进行设置，并将future的状态置为“就绪”。</p>
<p>当promise设置完毕(使用set_value()成员函数)时，对应的future状态就变为“就绪”，并且可用于检索已存储的值。当设置值之前销毁<code>std::promise</code>，将会存储一个异常。</p>
<p>代码4.10 使用promise解决单线程多连接问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_connections</span><span class="params">(connection_set&amp; connections)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">done</span>(connections))  <span class="comment">// 1 循环直到done()返回true为止</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(connection_iterator  <span class="comment">// 2</span></span><br><span class="line">            connection=connections.<span class="built_in">begin</span>(),end=connections.<span class="built_in">end</span>();</span><br><span class="line">          connection!=end;</span><br><span class="line">          ++connection)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(connection-&gt;<span class="built_in">has_incoming_data</span>())  <span class="comment">// 3 检索是否有数据</span></span><br><span class="line">      &#123;</span><br><span class="line">        data_packet data=connection-&gt;<span class="built_in">incoming</span>();</span><br><span class="line">        std::promise&lt;payload_type&gt;&amp; p=</span><br><span class="line">            connection-&gt;<span class="built_in">get_promise</span>(data.id);  <span class="comment">// 4</span></span><br><span class="line">        p.<span class="built_in">set_value</span>(data.payload);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(connection-&gt;<span class="built_in">has_outgoing_data</span>())  <span class="comment">// 5 检索是否正在发送已入队的传出数据</span></span><br><span class="line">      &#123;</span><br><span class="line">        outgoing_packet data=</span><br><span class="line">            connection-&gt;<span class="built_in">top_of_outgoing_queue</span>();</span><br><span class="line">        connection-&gt;<span class="built_in">send</span>(data.payload);</span><br><span class="line">        data.promise.<span class="built_in">set_value</span>(<span class="literal">true</span>);  <span class="comment">// 6 当发送完成，传出数据相关的promise将置为true，来表明传输成功</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>set_value()</code>则直接将future的状态设置为ready。需要注意的是在使用的过程中不能多次<code>set_value()</code>，也不能多次<code>get_future()</code>和多次<code>get()</code>，因为一个promise对象只能和一个对象相关联，否则就会抛出异常。</p>
<h2 id="将异常存于future中"><a href="#将异常存于future中" class="headerlink" title="将异常存于future中"></a>将异常存于future中</h2><p>函数作为<code>std::async</code>的一部分时，当调用抛出一个异常时，这个异常就会存储到future中，之后future的状态置为“就绪”，之后调用get()会抛出已存储的异常(注意：标准级别没有指定重新抛出的这个异常是原始的异常对象，还是一个拷贝。不同的编译器和库将会在这方面做出不同的选择)。</p>
<p>将函数打包入<code>std::packaged_task</code>任务包后，当任务调用时，同样的事情也会发生。打包函数抛出一个异常，这个异常将存储在future中，在get()调用时会再次抛出。</p>
<p><code>std::promise</code>也能提供同样的功能。当存入的是异常而非数值时，就需要调用set_exception()成员函数，而非set_value()。这通常是用在一个catch块中，并作为算法的一部分。为了捕获异常，这里使用异常填充promise：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> std::promise&lt;<span class="keyword">double</span>&gt; some_promise;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">  some_promise.<span class="built_in">set_value</span>(<span class="built_in">calculate_value</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span>(...)</span><br><span class="line">&#123;</span><br><span class="line">  some_promise.<span class="built_in">set_exception</span>(std::<span class="built_in">current_exception</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>std::current_exception()</code>来检索抛出的异常，可用<code>std::copy_exception()</code>作为替代方案，<code>std::copy_exception()</code>会直接存储新的异常而不抛出：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">some_promise.<span class="built_in">set_exception</span>(std::<span class="built_in">copy_exception</span>(std::<span class="built_in">logic_error</span>(<span class="string">&quot;foo &quot;</span>)));</span><br></pre></td></tr></table></figure>

<p>这比使用try/catch块更加清晰，当异常类型已知，就应该优先使用。</p>
<h3 id="多个线程的等待"><a href="#多个线程的等待" class="headerlink" title="多个线程的等待"></a>多个线程的等待</h3><p>多线程在没有额外同步的情况下，访问独立<code>std::future</code>对象时，就会有数据竞争和未定义行为。因为<code>std::future</code>独享同步结果，并且通过调用get()函数，一次性的获取数据，这就让并发访问变的毫无意义。</p>
<p><code>std::shared_future</code>：其所有权可以在不同的实例中互相传递，但只有一个实例可以获得特定的同步结果，而<code>std::shared_future</code>实例是可拷贝的，所以多个对象可以引用同一关联期望值的结果。</p>
<p>每一个<code>std::shared_future</code>的独立对象上，成员函数调用返回的结果还是不同步的，所以为了在多个线程访问一个独立对象时避免数据竞争，必须使用锁来对访问进行保护。优先使用的办法：为了替代只有一个拷贝对象的情况，可以让每个线程都拥有自己对应的拷贝对象。这样，当每个线程都通过自己拥有的<code>std::shared_future</code>对象获取结果，那么多个线程访问共享同步结果就是安全的。</p>
<p><code>std::shared_future</code>的实例同步<code>std::future</code>实例的状态。当<code>std::future</code>对象没有与其他对象共享同步状态所有权，那么所有权必须使用<code>std::move</code>将所有权传递到<code>std::shared_future</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::promise&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"><span class="function">std::future&lt;<span class="keyword">int</span>&gt; <span class="title">f</span><span class="params">(p.get_future())</span></span>;</span><br><span class="line"><span class="built_in">assert</span>(f.<span class="built_in">valid</span>());  <span class="comment">// 1 期望值 f 是合法的</span></span><br><span class="line"><span class="function">std::shared_future&lt;<span class="keyword">int</span>&gt; <span class="title">sf</span><span class="params">(std::move(f))</span></span>;</span><br><span class="line"><span class="built_in">assert</span>(!f.<span class="built_in">valid</span>());  <span class="comment">// 2 期望值 f 现在是不合法的</span></span><br><span class="line"><span class="built_in">assert</span>(sf.<span class="built_in">valid</span>());  <span class="comment">// 3 sf 现在是合法的</span></span><br></pre></td></tr></table></figure>

<p>期望值f开始是合法的①，因为引用的是promise p的同步状态，但是在转移sf的状态后，f就不合法了②，而sf就是合法的了③。</p>
<p>如其他可移动对象一样，转移所有权是对右值的隐式操作，所以可以通过<code>std::promise</code>对象的成员函数get_future()的返回值，直接构造一个<code>std::shared_future</code>对象，例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::promise&lt;std::string&gt; p;</span><br><span class="line"><span class="function">std::shared_future&lt;std::string&gt; <span class="title">sf</span><span class="params">(p.get_future())</span></span>;  <span class="comment">// 1 隐式转移所有权</span></span><br></pre></td></tr></table></figure>

<p><code>std::future</code>有一个share()成员函数，可用来创建新的<code>std::shared_future</code> ，并且可以直接转移future的所有权。这样也就能保存很多类型，并且使得代码易于修改：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::promise&lt; std::map&lt; SomeIndexType, SomeDataType, SomeComparator,</span><br><span class="line">     SomeAllocator&gt;::iterator&gt; p;</span><br><span class="line"><span class="keyword">auto</span> sf=p.<span class="built_in">get_future</span>().<span class="built_in">share</span>();</span><br></pre></td></tr></table></figure>

<p>当比较器或分配器有所改动，只需要对promise的类型进行修改即可。future的类型会自动与promise的修改进行匹配。</p>
<h2 id="限时等待"><a href="#限时等待" class="headerlink" title="限时等待"></a>限时等待</h2><h3 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h3><p>时钟和与时间相关的工具，都在<code>&lt;chrono&gt;</code>库头文件中定义。</p>
<p>c++标准库中，时钟是一个类，提供了四种不同的信息：</p>
<p>当前时间可以通过静态成员函数now()从获取。例如，<code>std::chrono::system_clock::now()</code>会返回系统的当前时间。返回类型为some_clock::time_point</p>
<p>通常情况下，因为<code>std::chrono::system_clock</code>可调，所以是不稳定的。这可调可能造成首次调用now()返回的时间要早于上次调用now()所返回的时间，这就违反了节拍频率的均匀分布。</p>
<p>稳定时钟<code>std::chrono::steady_clock</code>。</p>
<h3 id="时间段"><a href="#时间段" class="headerlink" title="时间段"></a>时间段</h3><p><code>std::chrono::duration&lt;&gt;</code>函数模板能够对时间段进行处理(线程库使用到的所有C++时间处理工具，都在<code>std::chrono</code>命名空间内)。第一个模板参数是一个类型表示(比如，int，long或double)，第二个模板参数是定制部分，表示每一个单元所用秒数。</p>
<p>例如，<code>std::chrono::duration&lt;short, std::ratio&lt;60, 1&gt;&gt;</code>，几分钟的时间要存在short类型中，因为60秒是才是1分钟，所以第二个参数写成<code>std::ratio&lt;60, 1&gt;</code>。当需要将毫秒级计数存在double类型中时，可以写成<code>std::chrono::duration&lt;double, std::ratio&lt;1, 1000&gt;&gt;</code>，因为1秒等于1000毫秒</p>
<p>标准库在<code>std::chrono</code>命名空间内为时间段变量提供一系列预定义类型：nanoseconds[纳秒] , microseconds[微秒] , milliseconds[毫秒] , seconds[秒] , minutes[分]和hours[时]。</p>
<p>当不要求截断值的情况下(时转换成秒是没问题，但是秒转换成时就不行)时间段的转换是隐式的，显示转换可以由<code>std::chrono::duration_cast&lt;&gt;</code>来完成。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::<span class="function">chrono::milliseconds <span class="title">ms</span><span class="params">(<span class="number">54802</span>)</span></span>;</span><br><span class="line">std::chrono::seconds s=</span><br><span class="line">       std::chrono::duration_cast&lt;std::chrono::seconds&gt;(ms);</span><br></pre></td></tr></table></figure>

<p>这里的结果就是截断的，而不是进行了舍入，所以s最后的值为54。</p>
<p>时间值支持四则运算，所以能够对两个时间段进行加减，或者是对一个时间段乘除一个常数(模板的第一个参数)来获得一个新时间段变量。例如，5*seconds(1)与seconds(5)或minutes(1)-seconds(55)是一样。</p>
<p>在时间段中可以通过count()成员函数获得单位时间的数量。例如，<code>std::chrono::milliseconds(1234).count()</code>就是1234。</p>
<p>例如：等待future状态变为就绪需要35毫秒：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::future&lt;<span class="keyword">int</span>&gt; f=std::<span class="built_in">async</span>(some_task);</span><br><span class="line"><span class="keyword">if</span>(f.<span class="built_in">wait_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">35</span>))==std::future_status::ready)</span><br><span class="line">  <span class="built_in">do_something_with</span>(f.<span class="built_in">get</span>());</span><br></pre></td></tr></table></figure>

<p>等待函数会返回状态值，表示是等待是超时，还是继续等待。等待future时，超时时会返回<code>std::future_status::timeout</code>。当future状态改变，则会返回<code>std::future_status::ready</code>。当与future相关的任务延迟了，则会返回<code>std::future_status::deferred</code>。</p>
<p>系统调度的不确定性和不同操作系统的时钟精度意味着：线程调用和返回的实际时间间隔可能要比35毫秒长。</p>
<h3 id="时间点"><a href="#时间点" class="headerlink" title="时间点"></a>时间点</h3><p>时间点可用<code>std::chrono::time_point&lt;&gt;</code>来表示，第一个参数用来指定使用的时钟，第二个函数参数用来表示时间单位(特化的<code>std::chrono::duration&lt;&gt;</code>)。</p>
<p>可以通过对<code>std::chrono::time_point&lt;&gt;</code>实例进行加/减，来获得一个新的时间点，所以<code>std::chrono::hight_resolution_clock::now() + std::chrono::nanoseconds(500)</code>将得到500纳秒后的时间，这对于计算绝对时间来说非常方便。</p>
<p>可以减去一个时间点(二者需要共享同一个时钟)，结果是两个时间点的时间差：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> start=std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="built_in">do_something</span>();</span><br><span class="line"><span class="keyword">auto</span> stop=std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">std::cout&lt;&lt;”<span class="built_in">do_something</span>() took “</span><br><span class="line">  &lt;&lt;std::chrono::duration&lt;<span class="keyword">double</span>,std::chrono::seconds&gt;(stop-start).<span class="built_in">count</span>()</span><br><span class="line">  &lt;&lt;” seconds”&lt;&lt;std::endl;</span><br></pre></td></tr></table></figure>

<p>代码4.11 等待条件变量满足条件——有超时功能</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::condition_variable cv;</span><br><span class="line"><span class="keyword">bool</span> done;</span><br><span class="line">std::mutex m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">wait_loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> <span class="keyword">const</span> timeout= std::chrono::steady_clock::<span class="built_in">now</span>()+</span><br><span class="line">      std::chrono::<span class="built_in">milliseconds</span>(<span class="number">500</span>);</span><br><span class="line">  <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lk</span><span class="params">(m)</span></span>;</span><br><span class="line">  <span class="keyword">while</span>(!done) <span class="comment">// while循环处理假唤醒</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(cv.<span class="built_in">wait_until</span>(lk,timeout)==std::cv_status::timeout) <span class="comment">// 等待函数wait_until()传入一个时间点</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> done;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当没有什么可以等待时，可在一定时限中等待条件变量。这种方式中，循环的整体长度有限。当循环中使用wait_for()时，可能在等待了足够长的时间后结束等待(在假唤醒之前)，且下一次等待又开始了。这可能重复很多次，出现无限等待的情况。</p>
<h3 id="使用超时"><a href="#使用超时" class="headerlink" title="使用超时"></a>使用超时</h3><p>最简单方式，对特定线程添加延迟处理。</p>
<p>例如循环检查“done”标志，两个处理函数分别是<code>std::this_thread::sleep_for()</code>和<code>std::this_thread::sleep_until()</code>。当线程因为指定时长而进入睡眠时，可使用sleep_for()唤醒，可指定休眠的时间点，之后可使用sleep_until唤醒。</p>
<p><code>std::mutex</code>和<code>std::recursive_mutex</code>都不支持超时，而<code>std::timed_mutex</code>和<code>std::recursive_timed_mutex</code>支持超时。这两种类型也有try_lock_for()和try_lock_until()成员函数，可以在一段时期内尝试获取锁，或在指定时间点前获取互斥锁。</p>
<p>表4.1 可接受超时的函数</p>
<table border="1">
  <td>类型/命名空间</td>
  <td>函数</td>
  <td>返回值</td>
<tr>
  <td rowspan="2"> std::this_thread 命名空间 </td>
  <td> sleep_for(duration) </td>
  <td rowspan="2">N/A</td>
</tr>
<tr>
  <td>sleep_until(time_point)</td>
</tr>
<tr>
  <td rowspan="2">std::condition_variable 或 std::condition_variable_any</td>
  <td>wait_for(lock, duration)</td>
  <td rowspan="2">std::cv_status::time_out 或 std::cv_status::no_timeout</td>
</tr>
<tr>
  <td>wait_until(lock, time_point)</td>
</tr>
<tr>
  <td rowspan="2"> </td>
  <td> wait_for(lock, duration, predicate)</td>
  <td rowspan="2">bool —— 当唤醒时，返回谓词的结果</td>
</tr>
<tr>
  <td>wait_until(lock, duration, predicate)</td>
</tr>
<tr>
  <td rowspan="2">std::timed_mutex 或 std::recursive_timed_mutex</td>
  <td>try_lock_for(duration)</td>
  <td rowspan="2"> bool —— 获取锁时返回true，否则返回fasle</td>
</tr>
<tr>
  <td>try_lock_until(time_point)</td>
</tr>
<tr>
  <td rowspan="2">std::unique_lock&lt;TimedLockable&gt;</td>
  <td>unique_lock(lockable, duration)</td>
  <td>N/A —— 对新构建的对象调用owns_lock();</td>
</tr>
<tr>
  <td>unique_lock(lockable, time_point)</td>
  <td>当获取锁时返回true，否则返回false</td>
</tr>
<tr>
  <td rowspan="2"></td>
  <td>try_lock_for(duration)</td>
  <td rowspan="2">bool —— 当获取锁时返回true，否则返回false</td>
</tr>
<tr>
  <td>try_lock_until(time_point)</td>
</tr>
<tr>
  <td rowspan="3">std::future&lt;ValueType&gt;或std::shared_future&lt;ValueType&gt;</td>
  <td>wait_for(duration)</td>
  <td>当等待超时，返回std::future_status::timeout</td>
</tr>
<tr>
  <td rowspan="2">wait_until(time_point)</td>
  <td>当期望值准备就绪时，返回std::future_status::ready</td>
</tr>
<tr>
  <td>当期望值持有一个为启动的延迟函数，返回std::future_status::deferred</td>
</tr>
</table>



<h1 id="5-内存模型和原子操作"><a href="#5-内存模型和原子操作" class="headerlink" title="5.内存模型和原子操作"></a>5.内存模型和原子操作</h1><h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><h3 id="对象和内存位置"><a href="#对象和内存位置" class="headerlink" title="对象和内存位置"></a>对象和内存位置</h3><p>图5.1 将一个struct分解为多个对象，展示每个对象的内存位置。</p>
<img src="/posts/5-1.png" alt="5-1" style="zoom: 50%;">

<p>完整的struct是一个有多个子对象(每一个成员变量)组成的对象。</p>
<p>四个原则：</p>
<ol>
<li>每个变量都是对象，包括其成员变量的对象。</li>
<li>每个对象至少占有一个内存位置。</li>
<li>基本类型都有确定的内存位置(无论类型大小如何，即使他们是相邻的，或是数组的一部分)。</li>
<li>相邻位域是相同内存中的一部分。</li>
</ol>
<h3 id="对象、内存位置和并发"><a href="#对象、内存位置和并发" class="headerlink" title="对象、内存位置和并发"></a>对象、内存位置和并发</h3><p>当两个线程访问同一个内存位置，如果线程不更新数据，只读数据不需要保护或同步。当线程对内存位置上的数据进行修改，就可能会产生<strong>条件竞争</strong>。</p>
<p>为了避免条件竞争，线程就要以一定的顺序执行：</p>
<ul>
<li>使用<strong>互斥量</strong>来确定访问的顺序。当同一互斥量在两个线程同时访问前锁住，那么在同一时间内就只有一个线程能够访问对应的内存位置。</li>
<li>使用<strong>原子操作</strong>决定两个线程的访问顺序，当多个线程访问同一个内存地址时，对每个访问者都需要设定顺序。</li>
</ul>
<p>如果不规定对同一内存地址访问的顺序，那么访问就不是原子的。当两个线程都是“写入者”时，就会产生数据竞争和未定义行为。</p>
<p>使用原子操作避免未定义行为。</p>
<h3 id="修改顺序"><a href="#修改顺序" class="headerlink" title="修改顺序"></a>修改顺序</h3><p>C++程序中的对象都有(由程序中的所有线程对象)在初始化开始阶段确定好修改顺序的。大多数情况下，这个顺序不同于执行中的顺序，但在给定的程序中，所有线程都需要遵守这个顺序。</p>
<p>如果使用原子操作，编译器就有责任去做同步。</p>
<h2 id="原子操作和原子类型"><a href="#原子操作和原子类型" class="headerlink" title="原子操作和原子类型"></a>原子操作和原子类型</h2><h3 id="标准原子类型"><a href="#标准原子类型" class="headerlink" title="标准原子类型"></a>标准原子类型</h3><p>标准原子类型定义在头文件<code>&lt;atomic&gt;</code>中。</p>
<p>原子操作可以替代互斥量，来完成同步操作。</p>
<p>表5.1 标准原子类型的备选名和与其相关的<code>std::atomic&lt;&gt;</code>特化类</p>
<table>
<thead>
<tr>
<th>原子类型</th>
<th>相关特化类</th>
</tr>
</thead>
<tbody><tr>
<td>atomic_bool</td>
<td>std::atomic&lt;bool&gt;</td>
</tr>
<tr>
<td>atomic_char</td>
<td>std::atomic&lt;char&gt;</td>
</tr>
<tr>
<td>atomic_schar</td>
<td>std::atomic&lt;signed char&gt;</td>
</tr>
<tr>
<td>atomic_uchar</td>
<td>std::atomic&lt;unsigned char&gt;</td>
</tr>
<tr>
<td>atomic_int</td>
<td>std::atomic&lt;int&gt;</td>
</tr>
<tr>
<td>atomic_uint</td>
<td>std::atomic&lt;unsigned&gt;</td>
</tr>
<tr>
<td>atomic_short</td>
<td>std::atomic&lt;short&gt;</td>
</tr>
<tr>
<td>atomic_ushort</td>
<td>std::atomic&lt;unsigned short&gt;</td>
</tr>
<tr>
<td>atomic_long</td>
<td>std::atomic&lt;long&gt;</td>
</tr>
<tr>
<td>atomic_ulong</td>
<td>std::atomic&lt;unsigned long&gt;</td>
</tr>
<tr>
<td>atomic_llong</td>
<td>std::atomic&lt;long long&gt;</td>
</tr>
<tr>
<td>atomic_ullong</td>
<td>std::atomic&lt;unsigned long long&gt;</td>
</tr>
<tr>
<td>atomic_char16_t</td>
<td>std::atomic&lt;char16_t&gt;</td>
</tr>
<tr>
<td>atomic_char32_t</td>
<td>std::atomic&lt;char32_t&gt;</td>
</tr>
<tr>
<td>atomic_wchar_t</td>
<td>std::atomic&lt;wchar_t&gt;</td>
</tr>
</tbody></table>
<p>C++标准库不仅提供基本原子类型，还定义了与原子类型对应的非原子类型，就如同标准库中的<code>std::size_t</code>。如表5.2所示这些类型:</p>
<p>表5.2 标准原子类型定义(typedefs)和对应的内置类型定义(typedefs)</p>
<table>
<thead>
<tr>
<th>原子类型定义</th>
<th>标准库中相关类型定义</th>
</tr>
</thead>
<tbody><tr>
<td>atomic_int_least8_t</td>
<td>int_least8_t</td>
</tr>
<tr>
<td>atomic_uint_least8_t</td>
<td>uint_least8_t</td>
</tr>
<tr>
<td>atomic_int_least16_t</td>
<td>int_least16_t</td>
</tr>
<tr>
<td>atomic_uint_least16_t</td>
<td>uint_least16_t</td>
</tr>
<tr>
<td>atomic_int_least32_t</td>
<td>int_least32_t</td>
</tr>
<tr>
<td>atomic_uint_least32_t</td>
<td>uint_least32_t</td>
</tr>
<tr>
<td>atomic_int_least64_t</td>
<td>int_least64_t</td>
</tr>
<tr>
<td>atomic_uint_least64_t</td>
<td>uint_least64_t</td>
</tr>
<tr>
<td>atomic_int_fast8_t</td>
<td>int_fast8_t</td>
</tr>
<tr>
<td>atomic_uint_fast8_t</td>
<td>uint_fast8_t</td>
</tr>
<tr>
<td>atomic_int_fast16_t</td>
<td>int_fast16_t</td>
</tr>
<tr>
<td>atomic_uint_fast16_t</td>
<td>uint_fast16_t</td>
</tr>
<tr>
<td>atomic_int_fast32_t</td>
<td>int_fast32_t</td>
</tr>
<tr>
<td>atomic_uint_fast32_t</td>
<td>uint_fast32_t</td>
</tr>
<tr>
<td>atomic_int_fast64_t</td>
<td>int_fast64_t</td>
</tr>
<tr>
<td>atomic_uint_fast64_t</td>
<td>uint_fast64_t</td>
</tr>
<tr>
<td>atomic_intptr_t</td>
<td>intptr_t</td>
</tr>
<tr>
<td>atomic_uintptr_t</td>
<td>uintptr_t</td>
</tr>
<tr>
<td>atomic_size_t</td>
<td>size_t</td>
</tr>
<tr>
<td>atomic_ptrdiff_t</td>
<td>ptrdiff_t</td>
</tr>
<tr>
<td>atomic_intmax_t</td>
<td>intmax_t</td>
</tr>
<tr>
<td>atomic_uintmax_t</td>
<td>uintmax_t</td>
</tr>
</tbody></table>
<p>对于标准类型进行typedef T，相关的原子类型就在原来的类型名前加上atomic_的前缀：atomic_T。</p>
<p>通常，标准原子类型不能进行拷贝和赋值，它们没有拷贝构造函数和拷贝赋值操作符。但是，可以隐式转化成对应的内置类型，所以这些类型依旧支持赋值，可以使用<code>load()</code>和<code>store()</code>、<code>exchange()</code>、<code>compare_exchange_weak()</code>和<code>compare_exchange_strong()</code>。</p>
<p>它们都支持复合赋值符：+=, -=, *=, |= 等等。并且使用整型和指针的特化类型还支持++和–操作。</p>
<p>每种函数类型的操作都有一个内存序参数，这个参数可以用来指定存储的顺序。操作分为三类：</p>
<ol>
<li><em>Store</em>操作，可选如下内存序：<code>memory_order_relaxed</code>, <code>memory_order_release</code>, <code>memory_order_seq_cst</code>。</li>
<li><em>Load</em>操作，可选如下内存序：<code>memory_order_relaxed</code>, <code>memory_order_consume</code>, <code>memory_order_acquire</code>, <code>memory_order_seq_cst</code>。</li>
<li><em>Read-modify-write</em>(读-改-写)操作，可选如下内存序：<code>memory_order_relaxed</code>, <code>memory_order_consume</code>, <code>memory_order_acquire</code>, <code>memory_order_release</code>, <code>memory_order_acq_rel</code>, <code>memory_order_seq_cst</code>。</li>
</ol>
<h3 id="std-atomic-flag"><a href="#std-atomic-flag" class="headerlink" title="std::atomic_flag"></a><code>std::atomic_flag</code></h3><p><code>std::atomic_flag</code>是最简单的原子类型，这个类型的对象可以在两个状态间切换：设置和清除。</p>
<p><code>std::atomic_flag</code>类型的对象必须被ATOMIC_FLAG_INIT初始化。初始化标志位是“清除”状态。这里没得选择，这个标志总是初始化为“清除”：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::atomic_flag f = ATOMIC_FLAG_INIT;</span><br></pre></td></tr></table></figure>

<p>这适用于任何对象的声明，是唯一需要以如此特殊的方式初始化的原子类型，但也是唯一保证无锁的类型。首次使用时，需要初始化。如果<code>std::atomic_flag</code>是静态存储的，那么就的保证其是静态初始化的，也就意味着没有初始化顺序问题。</p>
<p>当标志对象已初始化，只能做三件事情：</p>
<ul>
<li>销毁，clear()成员函数，是一个存储操作，所以不能有memory_order_acquire或memory_order_acq_rel语义</li>
<li>清除或设置(查询之前的值)，test_and_set()成员函数，“读-改-写”操作，可以应用于任何内存顺序。</li>
</ul>
<p>每一个原子操作，默认的内存序都是memory_order_seq_cst。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">f.<span class="built_in">clear</span>(std::memory_order_release);  <span class="comment">// 1 使用释放语义清除标志</span></span><br><span class="line"><span class="keyword">bool</span> x=f.<span class="built_in">test_and_set</span>();  <span class="comment">// 2 使用默认内存序设置表示，并且检索旧值</span></span><br></pre></td></tr></table></figure>

<p>不能拷贝构造<code>std::atomic_flag</code>对象，不能将一个对象赋予另一个<code>std::atomic_flag</code>对象。这不是<code>std::atomic_flag</code>特有的属性，而是所有原子类型共有的属性。</p>
<p><strong>原子类型的所有操作都是原子的，而赋值和拷贝调用了两个对象，这就就破坏了操作的原子性。</strong></p>
<blockquote>
<p>互斥锁与自旋锁</p>
<p>同一时刻只能有一个线程获取到锁，没有获取到锁的线程通常有两种处理方式：</p>
<ul>
<li>没有获取到锁的线程就一直循环等待判断该资源是否已经释放锁，这种锁叫做自旋锁，它不用将线程阻塞起来(NON-BLOCKING)</li>
<li>把自己阻塞起来，等待重新调度请求，这种叫做互斥锁。</li>
</ul>
<p>自旋锁的定义：当一个线程尝试去获取某一把锁的时候，如果这个锁此时已经被别人获取(占用)，那么此线程就无法获取到这把锁，该线程将会等待，间隔一段时间后会再次尝试获取。这种采用循环加锁 -&gt; 等待的机制被称为自旋锁(spinlock)。</p>
<p>因为自旋锁避免了操作系统进程调度和线程切换，所以自旋锁通常适用在时间比较短的情况下。由于这个原因，<strong>操作系统的内核经常使用自旋锁</strong>。但是，如果长时间上锁的话，自旋锁会非常耗费性能，它阻止了其他线程的运行和调度。线程持有锁的时间越长，则持有该锁的线程将被 <code>OS(Operating System)</code> 调度程序中断的风险越大。</p>
</blockquote>
<p>代码5.1 使用<code>std::atomic_flag</code>实现自旋锁</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spinlock_mutex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  std::atomic_flag flag;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">spinlock_mutex</span>():</span><br><span class="line">    <span class="built_in">flag</span>(ATOMIC_FLAG_INIT)</span><br><span class="line">  &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(flag.<span class="built_in">test_and_set</span>(std::memory_order_acquire));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    flag.<span class="built_in">clear</span>(std::memory_order_release);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>由于<code>std::atomic_flag</code>的局限性太强，没有非修改查询操作，甚至不能像普通的布尔标志那样使用。所以，实际操作中最好使用<code>std::atomic&lt;bool&gt;</code></p>
<h3 id="std-atomic-lt-bool-gt"><a href="#std-atomic-lt-bool-gt" class="headerlink" title="std::atomic&lt;bool&gt;"></a><code>std::atomic&lt;bool&gt;</code></h3><p>最基本的原子整型类型就是<code>std::atomic&lt;bool&gt;</code>，它有着比<code>std::atomic_flag</code>更加齐全的布尔标志特性。</p>
<p>不能拷贝和拷贝赋值，但可以使用非原子的bool类型进行构造，所以可以初始化为true或false，并且可以从非原子bool变量赋值给<code>std::atomic&lt;bool&gt;</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::atomic&lt;<span class="keyword">bool</span>&gt; <span class="title">b</span><span class="params">(<span class="literal">true</span>)</span></span>;</span><br><span class="line">b=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>store()是一个存储操作，而load()是一个加载操作，exchange()是一个“读-改-写”操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::atomic&lt;<span class="keyword">bool</span>&gt; b;</span><br><span class="line"><span class="keyword">bool</span> x=b.<span class="built_in">load</span>(std::memory_order_acquire);</span><br><span class="line">b.<span class="built_in">store</span>(<span class="literal">true</span>); <span class="comment">// 使用store()写入(true或false) </span></span><br><span class="line">x=b.<span class="built_in">exchange</span>(<span class="literal">false</span>, std::memory_order_acq_rel); <span class="comment">// exchange()允许使用新选的值替换已存储的值，并且会自动检索原始值</span></span><br></pre></td></tr></table></figure>

<p>另一种存储方式：当前值与预期值一致时，存储新值的操作。<strong>存储一个新值(或旧值)取决于当前值</strong></p>
<p>比较/交换：表现为compare_exchange_weak()和compare_exchange_strong()</p>
<p>比较原子变量的当前值和期望值，当两值相等时，存储所提供值。当两值不等，期望值就会被更新为原子变量中的值。</p>
<p>“比较/交换”函数值是一个bool变量，当返回true时执行存储操作，false则更新期望值。当存储完成(因为只相等)，则操作是成功的，否则即为失败。操作成功是返回true，失败时返回false。</p>
<p>因为<code>compare_exchange_weak()</code>可以伪失败，所以通常会配合一个循环使用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> expected=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">extern</span> atomic&lt;<span class="keyword">bool</span>&gt; b; <span class="comment">// 设置些什么</span></span><br><span class="line"><span class="keyword">while</span>(!b.<span class="built_in">compare_exchange_weak</span>(expected,<span class="literal">true</span>) &amp;&amp; !expected);</span><br></pre></td></tr></table></figure>

<p>循环中expected的值始终是false，表示compare_exchange_weak()会莫名的失败。</p>
<p>另一方面，当实际值与<code>expected</code>不符，compare_exchange_strong()就能保证值返回false。这就能消除对循环的需要，就可以知道是否成功的改变了一个变量，或已让另一个线程完成。</p>
<p>“compare/exchange”另一点不同的是，它拥有对两个内存序的参数进行操作的能力，这就允许内存序语义在成功和失败的例子中有所不同。可能成功时使用memory_order_acq_rel，而失败时使用memory_order_relaxed。失败的“compare/exchange”将不会进行存储，所以“compare/exchange”操作不能拥有meory_order_release或memory_order_acq_rel。</p>
<p>下面对compare_exchange_weak()的两次调用是等价的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::atomic&lt;<span class="keyword">bool</span>&gt; b;</span><br><span class="line"><span class="keyword">bool</span> expected;</span><br><span class="line">b.<span class="built_in">compare_exchange_weak</span>(expected,<span class="literal">true</span>,</span><br><span class="line">  memory_order_acq_rel,memory_order_acquire);</span><br><span class="line">b.<span class="built_in">compare_exchange_weak</span>(expected,<span class="literal">true</span>,memory_order_acq_rel);</span><br></pre></td></tr></table></figure>

<p><code>std::atomic&lt;bool&gt;</code>和<code>std::atomic_flag</code>的不同之处在于，<code>std::atomic&lt;bool&gt;</code>可能不是无锁的。为了保证操作的原子性，其实现中可能需要内置的互斥量。特殊情况时，可以使用is_lock_free()成员函数，检查<code>std::atomic&lt;bool&gt;</code>上的操作是否无锁。这是除了<code>std::atomic_flag</code>之外，另一个所有原子类型都拥有的特征(is_lock_free)。</p>
<h3 id="std-atomic-lt-T-gt"><a href="#std-atomic-lt-T-gt" class="headerlink" title="std::atomic&lt;T*&gt;"></a><code>std::atomic&lt;T*&gt;</code></h3><p>原子指针类型，可以使用内置类型或自定义类型T，通过特化<code>std::atomic&lt;T*&gt;</code>进行定义，操作是针对于相关类型的指针。</p>
<p>不能拷贝构造，也不能拷贝赋值，但是可以通过合适的类型指针进行构造和赋值。<code>std::atomic&lt;T*&gt;</code>也有load(), store(), exchange(), compare_exchange_weak()和compare_exchage_strong()成员函数，获取与返回的类型都是T*。</p>
<p><code>std::atomic&lt;T*&gt;</code>为指针运算提供新的操作。基本操作有fetch_add()和fetch_sub()，它们在存储地址上做原子加法和减法，为+=, -=, ++和–提供简易的封装。对于内置类型的操作，例如：如果x是<code>std::atomic&lt;Foo*&gt;</code>类型的数组的首地址，然后x+=3让其偏移到第四个元素的地址，并返回一个普通的<code>Foo*</code>类型值，这个指针值是指向数组中第四个元素。</p>
<p>fetch_add()和fetch_sub()的返回值略有不同(所以x.ftech_add(3)让x指向第四个元素，并且函数返回指向第一个元素的地址)。这种操作也被称为“交换-相加”，并且这是一个原子的“读-改-写”操作，如同exchange()和compare_exchange_weak()/compare_exchange_strong()一样。正像其他操作那样，返回值是一个普通的<code>T*</code>值，而非是<code>std::atomic&lt;T*&gt;</code>对象的引用，所以调用代码可以基于之前的值进行操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&#123;</span>&#125;;</span><br><span class="line">Foo some_array[<span class="number">5</span>];</span><br><span class="line"><span class="function">std::atomic&lt;Foo*&gt; <span class="title">p</span><span class="params">(some_array)</span></span>;</span><br><span class="line">Foo* x=p.<span class="built_in">fetch_add</span>(<span class="number">2</span>);  <span class="comment">// p加2，并返回原始值</span></span><br><span class="line"><span class="built_in">assert</span>(x==some_array);</span><br><span class="line"><span class="built_in">assert</span>(p.<span class="built_in">load</span>()==&amp;some_array[<span class="number">2</span>]);</span><br><span class="line">x=(p-=<span class="number">1</span>);  <span class="comment">// p减1，并返回原始值</span></span><br><span class="line"><span class="built_in">assert</span>(x==&amp;some_array[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">assert</span>(p.<span class="built_in">load</span>()==&amp;some_array[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p>函数也允许内存序作为给定函数的参数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p.<span class="built_in">fetch_add</span>(<span class="number">3</span>,std::memory_order_release);</span><br></pre></td></tr></table></figure>

<p>因为fetch_add()和fetch_sub()都是“读-改-写”操作，可以使用任意的内存序，以及加入到一个释放序列中。因为没办法提供必要的信息(这些形式都具有memory_order_seq_cst语义)，所以指定的语序不支持操作符形式。</p>
<h3 id="标准原子整型的相关操作"><a href="#标准原子整型的相关操作" class="headerlink" title="标准原子整型的相关操作"></a>标准原子整型的相关操作</h3><p>如同普通的操作集合一样(load(), store(), exchange(), compare_exchange_weak(), 和compare_exchange_strong())，<code>std::atomic&lt;int&gt;</code>和<code>std::atomic&lt;unsigned long long&gt;</code>也是有一套完整的操作可以供使用：fetch_add(), fetch_sub(), fetch_and(), fetch_or(), fetch_xor()，还有复合赋值方式((+=, -=, &amp;=, |=和^=)，以及++和–(++x, x++, –x和x–)。</p>
<p>虽然对于普通的整型来说，这些复合赋值方式还不完全：除法、乘法和移位操作不在其中。因为，整型原子值通常用来作计数器，或者是掩码，所以以上操作的缺失显得不是那么重要。如果需要，可以使用compare_exchange_weak()完成。</p>
<p>对于<code>std::atomic&lt;T*&gt;</code>类型，紧密相关的两个函数就是fetch_add()和fetch_sub()。函数原子化操作，并且返回旧值，而符合赋值运算会返回新值。前缀加减和后缀加减与普通用法一样：++x对变量进行自加，并且返回新值；而x++对变量自加，返回旧值。</p>
<h3 id="std-atomic-lt-gt-类模板"><a href="#std-atomic-lt-gt-类模板" class="headerlink" title="std::atomic&lt;&gt;类模板"></a><code>std::atomic&lt;&gt;</code>类模板</h3><p>模板允许用户使用自定义类型创建一个原子变量(除了标准原子类型之外)，需要满足一定的标准才可以使用<code>std::atomic&lt;&gt;</code>。</p>
<p>为了使用<code>std::atomic&lt;UDT&gt;</code>(UDT是用户定义类型)，这个类型必须有拷贝赋值运算符。这就意味着这个类型不能有任何虚函数或虚基类，以及必须使用编译器创建的拷贝赋值操作。自定义类型中所有的基类和非静态数据成员也都需要支持拷贝赋值操作。这(基本上)就允许编译器使用memcpy()或赋值操作的等价操作，因为实现中没有用户代码。</p>
<p><strong>不要将锁定区域内的数据以引用或指针的形式，作为参数传递给用户提供的函数。</strong></p>
<p>创建一个<code>std::atomic&lt;std::vector&lt;int&gt;&gt;</code>类型。不能使用包含有计数器，标志指针和简单数组的类型，作为特化类型。虽然这不会导致任何问题，但是越是复杂的数据结构，就有越多的操作，而非只有赋值和比较。如果这种情况发生了，最好使用<code>std::mutex</code>保护数据。</p>
<p>当使用用户定义类型T进行实例化时，<code>std::atomic&lt;T&gt;</code>的可用接口就只有: load(), store(), exchange(), compare_exchange_weak(), compare_exchange_strong()和赋值操作，以及向类型T转换的操作。</p>
<p>表5.3 每一个原子类型所能使用的操作</p>
<img src="/posts/5-3-table.png" alt="5-3-table" style="zoom: 50%;">

<h3 id="原子操作的非成员函数"><a href="#原子操作的非成员函数" class="headerlink" title="原子操作的非成员函数"></a>原子操作的非成员函数</h3><p>大多数非成员函数的命名与对应成员函数有关，需要<code>atomic_</code>作为前缀(比如，<code>std::atomic_load()</code>)。这些函数都会重载不同的原子类型，指定内存序时会分成两种：一种没有标签，另一种以<code>_explicit</code>为后缀，并且需要额外的参数，或将内存序作为标签，亦或只有标签(例如，<code>std::atomic_store(&amp;atomic_var,new_value)</code>与<code>std::atomic_store_explicit(&amp;atomic_var,new_value,std::memory_order_release</code>)。</p>
<p>成员函数隐式引用原子对象，所有非成员函数都持有一个指向原子对象的指针(作为第一个参数)。</p>
<p>例如，<code>std::atomic_is_lock_free()</code>只有一种类型(虽然会被其他类型所重载)，并且对于同一个对象a，<code>std::atomic_is_lock_free(&amp;a)</code>返回值与a.is_lock_free()相同。</p>
<p>同样的，<code>std::atomic_load(&amp;a)</code>和a.load()的作用一样。需要注意的是，<code>a.load(std::memory_order_acquire)</code>与<code>std::atomic_load_explicit(&amp;a, std::memory_order_acquire)</code>的操作相同。</p>
<p>非成员函数的设计是为了与C语言兼容，C语言中没有引用。</p>
<p>C++标准库也对原子类型中的<code>std::shared_ptr&lt;&gt;</code>智能指针类型提供非成员函数，这打破了“只有原子类型，才能提供原子操作”的原则。<code>std::shared_ptr&lt;&gt;</code>不是原子类型，但是C++标准委员会认为这很重要。可使用的原子操作有：load, store, exchange和compare/exchange，这些操作重载了标准原子类型的操作，并且可获取<code>std::shared_ptr&lt;&gt;*</code>作为第一个参数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::shared_ptr&lt;my_data&gt; p;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_global_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::shared_ptr&lt;my_data&gt; local=std::<span class="built_in">atomic_load</span>(&amp;p);</span><br><span class="line">  <span class="built_in">process_data</span>(local);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_global_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::shared_ptr&lt;my_data&gt; <span class="title">local</span><span class="params">(<span class="keyword">new</span> my_data)</span></span>;</span><br><span class="line">  std::<span class="built_in">atomic_store</span>(&amp;p,local);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>标准原子类型不仅仅是为了避免数据竞争所造成的未定义行为，还允许用户对不同线程上的操作进行强制排序。这种强制排序是数据保护和同步操作的基础，例如：<code>std::mutex</code>和<code>std::future</code>。</p>
<h2 id="同步操作和强制排序"><a href="#同步操作和强制排序" class="headerlink" title="同步操作和强制排序"></a>同步操作和强制排序</h2><p>假设两个线程，一个向数据结构中填充数据，另一个读取数据结构中的数据。为了避免恶性条件竞争，第一个线程设置一个标志，用来表明数据已经准备就绪，从而第二个线程在这个标志设置前不能读取数据。</p>
<p>代码5.2 不同线程对数据的读写</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; data;</span><br><span class="line"><span class="function">std::atomic&lt;<span class="keyword">bool</span>&gt; <span class="title">data_ready</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reader_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!data_ready.<span class="built_in">load</span>())  <span class="comment">// 1</span></span><br><span class="line">  &#123;</span><br><span class="line">    std::this_thread::<span class="built_in">sleep</span>(std::<span class="built_in">milliseconds</span>(<span class="number">1</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  std::cout&lt;&lt;<span class="string">&quot;The answer=&quot;</span>&lt;&lt;data[<span class="number">0</span>]&lt;&lt;<span class="string">&quot;\m&quot;</span>;  <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writer_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  data.<span class="built_in">push_back</span>(<span class="number">42</span>);  <span class="comment">// 3</span></span><br><span class="line">  data_ready=<span class="literal">true</span>;  <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问顺序通过对<code>std::atomic&lt;bool&gt;</code>类型的data_ready变量进行操作完成，这些操作通过*<a href="http://en.wikipedia.org/wiki/Happened-before">先行</a><em>(happens-before)和</em>同发*(synchronizes-with)确定顺序。写入数据③在写入data_ready④前发生，读取①发生在读取数据②之前。</p>
<p>强制了顺序：写入数据先行于读取数据。</p>
<p>当data_ready①为true，写操作就会与读操作同步，建立一个“先行”的关系。因为“先行”关系是可传递的，所以写入③先行于写入④，这两个行为又先行于读取操作①，之前的操作都先行于读取数据②。</p>
<img src="/posts/5-2.png" alt="5-2" style="zoom: 67%;">

<p>图5.2 对非原子操作，使用原子操作对操作进行强制排序</p>
<h3 id="同步发生"><a href="#同步发生" class="headerlink" title="同步发生"></a>同步发生</h3><p>“同发”只在原子类型之间进行。例如：操作一个数据结构(对互斥量上锁)，如果数据结构包含有原子类型，并且操作内部执行了一定的原子操作，那这些操作就是“同发”关系。</p>
<p>“同发”的基本想法：原子写操作W对变量x进行标记，同步与对x进行原子读操作，读取的是W操作写入的内容，或是W之后，同一线程上的原子写操作对x写入的值，亦或是任意线程对x的一系列原子读-改-写操作(例如，fetch_add()或compare_exchange_weak())。</p>
<p>因为对原子类型的操作默认都有“适当的标记”，如果线程A存储了一个值，并且线程B读取了这个值，线程A的存储操作与线程B的载入操作就是同步发生关系。</p>
<p>所有细微的差别都在“适当的标记”中，C++内存模型允许为原子类型提供各种约束顺序。</p>
<h3 id="先行发生"><a href="#先行发生" class="headerlink" title="先行发生"></a>先行发生</h3><p>“先行”关系是一个程序中基本构建块的操作顺序：指定了某个操作去影响另一个操作。</p>
<p>对于单线程来说：一个操作排在另一个之后，那这个操作就先执行。</p>
<p>如果源码中操作A发生在操作B之前，那A就先行于B。可以回看代码5.2：对data的写入③先于对data_ready④的写入。如果操作在同时发生，因为操作间无序执行，通常情况下就没有先行关系了。</p>
<p>代码5.3 对于参数中的函数调用顺序未指定顺序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::cout&lt;&lt;a&lt;&lt;”,”&lt;&lt;b&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> ++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">foo</span>(<span class="built_in">get_num</span>(),<span class="built_in">get_num</span>());  <span class="comment">// 无序调用get_num()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序会输出“1，2”或“2，1”，因为两个get_num()的执行顺序未指定。</p>
<p>这种情况下，操作在单一声明中可测序，例如：逗号操作符的使用或是表达式的结果作为参数传给另一个表达式。通常情况下，操作在单一声明中不可排序，所以无法先行安排顺序(也就没有先行发生了)。</p>
<p>线程间先行可以与排序先行相结合：如果操作A排序先行于操作B，并且操作B线程间先行于操作C，那么A线程间先行于C。同样的，如果A同步于B，并且B排序先于C，那么A线程间先行于C。当对数据进行一系列修改(单线程)时，只需要对数据进行一次同步即可。</p>
<p>如果操作A与操作B同步，或操作A的顺序在操作B之前，那么A就是强先行于B。也适用于顺序传递：如果A强先行于B，并且B强先行于C，那么A就肯定强先行于C。</p>
<h3 id="原子操作的内存序"><a href="#原子操作的内存序" class="headerlink" title="原子操作的内存序"></a>原子操作的内存序</h3><p>有六个内存序列选项可应用于对原子类型的操作：</p>
<ol>
<li>memory_order_relaxed</li>
<li>memory_order_consume</li>
<li>memory_order_acquire</li>
<li>memory_order_release</li>
<li>memory_order_acq_rel</li>
<li>memory_order_seq_cst</li>
</ol>
<p>除非为特定的操作指定一个序列选项，要不内存序列默认都是memory_order_seq_cst。</p>
<p>三种内存模型：</p>
<ul>
<li>顺序一致性(sequentially consistent)</li>
<li>获取-释放序(memory_order_consume, memory_order_acquire, memory_order_release和memory_order_acq_rel)</li>
<li>自由序(memory_order_relaxed)。</li>
</ul>
<p>不同的内存序在不同的CPU架构下功耗不同。不同种类的内存序，允许使用其提升相关操作的性能。使用顺序一致序(相较于其他序列，它是最简单的)时，对于在通常情况来说就够用了。</p>
<p><strong>顺序一致性</strong></p>
<p>默认序命名为顺序一致性，因为程序中的行为从任意角度去看，序列都保持一定顺序。</p>
<p>如果原子实例的所有操作都是序列一致的，那么多线程就会如单线程那样以某种特殊的排序执行</p>
<p>不同的操作也要遵守相同的顺序。因为行为简单，可以使用原子变量进行编写。通过不同的线程，可以写出所有可能的操作消除那些不一致，以及确认代码的行为是否与预期相符。所以，操作都不能重排；如果代码在一个线程中，将一个操作放在另一个操作前面，那其他线程也需要了解这个顺序。</p>
<p>缺点：因为整个序列中的操作都必须在多个处理器上保持一致，可能需要对处理器间的同步操作进行扩展(代价很昂贵！)</p>
<p>代码5.4 全序——序列一致性</p>
<p>#include <atomic><br>#include <thread><br>#include &lt;assert.h&gt;</thread></atomic></p>
<p>std::atomic<bool> x,y;<br>std::atomic<int> z;</int></bool></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::atomic&lt;<span class="keyword">bool</span>&gt; x,y;</span><br><span class="line">std::atomic&lt;<span class="keyword">int</span>&gt; z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_x</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_seq_cst);  <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_y</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  y.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_seq_cst);  <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_x_then_y</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!x.<span class="built_in">load</span>(std::memory_order_seq_cst));</span><br><span class="line">  <span class="keyword">if</span>(y.<span class="built_in">load</span>(std::memory_order_seq_cst))  <span class="comment">// 3</span></span><br><span class="line">    ++z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_y_then_x</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!y.<span class="built_in">load</span>(std::memory_order_seq_cst));</span><br><span class="line">  <span class="keyword">if</span>(x.<span class="built_in">load</span>(std::memory_order_seq_cst))  <span class="comment">// 4</span></span><br><span class="line">    ++z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x=<span class="literal">false</span>;</span><br><span class="line">  y=<span class="literal">false</span>;</span><br><span class="line">  z=<span class="number">0</span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">a</span><span class="params">(write_x)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">b</span><span class="params">(write_y)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">c</span><span class="params">(read_x_then_y)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">d</span><span class="params">(read_y_then_x)</span></span>;</span><br><span class="line">  a.<span class="built_in">join</span>();</span><br><span class="line">  b.<span class="built_in">join</span>();</span><br><span class="line">  c.<span class="built_in">join</span>();</span><br><span class="line">  d.<span class="built_in">join</span>();</span><br><span class="line">  <span class="built_in">assert</span>(z.<span class="built_in">load</span>()!=<span class="number">0</span>);  <span class="comment">// 5 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>assert⑤语句是永远不会触发的，因为不是存储x的操作①发生，就是存储y的操作②发生。</p>
<img src="/posts/5-3.png" alt="5-3" style="zoom: 50%;">

<p>图5.3 序列一致与先行关系</p>
<p>序列一致性是最简单、直观的序列，因为需要对所有线程进行全局同步，所以也是开销最大的内存序。多处理器设备上需要在处理期间，在信息交换上耗费大量的时间。</p>
<p>为了避免这种消耗，就需考虑使用其他内存序。</p>
<p><strong>非顺序一致性内存</strong></p>
<p>不同线程看到相同操作，不一定有着相同的顺序。</p>
<p>不仅是考虑事情同时发生的问题，还有<strong>线程没办法保证一致性</strong>。</p>
<p><strong>自由序</strong></p>
<p>原子类型上的操作以自由序执行。同一线程中对于同一变量的操作还是遵从先行关系，但不同线程不需要规定顺序。唯一的要求是在访问同一线程中的单个原子变量不能重排序，当给定线程看到原子变量的值时，随后线程的读操作就不会去检索较早的那个值。当使用memory_order_relaxed时，不需要任何额外的同步，对于每个变量的修改顺序只存在于线程间共享。</p>
<p>代码5.5 非限制操作只有非常少的顺序要求</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::atomic&lt;<span class="keyword">bool</span>&gt; x,y;</span><br><span class="line">std::atomic&lt;<span class="keyword">int</span>&gt; z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_x_then_y</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_relaxed);  <span class="comment">// 1</span></span><br><span class="line">  y.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_relaxed);  <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_y_then_x</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!y.<span class="built_in">load</span>(std::memory_order_relaxed));  <span class="comment">// 3</span></span><br><span class="line">  <span class="keyword">if</span>(x.<span class="built_in">load</span>(std::memory_order_relaxed))  <span class="comment">// 4</span></span><br><span class="line">    ++z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x=<span class="literal">false</span>;</span><br><span class="line">  y=<span class="literal">false</span>;</span><br><span class="line">  z=<span class="number">0</span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">a</span><span class="params">(write_x_then_y)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">b</span><span class="params">(read_y_then_x)</span></span>;</span><br><span class="line">  a.<span class="built_in">join</span>();</span><br><span class="line">  b.<span class="built_in">join</span>();</span><br><span class="line">  <span class="built_in">assert</span>(z.<span class="built_in">load</span>()!=<span class="number">0</span>);  <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这次assert⑤可能会触发，因为加载x的操作④可能读取到false，即使加载y的操作③读取到true，并且存储x的操作①先发与存储y的操作②。x和y是两个不同的变量，所以没有顺序去保证每个操作产生相关值的可见性。</p>
<p>非限制操作对于不同变量可以重排序，只要服从任意的先行关系即可(比如，在同一线程中)。</p>
<img src="/posts/5-4.png" alt="5-4" style="zoom: 50%;">

<p>图5.4 非限制原子操作与先发执行</p>
<p>代码5.6 非限制操作——多线程版</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::atomic&lt;<span class="keyword">int</span>&gt; <span class="title">x</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">y</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">z</span><span class="params">(<span class="number">0</span>)</span></span>;  <span class="comment">// 1</span></span><br><span class="line"><span class="function">std::atomic&lt;<span class="keyword">bool</span>&gt; <span class="title">go</span><span class="params">(<span class="literal">false</span>)</span></span>;  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">const</span> loop_count=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">read_values</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">read_values values1[loop_count];</span><br><span class="line">read_values values2[loop_count];</span><br><span class="line">read_values values3[loop_count];</span><br><span class="line">read_values values4[loop_count];</span><br><span class="line">read_values values5[loop_count];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">(std::atomic&lt;<span class="keyword">int</span>&gt;* var_to_inc,read_values* values)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!go)</span><br><span class="line">    std::this_thread::<span class="built_in">yield</span>();  <span class="comment">// 3 自旋，等待信号</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">unsigned</span> i=<span class="number">0</span>;i&lt;loop_count;++i)</span><br><span class="line">  &#123;</span><br><span class="line">    values[i].x=x.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">    values[i].y=y.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">    values[i].z=z.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">    var_to_inc-&gt;<span class="built_in">store</span>(i+<span class="number">1</span>,std::memory_order_relaxed);  <span class="comment">// 4</span></span><br><span class="line">    std::this_thread::<span class="built_in">yield</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_vals</span><span class="params">(read_values* values)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!go)</span><br><span class="line">    std::this_thread::<span class="built_in">yield</span>(); <span class="comment">// 5 自旋，等待信号</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">unsigned</span> i=<span class="number">0</span>;i&lt;loop_count;++i)</span><br><span class="line">  &#123;</span><br><span class="line">    values[i].x=x.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">    values[i].y=y.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">    values[i].z=z.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">    std::this_thread::<span class="built_in">yield</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(read_values* v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">unsigned</span> i=<span class="number">0</span>;i&lt;loop_count;++i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(i)</span><br><span class="line">      std::cout&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;v[i].x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;v[i].y&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;v[i].z&lt;&lt;<span class="string">&quot;)&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  std::cout&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::thread <span class="title">t1</span><span class="params">(increment,&amp;x,values1)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">t2</span><span class="params">(increment,&amp;y,values2)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">t3</span><span class="params">(increment,&amp;z,values3)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">t4</span><span class="params">(read_vals,values4)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">t5</span><span class="params">(read_vals,values5)</span></span>;</span><br><span class="line"></span><br><span class="line">  go=<span class="literal">true</span>;  <span class="comment">// 6 开始执行主循环的信号</span></span><br><span class="line"></span><br><span class="line">  t5.<span class="built_in">join</span>();</span><br><span class="line">  t4.<span class="built_in">join</span>();</span><br><span class="line">  t3.<span class="built_in">join</span>();</span><br><span class="line">  t2.<span class="built_in">join</span>();</span><br><span class="line">  t1.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(values1);  <span class="comment">// 7 打印最终结果</span></span><br><span class="line">  <span class="built_in">print</span>(values2);</span><br><span class="line">  <span class="built_in">print</span>(values3);</span><br><span class="line">  <span class="built_in">print</span>(values4);</span><br><span class="line">  <span class="built_in">print</span>(values5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三个全局原子变量①和五个线程。每一个线程循环10次，使用时memory_order_relaxed读取三个原子变量的值，并且将它们存储在一个数组上。其中三个线程每次通过循环④来更新其中一个原子变量，这时剩下的两个线程就负责读取。当线程都汇入主线程，就能打印出来每个线程存到数组上的值了。</p>
<p>原子变量go②用来确保线程同时退出。启动线程是昂贵的操作，并且没有明确的延迟，第一个线程可能在最后一个线程开始前结束。每个线程都在go变为true前，都在循环③⑤。并且当go设置为true时，所有线程都会开始运行⑥。</p>
<p>程序一种可能的输出为：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(0,0,0)</span>,<span class="comment">(1,0,0)</span>,<span class="comment">(2,0,0)</span>,<span class="comment">(3,0,0)</span>,<span class="comment">(4,0,0)</span>,<span class="comment">(5,7,0)</span>,<span class="comment">(6,7,8)</span>,<span class="comment">(7,9,8)</span>,<span class="comment">(8,9,8)</span>,<span class="comment">(9,9,10)</span></span><br><span class="line"><span class="comment">(0,0,0)</span>,<span class="comment">(0,1,0)</span>,<span class="comment">(0,2,0)</span>,<span class="comment">(1,3,5)</span>,<span class="comment">(8,4,5)</span>,<span class="comment">(8,5,5)</span>,<span class="comment">(8,6,6)</span>,<span class="comment">(8,7,9)</span>,<span class="comment">(10,8,9)</span>,<span class="comment">(10,9,10)</span></span><br><span class="line"><span class="comment">(0,0,0)</span>,<span class="comment">(0,0,1)</span>,<span class="comment">(0,0,2)</span>,<span class="comment">(0,0,3)</span>,<span class="comment">(0,0,4)</span>,<span class="comment">(0,0,5)</span>,<span class="comment">(0,0,6)</span>,<span class="comment">(0,0,7)</span>,<span class="comment">(0,0,8)</span>,<span class="comment">(0,0,9)</span></span><br><span class="line"><span class="comment">(1,3,0)</span>,<span class="comment">(2,3,0)</span>,<span class="comment">(2,4,1)</span>,<span class="comment">(3,6,4)</span>,<span class="comment">(3,9,5)</span>,<span class="comment">(5,10,6)</span>,<span class="comment">(5,10,8)</span>,<span class="comment">(5,10,10)</span>,<span class="comment">(9,10,10)</span>,<span class="comment">(10,10,10)</span></span><br><span class="line"><span class="comment">(0,0,0)</span>,<span class="comment">(0,0,0)</span>,<span class="comment">(0,0,0)</span>,<span class="comment">(6,3,7)</span>,<span class="comment">(6,5,7)</span>,<span class="comment">(7,7,7)</span>,<span class="comment">(7,8,7)</span>,<span class="comment">(8,8,7)</span>,<span class="comment">(8,8,9)</span>,<span class="comment">(8,8,9)</span></span><br></pre></td></tr></table></figure>

<p>前三行中线程都做了更新，后两行线程只是做读取。每三个值都是一组x，y和z，并按照这样的顺序依次循环。对于输出，需要注意的是：</p>
<ol>
<li>第一组值中x增1，第二组值中y增1，第三组中z增1。</li>
<li>x元素只在给定集中增加，y和z也一样，但是是不均匀增加，并且每个线程中的相对顺序都不同。</li>
<li>线程3看不到x或y的任何更新，它能看到的只有z的更新。这并不妨碍别的线程观察z的更新，并同时观察x和y的更新。</li>
</ol>
<p>对于非限制操作，这个结果没毛病(但是不是唯一合法的输出)。任意组都用三个变量保持一致，从0到10依次递增，并且线程对相应变量进行递增操作，所以打印出的值在0到10的范围内都合理。</p>
<p>要想获取额外的同步，且不使用全局排序一致，可以使用<em>获取-释放序</em>(acquire-release ordering)。</p>
<p><strong>获取-释放序</strong></p>
<p><em>自由序</em>(relaxed ordering)的加强版，虽然操作依旧没有统一顺序，但引入了同步。</p>
<p>原子加载就是<em>获取</em>(acquire)操作(memory_order_acquire)，原子存储就是<em>释放</em>(memory_order_release)操作，原子读-改-写操作(例如fetch_add()或exchange())在这里，不是“获取”就是“释放”，或者两者兼有的操作(memory_order_acq_rel)，同步在线程释放和获取间是<em>成对的</em>(pairwise)，释放操作与获取操作同步就能读取已写入的值。</p>
<p>代码5.7 获取-释放不意味着统一操作顺序 使用获取-释放序(而非序列一致方式)，对代码5.4的一次重写。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::atomic&lt;<span class="keyword">bool</span>&gt; x,y;</span><br><span class="line">std::atomic&lt;<span class="keyword">int</span>&gt; z;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_x</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_release);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_y</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  y.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_release);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_x_then_y</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!x.<span class="built_in">load</span>(std::memory_order_acquire));</span><br><span class="line">  <span class="keyword">if</span>(y.<span class="built_in">load</span>(std::memory_order_acquire))  <span class="comment">// 1</span></span><br><span class="line">    ++z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_y_then_x</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!y.<span class="built_in">load</span>(std::memory_order_acquire));</span><br><span class="line">  <span class="keyword">if</span>(x.<span class="built_in">load</span>(std::memory_order_acquire))  <span class="comment">// 2</span></span><br><span class="line">    ++z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x=<span class="literal">false</span>;</span><br><span class="line">  y=<span class="literal">false</span>;</span><br><span class="line">  z=<span class="number">0</span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">a</span><span class="params">(write_x)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">b</span><span class="params">(write_y)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">c</span><span class="params">(read_x_then_y)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">d</span><span class="params">(read_y_then_x)</span></span>;</span><br><span class="line">  a.<span class="built_in">join</span>();</span><br><span class="line">  b.<span class="built_in">join</span>();</span><br><span class="line">  c.<span class="built_in">join</span>();</span><br><span class="line">  d.<span class="built_in">join</span>();</span><br><span class="line">  <span class="built_in">assert</span>(z.<span class="built_in">load</span>()!=<span class="number">0</span>); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>断言③可能会触发(就如同自由排序那样)，因为在加载x②和y①时，可能读取到false。因为x和y是由不同线程写入，所以序列中的每一次释放和获取都不会影响到其他线程的操作。</p>
<img src="/posts/5-6.png" alt="5-6" style="zoom:50%;">

<p>图5.6 获取-释放，以及先行过程</p>
<p>对于读取的结果，两个(读取)线程看到的是两个完全不同的世界。</p>
<p>代码5.8 获取-释放序操作会影响释放操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::atomic&lt;<span class="keyword">bool</span>&gt; x,y;</span><br><span class="line">std::atomic&lt;<span class="keyword">int</span>&gt; z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_x_then_y</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_relaxed);  <span class="comment">// 1 </span></span><br><span class="line">  y.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_release);  <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_y_then_x</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!y.<span class="built_in">load</span>(std::memory_order_acquire));  <span class="comment">// 3 自旋，等待y被设置为true</span></span><br><span class="line">  <span class="keyword">if</span>(x.<span class="built_in">load</span>(std::memory_order_relaxed))  <span class="comment">// 4</span></span><br><span class="line">    ++z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x=<span class="literal">false</span>;</span><br><span class="line">  y=<span class="literal">false</span>;</span><br><span class="line">  z=<span class="number">0</span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">a</span><span class="params">(write_x_then_y)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">b</span><span class="params">(read_y_then_x)</span></span>;</span><br><span class="line">  a.<span class="built_in">join</span>();</span><br><span class="line">  b.<span class="built_in">join</span>();</span><br><span class="line">  <span class="built_in">assert</span>(z.<span class="built_in">load</span>()!=<span class="number">0</span>);  <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读取y③时会得到true，和存储时写入的一样②。存储使用的是memory_order_release，读取使用的是memory_order_acquire，存储与读取就同步了。因为这两个操作是由同一个线程串行完成的，所以存储x①的操作先行于存储y②的操作。</p>
<p>对y的存储同步与对y的加载，存储x也就先行于对y的加载，并且扩展先行于x的读取。因此，加载x的值必为true，并且断言⑤不会触发。如果对于y的加载不是在while循环中，情况可能就会有所不同。加载y的时候可能会读取到false，这种情况下对于读取到的x是什么值没有要求了。为了保证同步，加载和释放操作必须成对。</p>
<p>释放操作存储的值必须要让获取操作看到。当存储②或加载③都是一个释放操作时，对x的访问就无序了，也就无法保证④处读到的是true，并且还会触发断言。</p>
<p><strong>获取-释放序传递同步</strong></p>
<p>为了考虑传递顺序，至少需要三个线程。第一个线程用来修改共享变量，第二个线程使用“加载-获取”读取由“存储-释放”操作过的变量，并且再对第二个变量进行“存储-释放”操作。最后，由第三个线程通过“加载-获取”读取第二个共享变量，并提供“加载-获取”操作来读取被“存储-释放”操作写入的值。为了保证同步关系，即便是中间线程没有对共享变量做任何操作，第三个线程也可以读取第一个线程操作过的变量。</p>
<p>代码5.9 使用获取和释放序传递同步</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::atomic&lt;<span class="keyword">int</span>&gt; data[<span class="number">5</span>];</span><br><span class="line"><span class="function">std::atomic&lt;<span class="keyword">bool</span>&gt; <span class="title">sync1</span><span class="params">(<span class="literal">false</span>)</span>, <span class="title">sync2</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  data[<span class="number">0</span>].<span class="built_in">store</span>(<span class="number">42</span>,std::memory_order_relaxed);</span><br><span class="line">  data[<span class="number">1</span>].<span class="built_in">store</span>(<span class="number">97</span>,std::memory_order_relaxed);</span><br><span class="line">  data[<span class="number">2</span>].<span class="built_in">store</span>(<span class="number">17</span>,std::memory_order_relaxed);</span><br><span class="line">  data[<span class="number">3</span>].<span class="built_in">store</span>(<span class="number">-141</span>,std::memory_order_relaxed);</span><br><span class="line">  data[<span class="number">4</span>].<span class="built_in">store</span>(<span class="number">2003</span>,std::memory_order_relaxed);</span><br><span class="line">  sync1.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_release);  <span class="comment">// 1.设置sync1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!sync1.<span class="built_in">load</span>(std::memory_order_acquire));  <span class="comment">// 2.直到sync1设置后，循环结束</span></span><br><span class="line">  sync2.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_release);  <span class="comment">// 3.设置sync2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!sync2.<span class="built_in">load</span>(std::memory_order_acquire));   <span class="comment">// 4.直到sync1设置后，循环结束</span></span><br><span class="line">  <span class="built_in">assert</span>(data[<span class="number">0</span>].<span class="built_in">load</span>(std::memory_order_relaxed)==<span class="number">42</span>);</span><br><span class="line">  <span class="built_in">assert</span>(data[<span class="number">1</span>].<span class="built_in">load</span>(std::memory_order_relaxed)==<span class="number">97</span>);</span><br><span class="line">  <span class="built_in">assert</span>(data[<span class="number">2</span>].<span class="built_in">load</span>(std::memory_order_relaxed)==<span class="number">17</span>);</span><br><span class="line">  <span class="built_in">assert</span>(data[<span class="number">3</span>].<span class="built_in">load</span>(std::memory_order_relaxed)==<span class="number">-141</span>);</span><br><span class="line">  <span class="built_in">assert</span>(data[<span class="number">4</span>].<span class="built_in">load</span>(std::memory_order_relaxed)==<span class="number">2003</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>thread_1将数据存储到data中先行于存储sync1①(它们在同一个线程内)。因为加载sync1①的是一个while循环，它最终会看到thread_1存储的值。因此，对于sync1的存储先行于最终对于sync1的加载(在while循环中)。thread_3的加载操作④，位于存储sync2③操作的前面。存储sync2③因此先行于thread_3的加载④，加载又先行于存储sync2③，存储sync2又先行于加载sync2④，加载syn2又先行于加载data。因此，thread_1存储数据到data的操作先行于thread_3中对data的加载，并且保证断言都不会触发。</p>
<p>将sync1和sync2通过在thread_2中使用“读-改-写”操作(memory_order_acq_rel)合并成一个独立的变量。其中会使用compare_exchange_strong()来保证thread_1对变量只进行一次更新：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::atomic&lt;<span class="keyword">int</span>&gt; <span class="title">sync</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  sync.<span class="built_in">store</span>(<span class="number">1</span>,std::memory_order_release);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> expected=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(!sync.<span class="built_in">compare_exchange_strong</span>(expected,<span class="number">2</span>,</span><br><span class="line">              std::memory_order_acq_rel))</span><br><span class="line">    expected=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(sync.<span class="built_in">load</span>(std::memory_order_acquire)&lt;<span class="number">2</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用memory_order_acq_rel语义的“读-改-写”操作，每一个动作都包含获取和释放操作，所以可以和之前的存储操作进行同步，并且可以对随后的加载操作进行同步，就像上面例子一样。</p>
<h3 id="释放队列与同步"><a href="#释放队列与同步" class="headerlink" title="释放队列与同步"></a>释放队列与同步</h3><p>通过线程在存储和加载操作之间有(有序的)多个“读-改-写”操作(所有操作都已经做了适当的标记)，所以可以获取原子变量存储与加载的同步关系。存储操作标记为memory_order_release，memory_order_acq_rel或memory_order_seq_cst，加载标记为memory_order_consum，memory_order_acquire或memory_order_sqy_cst，并且操作链上的每一加载操作都会读取之前操作写入的值，因此链上的操作构成了一个释放序列(<em>release sequence</em>)，并且初始化存储同步(对应memory_order_acquire或memory_order_seq_cst)或是前序依赖(对应memory_order_consume)的最终加载，操作链上的任何原子“读-改-写”操作可以拥有任意个内存序(甚至是memory_order_relaxed)。</p>
<p>假设使用<code>atomic&lt;int&gt;</code>对共享队列的元素进行计数：</p>
<p>代码5.11 使用原子操作从队列中读取数据</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; queue_data;</span><br><span class="line">std::atomic&lt;<span class="keyword">int</span>&gt; count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">populate_queue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">const</span> number_of_items=<span class="number">20</span>;</span><br><span class="line">  queue_data.<span class="built_in">clear</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">unsigned</span> i=<span class="number">0</span>;i&lt;number_of_items;++i)</span><br><span class="line">  &#123;</span><br><span class="line">    queue_data.<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  count.<span class="built_in">store</span>(number_of_items,std::memory_order_release);  <span class="comment">// 1 初始化存储</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consume_queue_items</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> item_index;</span><br><span class="line">    <span class="keyword">if</span>((item_index=count.<span class="built_in">fetch_sub</span>(<span class="number">1</span>,std::memory_order_acquire))&lt;=<span class="number">0</span>)  <span class="comment">// 2 一个“读-改-写”操作</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">wait_for_more_items</span>();  <span class="comment">// 3 等待更多元素</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">process</span>(queue_data[item_index<span class="number">-1</span>]);  <span class="comment">// 4 安全读取queue_data</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">std::thread <span class="title">a</span><span class="params">(populate_queue)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">b</span><span class="params">(consume_queue_items)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">c</span><span class="params">(consume_queue_items)</span></span>;</span><br><span class="line">  a.<span class="built_in">join</span>();</span><br><span class="line">  b.<span class="built_in">join</span>();</span><br><span class="line">  c.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只有一个消费者线程时还好，fetch_sub()带有memory_order_acquire的读取操作，并且存储操作是带有memory_order_release语义，所以存储与加载同步，线程可以从缓存中读取元素。当有两个读取线程时，第二个fetch_sub()操作将看到第一个线程修改的值，且没有值通过store写入其中。先不管释放序列的规则，第二个线程与第一个线程不存在先行关系，并且对共享内存中值的读取也不安全。除非第一个fetch_sub()是带有memory_order_release语义，为两个消费者线程建立了不必要的同步。无论是释放序列的规则，还是具有memory_order_release语义的fetch_sub操作，第二个消费者看到的是一个空的queue_data，无法从其获取任何数据，并且还会产生条件竞争。</p>
<p>不过，第一个fetch_sub()对释放顺序做了一些事情，所以store()能同步与第二个fetch_sub()操作。两个消费者线程间不需要同步关系。过程在图5.7中展示，其中虚线表示的就是释放顺序，实线表示的是先行关系。</p>
<img src="/posts/5-7.png" alt="5-7" style="zoom: 67%;">

<p>图5.7 代码5.11中对队列操作的释放顺序</p>
<p>操作链中可以有任意数量的链接，提供的都是“读-改-写”操作，比如fetch_sub()，store()，每一个都会与使用memory_order_acquire语义的操作进行同步。</p>
<h3 id="栅栏"><a href="#栅栏" class="headerlink" title="栅栏"></a>栅栏</h3><p>栅栏操作会对内存序列进行约束，使其无法对任何数据进行修改，典型的做法是与使用memory_order_relaxed约束序的原子操作一起使用。</p>
<p>栅栏属于全局操作，执行栅栏操作可以影响到在线程中的其他原子操作。因为这类操作就像画了一条任何代码都无法跨越的线一样，所以栅栏操作通常也被称为<em>内存栅栏</em>(memory barriers)。</p>
<p>代码5.12 栅栏可以让自由操作变的有序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::atomic&lt;<span class="keyword">bool</span>&gt; x,y;</span><br><span class="line">std::atomic&lt;<span class="keyword">int</span>&gt; z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_x_then_y</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_relaxed);  <span class="comment">// 1</span></span><br><span class="line">  std::<span class="built_in">atomic_thread_fence</span>(std::memory_order_release);  <span class="comment">// 2</span></span><br><span class="line">  y.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_relaxed);  <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_y_then_x</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!y.<span class="built_in">load</span>(std::memory_order_relaxed));  <span class="comment">// 4</span></span><br><span class="line">  std::<span class="built_in">atomic_thread_fence</span>(std::memory_order_acquire);  <span class="comment">// 5</span></span><br><span class="line">  <span class="keyword">if</span>(x.<span class="built_in">load</span>(std::memory_order_relaxed))  <span class="comment">// 6</span></span><br><span class="line">    ++z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x=<span class="literal">false</span>;</span><br><span class="line">  y=<span class="literal">false</span>;</span><br><span class="line">  z=<span class="number">0</span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">a</span><span class="params">(write_x_then_y)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">b</span><span class="params">(read_y_then_x)</span></span>;</span><br><span class="line">  a.<span class="built_in">join</span>();</span><br><span class="line">  b.<span class="built_in">join</span>();</span><br><span class="line">  <span class="built_in">assert</span>(z.<span class="built_in">load</span>()!=<span class="number">0</span>);  <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为加载y的操作④读取③处存储的值，所以释放栅栏②与获取栅栏⑤同步。①处存储x先行于⑥处加载x，最后x读取出来必为true，并且不会触发断言⑦。</p>
<p>这两个栅栏都是必要的：需要在一个线程中进行释放，然后在另一个线程中进行获取，这样才能构建同步关系。</p>
<p>当获取操作能看到释放栅栏操作后的存储结果，那么这个栅栏就与获取操作同步。并且，当加载操作在获取栅栏操作前，看到一个释放操作的结果，那么这个释放操作同步于获取栅栏。</p>
<p>虽然，栅栏同步依赖于读取/写入的操作发生于栅栏之前/后，但是这里有一点很重要：同步点，就是栅栏本身。当执行代码5.12中的write_x_then_y，并且在栅栏操作之后对x进行写入，就像下面的代码一样。触发断言的条件就不保证一定为true了，尽管写入x的操作在写入y的操作之前发生。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_x_then_y</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::<span class="built_in">atomic_thread_fence</span>(std::memory_order_release);</span><br><span class="line">  x.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_relaxed);</span><br><span class="line">  y.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_relaxed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>栅栏不会分开这里的两个操作，并且也不再有序。只有当栅栏出现在存储x和存储y操作之间时，顺序才是硬性的。当然，栅栏是否存在不会影响任何拥有先行关系的执行序列。</p>
<h3 id="原子操作对非原子的操作排序"><a href="#原子操作对非原子的操作排序" class="headerlink" title="原子操作对非原子的操作排序"></a>原子操作对非原子的操作排序</h3><p>使用普通的非原子bool类型来替换代码5.12中的x，行为和替换前完全一样。</p>
<p>代码5.13 使用非原子操作执行序列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> x=<span class="literal">false</span>;  <span class="comment">// x现在是一个非原子变量</span></span><br><span class="line">std::atomic&lt;<span class="keyword">bool</span>&gt; y;</span><br><span class="line">std::atomic&lt;<span class="keyword">int</span>&gt; z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write_x_then_y</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x=<span class="literal">true</span>;  <span class="comment">// 1 在栅栏前存储x</span></span><br><span class="line">  <span class="function">std::atomic_thread_fe <span class="title">nce</span><span class="params">(std::memory_order_release)</span></span>;</span><br><span class="line">  y.<span class="built_in">store</span>(<span class="literal">true</span>,std::memory_order_relaxed);  <span class="comment">// 2 在栅栏后存储y</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_y_then_x</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!y.<span class="built_in">load</span>(std::memory_order_relaxed));  <span class="comment">// 3 在#2写入前，持续等待</span></span><br><span class="line">  std::<span class="built_in">atomic_thread_fence</span>(std::memory_order_acquire);</span><br><span class="line">  <span class="keyword">if</span>(x)  <span class="comment">// 4 这里读取到的值，是#1中写入</span></span><br><span class="line">    ++z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x=<span class="literal">false</span>;</span><br><span class="line">  y=<span class="literal">false</span>;</span><br><span class="line">  z=<span class="number">0</span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">a</span><span class="params">(write_x_then_y)</span></span>;</span><br><span class="line">  <span class="function">std::thread <span class="title">b</span><span class="params">(read_y_then_x)</span></span>;</span><br><span class="line">  a.<span class="built_in">join</span>();</span><br><span class="line">  b.<span class="built_in">join</span>();</span><br><span class="line">  <span class="built_in">assert</span>(z.<span class="built_in">load</span>()!=<span class="number">0</span>);  <span class="comment">// 5 断言将不会触发</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>栅栏仍然为存储x①和存储y②，还为加载y③和加载x④提供一个执行序，并且这里存储x和加载x之间仍然有一个先行关系，所以不会触发断言⑤。②中的存储和③中对y的加载必须是原子操作，否则会在y上产生条件竞争。当读取线程看到存储到y的操作，栅栏将会对x执行有序的操作，这个执行序意味着x上不存在条件竞争。</p>
<p>不仅是栅栏可对非原子操作排序，memory_order_release/memory_order_consume也为非原子访问排序，可以动态分配对象，并且本章中的许多例子都可以使用普通的非原子操作，去替代memory_order_relaxed的操作。</p>
<h3 id="非原子操作排序"><a href="#非原子操作排序" class="headerlink" title="非原子操作排序"></a>非原子操作排序</h3><p>某一内存位置上，lock()作为一个获取操作，在同样的位置上unlock()作为一个释放操作。</p>
<p>以下的工具都可以提供同步：</p>
<p><strong>std::thread</strong></p>
<ul>
<li>std::thread构造新线程时，构造函数与调用函数或新线程的可调用对象间的同步。</li>
<li>对std::thread对象调用join，可以和对应的线程进行同步。</li>
</ul>
<p><strong>std::mutex, std::timed_mutex, std::recursive_mutex, std::recursibe_timed_mutex</strong></p>
<ul>
<li>对给定互斥量对象调用lock和unlock，以及对try_lock，try_lock_for或try_lock_until，会形成该互斥量的锁序。</li>
<li>对给定的互斥量调用unlock，需要在调用lock或成功调用try_lock，try_lock_for或try_lock_until之后，这样才符合互斥量的锁序。</li>
<li>对try_lock，try_lock_for或try_lock_until失败的调用，不具有任何同步关系。</li>
</ul>
<p><strong>std::shared_mutex ,  std::shared_timed_mutex</strong></p>
<ul>
<li>对给定互斥量对象调用lock、unlock、lock_shared和unlock_shared，以及对 try_lock ,  try_lock_for ,  try_lock_until ,  try_lock_shared ,  try_lock_shared_for或 try_lock_shared_until的成功调用，会形成该互斥量的锁序。</li>
<li>对给定的互斥量调用unlock，需要在调用lock或shared_lock，亦或是成功调用try_lock ,  try_lock_for,  try_lock_until,  try_lock_shared,  try_lock_shared_for或try_lock_shared_until之后，才符合互斥量的锁序。</li>
<li>对try_lock，try_lock_for，try_lock_until，try_lock_shared，try_lock_shared_for或try_lock_shared_until 失败的调用，不具有任何同步关系。</li>
</ul>
<p><strong>std::shared_mutex和std::shared_timed_mutex</strong></p>
<ul>
<li>成功的调用std::promise对象的set_value或set_exception与成功的调用wait或get之间同步，或是调用wait_for或wait_until的返回例如future状态std::future_status::ready与promise共享同步状态。</li>
<li>给定std::promise对象的析构函数，该对象存储了一个std::future_error异常，成功的调用wait或get后，共享同步状态与promise之间的同步，或是调用wait_for或wait_until返回的future状态std::future_status::ready时，与promise共享同步状态。</li>
</ul>
<p><strong>std::packaged_task ,  std::future和std::shared_future</strong></p>
<ul>
<li>成功的调用std::packaged_task对象的函数操作符与成功的调用wait或get之间同步，或是调用wait_for或wait_until的返回future状态std::future_status::ready与打包任务共享同步状态。</li>
<li>std::packaged_task对象的析构函数，该对象存储了一个std::future_error异常，其共享同步状态与打包任务之间的同步在于成功的调用wait或get，或是调用wait_for或wait_until返回的future状态std::future_status::ready与打包任务共享同步状态。</li>
</ul>
<p><strong>std::async ,  std::future和std::shared_future</strong></p>
<ul>
<li>使用std::launch::async策略性的通过std::async启动线程执行任务与成功的调用wait和get之间是同步的，或调用wait_for或wait_until返回的future状态std::future_status::ready与产生的任务共享同步状态。</li>
<li>使用std::launch::deferred策略性的通过std::async启动任务与成功的调用wait和get之间是同步的，或调用wait_for或wait_until返回的future状态std::future_status::ready与promise共享同步状态。</li>
</ul>
<p><strong>std::experimental::future ,  std::experimental::shared_future和持续性</strong></p>
<ul>
<li>异步共享状态变为就绪的事件与该共享状态上调度延续函数的调用同步。</li>
<li>持续性函数的完成与成功调用wait或get的返回同步，或调用wait_for或wait_until返回的期望值状态std::future_status::ready与调用then构建的持续性返回的future同步，或是与在调度用使用这个future的操作同步。</li>
</ul>
<p><strong>std::experimental::latch</strong></p>
<ul>
<li>对std::experimental::latch实例调用count_down或count_down_and_wait与在该对象上成功的调用wait或count_down_and_wait之间是同步的。</li>
</ul>
<p><strong>std::experimental::barrier</strong></p>
<ul>
<li>对std::experimental::barrier实例调用arrive_and_wait或arrive_and_drop与在该对象上随后成功完成的arrive_and_wait之间是同步的。</li>
</ul>
<p><strong>std::experimental::flex_barrier</strong></p>
<ul>
<li>对std::experimental::flex_barrier实例调用arrive_and_wait或arrive_and_drop与在该对象上随后成功完成的arrive_and_wait之间是同步的。</li>
<li>对std::experimental::flex_barrier实例调用arrive_and_wait或arrive_and_drop与在该对象上随后完成的给定函数之间是同步的。</li>
<li>对std::experimental::flex_barrier实例的给定函数的返回与每次对arrive_and_wait的调用同步，当调用给定函数线程会在栅栏处阻塞等待。</li>
</ul>
<p><strong>std::condition_variable和std::condition_variable_any</strong></p>
<ul>
<li>条件变量不提供任何同步关系，它们是对忙等待的优化，所有同步都由互斥量提供。</li>
</ul>
]]></content>
      <tags>
        <tag>并发编程</tag>
        <tag>c++多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>高频算法考察</title>
    <url>/posts/605267a3.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="合并有序链表"><a href="#合并有序链表" class="headerlink" title="合并有序链表"></a>合并有序链表</h2><p><a href="https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/">力扣链接</a></p>
<p>将两个有序的链表合并为一个新链表，要求新的链表是通过拼接两个链表的节点来生成的。</p>
<p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4 输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="keyword">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">merge</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="literal">nullptr</span>) <span class="keyword">return</span> l2;</span><br><span class="line">    <span class="keyword">if</span> (l2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> l1;</span><br><span class="line">    ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    ListNode* node = dummy;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="literal">nullptr</span> &amp;&amp; l2 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">            node-&gt;next = l1;</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            node-&gt;next = l2;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        node = node-&gt;next;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="literal">nullptr</span>) node-&gt;next = l2;</span><br><span class="line">    <span class="keyword">if</span> (l2 == <span class="literal">nullptr</span>) node-&gt;next = l1;</span><br><span class="line">    <span class="keyword">return</span> dummy -&gt; next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ListNode* node0 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    ListNode* node1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">    ListNode* node2 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">    ListNode* node3 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    ListNode* node4 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">    ListNode* node5 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">    node0-&gt;next = node1;</span><br><span class="line">    node1-&gt;next = node2;</span><br><span class="line">    node2-&gt;next = node3;</span><br><span class="line">    node3-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    node4-&gt;next = node5;</span><br><span class="line">    node5-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> node = <span class="built_in">merge</span>(node0, node4);</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cout &lt;&lt; node-&gt;val &lt;&lt; endl;</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p>
<p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL 输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="keyword">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pHead == <span class="literal">nullptr</span> || pHead-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> pHead;</span><br><span class="line">	ListNode* dummy = <span class="keyword">new</span>  <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">	ListNode* pre =dummy;</span><br><span class="line">	pre-&gt;next = pHead;</span><br><span class="line">	ListNode* cur = pHead-&gt;next;</span><br><span class="line">	pHead-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="comment">//pre = cur;</span></span><br><span class="line">	ListNode* temp = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		temp = cur;</span><br><span class="line">		cur = cur-&gt;next;</span><br><span class="line">		temp-&gt;next = pre-&gt;next;</span><br><span class="line">		pre-&gt;next = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dummy -&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; data, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//for_each(data.begin(), data.end(), [](const auto a) &#123;cout &lt;&lt; a &lt;&lt; &quot; &quot;; &#125;);</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">	<span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> key = data[low], begin = low, end = high;</span><br><span class="line">	<span class="keyword">while</span> (begin &lt; end) &#123;</span><br><span class="line">		<span class="keyword">while</span> (begin &lt; end &amp;&amp; data[end] &gt; key) &#123;</span><br><span class="line">			end--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (begin &lt; end) data[begin++] = data[end];</span><br><span class="line">		<span class="keyword">while</span> (begin &lt; end &amp;&amp; data[begin] &lt;= key) &#123;</span><br><span class="line">			begin++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (begin &lt; end) data[end--] = data[begin];</span><br><span class="line">	&#125;</span><br><span class="line">	data[begin] = key;</span><br><span class="line">	<span class="built_in">quickSort</span>(data, low, begin - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">quickSort</span>(data, begin + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//data和copy数组大小相同，copy数组变为有序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; data, vector&lt;<span class="keyword">int</span>&gt;&amp; copy, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (begin &gt;= end) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> mid = begin + (end - begin) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> low1 = begin, high1 = mid, low2 = mid + <span class="number">1</span>, high2 = end;</span><br><span class="line">	<span class="keyword">int</span> index = begin;</span><br><span class="line">	<span class="built_in">mergeSort</span>(copy, data, low1, high1);</span><br><span class="line">	<span class="built_in">mergeSort</span>(copy, data, low2, high2);</span><br><span class="line">	<span class="keyword">while</span> (low1 &lt;= high1 &amp;&amp; low2 &lt;= high2) &#123;</span><br><span class="line">		copy[index++] = data[low1] &lt; data[low2] ? data[low1++] : data[low2++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (low1 &lt;= high1) copy[index++] = data[low1++];</span><br><span class="line">	<span class="keyword">while</span> (low2 &lt;= high2) copy[index++] = data[low2++];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对原数组进行归并排序。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort2</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; data, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (begin &gt;= end) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> mid = begin + (end - begin) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> low1 = begin, high1 = mid, low2 = mid + <span class="number">1</span>, high2 = end;</span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">mergeSort2</span>(data, low1, high1);</span><br><span class="line">	<span class="built_in">mergeSort2</span>(data, low2, high2);</span><br><span class="line">	<span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">help</span><span class="params">(end - begin + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (low1 &lt;= high1 &amp;&amp; low2 &lt;= high2) &#123;</span><br><span class="line">		help[index++] = data[low1] &lt; data[low2] ? data[low1++] : data[low2++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (low1 &lt;= high1) help[index++] = data[low1++];</span><br><span class="line">	<span class="keyword">while</span> (low2 &lt;= high2) help[index++] = data[low2++];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; help.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		data[begin + i] = help[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现一个堆排序"><a href="#实现一个堆排序" class="headerlink" title="实现一个堆排序"></a>实现一个堆排序</h2><p>堆排序过程：</p>
<ul>
<li>将n个元素的序列构建一个大顶堆或小顶堆</li>
<li>将堆顶的元素放到序列末尾</li>
<li>将前n-1个元素重新构建大顶堆或小顶堆，重复这个过程，直到所有元素都已经排序</li>
</ul>
<p>整体时间复杂度为O(nlogn)，空间复杂度O(1)</p>
<p>注：堆排序是<strong>不稳定</strong>的排序算法，是一种树形选择排序。恰好利用树形的特点保存了部分前面的比较结果，因此可以减少比较次数。不适合记录较少的排序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> len, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> maxid = index;</span><br><span class="line">	<span class="comment">// 计算左右子节点的下标   left=2*i+1  right=2*i+2  parent=(i-1)/2</span></span><br><span class="line">	<span class="keyword">int</span> left = <span class="number">2</span> * index + <span class="number">1</span>, right = <span class="number">2</span> * index + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 寻找当前以index为根的子树中最大/最小的元素的下标</span></span><br><span class="line">	<span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[maxid]) maxid = left;</span><br><span class="line">	<span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[maxid]) maxid = right;</span><br><span class="line">    <span class="comment">// maxid是3个数中最大数的下标</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 进行交换，记得要递归进行adjust,传入的index是maxid</span></span><br><span class="line">	<span class="keyword">if</span> (maxid != index) &#123; <span class="comment">// 如果maxid的值有更新</span></span><br><span class="line">		<span class="built_in">swap</span>(arr[maxid], arr[index]);</span><br><span class="line">		<span class="built_in">adjust</span>(arr, len, maxid); <span class="comment">//递归调整其他不满足堆性质的部分</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapsort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 初次构建堆，i要从最后一个非叶子节点开始，所以是(len-1-1)/2，0这个位置要加等号</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = (len - <span class="number">1</span> - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123; <span class="comment">// 对每一个非叶结点进行堆调整(从最后一个非叶结点开始)</span></span><br><span class="line">		<span class="built_in">adjust</span>(arr, len, i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从最后一个元素的下标开始往前遍历，每次将堆顶元素交换至当前位置，并且缩小长度（i为长度），从0处开始adjust</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="built_in">swap</span>(arr[<span class="number">0</span>], arr[i]); <span class="comment">// 将当前最大的放置到数组末尾，将未完成排序的部分继续进行堆排序</span></span><br><span class="line">		<span class="built_in">adjust</span>(arr, i, <span class="number">0</span>);<span class="comment">// 注意每次adjust是从根往下调整，所以这里index是0！</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="keyword">int</span>&gt; arr = &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;before: &quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> item : arr) cout &lt;&lt; item &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// 3 4 2 1 5 8 7 6</span></span><br><span class="line">	<span class="built_in">heapsort</span>(arr, arr.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;after: &quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> item : arr)cout &lt;&lt; item &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//1 2 3 4 5 6 7 8</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设计LRU缓存"><a href="#设计LRU缓存" class="headerlink" title="设计LRU缓存"></a>设计LRU缓存</h2><p><a href="https://leetcode-cn.com/problems/lru-cache-lcci">力扣链接(opens new window)</a></p>
<p>设计和构建一个“最近最少使用”缓存，该缓存会删除最近最少使用的项目。缓存应该从键映射到值(允许你插入和检索特定键对应的值)，并在初始化时指定最大容量。当缓存被填满时，它应该删除最近最少使用的项目。</p>
<p>它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p>
<p>获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。 写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p>
<p>样例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">LRUCache cache = <span class="keyword">new</span> <span class="built_in">LRUCache</span>( <span class="number">2</span> <span class="comment">/* 缓存容量 */</span> );</span><br><span class="line"></span><br><span class="line">cache.<span class="built_in">put</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">cache.<span class="built_in">put</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">cache.<span class="built_in">get</span>(<span class="number">1</span>);       <span class="comment">// 返回  1</span></span><br><span class="line">cache.<span class="built_in">put</span>(<span class="number">3</span>, <span class="number">3</span>);    <span class="comment">// 该操作会使得密钥 2 作废</span></span><br><span class="line">cache.<span class="built_in">get</span>(<span class="number">2</span>);       <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">cache.<span class="built_in">put</span>(<span class="number">4</span>, <span class="number">4</span>);    <span class="comment">// 该操作会使得密钥 1 作废</span></span><br><span class="line">cache.<span class="built_in">get</span>(<span class="number">1</span>);       <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">cache.<span class="built_in">get</span>(<span class="number">3</span>);       <span class="comment">// 返回  3</span></span><br><span class="line">cache.<span class="built_in">get</span>(<span class="number">4</span>);       <span class="comment">// 返回  4</span></span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DoubleList</span> &#123;</span><span class="comment">// 定义双向链表</span></span><br><span class="line">	<span class="keyword">int</span> key, val;</span><br><span class="line">	DoubleList* pre, *next;</span><br><span class="line">	<span class="built_in">DoubleList</span>(<span class="keyword">int</span> _key, <span class="keyword">int</span> _val) : <span class="built_in">key</span>(_key), <span class="built_in">val</span>(_val), <span class="built_in">pre</span>(<span class="literal">nullptr</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRU</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> capcity;<span class="comment">// LRU容量</span></span><br><span class="line">	DoubleList* head, *tail;<span class="comment">// 头尾哨兵节点</span></span><br><span class="line">	unordered_map&lt;<span class="keyword">int</span>, DoubleList*&gt; memory;<span class="comment">// 哈希表存储key对应的双向链表</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">LRU</span>(<span class="keyword">int</span> _capcity) &#123;<span class="comment">// 初始化LRU，设置双向链表的头尾哨兵节点</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;capcity = _capcity;</span><br><span class="line">		head = <span class="keyword">new</span> <span class="built_in">DoubleList</span>(<span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">		tail = <span class="keyword">new</span> <span class="built_in">DoubleList</span>(<span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">		head-&gt;next = tail;</span><br><span class="line">		tail-&gt;pre = head;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">LRU</span>() &#123;<span class="comment">// 析构删除不为空的指针</span></span><br><span class="line">		<span class="keyword">if</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span> head;</span><br><span class="line">			head = <span class="literal">nullptr</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (tail != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span> tail;</span><br><span class="line">			tail = <span class="literal">nullptr</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span>&amp; a : memory) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a.second != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">				<span class="keyword">delete</span> a.second;</span><br><span class="line">				a.second = <span class="literal">nullptr</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 写入数据（key,val)形式</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> _key, <span class="keyword">int</span> _val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果存储哈希表中有key值存在，更新val值，当前节点先删后加</span></span><br><span class="line">		<span class="keyword">if</span> (memory.<span class="built_in">find</span>(_key) != memory.<span class="built_in">end</span>()) &#123;</span><br><span class="line">			DoubleList* node = memory[_key];</span><br><span class="line">			<span class="built_in">removeNode</span>(node);</span><br><span class="line">			node-&gt;val = _val;</span><br><span class="line">			<span class="built_in">pushNode</span>(node);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">// 哈希表中未存储key，检查当前哈希表的大小与存储容量比较</span></span><br><span class="line">		<span class="keyword">if</span> (memory.<span class="built_in">size</span>() == <span class="keyword">this</span>-&gt;capcity) &#123; <span class="comment">// 这里很重要，也很爱错，千万记得更新memory</span></span><br><span class="line">			<span class="keyword">int</span> topKey = head-&gt;next-&gt;key;<span class="comment">// 取得key值，方便在后面删除</span></span><br><span class="line">			<span class="built_in">removeNode</span>(head-&gt;next);<span class="comment">// 移除头部的下一个</span></span><br><span class="line">			memory.<span class="built_in">erase</span>(topKey);<span class="comment">// 在memory中删除当前头部的值</span></span><br><span class="line">		&#125;</span><br><span class="line">		DoubleList* node = <span class="keyword">new</span> <span class="built_in">DoubleList</span>(_key, _val);<span class="comment">// 新增node</span></span><br><span class="line">		<span class="built_in">pushNode</span>(node);<span class="comment">// 放在尾部</span></span><br><span class="line">		memory[_key] = node;<span class="comment">// 记得在memory中添加进去</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 读取数据</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> _key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 哈希表中存在key，返回存储的key对应的val</span></span><br><span class="line">		<span class="keyword">if</span> (memory.<span class="built_in">find</span>(_key) != memory.<span class="built_in">end</span>()) &#123;</span><br><span class="line">			DoubleList* node = memory[_key];</span><br><span class="line">			<span class="built_in">removeNode</span>(node);<span class="comment">// 注意读取的节点先删后加，进行更新</span></span><br><span class="line">			<span class="built_in">pushNode</span>(node);</span><br><span class="line">			<span class="keyword">return</span> node-&gt;val;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">		tail-&gt;pre-&gt;next = node;</span><br><span class="line">		node-&gt;pre = tail-&gt;pre;</span><br><span class="line">		node-&gt;next = tail;</span><br><span class="line">		tail-&gt;pre = node;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">LRU <span class="title">cache</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	cache.<span class="built_in">put</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	cache.<span class="built_in">put</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">	cout &lt;&lt; cache.<span class="built_in">get</span>(<span class="number">1</span>) &lt;&lt; endl;       <span class="comment">// 返回  1</span></span><br><span class="line">	cache.<span class="built_in">put</span>(<span class="number">3</span>, <span class="number">3</span>);    <span class="comment">// 该操作会使得密钥 2 作废</span></span><br><span class="line">	cout&lt;&lt; cache.<span class="built_in">get</span>(<span class="number">2</span>) &lt;&lt; endl;       <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">	cache.<span class="built_in">put</span>(<span class="number">4</span>, <span class="number">4</span>);    <span class="comment">// 该操作会使得密钥 1 作废</span></span><br><span class="line">	cout &lt;&lt; cache.<span class="built_in">get</span>(<span class="number">1</span>) &lt;&lt; endl;       <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">	cout &lt;&lt; cache.<span class="built_in">get</span>(<span class="number">3</span>) &lt;&lt; endl;       <span class="comment">// 返回  3</span></span><br><span class="line">	cout &lt;&lt; cache.<span class="built_in">get</span>(<span class="number">4</span>) &lt;&lt; endl;       <span class="comment">// 返回  4</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重排链表"><a href="#重排链表" class="headerlink" title="重排链表"></a>重排链表</h2><p><a href="https://leetcode-cn.com/problems/reorder-list/">力扣链接</a></p>
<p>给定一个单链表 L：L0→L1→…→Ln-1→Ln ， 将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…</p>
<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> val;</span><br><span class="line">	ListNode* next;</span><br><span class="line">	<span class="built_in">ListNode</span>(<span class="keyword">int</span> _val) : <span class="built_in">val</span>(_val), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 翻转链表，定义哨兵节点，头插法</span></span><br><span class="line"><span class="function">ListNode* <span class="title">myReverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">	ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">	ListNode* pre = dummy;</span><br><span class="line">	pre-&gt;next = head;</span><br><span class="line">	ListNode* cur = head-&gt;next;</span><br><span class="line">	head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">	ListNode* node = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		node = cur;</span><br><span class="line">		cur = cur-&gt;next;</span><br><span class="line">		node-&gt;next = pre-&gt;next;</span><br><span class="line">		pre-&gt;next = node;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// merge归并过程，链表长度p1 &gt;= p2</span></span><br><span class="line"><span class="function">ListNode* <span class="title">myMerge</span><span class="params">(ListNode* p1, ListNode* p2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p1 == <span class="literal">nullptr</span>) <span class="keyword">return</span> p2;</span><br><span class="line">	<span class="keyword">if</span> (p2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> p1;</span><br><span class="line"></span><br><span class="line">	ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);<span class="comment">// 定义哨兵节点</span></span><br><span class="line">	ListNode* pre = dummy;</span><br><span class="line">	<span class="keyword">while</span> (p1 != <span class="literal">nullptr</span> &amp;&amp; p2 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		pre-&gt;next = p1;</span><br><span class="line">		p1 = p1-&gt;next;</span><br><span class="line">		pre = pre-&gt;next;</span><br><span class="line">		pre-&gt;next = p2;</span><br><span class="line">		p2 = p2-&gt;next;</span><br><span class="line">		pre = pre-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (p1 != <span class="literal">nullptr</span>) pre-&gt;next = p1;</span><br><span class="line">	<span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重排链表主函数</span></span><br><span class="line"><span class="function">ListNode* <span class="title">myReverOrderList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">	ListNode* slow = head, * fast = head-&gt;next;</span><br><span class="line">    <span class="comment">// 快慢指针确定链表中点位置slow</span></span><br><span class="line">	<span class="keyword">while</span> (fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		slow = slow-&gt;next;</span><br><span class="line">		fast = fast-&gt;next-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// 切分后半部分链表，前半部的链表末尾指向nullptr</span></span><br><span class="line">	ListNode* second = slow-&gt;next;</span><br><span class="line">	slow-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">	second = <span class="built_in">myReverseList</span>(second);<span class="comment">//翻转后半部分链表</span></span><br><span class="line">	head = <span class="built_in">myMerge</span>(head, second);<span class="comment">//归并merge链表返回头节点head</span></span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">	ListNode* node1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">	ListNode* node2 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">	ListNode* node3 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">	ListNode* node4 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">5</span>);</span><br><span class="line">	ListNode* node5 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">	head-&gt;next = node1;</span><br><span class="line">	node1-&gt;next = node2;</span><br><span class="line">	node2-&gt;next = node3;</span><br><span class="line">	node3-&gt;next = node4;</span><br><span class="line">	node4-&gt;next = node5;</span><br><span class="line">	node5-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	head = <span class="built_in">myReverOrderList</span>(head);</span><br><span class="line">	<span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		cout &lt;&lt; head-&gt;val &lt;&lt; endl;</span><br><span class="line">		head = head-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="奇偶链表"><a href="#奇偶链表" class="headerlink" title="奇偶链表"></a>奇偶链表</h2><p><a href="https://leetcode-cn.com/problems/odd-even-linked-list/">力扣链接</a></p>
<p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p>
<p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;NULL</span><br><span class="line">输出: <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5</span>-&gt;<span class="number">2</span>-&gt;<span class="number">4</span>-&gt;NULL</span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: <span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5</span>-&gt;<span class="number">6</span>-&gt;<span class="number">4</span>-&gt;<span class="number">7</span>-&gt;NULL </span><br><span class="line">输出: <span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">6</span>-&gt;<span class="number">7</span>-&gt;<span class="number">1</span>-&gt;<span class="number">5</span>-&gt;<span class="number">4</span>-&gt;NULL</span><br></pre></td></tr></table></figure>

<p>注意：应当保持奇数节点和偶数节点的相对顺序。链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</p>
<p>法一：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">oddEvenList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">	ListNode* first = head;<span class="comment">// 奇链表头结点</span></span><br><span class="line">	ListNode* second = head-&gt;next;<span class="comment">// 偶链表头结点</span></span><br><span class="line">	ListNode* cur = second;<span class="comment">// 保存偶链表头结点</span></span><br><span class="line">	<span class="keyword">while</span> (second != <span class="literal">nullptr</span> &amp;&amp; second-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		first-&gt;next = second-&gt;next;</span><br><span class="line">		second-&gt;next = first-&gt;next-&gt;next;</span><br><span class="line">		first = first-&gt;next;</span><br><span class="line">		second = second-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	first-&gt;next = cur;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>法二：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">oddEvenList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">	ListNode* p = head;</span><br><span class="line">	ListNode* q = head-&gt;next;</span><br><span class="line">	ListNode* evenhead = q;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (q != <span class="literal">nullptr</span> &amp;&amp; q-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		q-&gt;next = q-&gt;next-&gt;next;</span><br><span class="line">		q = q-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	p-&gt;next = evenhead;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Top-K问题"><a href="#Top-K问题" class="headerlink" title="Top K问题"></a>Top K问题</h2><p>Top K问题的常见形式：</p>
<ul>
<li>给定10000个整数，找到第K大（第K小）的数</li>
<li>给定10000个整数，找出最大（最小）的前K个数</li>
<li>给定100000个单词，求前K词频的单词</li>
</ul>
<p>解决Top K问题若干种方法：</p>
<ul>
<li>使用最大最小堆。求最大的数用最小堆，求最小的数用最大堆。</li>
<li>Quick Select算法。使用类似快排的思路，根据pivot划分数组。</li>
<li>使用排序方法，排序后再寻找top K元素。</li>
<li>使用选择排序的思想，对前K个元素部分排序。</li>
<li>将1000…..个数分成m组，每组寻找top K个数，得到m×K个数，在这m×k个数里面找top K个数</li>
</ul>
<ol>
<li><p>使用最大最小堆的思路（以top K 最大元素为例）</p>
<p>按顺序扫描这10000个数，先取出K个元素构建一个大小为K的最小堆。每扫描到一个元素，如果这个元素大于堆顶的元素（这个堆最小的一个数），就放入堆中，并删除堆顶的元素，同时整理堆。如果这个元素小于堆顶的元素，就直接pass。最后堆中剩下的元素就是最大的前Top K个元素，最右的叶节点就是Top 第K大的元素。</p>
</li>
</ol>
<p>注意：最小堆的插入时间复杂度为log(n), n为堆中元素个数，在这里是K。最小堆的初始化时间复杂度是nlog(n)</p>
<p>C++中的最大最小堆要用标准库的priority_queue来实现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line">    <span class="built_in">Node</span> (<span class="keyword">int</span> v, <span class="keyword">int</span> i) : <span class="built_in">value</span>(v), <span class="built_in">idx</span>(i) &#123;&#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> struct Node &amp;n1, <span class="keyword">const</span> struct Node &amp;n2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> struct Node &amp;n1, <span class="keyword">const</span> struct Node &amp;n2) &#123;</span><br><span class="line">    <span class="keyword">return</span> n1.value &lt; n2.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;Node&gt; pq; <span class="comment">// 此时pq为最大堆</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>使用Quick Select的思路（以寻找第K大的元素为例）</p>
<p>Quick Select脱胎于快速排序，提出这两个算法的都是同一个人。算法的过程是这样的： 首先选取一个枢轴，然后将数组中小于该枢轴的数放到左边，大于该枢轴的数放到右边。 此时，如果左边的数组中的元素个数大于等于K，则第K大的数肯定在左边数组中，继续对左边数组执行相同操作； 如果左边的数组元素个数等于K-1，则第K大的数就是pivot； 如果左边的数组元素个数小于K，则第K大的数肯定在右边数组中，对右边数组执行相同操作。</p>
</li>
</ol>
<p>这个算法与快排最大的区别是，每次划分后只处理左半边或者右半边，而快排在划分后对左右半边都继续排序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">quickSelect</span>(nums, k, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// quick select to find the kth-largest element</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quickSelect</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) <span class="keyword">return</span> nums[right];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="built_in">partition</span>(nums, left, right);<span class="comment">// 确定第k大（第k小）关键找对边界p</span></span><br><span class="line">    <span class="keyword">if</span> (index - left + <span class="number">1</span> &gt; k) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">quickSelect</span>(nums, k, left, index - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index - left + <span class="number">1</span> == k) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[index];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">quickSelect</span>(nums, k - (index - left + <span class="number">1</span>), index + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 辅助函数确定边界p，左边比p大，右边比p小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> begin = left, end = right;</span><br><span class="line">    <span class="keyword">int</span> key = nums[begin];</span><br><span class="line">    <span class="keyword">while</span> (begin &gt; end) &#123;</span><br><span class="line">        <span class="keyword">while</span> (begin &gt; end &amp;&amp; nums[end] &lt; key) &#123;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (begin &gt; end) nums[begin++] = nums[end];</span><br><span class="line">        <span class="keyword">while</span> (begin &gt; end &amp;&amp; nums[begin] &gt;= key) &#123;</span><br><span class="line">            begin++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (begin &gt; end) nums[end--] = nums[begin];</span><br><span class="line">    &#125;</span><br><span class="line">    nums[begin] = key;</span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 辅助函数确定边界p，左边比p小，右边比p大，使用交换法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition2</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = low, j = high, pivot = arr[low];	<span class="comment">//基准元素</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; pivot) j--;	<span class="comment">//向左扫描</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pivot) i++;	<span class="comment">//向右扫描</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[i++], arr[j--]);	<span class="comment">//交换arr[i]和arr[j]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; pivot) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[low], arr[i - <span class="number">1</span>]);	<span class="comment">//交换arr[i - 1]和arr[low]，并返回基准元素位置i - 1</span></span><br><span class="line">        <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(arr[i], arr[low]);	<span class="comment">//交换arr[i]和arr[low]，并返回基准元素位置i</span></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用选择排序的思想对前K个元素排序 （ 以寻找前K大个元素为例）<br>扫描一遍数组，选出最大的一个元素，然后再扫描一遍数组，找出第二大的元素，再扫描一遍数组，找出第三大的元素。。。。。以此类推，找K个元素，时间复杂度为O(N*K)</li>
</ol>
<h2 id="写三个线程交替打印ABC"><a href="#写三个线程交替打印ABC" class="headerlink" title="写三个线程交替打印ABC"></a>写三个线程交替打印ABC</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">mutex mymutex;</span><br><span class="line">condition_variable cv;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">unique_lock&lt;mutex&gt; <span class="title">lk</span><span class="params">(mymutex)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(count&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(flag!=<span class="number">0</span>) cv.<span class="built_in">wait</span>(lk);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;thread 1: a&quot;</span>&lt;&lt;endl;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        cv.<span class="built_in">notify_all</span>();</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;my thread 1 finish&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printb</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">unique_lock&lt;mutex&gt; <span class="title">lk</span><span class="params">(mymutex)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(flag!=<span class="number">1</span>) cv.<span class="built_in">wait</span>(lk);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;thread 2: b&quot;</span>&lt;&lt;endl;</span><br><span class="line">        flag=<span class="number">2</span>;</span><br><span class="line">        cv.<span class="built_in">notify_all</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;my thread 2 finish&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">unique_lock&lt;mutex&gt; <span class="title">lk</span><span class="params">(mymutex)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(flag!=<span class="number">2</span>) cv.<span class="built_in">wait</span>(lk);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;thread 3: c&quot;</span>&lt;&lt;endl;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">        cv.<span class="built_in">notify_all</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;my thread 3 finish&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">th2</span><span class="params">(printa)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">th1</span><span class="params">(printb)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">th3</span><span class="params">(printc)</span></span>;</span><br><span class="line"></span><br><span class="line">    th1.<span class="built_in">join</span>();</span><br><span class="line">    th2.<span class="built_in">join</span>();</span><br><span class="line">    th3.<span class="built_in">join</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot; main thread &quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>操作系统笔记01</title>
    <url>/posts/80d55e53.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h1 id="OS概述"><a href="#OS概述" class="headerlink" title="OS概述"></a>OS概述</h1><h2 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h2><p><strong>操作系统的两个职责：</strong></p>
<ul>
<li><p><strong>对硬件进行管理与抽象</strong></p>
<ul>
<li><p>管理硬件：内存分配、设备驱动</p>
</li>
<li><p>对硬件进行抽象：将有限的、离散的资源高效地抽象为无限的、连续的资源。将硬件通过易用的接口提供给上层的</p>
<p>应用，从而使应用无须关心硬件的具体细节。</p>
</li>
</ul>
</li>
<li><p><strong>为应用提供服务并管理</strong></p>
<ul>
<li>服务于应用：提供接口（如系统调用），不同类型的访问控制、应用间交互等服务</li>
<li>管理应用：应用生命周期管理，包括应用的加载、启动、切换、调度、销毁等。</li>
</ul>
</li>
</ul>
<p>狭义的OS：操作系统内核 + Shell(命令行界面)</p>
<p>广义的OS：</p>
<ul>
<li><strong>操作系统内核</strong>（对硬件资源的管理与抽象，为操作系统框架提供基础的系统服务）</li>
<li><strong>操作系统框架</strong>（基于操作系统内核提供的服务，为不同的应用领域提供编程接口与运行环境）</li>
</ul>
<p>OS发展历史：</p>
<p>批处理操作系统 -&gt; 分时处理操作系统（UNIX), shell命令行交互 -&gt; 个人PC（macOS/Windows），人机交互更好</p>
<h2 id="操作系统接口"><a href="#操作系统接口" class="headerlink" title="操作系统接口"></a>操作系统接口</h2><ul>
<li><strong>系统调用接口</strong> 向内核申请服务</li>
<li><strong>POSIX接口</strong> 可移植操作系统接口，通常通过C library（libc）来实现。</li>
<li><strong>领域应用接口</strong> 封装面向不同领域的领域应用接口</li>
</ul>
<h2 id="硬件结构"><a href="#硬件结构" class="headerlink" title="硬件结构"></a>硬件结构</h2><p>计算机硬件结构主要为<strong>冯·诺伊曼结构</strong></p>
<ul>
<li>中央处理器 CPU</li>
<li>存储器（内存）</li>
<li>输入输出 I/O</li>
</ul>
<p>CPU缓存，比物理内存访问速度快。</p>
<p><img src="/OS-1/image-20220527155653122.png" alt="image-20220527155653122"></p>
<p>设备与中断</p>
<p>内存映射输入输出 MIMO：</p>
<p>把输入输出设备和物理内存放到同一个地址空间，为设备内部的内存和寄存器也分配相应的地址。</p>
<p>轮询与中断</p>
<p>让CPU不断通过MIMO查看是否有输入，但会使CPU长时间处于等待状态造成浪费。</p>
<p>获得输入后，向CPU发送一个中断。</p>
<p>MMIO使得CPU可以主动地访问设备,中断使得设备能够主动地通知CPU，这两种机制是CPU与设备之间交互的重要方式。</p>
<p>内存</p>
<p><img src="/OS-1/image-20220527231741888.png" alt="image-20220527231741888"></p>
<h3 id="进程-Process"><a href="#进程-Process" class="headerlink" title="进程 Process"></a>进程 Process</h3><p>与每个进程相关的是<strong>地址空间</strong></p>
<p>地址空间中存放可执行程序、程序所需要的数据和栈</p>
<p>进程可以看作是容纳运行一个程序所有信息的容器</p>
<p><strong>进程表：</strong> 数组或链表结构，存放进程信息</p>
<p>进程树：一个进程可以创建多个进程（子进程），树形结构</p>
<p>系统管理器授权每个进程一个给定的UID，子进程与父进程拥有一样的UID</p>
<h3 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h3><p>管理进程，每个进程有一些可以使用的地址集合，典型值从0开始直到某个最大值。一个进程可以拥有的最大地址空间小于主存。</p>
<p>虚拟内存：操作系统把部分地址空间装入主存，部分留在磁盘上，并在需要的时候交换回来</p>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>抽象文件模型</p>
<p>创建文件、删除文件、读和写文件 都需要系统调用。</p>
<p><strong>文件描述符：</strong> 读写文件前，检查权限可以打开，系统返回一个小整数，供后续操作使用；若禁止使用返回一个错误码</p>
<p><strong>管道：</strong> 一种虚文件，可以连接两个进程</p>
<p><img src="/OS-1/image-20220528171527111.png" alt="image-20220528171527111"></p>
<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>操作系统的两大功能：</p>
<ul>
<li>为用户提供应用程序抽象</li>
<li>管理计算机资源</li>
</ul>
<p>只有<strong>系统调用能够进入内核态而过程调用则不能进行内核态</strong></p>
<h4 id="用于进程管理的系统调用"><a href="#用于进程管理的系统调用" class="headerlink" title="用于进程管理的系统调用"></a>用于进程管理的系统调用</h4><p>UNIX中唯一可以在POSIX中创建进程的途径：fork</p>
<p>fork调用返回一个值，在子进程中为0，在父进程中等于子进程的进程标识符PID。使用返回的PID可以看出哪个是父进程和子进程。</p>
<p>POSIX：可移植操作系统接口</p>
<p>waitpid系统调用：为等待子进程完成，父进程执行waitpid</p>
<p>execve系统调用：实现系统执行，三个参数：将要执行的文件名称、一个指向变量数组的指针、一个指向环境数组的指针。</p>
<p>一个shell指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp file1 file2</span><br></pre></td></tr></table></figure>

<p>此命令将file1复制到file2文件中，在shell执行fork之后，子进程定位并执行文件拷贝，将将源文件和目标文件的名称传递给它。</p>
<p>cp的主程序包含声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">main</span>(agrc, argv, envp)</span><br></pre></td></tr></table></figure>

<p>argc：命令行中参数数目的计数，包括程序名称。对于上面的例子，argc是3。</p>
<p>argv：数组的指针，该数组的元素i为第i个字符串的指针，例如，argc[0]指向字符串cp，argc[1]指向字符串file1，argc[2]指向字符串file2。</p>
<p>envp：指向环境的指针，该环境是一个数组，含有name = value的赋值形式，例子中，没有环境参数传递给execve，所以execve的第三个参数为0。</p>
<p>UNIX中的进程将内存划分为三部分：</p>
<ul>
<li>text segment，文本区，例如程序代码</li>
<li>data segment，数据区，例如变量</li>
<li>stack segment，栈区域，数据向上增长而堆栈向下增长。</li>
</ul>
<img src="/posts/image-20220529153518116.png" alt="image-20220529153518116" style="zoom:35%;">

<h4 id="用于文件管理的系统调用"><a href="#用于文件管理的系统调用" class="headerlink" title="用于文件管理的系统调用"></a>用于文件管理的系统调用</h4><p>与某个文件有关的系统调用</p>
<p>常用的调用read和write</p>
<p>UNIX为每个文件保存了该文件的类型、大小、最后修改时间以及其他信息，程序可以通过stat系统调用查看这些信息。</p>
<h4 id="用于目录管理的系统调用"><a href="#用于目录管理的系统调用" class="headerlink" title="用于目录管理的系统调用"></a>用于目录管理的系统调用</h4><p>与整个文件系统有关的系统调用</p>
<p>mkdir和rmdir分别用于创建和删除空目录。</p>
<p>mount系统调用将两个文件系统合并为一个。</p>
<h4 id="其他系统调用"><a href="#其他系统调用" class="headerlink" title="其他系统调用"></a>其他系统调用</h4><p>chdir调用更改当前工作目录</p>
<p>chmod系统调用提供改变文件模式的操作</p>
<p>UNIX与Win32系统调用API</p>
<table>
<thead>
<tr>
<th>UNIX</th>
<th>Win32</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>fork</td>
<td>CreateProcess</td>
<td>创建一个进程</td>
</tr>
<tr>
<td>waitpid</td>
<td>WaitForSingleObject</td>
<td>等待一个进程退出</td>
</tr>
<tr>
<td>execve</td>
<td>none</td>
<td>CraeteProcess = fork + service</td>
</tr>
<tr>
<td>exit</td>
<td>ExitProcess</td>
<td>终止执行</td>
</tr>
<tr>
<td>open</td>
<td>CreateFile</td>
<td>创建一个文件或打开一个已有的文件</td>
</tr>
<tr>
<td>close</td>
<td>CloseHandle</td>
<td>关闭文件</td>
</tr>
<tr>
<td>read</td>
<td>ReadFile</td>
<td>从单个文件中读取数据</td>
</tr>
<tr>
<td>write</td>
<td>WriteFile</td>
<td>向单个文件中写数据</td>
</tr>
<tr>
<td>lseek</td>
<td>SetFilePointer</td>
<td>移动文件指针</td>
</tr>
<tr>
<td>stat</td>
<td>GetFileAttributesEx</td>
<td>获得不同的文件属性</td>
</tr>
<tr>
<td>mkdir</td>
<td>CreateDirectory</td>
<td>创建一个新的目录</td>
</tr>
<tr>
<td>rmdir</td>
<td>RemoveDirectory</td>
<td>移除一个空的目录</td>
</tr>
<tr>
<td>link</td>
<td>none</td>
<td>Win32不支持link</td>
</tr>
<tr>
<td>unlink</td>
<td>DeleteFile</td>
<td>销毁一个已有的文件</td>
</tr>
<tr>
<td>mount</td>
<td>none</td>
<td>Win32不支持mount</td>
</tr>
<tr>
<td>umount</td>
<td>none</td>
<td>Win32不支持mount</td>
</tr>
<tr>
<td>chdir</td>
<td>SetCurrentDirectory</td>
<td>切换当前工作目录</td>
</tr>
<tr>
<td>chmod</td>
<td>none</td>
<td>Win32不支持安全</td>
</tr>
<tr>
<td>kill</td>
<td>none</td>
<td>Win32不支持信号</td>
</tr>
<tr>
<td>time</td>
<td>GetLocalTime</td>
<td>获取当前时间</td>
</tr>
</tbody></table>
<h3 id="操作系统结构"><a href="#操作系统结构" class="headerlink" title="操作系统结构"></a>操作系统结构</h3><ul>
<li>单体系统</li>
<li>分层系统</li>
<li>微内核</li>
<li>客户-服务端系统</li>
<li>虚拟机</li>
<li>外核</li>
</ul>
<h4 id="单体系统"><a href="#单体系统" class="headerlink" title="单体系统"></a>单体系统</h4><p>整个系统在内核态以单一程序的方式运行</p>
<p>整个操作系统是以程序集合来编写的，链接在一块形成一个大的二进制可执行文件</p>
<p>在单体系统中构造实际目标程序时，会首先编译所有单个过程（或包含这些过程的文件），然后使用系统链接器将它们全部绑定到一个可执行文件中。</p>
<p>三层模型：</p>
<ul>
<li>主程序：调用请求服务程序</li>
<li>服务程序：执行系统调用</li>
<li>实用程序：辅助服务过程调用</li>
</ul>
<h4 id="分层系统"><a href="#分层系统" class="headerlink" title="分层系统"></a>分层系统</h4><p>使用层来分隔不同的功能单元，每一层只与该层的上层和下层通信。</p>
<p>每一层都使用下面的层来执行其功能，层之间的通信通过预定义的固定接口通信。</p>
<table>
<thead>
<tr>
<th>层号</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>5</td>
<td>操作员</td>
</tr>
<tr>
<td>4</td>
<td>用户程序</td>
</tr>
<tr>
<td>3</td>
<td>输入/输出管理</td>
</tr>
<tr>
<td>2</td>
<td>操作员-进程通信</td>
</tr>
<tr>
<td>1</td>
<td>存储器和磁鼓管理</td>
</tr>
<tr>
<td>0</td>
<td>处理器分配和多道程序编程</td>
</tr>
</tbody></table>
<h4 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h4><p>微内核运行在内核态，其余模块可以作为普通用户进程运行。</p>
<img src="/posts/image-20220529222250168.png" alt="image-20220529222250168" style="zoom:60%;">

<p>机制与策略分离，比如系统调度，一个简单的调度算法是对每个进程赋予优先级，让内核执行优先级最高的进程。内核的机制是寻找最高的优先级进程并运行，而策略（赋予进程优先级）可以在用户态中的进程完成。策略与机制分离，使得内核变得更小。</p>
<h4 id="客户-服务器模式"><a href="#客户-服务器模式" class="headerlink" title="客户-服务器模式"></a>客户-服务器模式</h4><p>把进程划分为两类：</p>
<ul>
<li>服务器，每个服务器用来提供服务</li>
<li>客户端，使用这些服务</li>
</ul>
<img src="/posts/image-20220529222837516.png" alt="image-20220529222837516" style="zoom:67%;">

<p>两种载体：</p>
<ul>
<li>计算机既是客户端又是服务器</li>
<li>客户端与服务器在不同机器上（普遍情况），通过局域网或广域网连接</li>
</ul>
<p>客户端发送请求并得到回应。</p>
<h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程：对正在运行中的程序的抽象，操作系统最核心的概念。</p>
<p><strong>伪并发</strong>：单核或多核处理器同时执行多个进程，从而使程序更快。以非常有限的时间间隔在程序之间快速切换CPU。</p>
<p>缺点是CPU时间可能分配给下一个进程，也可能不分配给下一个进程。</p>
<h3 id="进程模型"><a href="#进程模型" class="headerlink" title="进程模型"></a>进程模型</h3><p>计算机上运行的软件包括操作系统，被组织为若干<strong>顺序进程</strong> </p>
<p>进程包括：程序计数器、寄存器、变量的当前值</p>
<p>在进程不断切换的过程中，程序计数器也在不同的变化</p>
<img src="/posts/image-20220530113613610.png" alt="image-20220530113613610" style="zoom:67%;">

<p>任何一个给定的瞬间仅有一个进程真正运行</p>
<p>一个CPU只能真正一次运行一个进程的时候，即使有2个核（或CPU），每一个核也只能一次运行一个线程。</p>
<h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><ul>
<li>系统初始化（init)</li>
<li>正在运行的程序执行了创建进程的系统调用（比如fork）</li>
<li>用户请求创建一个新进程</li>
<li>初始化一个批处理工作</li>
</ul>
<h4 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h4><p>前台进程：同用户进行交互并替他们完成工作的进程</p>
<p>守护进程：进程运行在后台用来处理一些活动如Email、web网页、打印等</p>
<p>UNIX中，ps程序可以列出正在运行的进程，Windows中使用任务管理器</p>
<h4 id="系统调用创建"><a href="#系统调用创建" class="headerlink" title="系统调用创建"></a>系统调用创建</h4><p>一个正在运行的进程会发出系统调用，用来创建一个或多个新进程来帮助其完成工作。</p>
<p>多处理器中，每个进程运行在不同的CPU上可以使工作更快。</p>
<p>UNIX中，仅有一个系统调用可以创建一个新进程：<strong>fork</strong> ，该调用会创建一个与调用进程相关的副本。</p>
<h4 id="用户请求创建"><a href="#用户请求创建" class="headerlink" title="用户请求创建"></a>用户请求创建</h4><p>交互式系统中，输入一个命令或双击图标可以启动程序，这些操作可以选择开启一个新的进程。</p>
<p>新进程将接管启动它的窗口，每个窗口都可以运行进程。</p>
<h3 id="批处理创建"><a href="#批处理创建" class="headerlink" title="批处理创建"></a>批处理创建</h3><p>大型机的批处理系统</p>
<p>用户提交批处理作业，当操作系统决定它有资源来运行另一个任务时，将创建一个新进程并从其中的输入队列中运行下一个作业。</p>
<h3 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h3><ul>
<li>正常退出（自愿的）</li>
<li>错误退出（自愿的）</li>
<li>严重错误（非自愿的）</li>
<li>被其他进程杀死（非自愿的）</li>
</ul>
<h4 id="正常退出"><a href="#正常退出" class="headerlink" title="正常退出"></a>正常退出</h4><p>多数进程是由于完成了工作而终止</p>
<p>UNIX调用是exit。</p>
<h4 id="错误退出"><a href="#错误退出" class="headerlink" title="错误退出"></a>错误退出</h4><p>例如编译foo.c 但是该文件不存在，编译器会发出声明并退出。</p>
<p>通常会弹出对话框告知用户发生系统错误</p>
<h4 id="严重错误"><a href="#严重错误" class="headerlink" title="严重错误"></a>严重错误</h4><p>通常由于程序中的错误导致。例如，执行了一条非法指令，引用不存在的内存，除数为0等。</p>
<p>UNIX中，这类错误，进程会收到信号（中断），而不是在这类错误出现时直接终止进程</p>
<h4 id="被其他进程杀死"><a href="#被其他进程杀死" class="headerlink" title="被其他进程杀死"></a>被其他进程杀死</h4><p>UNIX中调用kill，某个进程执行系统调用告诉操作系统杀死某个进程。</p>
<h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3><p>每个进程是一个独立的实体，有其自己的程序计数器和内部状态。</p>
<p>进程之间需要相互帮助，例如，一个进程的结果可以作为另一个进程的输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat chapter1 chapter2 chapter3 | grep tree</span><br></pre></td></tr></table></figure>

<p>第一个进程cat，将三个文件级联并输出。</p>
<p>第二个进程grep，从输入中选取包含有关键字tree的内容。</p>
<p>可能出现grep准备就绪开始执行，但是输入还未完成，于是必须阻塞grep进程，直到输入完毕。</p>
<p>进程状态的切换：</p>
<img src="/posts/image-20220530160754572.png" alt="image-20220530160754572" style="zoom:50%;">

<p>进程状态有三种：</p>
<ul>
<li><strong>运行态</strong>：进程实际占用CPU时间片运行时</li>
<li><strong>就绪态</strong>：可运行，但因为其他进程正在运行而处于就绪状态</li>
<li><strong>阻塞态</strong>：除非某种外部事件发生，否则进程不能运行</li>
</ul>
<p>运行态与就绪态很相似，都表示进程可运行，区别在于就绪状态没有获得CPU时间分片。</p>
<p>阻塞态与前两个不同，进程不能运行，CPU空闲时也不能运行。</p>
<p>在操作系统发现进程不能继续执行时发生转换1，某些系统执行系统调用如pause，获取一个阻塞的状态。UNIX中，当进程从管道或特殊文件（如终端）中读取没有可用的输入时，该进程自动终止。</p>
<p>转换2和3由进程调度程序引起。</p>
<p>进程等待一个外部事件发生（如从外部输入一些数据后），发生转换4；若此时没有其他进程在运行，则立即触发转换3，该进程开始运行，否则该进程处于就绪阶段，等待CPU空闲后再轮到它运行。</p>
<p><strong>操作系统最底层的就是调度程序。</strong>所有关于中断处理、启动进程和停止进程的具体细节都隐藏在调度程序中。</p>
<h3 id="进程的实现"><a href="#进程的实现" class="headerlink" title="进程的实现"></a>进程的实现</h3><p><strong>进程表</strong> 进程状态的重要信息，包括程序计数器、堆栈指针、内存分配状态、所打开文件的状态、调度信息，以及其他在进程由运行态转换到就绪态或阻塞态时所必须保存的信息，从而保证该进程随后可以再次启动，就像从未中断过一样。</p>
<p>关键字段：</p>
<ul>
<li>进程管理</li>
<li>存储管理</li>
<li>文件管理</li>
</ul>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h3><p>线程thread，线程也会有程序计数器、寄存器、堆栈。</p>
<p>进程用于把资源集中到一起，<strong>线程是CPU上调度执行的实体</strong>。</p>
<p>线程比进程创建快。</p>
<p>线程不像进程那样有较强的独立性。由于每个线程都可以访问进程地址空间的每个内存地址，因此<strong>一个线程可以读取、写入甚至擦除另一个线程的堆栈。</strong></p>
<img src="/posts/image-20220530234435504.png" alt="image-20220530234435504" style="zoom:50%;">

<p>线程的状态：运行中、阻塞、就绪和终止。线程之间的状态转换与进程之间的状态转换是一样的。</p>
<p>线程无法利用时钟中断强制让线程让出CPU。</p>
<p>线程创建：调用库函数，线程创建函数会要求指定新创建线程的名称，创建的线程通常会返回一个线程标识符，该标识符就是新线程的名字。</p>
<h3 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h3><p>主要三种实现方式</p>
<ul>
<li>在用户空间中实现线程</li>
<li>在内核空间中实现线程</li>
<li>在用户和内核空间中混合实现线程</li>
</ul>
<h4 id="在用户空间中实现线程"><a href="#在用户空间中实现线程" class="headerlink" title="在用户空间中实现线程"></a>在用户空间中实现线程</h4><p>把整个线程包放在用户空间中，内核对线程一无所知，它不知道线程的存在。</p>
<img src="/posts/image-20220531103211795.png" alt="image-20220531103211795" style="zoom:50%;">

<p>运行时系统：也叫运行时环境，提供了程序在其中运行的环境。</p>
<p>线程在运行时系统之上运行，运行时系统是管理线程过程的集合。</p>
<p>每个进程需要有其专用的线程表，用来跟踪该进程中的线程。</p>
<p>优势：</p>
<ul>
<li>启动线程比内核调用效率更高，不需要切换到内核，也不需要上下文切换，不需要对内存高速缓存进行刷新，线程调用非常便捷，因此效率高</li>
<li>允许每个进程有自己定制的调度算法，用户线程具有较好的可扩展性。</li>
</ul>
<p>劣势：</p>
<ul>
<li>阻塞系统调用问题，使用线程的一个目标是能够让线程进行阻塞调用，并且要避免被阻塞的线程影响其他线程</li>
<li>缺页中断问题，如果某个程序发生函数调用或跳转指令到了一条不在内存的指令上，会发生页面故障，而操作系统将到磁盘上取回这个丢失的指令，称为缺页故障。</li>
<li>如果一个线程开始运行，该线程所在进程中的其他线程都不能运行，单进程内部没有时钟中断，不能使用轮转调度的方式调度线程。</li>
</ul>
<h4 id="在内核空间中实现线程"><a href="#在内核空间中实现线程" class="headerlink" title="在内核空间中实现线程"></a>在内核空间中实现线程</h4><p>不需要运行时环境，每个进程中也没有线程表，在内核中会有记录系统中所有线程的线程表。某个线程希望创建新线程或撤销一个已有线程，会执行一个系统调用，完成对线程表的更新。</p>
<img src="/posts/image-20220531104923664.png" alt="image-20220531104923664" style="zoom:50%;">

<p>所有能够阻塞的调用都会通过系统调用的方式来实现，当一个线程阻塞时，内核可以进行选择，例如运行同一个进程中的另一个线程或者运行另一个进程中的一个线程。</p>
<p>内核中创建或销毁线程的开销比较大，某些系统会采用可循环利用的方式来回收线程。当某个线程被销毁时，就把他标志为不可运行的状态，但其内部结构没有收到影响，稍后在创建一个新线程时，就会重新启用旧线程，标志为可用状态。</p>
<h3 id="混合实现"><a href="#混合实现" class="headerlink" title="混合实现"></a>混合实现</h3><p>内核级线程，将用户级线程与某些或全部内核线程多路复用起来。</p>
<img src="/posts/image-20220531115650409.png" alt="image-20220531115650409" style="zoom:50%;">

<p>编程人员可以自由控制用户线程和内核线程的数量，灵活度高。内核只识别内核级线程，对其进行调度，其中一些内核级线程会被多个用户级线程多路复用。</p>
<h2 id="进程间通信IPC"><a href="#进程间通信IPC" class="headerlink" title="进程间通信IPC"></a>进程间通信IPC</h2><p>三个问题：</p>
<ul>
<li>进程如何传递消息给其他进程</li>
<li>确保两个或多个线程之间不会相互干扰</li>
<li>数据的先后顺序问题</li>
</ul>
<h3 id="竞争条件"><a href="#竞争条件" class="headerlink" title="竞争条件"></a>竞争条件</h3><p>存在共享资源、共享文件、共享内存</p>
<p>两个或多个线程同时对一共享数据进行修改，从而影响程序运行的正确性。</p>
<p>如何避免：</p>
<p><strong>禁止一个或多个进程在同一时刻对共享资源（包括共享文件、共享内存等）进行读写。</strong></p>
<p>需要<strong>互斥条件</strong>。</p>
<h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><p>临界区（临界区域）：对共享内存进行访问的程序片。</p>
<p>使两个不同进程不可能同时处于临界区，就能避免竞争条件。</p>
<p>使用临界区的互斥</p>
<img src="/posts/image-20220531121115455.png" alt="image-20220531121115455" style="zoom:50%;">

<h3 id="忙等互斥"><a href="#忙等互斥" class="headerlink" title="忙等互斥"></a>忙等互斥</h3><h4 id="屏蔽中断"><a href="#屏蔽中断" class="headerlink" title="屏蔽中断"></a>屏蔽中断</h4><p>单核处理器，每个进程在进入临界区后立即<strong>屏蔽所有中断</strong>，并在离开临界区之前重新启用他们。屏蔽中断后CPU不会切换到其他进程。一旦某个进程屏蔽中断后，就可以检查和修改共享内存，而不担心其他进程介入访问共享数据。</p>
<p>屏蔽中断对于操作系统本身是一种有用的技术，但是对于用户线程来说，屏蔽中断不是一项通用的互斥机制。</p>
<h4 id="锁变量"><a href="#锁变量" class="headerlink" title="锁变量"></a>锁变量</h4><p>考虑有单个共享的锁变量，初始值为0。当一个线程想要进入关键区域时，会首先查看锁的值是否为0，如果锁的值为0，进程会把它设置为1并让进程进入关键区域；如果锁的状态为1，进程会等待直到锁变量的值为0。</p>
<p>锁变量值为0，表示没有线程进入关键区域，如果为1，表示有进程在关键区域内。</p>
<img src="/posts/image-20220606180447319.png" alt="image-20220606180447319" style="zoom:50%;">

<p>会发生竞争条件，临界区可能会有两个进程同时运行，set-before-check 不是一种原子性操作。</p>
<h4 id="严格轮询法"><a href="#严格轮询法" class="headerlink" title="严格轮询法"></a>严格轮询法</h4><p>先抛出一段代码，用c语言编写。</p>
<p>进程0的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(TRUE)&#123;</span><br><span class="line">	<span class="keyword">while</span>(turn != <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">/* 进入关键区域*/</span> </span><br><span class="line"> 		critical_region();</span><br><span class="line"> 		turn = <span class="number">1</span>;</span><br><span class="line">		<span class="comment">/* 离开关键区域*/</span> </span><br><span class="line"> 		noncritical_region();</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进程1的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(TRUE)&#123;</span><br><span class="line">	<span class="keyword">while</span>(turn != <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">/* 进入关键区域*/</span> </span><br><span class="line"> 		critical_region();</span><br><span class="line"> 		turn = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">/* 离开关键区域*/</span> </span><br><span class="line"> 		noncritical_region();</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>变量turn初始值为0，用于记录轮到哪个进程进入临界区，并检查或更新内存。</p>
<p>忙等待：连续检查一个变量直到某个值出现为止，但是这种方式浪费CPU时间，通常应该避免。</p>
<p>只有在有理由认为等待时间是非常短的情况下，才能使用忙等待。用于忙等待的锁，，称为自旋锁。</p>
<p>可能会出现违反 <strong>位于临界区外的进程不得阻塞其他进程</strong> 的情况，不算一个好的方案。</p>
<h3 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h3><p>互斥量mutex，一些共享资源和一段代码保持互斥。</p>
<p>两种状态：解锁和加锁。</p>
<p>当一个线程（或进程）需要访问关键区域时，会调用mutex_lock进行加锁。如果互斥锁处于解锁状态（表示关键区域可用），则调用成功，并且调用线程可以自由进入关键区域。</p>
<p>如果mutex互斥量已经锁定，调用线程会阻塞直到关键区域内的线程执行完毕并且调用了mutex_unlock。如果多个线程在mutex互斥量上阻塞，将随机选择一个线程并选择一个线程并允许它获得锁。</p>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>图论基础与拓补排序</title>
    <url>/posts/75bf15f1.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="图论基础"><a href="#图论基础" class="headerlink" title="图论基础"></a>图论基础</h2><h3 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h3><p>二元组G = &lt;V, E&gt;, V节点集，E边集；</p>
<p>节点的度：与该节点相关联的边数</p>
<p>分为：有向图、无向图</p>
<h3 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h3><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><p>一个一维数组存储图中节点的信息，一个二维数组存储图中节点之间的邻接关系。</p>
<p><strong>无向图：</strong></p>
<img src="/posts/image-20220520174528197.png" alt="image-20220520174528197" style="zoom:80%;">

<p>特点：</p>
<ul>
<li><p>无向图的邻接矩阵是<strong>对称矩阵，并且是唯一的</strong>。</p>
</li>
<li><p>第i行或第i列非零元素的个数正好是第i个节点的度。上图中的邻接矩阵，第3列非零元素的个数为2，说明第3个节点c的度为2。</p>
</li>
</ul>
<p><strong>有向图：</strong></p>
<p>以尖括号&lt;vi, vj&gt;表示的是有序对，以圆括号(vi ,vj)表示的是无序对。</p>
<p>有向图的邻接矩阵不一定是对称的</p>
<img src="/posts/image-20220520174937549.png" alt="image-20220520174937549" style="zoom:80%;">

<p>特点：</p>
<ul>
<li>有向图的邻接矩阵<strong>不一定是对称</strong>的。</li>
<li><strong>第i行非零元素的个数正好是第i个节点的出度，第i列非零元素的个数正好是第i个节点的入度。</strong>上图中的邻接矩阵，第3行非零元素的个数为2，第3列非零元素的个数也为2，说明第3个节点c的出度和入度均为2。</li>
</ul>
<p><strong>网（带权图）：</strong></p>
<img src="/posts/image-20220520175300124.png" alt="image-20220520175300124" style="zoom:80%;">

<p><strong>邻接矩阵的优点：</strong></p>
<ul>
<li><p>快速判断在两节点之间是否有边。在图中，<code>Edge[i][j]=1</code>，表示有边；<code>Edge[i][j]=0</code>，表示无边。在网中，<code>Edge[i][j]=∞</code>，表示无边，否则表示有边。时间复杂度为O (1)。</p>
</li>
<li><p>方便计算各节点的度。在无向图中，邻接矩阵第i行元素之和就是节点i的度；在有向图中，第i行元素之和就是节点i的出度，第i列元素之和就是节点i的入度。时间复杂度为O(n)。</p>
</li>
</ul>
<p><strong>邻接矩阵的缺点：</strong></p>
<ul>
<li><p>不便于增删节点。增删节点时，需要改变邻接矩阵的大小，效率较低。</p>
</li>
<li><p>不便于访问所有邻接点。访问第i个节点的所有邻接点时，需要访问第i行的所有元素，时间复杂度为O(n)。访问所有节点的邻接点，时间复杂度为O(n^2)。</p>
</li>
<li><p>空间复杂度高，为O(n^2)。</p>
</li>
</ul>
<h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><p>邻接表是图的一种链式存储方法，其数据结构包括两部分：节点和邻接点。</p>
<ol>
<li>无向图</li>
</ol>
<p>一个节点的所有邻接点构成一个单链表。</p>
<p><img src="/20220520/image-20220520175923798.png" alt="image-20220520175923798"></p>
<p>无向图特点：</p>
<ul>
<li><p>如果无向图有n个节点、e条边，则节点表有n个节点，邻接点表有2e个节点。</p>
</li>
<li><p>节点的度为该节点后面单链表中的节点数。</p>
</li>
</ul>
<ol start="2">
<li>有向图</li>
</ol>
<p><img src="/20220520/image-20220520180303332.png" alt="image-20220520180303332"></p>
<p>对有向图中节点的邻接点，只看该节点的出边（出弧）。</p>
<p>有向图特点：</p>
<ul>
<li><p>如果有向图有n个节点、e条边，则节点表有n个节点，邻接点表有e个节点。</p>
</li>
<li><p>节点的出度为该节点后面单链表中的节点数。</p>
</li>
</ul>
<p>在有向图邻接表中很<strong>容易找到节点的出度</strong>，但是<strong>找入度很难，需要遍历所有邻接点表中的节点</strong>，查找到<strong>该节点出现了多少次，入度就是多少</strong>。</p>
<h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><p>参考多叉树，多叉树的遍历框架如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 多叉树遍历框架 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">for</span> (TreeNode* child : root -&gt; children) &#123;</span><br><span class="line">		<span class="built_in">traverse</span>(child);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图和多叉树最⼤的区别是，图是可能包含环的，你从图的某⼀个节点开始遍历，有可能⾛了⼀圈⼜回到这个 </p>
<p>节点。 </p>
<p>因此，遍历需要一个<code>visited</code>辅助数组，不走重复的节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录被遍历过的节点</span></span><br><span class="line">vector&lt;<span class="keyword">bool</span>&gt; visited;</span><br><span class="line"><span class="comment">// 记录从起点到当前节点的路径</span></span><br><span class="line">vector&lt;<span class="keyword">bool</span>&gt; onPath;</span><br><span class="line"><span class="comment">/* 图遍历框架 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(Graph graph, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (visited[s]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 经过节点 s，标记为已遍历</span></span><br><span class="line">    visited[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 做选择：标记节点 s 在路径上</span></span><br><span class="line">    onPath[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> neighbor : graph.<span class="built_in">neighbors</span>(s)) &#123;</span><br><span class="line">        <span class="built_in">traverse</span>(graph, neighbor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 撤销选择：节点 s 离开路径</span></span><br><span class="line">    onPath[s] = <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于图的遍历，应该把<code>onPath</code>的操作放到for循环外⾯，否则会漏掉记录起始点的遍历。</p>
<p>如果图中不含有环，可以把<code>visited</code>数组省略。</p>
<p><a href="https://leetcode.cn/problems/all-paths-from-source-to-target/">797.所有可能路径</a></p>
<p>题目描述： </p>
<p>给你一个有 n 个节点的 有向无环图（DAG），请你找出所有从节点 0 到节点 n-1 的路径并输出（不要求按特定顺序） <code>graph[i]</code>是一个从节点 i 可以访问的所有节点的列表（即从节点 i 到节点 <code>graph[i][j]</code>存在一条有向边）。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">输入：graph = <span class="string">[[1,2],[3],[3],[]]</span></span><br><span class="line">输出：<span class="string">[[0,1,3],[0,2,3]]</span></span><br><span class="line">解释：有两条路径 <span class="number">0</span> -&gt; <span class="number">1</span> -&gt; <span class="number">3</span> 和 <span class="number">0</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>有向无环图，以0为起点开始遍历，同时记录走过的路径，当遍历到终点时将路径记录下来。</p>
<p>可以不使用visited数组辅助。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res; <span class="comment">//记录所有的路径</span></span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">allPathsSourceTarget</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph) &#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; path; <span class="comment">//维护递归过程中经过的路径</span></span><br><span class="line">    <span class="built_in">tranverse</span>(graph, path, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//图的遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tranverse</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph, vector&lt;<span class="keyword">int</span>&gt;&amp; path, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//添加节点index到路径</span></span><br><span class="line">    path.<span class="built_in">push_back</span>(index);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n = graph.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (index == n - <span class="number">1</span>) &#123; </span><br><span class="line">        <span class="comment">//到达终点</span></span><br><span class="line">        res.<span class="built_in">push_back</span>(path);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//递归每个相邻节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : graph[index]) &#123;</span><br><span class="line">        <span class="built_in">tranverse</span>(graph, path, v);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//从路径移除节点index</span></span><br><span class="line">    path.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断图是否有环（图的遍历）"><a href="#判断图是否有环（图的遍历）" class="headerlink" title="判断图是否有环（图的遍历）"></a>判断图是否有环（图的遍历）</h2><p><a href="https://leetcode.cn/problems/course-schedule/">207.课程表</a></p>
<p>存在依赖问题，⾸先把问题转化成「有向图」这种数据结构，<strong>只要图中存在环，那就说明存在循环依赖</strong>。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">输入：numCourses = <span class="number">2</span>, prerequisites = <span class="string">[[1,0]]</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：总共有 <span class="number">2</span> 门课程。学习课程 <span class="number">1</span> 之前，你需要完成课程 <span class="number">0</span> 。这是可能的。</span><br><span class="line"></span><br><span class="line">输入：numCourses = <span class="number">2</span>, prerequisites = <span class="string">[[1,0],[0,1]]</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：总共有 <span class="number">2</span> 门课程。学习课程 <span class="number">1</span> 之前，你需要先完成​课程 <span class="number">0</span> ；并且学习课程 <span class="number">0</span> 之前，你还应先完成课程 <span class="number">1</span> 。这是不可能的。</span><br></pre></td></tr></table></figure>

<p><strong>graph[index]</strong> 是⼀个列表，存储着节点 index 所指向的节点。 </p>
<p>先建图 + 遍历图判断是否存在环</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> hasCycle = <span class="number">0</span>; <span class="comment">// 记录图中是否有环</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">visited</span><span class="params">(numCourses, <span class="number">0</span>)</span></span>; <span class="comment">//防止重复遍历同一节点</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">path</span><span class="params">(numCourses, <span class="number">0</span>)</span></span>; <span class="comment">//记录当前走过的路径</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; graph = <span class="built_in">buildGraph</span>(numCourses, prerequisites);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        <span class="comment">// 遍历图中的所有节点</span></span><br><span class="line">        <span class="built_in">tranverse</span>(graph, visited,path, i, hasCycle);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 只要没有循环依赖可以完成所有课程</span></span><br><span class="line">    <span class="keyword">return</span> !hasCycle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建立图的邻接表</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">buildGraph</span>(<span class="keyword">int</span> numCourses, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites) &#123;</span><br><span class="line">    <span class="comment">//图中共有numCourses个节点</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">graph</span>(numCourses);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : prerequisites) &#123;</span><br><span class="line">        <span class="keyword">int</span> from = v[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> to  = v[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 修完课程 from 才能修课程 to</span></span><br><span class="line">		<span class="comment">// 在图中添加⼀条从 from 指向 to 的有向边</span></span><br><span class="line">        graph[from].<span class="built_in">push_back</span>(to);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图遍历函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tranverse</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph, vector&lt;<span class="keyword">bool</span>&gt;&amp; visited,vector&lt;<span class="keyword">bool</span>&gt;&amp; path, <span class="keyword">int</span> index, <span class="keyword">bool</span>&amp; hasCycle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (path[index]) &#123; <span class="comment">//如果发现Path[index] 已经被标记说明出现了环</span></span><br><span class="line">        hasCycle = <span class="literal">true</span>; <span class="comment">//发现环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (visited[index] || hasCycle) &#123; </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//将节点index标记为已遍历</span></span><br><span class="line">    visited[index] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//开始遍历节点index</span></span><br><span class="line">    path[index] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : graph[index]) &#123;</span><br><span class="line">        <span class="built_in">tranverse</span>(graph, visited,path, v, hasCycle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//节点index遍历完成</span></span><br><span class="line">    path[index] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拓补排序"><a href="#拓补排序" class="headerlink" title="拓补排序"></a>拓补排序</h2><p><a href="https://leetcode.cn/problems/course-schedule-ii/submissions/">210.课程表II</a></p>
<p>返回你为了学完所有课程所安排的学习顺序。可能会有多个正确的顺序，你只要返回 <strong>任意一种</strong> 就可以了。如果不可能完成所有课程，返回 <strong>一个空数组</strong> 。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：numCourses = 2, prerequisites = <span class="comment">[<span class="comment">[1,0]</span>]</span></span><br><span class="line">输出：<span class="comment">[0,1]</span></span><br><span class="line">解释：总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 <span class="comment">[0,1]</span> 。</span><br><span class="line"></span><br><span class="line">输入：numCourses = 4, prerequisites = <span class="comment">[<span class="comment">[1,0]</span>,<span class="comment">[2,0]</span>,<span class="comment">[3,1]</span>,<span class="comment">[3,2]</span>]</span></span><br><span class="line">输出：<span class="comment">[0,2,1,3]</span></span><br><span class="line">解释：总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。</span><br><span class="line">因此，一个正确的课程顺序是 <span class="comment">[0,1,2,3]</span> 。另一个正确的排序是 <span class="comment">[0,2,1,3]</span> 。</span><br><span class="line"></span><br><span class="line">输入：numCourses = 1, prerequisites = <span class="comment">[]</span></span><br><span class="line">输出：<span class="comment">[0]</span></span><br></pre></td></tr></table></figure>

<p>拓扑排序（Topological Sorting）</p>
<p>直观地说就是，让你把⼀幅图「拉平」，⽽且这个「拉平」的图⾥⾯，所有箭头⽅向都是⼀致的。</p>
<p>如果⼀幅有向图中存在环，是⽆法进⾏拓扑排序的，因为肯定做不到所有箭头⽅向⼀致；反过来，如果⼀幅图是<strong>「有向⽆环图」</strong>，那么<strong>⼀定可以进⾏拓扑排序</strong>。 </p>
<p><strong>将后序遍历的结果进⾏反转，就是拓扑排序的结果。</strong></p>
<p>先对图进行DFS遍历，记录后序遍历结果，最后将后序遍历结果反转。</p>
<p>进⾏<strong>拓扑排序之前要进⾏环检测</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; postorder; <span class="comment">// 记录后序遍历结果</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">findOrder</span><span class="params">(<span class="keyword">int</span> numCourses, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> hasCycle = <span class="literal">false</span>; <span class="comment">// 记录是否存在环</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">visited</span><span class="params">(numCourses, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">path</span><span class="params">(numCourses, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 建立图</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; graph = <span class="built_in">buildGraph</span>(numCourses, prerequisites);</span><br><span class="line">    <span class="comment">// 遍历图</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">        <span class="built_in">tranverse</span>(graph, visited,path, i, hasCycle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有环图⽆法进⾏拓扑排序</span></span><br><span class="line">    <span class="keyword">if</span> (hasCycle) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    <span class="comment">// 逆后序遍历结果即为拓扑排序结果</span></span><br><span class="line">    <span class="built_in">reverse</span>(postorder.<span class="built_in">begin</span>(), postorder.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> postorder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立图的邻接表</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">buildGraph</span>(<span class="keyword">int</span> numCourses, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites) &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">graph</span>(numCourses);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : prerequisites) &#123;</span><br><span class="line">        <span class="keyword">int</span> from = v[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> to  = v[<span class="number">0</span>];</span><br><span class="line">        graph[from].<span class="built_in">push_back</span>(to);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图遍历函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tranverse</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph, vector&lt;<span class="keyword">bool</span>&gt;&amp; visited,vector&lt;<span class="keyword">bool</span>&gt;&amp; path, <span class="keyword">int</span> index, <span class="keyword">bool</span>&amp; hasCycle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (path[index]) &#123;</span><br><span class="line">        hasCycle = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (visited[index] || hasCycle) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 前序遍历位置</span></span><br><span class="line">    visited[index] = <span class="literal">true</span>;</span><br><span class="line">    path[index] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : graph[index]) &#123;</span><br><span class="line">        <span class="built_in">tranverse</span>(graph, visited, path, v, hasCycle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后序遍历位置</span></span><br><span class="line">    postorder.<span class="built_in">push_back</span>(index);</span><br><span class="line">    path[index] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><p>⼆分图的顶点集可分割为两个互不相交的⼦集，图中每条边依附的两个顶点都分属于这两个⼦集，且 </p>
<p>两个⼦集内的顶点不相邻。</p>
<p>给出一副图，用两种颜色将图中的所有顶点着色，且使得任意一条边的两个端点的颜色都不相同。</p>
<img src="/posts/image-20220520214203061.png" alt="image-20220520214203061" style="zoom:50%;">

<p>二分图的判定：</p>
<p>遍历⼀遍图，⼀边遍历⼀边染⾊，看看能不能⽤两种颜⾊给所有节点染⾊，且相邻节点的颜⾊都不相同。 </p>
<p><strong>图的遍历框架1：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录被遍历过的节点</span></span><br><span class="line">vector&lt;<span class="keyword">bool</span>&gt; visited;</span><br><span class="line"><span class="comment">// 记录从起点到当前节点的路径</span></span><br><span class="line">vector&lt;<span class="keyword">bool</span>&gt; onPath;</span><br><span class="line"><span class="comment">/* 图遍历框架 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(Graph graph, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (visited[s]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 经过节点 s，标记为已遍历</span></span><br><span class="line">    visited[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 做选择：标记节点 s 在路径上</span></span><br><span class="line">    onPath[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> neighbor : graph.<span class="built_in">neighbors</span>(s)) &#123;</span><br><span class="line">        <span class="built_in">traverse</span>(graph, neighbor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 撤销选择：节点 s 离开路径</span></span><br><span class="line">    onPath[s] = <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>图的遍历框架2：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">bool</span>&gt; visited;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(Graph graph, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 前序遍历位置，标记节点 v 已访问</span></span><br><span class="line">    visited[s] = <span class="literal">true</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> neighbor : graph.<span class="built_in">neighbors</span>(v)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">            <span class="comment">// 只遍历没标记过的相邻节点</span></span><br><span class="line">            <span class="built_in">traverse</span>(graph, neighbor);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种写法把对 visited 的判断放到递归调⽤之前，和之前的写法唯⼀的不同就是，你需要保证调⽤</p>
<p>traverse(v) 的时候，visited[v] == false。 </p>
<p><a href="https://leetcode.cn/problems/is-graph-bipartite/">785.判断⼆分图</a></p>
<p>输⼊⼀个 邻接表 表示⼀幅⽆向图，请你判断这幅图是否是⼆分图。 </p>
<img src="/posts/image-20220520215456736.png" alt="image-20220520215456736" style="zoom:80%;">

<p>解析：</p>
<p>遍历图，相邻节点涂不同颜色，额外使用一个color数组记录每个节点的颜色。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> ok = <span class="literal">true</span>; <span class="comment">// 记录图是否符合⼆分图性质</span></span><br><span class="line">vector&lt;<span class="keyword">bool</span>&gt; color; <span class="comment">// 记录图中节点的颜⾊，false 和 true 代表两种不同颜⾊</span></span><br><span class="line">vector&lt;<span class="keyword">bool</span>&gt; visited; <span class="comment">// 记录图中节点是否被访问过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数，输⼊邻接表，判断是否是⼆分图</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBipartite</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = graph.<span class="built_in">size</span>();</span><br><span class="line">    color.<span class="built_in">resize</span>(n, <span class="number">0</span>);</span><br><span class="line">    visited.<span class="built_in">resize</span>(n, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 因为图不⼀定是联通的，可能存在多个⼦图</span></span><br><span class="line"> 	<span class="comment">// 所以要把每个节点都作为起点进⾏⼀次遍历</span></span><br><span class="line"> 	<span class="comment">// 如果发现任何⼀个⼦图不是⼆分图，整幅图都不算⼆分图</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            <span class="built_in">tranverse</span>(graph, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DFS 遍历框架</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tranverse</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果已经确定不是⼆分图了，就不⽤浪费时间再递归遍历了</span></span><br><span class="line"> 	<span class="keyword">if</span> (!ok) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    visited[v] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> s : graph[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[s]) &#123;</span><br><span class="line">            <span class="comment">// 相邻节点 s 没有被访问过</span></span><br><span class="line"> 			<span class="comment">// 那么应该给节点 s 涂上和节点 v 不同的颜⾊</span></span><br><span class="line"> 			color[s] = !color[v];</span><br><span class="line">            <span class="comment">// 继续遍历 s</span></span><br><span class="line">            <span class="built_in">tranverse</span>(graph, s);</span><br><span class="line">            <span class="comment">//bfs(graph, s);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 相邻节点 s 已经被访问过</span></span><br><span class="line"> 			<span class="comment">// 根据 v 和 s 的颜⾊判断是否是⼆分图</span></span><br><span class="line">            <span class="keyword">if</span> (color[s] == color[v]) &#123;</span><br><span class="line">                <span class="comment">// 若相同，则此图不是⼆分图</span></span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS遍历</span></span><br><span class="line"><span class="comment">// 从 start 节点开始进⾏ BFS 遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    visited[start] = <span class="literal">true</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; ok) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> w : graph[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[w]) &#123;</span><br><span class="line">                color[w] = !color[v];</span><br><span class="line">                visited[w] = <span class="literal">true</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(w);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (color[w] == color[v]) &#123;</span><br><span class="line">                    <span class="comment">// 若相同，则此图不是⼆分图</span></span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/problems/possible-bipartition/">886. 可能的二分法</a></p>
<p>给定一组 n 人（编号为 1, 2, …, n）， 我们想把每个人分进任意大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。</p>
<p>给定整数 n 和数组 dislikes ，其中 dislikes[i] = [ai, bi] ，表示不允许将编号为 ai 和  bi的人归入同一组。当可以用这种方法将所有人分进两组时，返回 true；否则返回 false。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, dislikes = <span class="string">[[1,2],[1,3],[2,4]]</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：group1 [<span class="number">1</span>,<span class="number">4</span>], group2 [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">3</span>, dislikes = <span class="string">[[1,2],[1,3],[2,3]]</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">5</span>, dislikes = <span class="string">[[1,2],[2,3],[3,4],[4,5],[1,5]]</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>二分图的判定，每个人看作节点，相互关系看作边，双色图，按照颜色分成两组。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> ok = <span class="literal">true</span>; <span class="comment">// 记录图是否符合⼆分图性质</span></span><br><span class="line">vector&lt;<span class="keyword">bool</span>&gt; color; <span class="comment">// 记录图中节点的颜⾊，false 和 true 代表两种不同颜⾊</span></span><br><span class="line">vector&lt;<span class="keyword">bool</span>&gt; visited; <span class="comment">// 记录图中节点是否被访问过</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">possibleBipartition</span><span class="params">(<span class="keyword">int</span> n, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; dislikes)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 图节点编号从 1 开始</span></span><br><span class="line">    color.<span class="built_in">resize</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    visited.<span class="built_in">resize</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 转化成邻接表表示图结构</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; graph = <span class="built_in">buildGraph</span>(n, dislikes);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            <span class="built_in">tranverse</span>(graph, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建图函数</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">buildGraph</span>(<span class="keyword">int</span> n, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; dislikes) &#123;</span><br><span class="line">    <span class="comment">// 图节点编号为 1...n</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">graph</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> edge : dislikes) &#123;</span><br><span class="line">        <span class="keyword">int</span> from = edge[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> to = edge[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 「⽆向图」相当于「双向图」</span></span><br><span class="line">        graph[from].<span class="built_in">push_back</span>(to);</span><br><span class="line">        graph[to].<span class="built_in">push_back</span>(from);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DFS 遍历框架</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tranverse</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果已经确定不是⼆分图了，就不⽤浪费时间再递归遍历了</span></span><br><span class="line"> 	<span class="keyword">if</span> (!ok) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    visited[v] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> s : graph[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[s]) &#123;</span><br><span class="line">            <span class="comment">// 相邻节点 s 没有被访问过</span></span><br><span class="line"> 			<span class="comment">// 那么应该给节点 s 涂上和节点 v 不同的颜⾊</span></span><br><span class="line"> 			color[s] = !color[v];</span><br><span class="line">            <span class="comment">// 继续遍历 s</span></span><br><span class="line">            <span class="built_in">tranverse</span>(graph, s);</span><br><span class="line">            <span class="comment">//bfs(graph, s);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 相邻节点 s 已经被访问过</span></span><br><span class="line"> 			<span class="comment">// 根据 v 和 s 的颜⾊判断是否是⼆分图</span></span><br><span class="line">            <span class="keyword">if</span> (color[s] == color[v]) &#123;</span><br><span class="line">                <span class="comment">// 若相同，则此图不是⼆分图</span></span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>刷题随笔02</title>
    <url>/posts/6832ed80.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="01-绳子覆盖最多的节点"><a href="#01-绳子覆盖最多的节点" class="headerlink" title="01 绳子覆盖最多的节点"></a>01 绳子覆盖最多的节点</h2><p>题目：</p>
<p>给定一个有序数组arr，代表坐落在X轴上的点，给定一个正数K，代表绳子的长度，返回绳子最多压中几个点？<br>即使绳子边缘处盖住点也算盖住</p>
<p>例如，<code>arr = [1, 3, 4, 7, 13, 16, 17]</code>, <code>target = 4</code>, 子数组<code>[3, 4, 7]</code>满足所有节点被覆盖</p>
<p>解析：</p>
<ol>
<li>普通解</li>
</ol>
<p>利用贪心，每一个点向前推，记录每个节点前target距离内覆盖个数最大值，一次遍历</p>
<p>小优化：数组有序，每个点向前找符合条件的节点个数，二分搜索优化，复杂度O(Nlog(N))</p>
<ol start="2">
<li>最优解</li>
</ol>
<p>双指针，L和起始位置指向0，<code>arr[R] - arr[L] &lt;= target</code>, R++向右移动；<code>arr[R] - arr[L] &gt; target</code>, L++向左移动。绳子起始边缘为L的最大覆盖节点个数，依次遍历。复杂度O(N)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//法一：贪心+二分搜索</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxPoint1</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> nearest = <span class="built_in">nearestIndex</span>(arr, i, arr[i] - target);</span><br><span class="line">        res = <span class="built_in">max</span>(res, i - nearest + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二分搜索函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nearestIndex</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> R, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index = R;</span><br><span class="line">    <span class="keyword">while</span> (L &lt; R) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = L + (R- L) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt;= value) &#123;</span><br><span class="line">            index = mid;</span><br><span class="line">            R = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//法二：贪心+双指针，滑动窗口</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxPoint1</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; n) &#123;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n &amp;&amp; arr[right] - arr[left] &lt;= target) &#123;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="built_in">max</span>(count, right - left);</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="02-两种字符最少交换次数"><a href="#02-两种字符最少交换次数" class="headerlink" title="02 两种字符最少交换次数"></a>02 两种字符最少交换次数</h2><p>题目：</p>
<p>一个数组中只有两种字符’G’和’B’，可以让所有的G都放在左侧，所有的B都放在右侧<br>或者可以让所有的G都放在右侧，所有的B都放在左侧，但是只能在<strong>相邻字符之间进行交换操作</strong>，返回至少需要交换几次</p>
<p>解析：</p>
<p>贪心，遍历遇到第一个G，移到0位置，遇到第二个G，移到位置1……，双指针</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minStep</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> step1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> gi = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//G在左边，B在右边</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">            step1 += i - gi;</span><br><span class="line">            gi++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> step2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> bi = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//G在右边，B在左边</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">            step2 += i - bi;</span><br><span class="line">            bi++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(step1,step2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="03-数组目标和为target的所有排列个数"><a href="#03-数组目标和为target的所有排列个数" class="headerlink" title="03 数组目标和为target的所有排列个数"></a>03 数组目标和为target的所有排列个数</h2><p>题目：</p>
<p>给定一个数组arr，你可以在每个数字之前决定+或者-但是必须所有数字都参与，再给定一个数target<br>请问最后算出target的方法数</p>
<p>leetcode：494</p>
<p>解析：</p>
<ol>
<li>递归暴力求解</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归暴力解</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findTargetSumWays1</span> <span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process</span>(arr, <span class="number">0</span>, target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归函数，可以自由使用arr[index...]所有的数字</span></span><br><span class="line"><span class="comment">//能够得出target这个数，方法数是多少，返回</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process1</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> index,<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == arr.<span class="built_in">size</span>()) &#123; <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">return</span> target ==<span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process1</span>(arr, index + <span class="number">1</span>, target - arr[index]) + <span class="built_in">process1</span>(arr, index + <span class="number">1</span>, target + arr[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>动态规划，记忆化搜索</li>
</ol>
<ul>
<li>假设将arr变为非负数组，前面进行加减不影响</li>
<li>非负arr累加和为sum，target &gt; sum 则不存在</li>
<li>target与sum的奇偶性不一致，不存在</li>
<li>取正集合和为P，取负集合和为N，P - N = target, p + N = sum, ==&gt; p = (sum + target) / 2,转化为取正集合和为P的组合有多少个</li>
<li>二维动态规划的空间压缩</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findTargetSumWays2</span> <span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>  n : arr) &#123;</span><br><span class="line">        sum += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; target || ((sum &amp; <span class="number">1</span>) ^ (target &amp; <span class="number">1</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">subset</span>(arr, (sum + target) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">subset</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(target + <span class="number">1</span>)</span></span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : arr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = target; i &gt;= n; i--) &#123;</span><br><span class="line">            dp[i] += dp[i - n];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="04-总体最多收入分配"><a href="#04-总体最多收入分配" class="headerlink" title="04 总体最多收入分配"></a>04 总体最多收入分配</h2><p>题目：</p>
<p>现有司机N*2人，调度中心会将所有司机平分给A、B两区域，i号司机去A可得收入为<code>income[i][0]</code>，去B可得收入为<code>income[i][1]</code>, 返回能使所有司机总收入最高的方案是多少钱?</p>
<p>解析：</p>
<ol>
<li>递归暴力 O(N^2)</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  income -&gt; N * 2 的矩阵 N是偶数！</span></span><br><span class="line"><span class="comment">// 0 [9, 13]</span></span><br><span class="line"><span class="comment">// 1 [45,60]</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxMoney1</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; income)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = income.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (N &lt; <span class="number">2</span> || (N &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//N为奇数返回0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> M = N &gt;&gt; <span class="number">1</span>; <span class="comment">//M = N / 2, 去A地区</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process1</span>(income, <span class="number">0</span>, M);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index.....所有的司机，往A和B区域分配！</span></span><br><span class="line"><span class="comment">// A区域还有rest个名额!</span></span><br><span class="line"><span class="comment">// 返回把index...司机，分配完，并且最终A和B区域同样多的情况下，index...这些司机，整体收入最大是多少！</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process1</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; income, <span class="keyword">int</span> index, <span class="keyword">int</span> rest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == income.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    <span class="comment">// 还剩下司机！</span></span><br><span class="line">    <span class="keyword">if</span> (income.<span class="built_in">size</span>() - index == rest) &#123; <span class="comment">//B区域满了</span></span><br><span class="line">        <span class="keyword">return</span> income[index][<span class="number">0</span>] + <span class="built_in">process1</span>(income, index + <span class="number">1</span>, rest - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rest == <span class="number">0</span>) &#123;	<span class="comment">//A区域满了</span></span><br><span class="line">        <span class="keyword">return</span> income[index][<span class="number">1</span>] + <span class="built_in">process1</span>(income, index + <span class="number">1</span>, rest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当前司机，可以去A，或者去B</span></span><br><span class="line">    <span class="keyword">int</span> p1 = income[index][<span class="number">0</span>] + <span class="built_in">process1</span>(income, index + <span class="number">1</span>, rest - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> p2 = income[index][<span class="number">1</span>] + <span class="built_in">process1</span>(income, index + <span class="number">1</span>, rest);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(p1, p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>动态规划</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxMoney2</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; income)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = income.length;</span><br><span class="line">    <span class="keyword">int</span> M = N &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(N + <span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(M + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= M; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (N - i == j) &#123;</span><br><span class="line">                dp[i][j] = income[i][<span class="number">0</span>] + dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][j] = income[i][<span class="number">1</span>] + dp[i + <span class="number">1</span>][j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> p1 = income[i][<span class="number">0</span>] + dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> p2 = income[i][<span class="number">1</span>] + dp[i + <span class="number">1</span>][j];</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(p1, p2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][M];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="05-含有SetAll功能的哈希表"><a href="#05-含有SetAll功能的哈希表" class="headerlink" title="05 含有SetAll功能的哈希表"></a>05 含有SetAll功能的哈希表</h2><p>题目：</p>
<p>设计有setAll功能的哈希表，put、get、setAll方法，时间复杂度O(1)</p>
<p>setAll(num), 将所有的key对应的value值改为num</p>
<p>解析：</p>
<p>加入时间戳，记录加入的时间，key -&gt; int, value -&gt; (int, long)</p>
<p>setAlltime默认无穷大，调用setAll(num)后，时间戳早于当前值的进行更新，setAlltime更新为当前时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyValue</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">		<span class="keyword">public</span> V value;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">MyValue</span><span class="params">(V v, <span class="keyword">long</span> t)</span> </span>&#123;</span><br><span class="line">			value = v;</span><br><span class="line">			time = t;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;K, MyValue&lt;V&gt;&gt; map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line">    <span class="keyword">private</span> MyValue&lt;V&gt; setAll;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        time = <span class="number">0</span>;</span><br><span class="line">        setAll = <span class="keyword">new</span> MyValue&lt;V&gt;(<span class="keyword">null</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        map.put(key, <span class="keyword">new</span> MyValue&lt;V&gt;(value, time++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAll</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">        setAll = <span class="keyword">new</span> MyValue&lt;V&gt;(value, time++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (map.get(key).time &gt; setAll.time) &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(key).value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> setAll.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="06-最长无重复字串的子串长度"><a href="#06-最长无重复字串的子串长度" class="headerlink" title="06 最长无重复字串的子串长度"></a>06 最长无重复字串的子串长度</h2><p>题目：</p>
<p>求一个字符串中，最长无重复字符子串长度</p>
<p>解析：</p>
<p>子串子数组问题，想每个<code>i</code>结尾时，满足条件的情况，无重复的子串长度<code>dp[i]</code></p>
<p>从第<code>i</code>个位置向前推影响因素：某个位置与<code>i</code>位置的字符相同，或者i-1位置向左推的距离</p>
<p>可以滑动窗口</p>
<p>也可动态规划：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//acsii取值范围0~255</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">map</span><span class="params">(<span class="number">256</span>)</span></span>;</span><br><span class="line">    <span class="comment">//map存放上次出现的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        map[i] = <span class="number">-1</span>; <span class="comment">//初始默认出现在-1位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    map[s[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">1</span>;<span class="comment">//上一个位置，向左推了多长</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        pre = <span class="built_in">min</span>(i - map[s[i]], pre + <span class="number">1</span>);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, pre);</span><br><span class="line">        map[s[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="07-差值为k的数对的最大组数"><a href="#07-差值为k的数对的最大组数" class="headerlink" title="07 差值为k的数对的最大组数"></a>07 差值为k的数对的最大组数</h2><p>题目描述：</p>
<p>给定一个数组arr，代表每个人的能力值。再给定一个非负数k，如果两个人能力差值正好为k，那么可以凑在一起比赛<br>一局比赛只有两个人，返回最多可以同时有多少场比赛</p>
<p>解析：</p>
<p>数组arr排序后，滑动窗口求解+贪心</p>
<p>暴力解：全排列寻找</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暴力解</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxPairNUm1</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process1</span>(arr, <span class="number">0</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//暴力递归函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process1</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> index, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (index == arr.<span class="built_in">size</span>()) &#123;	<span class="comment">//全排列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.<span class="built_in">size</span>(); i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] - arr[i - <span class="number">1</span>] == k) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = index; r &lt; arr.<span class="built_in">size</span>(); r++) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[index], arr[r]);</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, <span class="built_in">process1</span>(arr, index + <span class="number">1</span>, k));</span><br><span class="line">            <span class="built_in">swap</span>(arr[index], arr[r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度O(N*logN)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxPairNum2</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">0</span> || arr.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());<span class="comment">//排序，满足单调性，先满足小值的情况</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> N = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>;<span class="comment">//双指针窗口</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">usedR</span><span class="params">(N, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (L &lt; N &amp;&amp; R &lt; N) &#123;</span><br><span class="line">        <span class="keyword">if</span> (usedR[L]) &#123;</span><br><span class="line">            L++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (L &gt;= R) &#123;</span><br><span class="line">            R++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不止一个数，而且都没用过！</span></span><br><span class="line">            <span class="keyword">int</span> dis = arr[R] - arr[L];</span><br><span class="line">            <span class="keyword">if</span> (dis == k) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                usedR[R++] = <span class="literal">true</span>;</span><br><span class="line">                L++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dis &lt; k) &#123;</span><br><span class="line">                R++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                L++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="08-最多载两个人的船同时过河问题"><a href="#08-最多载两个人的船同时过河问题" class="headerlink" title="08 最多载两个人的船同时过河问题"></a>08 最多载两个人的船同时过河问题</h2><p>题目描述：</p>
<p>给定一个正数数组arr，代表若干人的体重，再给定一个正数limit，表示所有船共同拥有的载重量，每艘船最多坐两人，且不能超过载重<br>想让所有的人同时过河，并且用最好的分配方法让船尽量少，返回最少的船数<br>Leetcode链接 : <a href="https://leetcode.com/problems/boats-to-save-people/">https://leetcode.com/problems/boats-to-save-people/</a></p>
<p>解析：</p>
<p>先排序，如果arr中某个值大于limit，返回无穷大不合题意。</p>
<p>寻找&gt;=limit/2的右边界，边界右侧的值大于limit/2，两个指针指向边界左侧和右侧</p>
<p>相加和大于limit，左指针左移</p>
<p>一侧先耗尽，左侧未满足条件的数量除以2（向上取整），加上满足条件的数量，加上右侧剩余未满足条件的数量</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//法一：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numRescueBoats1</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> N = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span> (arr[N<span class="number">-1</span>] &gt; limit) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> lessR = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N <span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= limit / <span class="number">2</span>) &#123;</span><br><span class="line">            lessR = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lessR == <span class="number">-1</span>) <span class="keyword">return</span> N;</span><br><span class="line">    <span class="keyword">int</span> L = lessR, R = lessR + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> noUsed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (L &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> solved = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (R &lt; N &amp;&amp; arr[L] + arr[R] &lt;= limit) &#123;</span><br><span class="line">            R++;</span><br><span class="line">            solved++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (solved == <span class="number">0</span>) &#123;</span><br><span class="line">            noUsed++;</span><br><span class="line">            L--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L = <span class="built_in">max</span>(<span class="number">-1</span>, L - solved);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> all = lessR + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> used = all - noUsed;</span><br><span class="line">    <span class="keyword">int</span> moreUnsolved = (N - all) - used;</span><br><span class="line">    <span class="keyword">return</span> used + ((noUsed + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) + moreUnsolved;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//法二：首尾双指针</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numRescueBoats2</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> R = arr.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line">        sum = L == R ? arr[L] : arr[L] + arr[R];</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; limit) &#123;</span><br><span class="line">            R--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L++;</span><br><span class="line">            R--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="09-子数组的最大累加和"><a href="#09-子数组的最大累加和" class="headerlink" title="09 子数组的最大累加和"></a>09 子数组的最大累加和</h2><p>题目描述：</p>
<p>返回一个数组arr中，子数组最大累加和</p>
<p>解析：</p>
<p>子数组以arr[i]结尾的最大累加和，求其最大值</p>
<p><code>dp[i] = max(dp[i - 1] + arr[i], arr[i])</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 上一步，dp的值</span></span><br><span class="line">    <span class="comment">// dp[0]</span></span><br><span class="line">    <span class="keyword">int</span> pre = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> ans = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        pre = <span class="built_in">max</span>(pre + arr[i], arr[i]);</span><br><span class="line">        ans = <span class="built_in">max</span>(pre, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-分糖果问题"><a href="#10-分糖果问题" class="headerlink" title="10 分糖果问题"></a>10 分糖果问题</h2><p>题目描述：</p>
<p>老师想给孩子们分发糖果，有N个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分<br>你需要按照以下要求，帮助老师给这些孩子分发糖果：<br>每个孩子至少分配到 1 个糖果。<br>评分更高的孩子必须比他两侧的邻位孩子获得更多的糖果。<br>那么这样下来，返回老师至少需要准备多少颗糖果<br>进阶：在原来要求的基础上，增加一个要求，相邻的孩子间如果分数一样，分的糖果数必须一样，返回至少需要准备多少颗糖果</p>
<p>解析：<br>从左遍历，坡度值加一，从右遍历，坡度值加一，二者取最大值，以坡度大的为准</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">candy</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">left</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            left[i] = left[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">right</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            right[i] = right[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ans += <span class="built_in">max</span>(left[i], right[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans + n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>补充规则：相邻孩子分数一样则分的糖果数一样</p>
<p>解析：比左边大++，和左边相等不变，比左边小置1，右侧遍历同理</p>
<h2 id="11-字符串交错组成问题"><a href="#11-字符串交错组成问题" class="headerlink" title="11 字符串交错组成问题"></a>11 字符串交错组成问题</h2><p>题目描述：</p>
<p>给定三个字符串s1、s2、s3，请你帮忙验证s3是否是由s1和s2交错组成的</p>
<p>Leetcode题目：<a href="https://leetcode.com/problems/interleaving-string/">https://leetcode.com/problems/interleaving-string/</a></p>
<p>解析：</p>
<p>长度s1.size() + s2.size() != s3.size()，不成立</p>
<p>动态规划，<code>dp[i][j]</code>长度为i的s1与长度为j的s2，能否组成长度i + j的s3</p>
<p>s1长度i，下标0 ~ i-1;</p>
<p>s2长度j，下标0 ~ j-1;</p>
<p>s3长度i + j, 下标0 ~ i + j - 1</p>
<p>每个位置最后一个字符可能来着s1或s2</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isInterLeave</span><span class="params">(string s1, string s2, string s3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = s1.<span class="built_in">size</span>(), n = s2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (s3.<span class="built_in">size</span>() != m + n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, vector&lt;<span class="keyword">bool</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i - <span class="number">1</span>] != s3[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s2[j - <span class="number">1</span>] != s3[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((s1[i - <span class="number">1</span>] == s3[i + j - <span class="number">1</span>] &amp;&amp; dp[i - <span class="number">1</span>][j]) || (s2[j - <span class="number">1</span>] == s3[i + j - <span class="number">1</span>] &amp;&amp; dp[i][j - <span class="number">1</span>])) &#123;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="12-求相等子树的数量"><a href="#12-求相等子树的数量" class="headerlink" title="12 求相等子树的数量"></a>12 求相等子树的数量</h2><p>题目描述：</p>
<p>如果一个节点X，它左树结构和右树结构完全一样，那么我们说以X为头的树是相等树，给定一棵二叉树的头节点head，返回head整棵树上有多少棵相等子树</p>
<p>解析：<br>递归，head左子树的相等子树+head右子树的相等子树+head是否为相等子树</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 时间复杂度O(N * logN)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sameNumber1</span><span class="params">(TreeNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sameNumber1</span>(head -&gt; left) + <span class="built_in">sameNumber1</span>(head -&gt; right) + (<span class="built_in">same</span>(head-&gt;left, head -&gt; right) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(TreeNode* h1, TreeNode* h2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h1 == <span class="literal">nullptr</span> ^ h2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (h1 == <span class="literal">nullptr</span> &amp;&amp; h2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//两个都不为空</span></span><br><span class="line">    <span class="keyword">return</span> h1 -&gt; val == h2 -&gt; val &amp;&amp; <span class="built_in">same</span>(h1 -&gt; left, h2 -&gt; left) &amp;&amp; <span class="built_in">same</span>(h1 -&gt; right, h2 -&gt; right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>刷题随笔01</title>
    <url>/posts/bba1d2c5.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h1 id="01-复杂度、排序与二分法"><a href="#01-复杂度、排序与二分法" class="headerlink" title="01 复杂度、排序与二分法"></a>01 复杂度、排序与二分法</h1><h2 id="十大排序"><a href="#十大排序" class="headerlink" title="十大排序"></a>十大排序</h2><p>1、稳定排序：如果 a 原本在 b 的前面，且 a == b，排序之后 a 仍然在 b 的前面，则为稳定排序。</p>
<p>2、非稳定排序：如果 a 原本在 b 的前面，且 a == b，排序之后 a 可能不在 b 的前面，则为非稳定排序。</p>
<p>3、原地排序：原地排序就是指在排序过程中不申请多余的存储空间，只利用原来存储待排数据的存储空间进行比较和交换的数据排序。</p>
<p>4、非原地排序：需要利用额外的数组来辅助排序。</p>
<p>5、时间复杂度：一个算法执行所消耗的时间。</p>
<p>6、空间复杂度：运行完一个算法所需的内存大小</p>
<h3 id="十大排序一图总览"><a href="#十大排序一图总览" class="headerlink" title="十大排序一图总览"></a>十大排序一图总览</h3><img src="/posts/202205072325169.png" alt="img" style="zoom:80%;">

<h3 id="稳定排序"><a href="#稳定排序" class="headerlink" title="稳定排序"></a>稳定排序</h3><ul>
<li>冒泡排序（bubble sort） — O(n2) </li>
<li>插入排序 （insertion sort）— O(n2) </li>
<li>归并排序 （merge sort）— O(n log n)</li>
</ul>
<h3 id="非稳定性排序"><a href="#非稳定性排序" class="headerlink" title="非稳定性排序"></a>非稳定性排序</h3><ul>
<li>选择排序 （selection sort）— O(n2) </li>
<li>希尔排序 （shell sort）— O(n log n) </li>
<li>堆排序 （heapsort）— O(n log n) </li>
<li>快速排序 （quicksort）— O(n log n)</li>
</ul>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>数组索引0 ~ N-1，找到最小值，放到0位置上；</p>
<p>依次向后遍历，在i ~ N-1中，找到最小值，放到i位置上。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="comment">//在i ~ n-1上找到最小值的下标</span></span><br><span class="line">            minIndex = arr[j] &lt; arr[minIdex] ? j : minIdex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(arr[i], arr[minIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>0-1，1-2，2-3…依次两两交换，大的交换到后边，每一轮的最大值到最后。</p>
<p>[3 2 5 1 6 4] ==&gt; [2 3 1 5 4 6] ==&gt; [2 1 3 4 5 6] ==&gt; [1 2 3 4 5 6]</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 0 ~ N-1</span></span><br><span class="line">    <span class="comment">// 0 ~ N-2</span></span><br><span class="line">    <span class="comment">// 0 ~ N-3</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> e = arr.<span class="built_in">size</span>() - <span class="number">1</span>; e &gt; <span class="number">0</span>; e--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(arr[i], arr[i + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>0 ~ 0，0 ~ 1 , 0 ~ 2, … 0 ~ n -1，依次变得有序。第i轮，若第i个数小于前一个数，二者交换，直到i大于等于前一个数。</p>
<p>类似与摸牌后，每次进行插入排序。</p>
<p>初始数据状况会影响时间复杂度。最差O(n ^ 2)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//0~0 有序的</span></span><br><span class="line">    <span class="comment">//0~i 变为有序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; arr[j + <span class="number">1</span>]; j--) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[j], arr[j + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>经常在有序数组上，使用二分搜索，但是有序不是必要条件。</p>
<p><strong>只要能正确构建左右两侧的逻辑，就可以使用二分。</strong></p>
<ul>
<li>一个有序数组，找某个数是否存在</li>
<li>一个有序数组，找 &gt;= 某个数的最左侧位置</li>
<li>一个有序数组，找 &lt;= 某个数的最右侧位置</li>
<li>局部最小值问题</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">exist</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; sortArr, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sortArr.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">0</span>, R = sortArr.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//L...R</span></span><br><span class="line">    <span class="keyword">while</span> (L &lt; R) &#123; <span class="comment">//L..R 至少两个数</span></span><br><span class="line">        mid = L + ((R - L) &gt;&gt; <span class="number">1</span>); <span class="comment">//mid = (L + R) / 2</span></span><br><span class="line">        <span class="keyword">if</span> (sortArr[mid] == num) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sortArr[mid] &gt; num) &#123;</span><br><span class="line">            R = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sortArr[L] == num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>搜索&gt;= 某个数的最左侧位置：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nearestIndex</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">0</span>, R = arr.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>;<span class="comment">//记录最左的对号</span></span><br><span class="line">    <span class="keyword">while</span> (L &lt;= R) &#123; <span class="comment">//至少一个数的时候</span></span><br><span class="line">        <span class="keyword">int</span> mid = L + ((R - L) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt;= value) &#123;</span><br><span class="line">            index = mid;</span><br><span class="line">            R = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无序数组，任意两个相邻的数不相等，返回任意一个局部最小值（比左右相邻的数小）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLessIndex</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || arr[<span class="number">0</span>] &lt; arr[<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[n - <span class="number">1</span>] &lt; arr[n - <span class="number">2</span>]) <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> R = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (L &lt; R) &#123;</span><br><span class="line">        mid = L + ((R - L) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; arr[mid - <span class="number">1</span>]) &#123;</span><br><span class="line">            R = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; arr[mid - <span class="number">1</span>]) &#123;</span><br><span class="line">            L = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="02-异或运算"><a href="#02-异或运算" class="headerlink" title="02 异或运算"></a>02 异或运算</h1><p>异或运算：相同为0，不同为1，二进制<strong>无进位相加</strong>（不进位）</p>
<p>同或运算：相同为1，不同为0</p>
<p>异或运算 (^) 性质：</p>
<ul>
<li>0 ^ N = N</li>
<li>N ^ N = 0</li>
<li>a ^ b = b ^ a （交换律）</li>
<li>(a ^ b) ^ c = a ^ (b ^ c) （结合律）</li>
<li>a ^ b = c ==&gt; a = c ^ b ==&gt; b = c ^ a</li>
</ul>
<h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>不使用额外空间变量交换两个数</p>
<p>利用异或运算的性质，注意：<strong>交换的两个数不能是同一块内存空间</strong>，否则二者变为0.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    b = a ^ b;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>一个数组中有<strong>一个数出现了奇数次</strong>，其他数出现了偶数次，找到并打印这个数（O(1) 额外空间复杂度完成）</p>
<p>解析：设置变量eor，顺序遍历异或所有的值，返回最后的eor</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOddTimesNum1</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> eor = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        eor ^= arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; eor &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h2><p>把一个int类型的数，提取出最右侧的1</p>
<p>a = 0xb 00110110 ==&gt; ans = 0xb 00000010</p>
<p>解析：<strong>a &amp; (-a)</strong> 等价于 <strong>a &amp; (~a + 1)</strong></p>
<h2 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h2><p>一个数组中有<strong>两种数出现了奇数次</strong>，其他数出现了偶数次，找到并打印这两种数（O(1) 额外空间复杂度完成）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOddTimesNum2</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> eor = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        eor ^= arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> rightOne = eor &amp; (-eor); <span class="comment">//提取出最右的1, eor != 0</span></span><br><span class="line">    <span class="keyword">int</span> onlyOne = <span class="number">0</span>; <span class="comment">//eor&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// arr[1] = 11100010</span></span><br><span class="line">        <span class="comment">//rightOne= 00000010</span></span><br><span class="line">        <span class="keyword">if</span> ((arr[i] &amp; rightOne) != <span class="number">0</span>) &#123;</span><br><span class="line">            onlyOne ^= arr[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; onlyOne &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; (eor ^ onlyOne) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h2><p>一个数组中<strong>只有一种数出现K次</strong>，其他数都出现了M次，已知M &gt; 1，K &lt; M，找到出现了K次的数<br>要求额外空间复杂度O(1)，时间复杂度O(N)</p>
<p>解析：设置一个int数组长度为32，累加每个数的二进制位置的1的数量。每一位是否为M的整数倍判断出现K次的数的二进制最后一个1出现的位置</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">onlyKtimes</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> k, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">help</span><span class="params">(<span class="number">32</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">//help[i]位置的1出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (((num &gt;&gt; i) &amp; <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">            	help[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="comment">/*返回只出现k次的数，如果不是k次，返回-1；</span></span><br><span class="line"><span class="comment">        if (help[i] % m == 0) continue;</span></span><br><span class="line"><span class="comment">        if (help[i] % m == k) &#123;</span></span><br><span class="line"><span class="comment">        	ans |= 1 &lt;&lt; i;</span></span><br><span class="line"><span class="comment">        &#125; else &#123;</span></span><br><span class="line"><span class="comment">        	return -1;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (help[i] % m != <span class="number">0</span>) &#123; <span class="comment">//在第i位上有1</span></span><br><span class="line">            ans |= <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="03-归并排序"><a href="#03-归并排序" class="headerlink" title="03 归并排序"></a>03 归并排序</h1><p>左半部分有序 + 右半部分有序 + merge </p>
<p>merge过程双指针，顺序copy结果到新有序数组</p>
<p>总体时间复杂度为 O(n * log(N))</p>
<p><strong>递归写法：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">process</span>(arr, <span class="number">0</span>, arr.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr[L...R]排有序</span></span><br><span class="line"><span class="comment">// T(N) = 2 * T(N / 2) + O(N)</span></span><br><span class="line"><span class="comment">// O(N * logN)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == R) &#123; <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = L + ((R - L) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">process</span>(arr, L, mid);</span><br><span class="line">    <span class="built_in">process</span>(arr, mid + <span class="number">1</span>, R);</span><br><span class="line">    <span class="built_in">merge</span>(arr, L, mid, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> L, <span class="keyword">int</span> M, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">help</span><span class="params">(R - L + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p1 = L;</span><br><span class="line">    <span class="keyword">int</span> p2 = M + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= M &amp;&amp; p2 &lt;= R) &#123;</span><br><span class="line">        help[i++] = arr[p1] &lt;= arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 要么p1越界了，要么p2越界了</span></span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= M) &#123;</span><br><span class="line">        help[i++] = arr[p1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2 &lt;= R) &#123;</span><br><span class="line">        help[i++] = arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        arr[L + i] = help[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>迭代写法：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort2</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr.<span class="built_in">size</span>() &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> N = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 步长</span></span><br><span class="line">    <span class="keyword">int</span> mergeSize = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (mergeSize &lt; N) &#123; <span class="comment">// log N</span></span><br><span class="line">        <span class="comment">// 当前左组的，第一个位置</span></span><br><span class="line">        <span class="keyword">int</span> L = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (L &lt; N) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mergeSize &gt;= N - L) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> M = L + mergeSize - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> R = <span class="built_in">min</span>(mergeSize + M, N - <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">merge</span>(arr, L, M, R);</span><br><span class="line">            L = R + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 防止溢出</span></span><br><span class="line">        <span class="keyword">if</span> (mergeSize &gt; N / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mergeSize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> L, <span class="keyword">int</span> M, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; help = <span class="keyword">new</span> <span class="keyword">int</span>[R - L + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p1 = L;</span><br><span class="line">    <span class="keyword">int</span> p2 = M + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= M &amp;&amp; p2 &lt;= R) &#123;</span><br><span class="line">        help[i++] = arr[p1] &lt;= arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 要么p1越界了，要么p2越界了</span></span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= M) &#123;</span><br><span class="line">        help[i++] = arr[p1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2 &lt;= R) &#123;</span><br><span class="line">        help[i++] = arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">        arr[L + i] = help[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题目1：小和问题"><a href="#题目1：小和问题" class="headerlink" title="题目1：小和问题"></a>题目1：小和问题</h2><p>在一个数组中，一个数左边比它小的数的总和，叫该数的小和<br>所有数的小和累加起来，叫数组小和</p>
<p>给定一个数组，求最小和，到第i个数，若第j （j &lt; i）个数的值小于第i个数，累加上第j个数。</p>
<p>例子： [1,3,4,2,5]<br>1左边比1小的数：没有<br>3左边比3小的数：1<br>4左边比4小的数：1、3<br>2左边比2小的数：1<br>5左边比5小的数：1、3、4、 2<br>所以数组的小和为1+1+3+1+1+3+4+2=16 </p>
<p>[6 3 2 1 6 7] ==&gt; i = 0, sum = 0; i = 1, sum = 0; i = 2, sum = 0; i = 3, sum = 0; i = 4, sum = 4, sum = 0;</p>
<p>i = 5, sum = 3 +2 + 1 = 6; i = 6, sum = 18; 返回 res = 6 + 18 = 24;</p>
<p>每个位置，之前比自己小的数累加起来，各个位置累加和再求和。</p>
<p>暴力法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comparator</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            res += arr[j] &lt; arr[i] ? arr[j] : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>归并排序法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">smallSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process</span>(arr, <span class="number">0</span>, arr.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr[L..R]既要排好序，也要求小和返回</span></span><br><span class="line"><span class="comment">// 所有merge时，产生的小和，累加</span></span><br><span class="line"><span class="comment">// 左 排序   merge</span></span><br><span class="line"><span class="comment">// 右 排序  merge</span></span><br><span class="line"><span class="comment">// merge</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// l &lt; r</span></span><br><span class="line">    <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">        <span class="built_in">process</span>(arr, l, mid) </span><br><span class="line">        + </span><br><span class="line">        <span class="built_in">process</span>(arr, mid + <span class="number">1</span>, r) </span><br><span class="line">        + </span><br><span class="line">        <span class="built_in">merge</span>(arr, l, mid, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> L, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">help</span><span class="params">(r - L + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p1 = L;</span><br><span class="line">    <span class="keyword">int</span> p2 = m + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= m &amp;&amp; p2 &lt;= r) &#123;</span><br><span class="line">        res += arr[p1] &lt; arr[p2] ? (r - p2 + <span class="number">1</span>) * arr[p1] : <span class="number">0</span>;</span><br><span class="line">        help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= m) &#123;</span><br><span class="line">        help[i++] = arr[p1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2 &lt;= r) &#123;</span><br><span class="line">        help[i++] = arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        arr[L + i] = help[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题目2：逆序对总数"><a href="#题目2：逆序对总数" class="headerlink" title="题目2：逆序对总数"></a>题目2：逆序对总数</h2><p>在一个数组中，任何一个前面的数a，和任何一个后面的数b，如果(a,b)是降序的，就称为逆序对<br>给定一个数组arr，求数组的逆序对总数量</p>
<p>[3 1 0 4 3 1] ==&gt; 6</p>
<p>每一个数右边有多少个数比他小，从右向左merge</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverPairNumber</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process</span>(arr, <span class="number">0</span>, arr.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr[L..R]既要排好序，也要求逆序对数量返回</span></span><br><span class="line"><span class="comment">// 所有merge时，产生的逆序对数量，累加，返回</span></span><br><span class="line"><span class="comment">// 左 排序 merge并产生逆序对数量</span></span><br><span class="line"><span class="comment">// 右 排序 merge并产生逆序对数量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//l &lt; r</span></span><br><span class="line">	<span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">process</span>(arr, l, mid) + <span class="built_in">process</span>(arr, mid + <span class="number">1</span>, r) + <span class="built_in">merge</span>(arr, l, mid, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">help</span><span class="params">(r - l + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i = help.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> p1 = m, p2 = r;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &gt;= L &amp;&amp; p2 &gt; m) &#123;</span><br><span class="line">        res += arr[p1] &gt; arr[p2] ? (p2 - m) : <span class="number">0</span>;</span><br><span class="line">        help[i--] = arr[p1] &gt; arr[p2] ? arr[p1--] : arr[p2--];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1 &gt;= L) &#123;</span><br><span class="line">        help[i--] = arr[p1--];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2 &gt; m) &#123;</span><br><span class="line">        help[i--] = arr[p2--];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        arr[L + i] = help[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题目3：Bigger-than-right-twice"><a href="#题目3：Bigger-than-right-twice" class="headerlink" title="题目3：Bigger than right twice"></a>题目3：Bigger than right twice</h2><p>在一个数组中，对于任何一个数num，求有多少个(后面的数*2)依然&lt;num，返回总个数<br>比如：[3,1,7,0,2]<br>3的后面有：1，0<br>1的后面有：0<br>7的后面有：0，2<br>0的后面没有<br>2的后面没有<br>所以总共有5个</p>
<p>解析：左组有序+有组有序+merge，双指针从左向右遍历不回退，记录个数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverPairs</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">process</span>(arr, <span class="number">0</span>, arr.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//l &lt; r</span></span><br><span class="line">	<span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">process</span>(arr, l, mid) + <span class="built_in">process</span>(arr, mid + <span class="number">1</span>, r) + <span class="built_in">merge</span>(arr, l, mid, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// [L....M] [M+1....R]</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 目前囊括进来的数，是从[M+1, windowR)</span></span><br><span class="line">    <span class="keyword">int</span> windowR = m + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (windowR &lt;= r &amp;&amp; (<span class="keyword">long</span>) arr[i] &gt; (<span class="keyword">long</span>) arr[windowR] * <span class="number">2</span>) &#123;</span><br><span class="line">            windowR++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += windowR - m - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">help</span><span class="params">(r - l + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p1 = l, p2 = m + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= m &amp;&amp; p2 &lt;= r) &#123;</span><br><span class="line">        help[i++] = arr[p1] &lt;= arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= L) &#123;</span><br><span class="line">        help[i++] = arr[p1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2 &lt;= m) &#123;</span><br><span class="line">        help[i++] = arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        arr[l + i] = help[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="04-快速排序"><a href="#04-快速排序" class="headerlink" title="04 快速排序"></a>04 快速排序</h1><p>快速排序是基于分治策略的，其算法思想如下。<br>（1）分解：先从数列中取出一个元素作为基准元素。以基准元素为标准，将问题分解为两个子序列，使小于或等于基准元素的子序列在左侧，使大于基准元素的子序列在右侧。<br>（2）治理：对两个子序列进行快速排序。</p>
<p>（3）合并：将排好序的两个子序列合并在一起，得到原问题的解。</p>
<p>代码实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//划分函数，对原序列进行分解，将其分解为两个子序列，以基准元素pivot为界，</span></span><br><span class="line"><span class="comment">//左侧子序列都比pivot小，右侧子序列都比pivot大。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = low, j = high, pivot = arr[low];	<span class="comment">//基准元素</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; pivot) j--;	<span class="comment">//向左扫描</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pivot) i++;	<span class="comment">//向右扫描</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[i++], arr[j--]);	<span class="comment">//交换arr[i]和arr[j]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; pivot) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[low], arr[i - <span class="number">1</span>]);	<span class="comment">//交换arr[i - 1]和arr[low]，并返回基准元素位置i - 1</span></span><br><span class="line">        <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(arr[i], arr[low]);	<span class="comment">//交换arr[i]和arr[low]，并返回基准元素位置i</span></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序函数。首先对原序列划分，得到划分的中间位置mid；然后以中间位置为界，</span></span><br><span class="line"><span class="comment">//分别对左半部分(low,mid-1)执行快速排序，对右半部分(mid+1,high)执行快速排序。</span></span><br><span class="line"><span class="comment">//递归结束的条件是low≥high</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="built_in">partition</span>(arr, low, high);	<span class="comment">//划分</span></span><br><span class="line">        <span class="built_in">qsort</span>(arr, low, p - <span class="number">1</span>);		<span class="comment">//左区间递归快排</span></span><br><span class="line">        <span class="built_in">qsort</span>(arr, p + <span class="number">1</span>, high);	<span class="comment">//右区间递归快排	</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; arr&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="built_in">qsort</span>(arr, <span class="number">0</span>, arr.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最好情况时间复杂度为O(nlogn)</p>
<p>最坏情况下的时间复杂度为O(n^2)</p>
<p>平均情况下的空间复杂度为O(nlogn)</p>
<h1 id="05-希尔排序"><a href="#05-希尔排序" class="headerlink" title="05 希尔排序"></a>05 希尔排序</h1><p>希尔排序：插入排序的改进版，实现简单，对于中等规模数据的性能表现还不错。对较大规模并且无序的数据也非常有效率</p>
<p>无论是插入排序还是冒泡排序，如果数组的最大值刚好是在第一位，要将它挪到正确的位置就需要n - 1次移动。也就是说，原数组的一个元素如果距离它正确的位置很远的话，则需要与相邻元素交换很多次才能到达正确的位置，这样是相对比较花时间了。</p>
<p>希尔排序的思想是采用插入排序的方法，先让数组中任意间隔为h的元素有序，刚开始h的大小可以是h = n / 2，接着让 h = n / 4，让h一直缩小，当h = 1 时，也就是此时数组中任意间隔为1的元素有序，此时的数组就是有序的了。</p>
<p>把较大的数据集合分割成若干个小组（逻辑上分组），然后对每一个小组分别进行插入排序，此时，插入排序所作用的数据量比较小（每一个小组），插入的效率比较高。</p>
<p>希尔排序的复杂度和增量序列是相关的</p>
<p>希尔排序不稳定，在插入的时候是跳跃性插入的，有可能破坏稳定性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将nums[i]插入到所在分组的正确位置上， nums[i]所在分组为：</span></span><br><span class="line"><span class="comment">// …nums[i-2*gap], nums[i-gap], nums[i], nums[i+gap], nums[i+2*gap]…</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellSortCore</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> gap, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> inserted = nums[i];</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="comment">// 插入的时候按组进行插入（组内元素两两相隔gap）</span></span><br><span class="line">    <span class="keyword">for</span> (j = i - gap; j&gt;= <span class="number">0</span> &amp;&amp; inserted &lt; nums[j]; j -= gap) &#123;</span><br><span class="line">        nums[j + gap] = nums[j];</span><br><span class="line">    &#125;</span><br><span class="line">    nums[j + gap] = inserted;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 进行分组，最开始的时候，gap为数组长度一半</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = len / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 对各个分组进行插入分组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 将nums[i]插入到所在分组正确的位置上</span></span><br><span class="line">            <span class="built_in">shellSortCore</span>(nums, gap, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印希尔排序后的数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : nums) &#123;</span><br><span class="line">		cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="06-堆排序"><a href="#06-堆排序" class="headerlink" title="06 堆排序"></a>06 堆排序</h1><p>大顶堆：父节点的值大于子节点，堆排序中为升序排列</p>
<p>小顶堆：父节点的值小于子节点，堆排序中为降序排列</p>
<p>先把数组构造成一个大顶堆，然后把堆顶（数组最大值，数组的第一个元素）和数组的最后一个元素交换，把最大值放到了最后边。数组长度n-1，再进行构造堆，把剩余的第二大值放到堆顶，输出堆顶（放到数组最后）。依此类推，直到数组排序完成。</p>
<p>堆符合两个特点：</p>
<ul>
<li>是一个完全二叉树</li>
<li>所有父节点的值都大于（或小于）子节点的值</li>
</ul>
<p>平均时间复杂度：O(nlogn)</p>
<p>注：堆排序是<strong>不稳定</strong>的排序算法，是一种树形选择排序。恰好利用树形的特点保存了部分前面的比较结果，因此可以减少比较次数。不适合记录较少的排序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对有一定顺序的堆，当前第i个结点取根左右的最大值（这个操作称heapfiy）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = i * <span class="number">2</span> + <span class="number">1</span>, r = i * <span class="number">2</span> + <span class="number">2</span>;<span class="comment">// 左右节点索引, left=2*i+1  right=2*i+2  </span></span><br><span class="line">    <span class="keyword">int</span> maxid = i;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; n &amp;&amp; nums[l] &gt; nums[maxid]) &#123;</span><br><span class="line">        maxid = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; n &amp;&amp; nums[r] &gt; nums[maxid]) &#123;</span><br><span class="line">        maxid = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxid != i) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(nums[i], nums[maxid]);</span><br><span class="line">        <span class="built_in">heapify</span>(nums, n, maxid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 建立大根堆，从树的倒数第二层第一个结点开始，对每个结点进行heapify操作，然后向上走</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify_build</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = (n - <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = temp; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">heapify</span>(nums, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印当前数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">		cout &lt;&lt; nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 建立大根堆之后，每次交换最后一个结点和根节点（最大值），</span></span><br><span class="line"><span class="comment">// 对交换后的根节点继续进行heapify（此时堆的最后一位是最大值，因此不用管他，n变为n-1）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify_sort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">heapify_build</span>(nums, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(nums.<span class="built_in">front</span>(), nums[n - i - <span class="number">1</span>]);</span><br><span class="line">		<span class="built_in">heapify</span>(nums, n - i - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>换一种写法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 辅助函数，构造大根堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjust</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> len, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxid = index;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">2</span> * index + <span class="number">1</span>, right = <span class="number">2</span> * index + <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 计算第i个节点的左右子节点的下标   left=2*i+1  right=2*i+2  parent=(i-1)/2</span></span><br><span class="line">    <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[maxid]) maxid = left;</span><br><span class="line">    <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[maxid]) maxid = right;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (maxid != index) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[maxid], arr[index]);</span><br><span class="line">        <span class="built_in">adjust</span>(arr, len, maxid); <span class="comment">// 递归调整其他不满足堆性质的部分</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSortCore</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初次构建堆，i从第一个非叶子节点开始进行堆调整，i节点的父节点为parent=(i-1)/2，即(len-1-1)/2</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">adjust</span>(arr, len, i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[<span class="number">0</span>], arr[i]);<span class="comment">// 将当前最大的放置到数组末尾，将未完成排序的部分继续进行堆排序</span></span><br><span class="line">        <span class="built_in">adjust</span>(arr, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">heapSortCore</span>(arr, arr.<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="07-计数排序"><a href="#07-计数排序" class="headerlink" title="07 计数排序"></a>07 计数排序</h1><p>统计小于等于该元素值的元素的个数i，于是该元素就放在目标数组的索引i位（i≥0）。</p>
<ul>
<li>计数排序基于一个假设，待排序数列的所有数均为整数，且出现在（0，k）的区间之内。</li>
<li>如果 k（待排数组的最大值） 过大则会引起较大的空间复杂度，一般是用来排序 0 到 100 之间的数字的最好的算法，但是它不适合按字母顺序排序人名。</li>
<li>计数排序不是比较排序，排序的速度快于任何比较排序算法。</li>
</ul>
<p>算法思想：</p>
<ul>
<li>找出待排序的数组中最大和最小的元素；</li>
<li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li>
<li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li>
<li>向填充目标数组：将每个元素i放在新数组的第C[i]项，每放一个元素就将C[i]减去 1。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数排序, 输入原始数组与目标数组（初始化与原数组相同）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">countSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; vecRaw, vector&lt;<span class="keyword">int</span>&gt;&amp; vecObj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 确保待排序容器非空</span></span><br><span class="line">    <span class="keyword">if</span>(vecRaw.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 vecRaw 的最大值 + 1 作为计数容器 countVec 的大小</span></span><br><span class="line">    <span class="keyword">int</span> vecCountLen = (*<span class="built_in">max_element</span>(vecRaw.<span class="built_in">begin</span>(), vecRaw.<span class="built_in">end</span>())) + <span class="number">1</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vecCount</span><span class="params">(vecCountLen, <span class="number">0</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 统计每个键值出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vecRaw.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        vecCount[vecRaw[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后面的键值出现的位置为前面所有键值出现的次数之和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; vecCountLen; i++) &#123;</span><br><span class="line">        vecCount[i] += vecCount[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将键值放到目标位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = vecRaw.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123; <span class="comment">// 此处逆序是为了保持相同键值的稳定性</span></span><br><span class="line">        vecObj[--vecCount[vecRaw[i]]] = vecRaw[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="keyword">int</span>&gt; vecRaw = &#123; <span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">1</span> &#125;;</span><br><span class="line">	<span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vecObj</span><span class="params">(vecRaw.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">countSort</span>(vecRaw, vecObj);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vecObj.<span class="built_in">size</span>(); ++i)</span><br><span class="line">		cout &lt;&lt; vecObj[i] &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="08-桶排序"><a href="#08-桶排序" class="headerlink" title="08 桶排序"></a>08 桶排序</h1><p>将值为i的元素放入i号桶，最后依次把桶里的元素倒出来。是计数排序的变种，利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。把计数排序中相邻的m个”小桶”放到一个”大桶”中，在分完桶后，对每个桶进行排序（一般用快排），然后合并成最后的结果。</p>
<p>算法思想：</p>
<ul>
<li>设置一个定量的数组当作空桶子。</li>
<li>寻访序列，并且把项目一个一个放到对应的桶子去。</li>
<li>对每个不是空的桶子进行排序。</li>
<li>从不是空的桶子里把项目再放回原来的序列中。</li>
</ul>
<p>平均时间复杂度：O(n + k)</p>
<p>空间复杂度：O(n * k)</p>
<p>稳定性：稳定</p>
<p>桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 桶排序，输入原始数组和桶的数量（默认可为5）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bucketSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> bucketSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 确定数组的最大值与最小值</span></span><br><span class="line">    <span class="keyword">int</span> maxVal = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> minVal = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; minVal) &#123;</span><br><span class="line">            minVal = arr[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; maxVal) &#123;</span><br><span class="line">            maxVal = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置每个桶的容量大小</span></span><br><span class="line">    <span class="keyword">int</span> bucketCount = (maxVal - minVal) / bucketSize + <span class="number">1</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">buckets</span>(bucketCount);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用映射函数将数据分配到各个桶中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = (arr[i] - minVal) / bucketSize; <span class="comment">// 第index个桶</span></span><br><span class="line">        buckets[index].<span class="built_in">push_back</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> arrIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> bucket : buckets) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bucket.<span class="built_in">size</span>() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对每个桶进行排序，这里使用了插入排序</span></span><br><span class="line">        <span class="built_in">insertSort</span>(bucket);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value : bucket) &#123;</span><br><span class="line">            arr[arrIndex++] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//0~0 有序的</span></span><br><span class="line">    <span class="comment">//0~i 变为有序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; arr[j + <span class="number">1</span>]; j--) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[j], arr[j + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="09-基数排序"><a href="#09-基数排序" class="headerlink" title="09 基数排序"></a>09 基数排序</h1><p>一种多关键字的排序算法，可用桶排序实现。</p>
<p>算法思想：</p>
<ul>
<li><p>取得数组中的最大数，并取得位数；</p>
</li>
<li><p>arr为原始数组，从最低位开始取每个位组成radix数组；</p>
</li>
<li><p>对radix进行计数排序（利用计数排序适用于小范围数的特点）</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//辅助函数，求数据的最大位数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxbit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxVal = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxVal &lt; arr[i]) &#123;</span><br><span class="line">            maxVal = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">1</span>;<span class="comment">// 位数</span></span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">10</span>;<span class="comment">//尾数0-9，10进制</span></span><br><span class="line">    <span class="keyword">while</span> (maxVal &gt;= p) &#123;</span><br><span class="line">        maxVal /= <span class="number">10</span>;</span><br><span class="line">        d++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基数排序 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="built_in">maxbit</span>(arr, n);</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">tmp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">10</span>, <span class="number">0</span>)</span></span>;<span class="comment">// 计数器</span></span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">int</span> radix = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; i++) &#123;<span class="comment">// 进行d次排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            count[j] = <span class="number">0</span>;<span class="comment">// 每次分配前清空计数器</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = (arr[j] / radix) % <span class="number">10</span>;<span class="comment">// 统计每个桶中的记录数     </span></span><br><span class="line">            count[k]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            count[j] = count[j - <span class="number">1</span>] + count[j];<span class="comment">// 将tmp中的位置依次分配给每个桶</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = (arr[j] / radix) % <span class="number">10</span>;</span><br><span class="line">            tmp[count[k] - <span class="number">1</span>] = arr[j];</span><br><span class="line">            count[k]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;<span class="comment">// 将临时数组的内容复制到arr中</span></span><br><span class="line">            arr[j] = tmp[j];</span><br><span class="line">        &#125;</span><br><span class="line">        radix *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>刷题笔记：数模运算</title>
    <url>/posts/bbb48ce1.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h1 id="寻找素数"><a href="#寻找素数" class="headerlink" title="寻找素数"></a>寻找素数</h1><p>素数：只能被1或其本身整除。</p>
<p>实现一个函数，输入一个整数<code>n</code>，返回<code>[2, n]</code>中的素数个数</p>
<p>暴力解法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isPrime</span>(i)) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断整数n是否是素数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>暴力解法时间复杂度为O(n^2)，不够高效。</p>
<p>改进：</p>
<ul>
<li><code>i</code> 只需遍历到<code>sqrt(n)</code>；</li>
<li>筛数法，2，3…的所有倍数都不是素数，但存在计算冗余；</li>
<li>内层<code>for</code>循环的<code>j</code>从<code>i</code>的平方开始遍历，不是从<code>2 * i </code>开始.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">isPrime</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt; n; j++) &#123;</span><br><span class="line">                isPrime[j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i]) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="模幂运算"><a href="#模幂运算" class="headerlink" title="模幂运算"></a>模幂运算</h1><h2 id="位运算n-amp-n-1-的妙用"><a href="#位运算n-amp-n-1-的妙用" class="headerlink" title="位运算n &amp; (n-1)的妙用"></a>位运算<code>n &amp; (n-1)</code>的妙用</h2><p><code>n&amp;(n-1)</code>作用：将<code>n</code>的二进制表示中的<strong>最低位为<code>1</code>的改为<code>0</code></strong></p>
<p><code>n = 10100</code>(二进制），则<code>(n-1) = 10011</code>  –&gt; <code>n&amp;(n-1) = 10000</code></p>
<ul>
<li><p>判断一个数是否是2的n次幂<br><code>n &gt; 0 &amp;&amp; ((n &amp; (n - 1)) == 0 )</code></p>
<p>解释<code>((n &amp; (n-1)) == 0)：</code></p>
<p>如果<code>A &amp; B == 0</code>，表示A与B的二进制形式<strong>没有在同一个位置都为1</strong>的时候。</p>
</li>
<li><p>求某一个数的二进制表示中1的个数</p>
<p><code>while (n &gt; 0 ) &#123;    count ++;    n &amp;= (n-1); &#125;</code></p>
</li>
</ul>
<h2 id="幂运算"><a href="#幂运算" class="headerlink" title="幂运算"></a>幂运算</h2><p>整数<code>a</code>，数组<code>b</code>，返回幂运算<code>a ^ b</code>的结果，与<code>1337</code>取模（mod，余数）运算后的结果。</p>
<p>例如输入<code>a = 2, b = [1, 2]</code>，返回<code>2 ^ 12</code> 和<code>1337</code>取模的结果，<code>4096 % 1337 = 85</code></p>
<ul>
<li><p>处理指数数组</p>
<p>注：b为指数数组，可以采用递归求幂，<code>superPow(a, [1, 2, 5, 6])  ==&gt;  superPow(a, [1, 2, 5])</code></p>
</li>
<li><p>处理模运算</p>
<p><code>(a * b) % base = (a % k) * (b % k) % k</code></p>
<p><strong>对乘法的结果求模，等价于先对每个因子求模，然后对因子相乘的结果再求模。</strong></p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> base = <span class="number">1337</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mypow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    a %= base;</span><br><span class="line">    <span class="comment">//先对a求模，然后每次多对乘法结果res求模</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        res *= a;</span><br><span class="line">        res %= base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">superPow</span><span class="params">(<span class="keyword">int</span> a, vecter&lt;<span class="keyword">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> last = b.<span class="built_in">back</span>();</span><br><span class="line">    b.<span class="built_in">pop_back</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> part1 = <span class="built_in">mypow</span>(a, last);</span><br><span class="line">    <span class="keyword">int</span> part2 = <span class="built_in">mypow</span>(<span class="built_in">superPow</span>(a, b), <span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (part1 * part2) % base;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>高效求幂</p>
<p>幂运算的递归关系式：</p>
<p><code>a ^ b = a * a ^ (b - 1) </code>, b为奇数</p>
<p><code>a ^ b = (a ^ (b / 2)) ^ 2 </code>, b为偶数</p>
<p>加上对<code>base</code>求模运算：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> base = <span class="number">1337</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mypow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    a %= base;</span><br><span class="line">    <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (a * <span class="built_in">mypow</span>(a, k - <span class="number">1</span>)) % base;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> sub = <span class="built_in">mypow</span>(a, b / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> (sub * sub) % base;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="连续N个数的和"><a href="#连续N个数的和" class="headerlink" title="连续N个数的和"></a>连续N个数的和</h2><p>求 1 2 … n ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>
<p>示例：</p>
<ul>
<li>输入：n = 3 输出：6</li>
<li>输入：n = 9 输出：45</li>
</ul>
<p>限制：1 &lt;= n &lt;= 1000</p>
<p><strong>解析：</strong></p>
<p>因为不能使用公式直接计算（公式中包含乘除法），所以考虑使用递归进行求解，又不能使用if等判断返回条件，采用<code>A &amp;&amp; B </code>的特性进行判断。</p>
<ul>
<li><p>如果A为true，返回B的布尔值（继续往下执行）</p>
</li>
<li><p>如果A为false，直接返回false（相当于短路）</p>
</li>
</ul>
<p><strong>将递归的返回条件取非然后作为</strong> <strong>&amp;&amp;</strong> <strong>的第一个条件，递归主体转换为第二个条件语句</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumNums</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> b = n &amp;&amp; (n += <span class="built_in">sumNums</span>(n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> n; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="二分搜索剪枝"><a href="#二分搜索剪枝" class="headerlink" title="二分搜索剪枝"></a>二分搜索剪枝</h1><ol start="875">
<li><a href="https://leetcode-cn.com/problems/koko-eating-bananas/">Koko食香蕉</a></li>
</ol>
<p>有 <code>N</code> 堆香蕉，第 <code>i</code> 堆中有 <code>piles[i]</code> 根香蕉，Koko要在<code>H</code>小时内吃完，吃香蕉的速度为每小时<code>K</code>根，每小时最多吃一堆香蕉，若吃不下到下一小时再吃，如果这堆香蕉少于 <code>K</code> 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。 <strong>计算Koko每小时至少吃几根香蕉，才能在<code>H</code>小时内全部吃完？</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: piles = [3,6,7,11], H = 8</span></span><br><span class="line"><span class="section">输出: 4</span></span><br><span class="line"></span><br><span class="line"><span class="section">输入: piles = [30,11,23,4,20], H = 5</span></span><br><span class="line"><span class="section">输出: 30</span></span><br></pre></td></tr></table></figure>

<p>解析：求<code>H</code>小时内吃完的最小速率，假设为<code>speed</code>，<code>speed</code>至少为1，最大为<code>max(piles)</code>，一小时最多吃一堆。</p>
<p>暴力解法：从1开始穷举到<code>max(piles)</code>，一旦发现某个值符合，就为最小速度。</p>
<p>改进：可以<strong>利用二分搜索剪枝，搜索左侧边界。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minSpeed</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; piles, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">1</span>, right = <span class="built_in">getMax</span>(piles) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">canFinish</span>(piles, mid, h)) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canFinish</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; piles, <span class="keyword">int</span> speed, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : piles) &#123;</span><br><span class="line">        time += (n + speed - <span class="number">1</span>) / speed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> time &lt;= h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; piles)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : piles) &#123;</span><br><span class="line">        res = <span class="built_in">max</span>(res, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="1011">
<li><a href="https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/">在 D 天内送达包裹的能力</a></li>
</ol>
<p>传送带上的第<code> i</code> 个包裹的重量为<code> weights[i]</code>。每一天，我们都会按给出重量（weights）的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。</p>
<p>返回能在 <code>days </code>天内将传送带上的所有包裹送达的船的最低运载能力。</p>
<p><strong>货物不可分割且必须按顺序运输</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：weights = [1,2,3,4,5,6,7,8,9,10], days = 5</span><br><span class="line">输出：15</span><br><span class="line">解释：</span><br><span class="line">船舶最低载重<span class="number"> 15 </span>就能够在<span class="number"> 5 </span>天内送达所有包裹，如下所示：</span><br><span class="line">第<span class="number"> 1 </span>天：1, 2, 3, 4, 5</span><br><span class="line">第<span class="number"> 2 </span>天：6, 7</span><br><span class="line">第<span class="number"> 3 </span>天：8</span><br><span class="line">第<span class="number"> 4 </span>天：9</span><br><span class="line">第<span class="number"> 5 </span>天：10</span><br></pre></td></tr></table></figure>

<p>解法：本质上和koko食香蕉的问题是一样的，首先确定最小载重<code>cap</code>，最小值为<code>max(weights)</code>和<code>sum(weights)</code>，<strong>求最小载重。</strong></p>
<p>暴力法顺序遍历，改进<strong>二分搜索左侧边界剪枝</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shipWithinDays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; weights, <span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> left = <span class="built_in">getMax</span>(weights);</span><br><span class="line">    <span class="keyword">int</span> right = <span class="built_in">accumulate</span>(weights.<span class="built_in">begin</span>(), weights.<span class="built_in">end</span>(), <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">canFinish</span>(weights, days, mid)) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canFinish</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; weights, <span class="keyword">int</span> days, <span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> day = <span class="number">0</span>; day &lt; days; day++) &#123;</span><br><span class="line">        <span class="keyword">int</span> maxCap = cap;</span><br><span class="line">        <span class="keyword">while</span> ((maxCap -= weights[i]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (i == weights.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; weights)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : weights) &#123;</span><br><span class="line">        res = <span class="built_in">max</span>(res, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
      <tags>
        <tag>模运算</tag>
        <tag>幂运算</tag>
      </tags>
  </entry>
  <entry>
    <title>c++笔试题常用技巧</title>
    <url>/posts/413d4c3c.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="C-笔试输入输出"><a href="#C-笔试输入输出" class="headerlink" title="C++笔试输入输出"></a>C++笔试输入输出</h2><p>牛客网常用头文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>cin&gt;&gt;</code></td>
<td align="center">遇到空格和换行符自动停止读入，下次读入自动跳过，读取后面的字符</td>
</tr>
<tr>
<td align="center"><code>cin.get()</code></td>
<td align="center">读入字符，包括换行符<code>&#39;\n&#39;</code>和空格<code>&#39; &#39;</code></td>
</tr>
<tr>
<td align="center"><code>getline(cin, str)</code></td>
<td align="center">读取整行数据到<code>str</code>中</td>
</tr>
<tr>
<td align="center"><code>cin.getline(char*, int)</code></td>
<td align="center">接收字符串储存到char*中，长度为n可以接受空格</td>
</tr>
<tr>
<td align="center"><code>char a; cin.get(a)</code></td>
<td align="center"><code>a</code>中可以储存被<code>cin</code>丢弃的换行符</td>
</tr>
</tbody></table>
<ul>
<li><strong>cin&gt;&gt;输入的数据不包含空格和回车，空格和回车会存入到cin的缓冲区中</strong></li>
<li><strong>如果想拿到输入的空格和回车，通过cin.get()获得</strong></li>
</ul>
<ol>
<li><p>输入T组数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="comment">//code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>输入2个数字</p>
</li>
</ol>
<blockquote>
<p>输入：两个正整数a, b</p>
<p>1 5</p>
<p>10 20</p>
</blockquote>
<blockquote>
<p>输出：a + b 结果</p>
<p>6 </p>
<p>30</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; a &gt;&gt; b) &#123;</span><br><span class="line">        cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="3">
<li><p>单组数据，已知有多少个数据，<strong>数据长度已知</strong>，一般用空格分隔。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>多组数据，已知有多少个数据，数据长度已知</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">nums</span>(n, vector&lt;<span class="keyword">int</span>&gt;(m, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; nums[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>单组数据，未告知多少个数据，<strong>数据长度未知</strong>，用逗号或空格隔开的数据</p>
</li>
</ol>
<ul>
<li><p>法1：</p>
<blockquote>
<p>输入：用空格隔开每一个数据（逗号，分号同理）</p>
<p>123 456 789</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; tmp) &#123;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        <span class="keyword">if</span> (cin.<span class="built_in">get</span>() == <span class="string">&#x27;\n&#x27;</span>) <span class="keyword">break</span>;<span class="comment">//只处理一行</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : vec) &#123;</span><br><span class="line">        cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输入：用空格隔开每一个数据，数据有多行</p>
<p>123 456 789</p>
<p>321 654 987</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; vec;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; tmp) &#123;</span><br><span class="line">        path.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        <span class="keyword">if</span> (cin.<span class="built_in">get</span>() == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            vec.<span class="built_in">push_back</span>(path);</span><br><span class="line">            path.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//vec.push_back(path);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : vec) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> d : c) &#123;</span><br><span class="line">            cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>法2：构造split函数，指定分隔符，对字符串进行切片</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">split</span><span class="params">(string str, string pattern)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    str += pattern;</span><br><span class="line">    <span class="keyword">int</span> size = str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        pos = str.<span class="built_in">find</span>(pattern, i);</span><br><span class="line">        <span class="keyword">if</span> (pos &lt; size) &#123;</span><br><span class="line">            string s = str.<span class="built_in">substr</span>(i, pos - i);</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="built_in">stoi</span>(s));</span><br><span class="line">            i = pos + pattern.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string input;</span><br><span class="line">    <span class="built_in">getline</span>(cin, input);</span><br><span class="line">    <span class="comment">//input = &quot;7 17 27 35 8 49 50&quot;;</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; vec = <span class="built_in">split</span>(input, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : vec) &#123;</span><br><span class="line">        cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    string input;</span><br><span class="line">    cin &gt;&gt; input;</span><br><span class="line">    <span class="comment">//input为&quot;123, 456, 756&quot;</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; vec = <span class="built_in">split</span>(input, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="常用数据结构与函数"><a href="#常用数据结构与函数" class="headerlink" title="常用数据结构与函数"></a>常用数据结构与函数</h2><h3 id="map与set的使用"><a href="#map与set的使用" class="headerlink" title="map与set的使用"></a>map与set的使用</h3><ul>
<li><p>初始化：</p>
<ul>
<li>对于set：直接初始化<code>set&lt;int&gt; myset=&#123;0,1,2&#125;;</code> 或者把<code>vector</code>复制过来<code>set&lt;int&gt; myset(v.begin(),v.end());</code></li>
<li>对于map：<code>map&lt;int,int&gt; mymap=&#123;&#123;0,1&#125;,&#123;2,3&#125;,&#123;4,5&#125;&#125;</code></li>
</ul>
</li>
<li><p>插入：</p>
<ul>
<li>对于set：<code>myset.insert(888);</code></li>
<li>对于map：<code>mymap.insert(make_pair(6,7));</code>or, <code>mymap.insert(pair&lt;int ,int&gt;(6,7));</code>or, <code>mymap.insert&#123;6,7&#125;</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">成员函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">begin()</td>
<td align="center">返回指向头部的迭代器</td>
</tr>
<tr>
<td align="center">end()</td>
<td align="center">返回指向末尾的迭代器</td>
</tr>
<tr>
<td align="center">empty()</td>
<td align="center">如果为空则返回 true</td>
</tr>
<tr>
<td align="center">find(val)</td>
<td align="center">查找一个值为val的元素，如果成功找到，则返回<br>指向该元素的双向迭代器；反之，返回 指向end() 的迭代器。</td>
</tr>
<tr>
<td align="center">count(val)</td>
<td align="center">返回指定元素val出现的次数</td>
</tr>
<tr>
<td align="center">insert()</td>
<td align="center">向容器中插入元素</td>
</tr>
<tr>
<td align="center">erase()</td>
<td align="center">删除容器中存储的一个元素</td>
</tr>
<tr>
<td align="center">size()</td>
<td align="center">返回容器中元素的个数</td>
</tr>
<tr>
<td align="center">clear()</td>
<td align="center">清空容器中所有的元素，即令容器的 size() 为 0</td>
</tr>
<tr>
<td align="center">lower_bound(val)</td>
<td align="center">返回一个指向当前容器中（key）第一个大于或等于 val 的元素的双向迭代器。</td>
</tr>
<tr>
<td align="center">upper_bound(val)</td>
<td align="center">返回一个指向当前容器中（key）第一个大于 val 的元素的迭代器。</td>
</tr>
</tbody></table>
<h3 id="queue与stack的使用"><a href="#queue与stack的使用" class="headerlink" title="queue与stack的使用"></a>queue与stack的使用</h3><ul>
<li>queue成员函数</li>
</ul>
<table>
<thead>
<tr>
<th align="center">成员函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">empty()</td>
<td align="center">如果 queue 中没有元素的话，返回 true</td>
</tr>
<tr>
<td align="center">size()</td>
<td align="center">返回 queue 中元素的个数</td>
</tr>
<tr>
<td align="center">front()</td>
<td align="center">返回 queue 中第一个元素的引用</td>
</tr>
<tr>
<td align="center">back()</td>
<td align="center">返回 queue 中最后一个元素的引用</td>
</tr>
<tr>
<td align="center">push(const T&amp; obj)</td>
<td align="center">在 queue 的尾部添加一个元素的副本。<br>调用底层容器的成员函数 push_back() 。</td>
</tr>
<tr>
<td align="center">emplace()</td>
<td align="center">在 queue 的尾部直接添加一个元素。</td>
</tr>
<tr>
<td align="center">push(T&amp;&amp; obj)</td>
<td align="center">以移动的方式在 queue 的尾部添加元素。<br>调用底层容器的具有右值引用参数的成员函数 push_back()</td>
</tr>
<tr>
<td align="center">pop()</td>
<td align="center">删除 queue 中的第一个元素。</td>
</tr>
</tbody></table>
<ul>
<li>stack成员函数</li>
</ul>
<table>
<thead>
<tr>
<th align="center">成员函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">empty()</td>
<td align="center">当 stack 栈中没有元素时，该成员函数返回 true</td>
</tr>
<tr>
<td align="center">size()</td>
<td align="center">返回 stack 栈中存储元素的个数</td>
</tr>
<tr>
<td align="center">top()</td>
<td align="center">返回一个栈顶元素的引用，类型为 T&amp;。如果栈为空，程序会报错。</td>
</tr>
<tr>
<td align="center">push(const T&amp; val)</td>
<td align="center">先复制 val，再将 val 副本压入栈顶。调用底层容器的 push_back() 函数。</td>
</tr>
<tr>
<td align="center">push(T&amp;&amp; obj)</td>
<td align="center">以移动元素的方式将其压入栈顶。调用底层容器的有右值引用参数的 push_back() 函数。</td>
</tr>
<tr>
<td align="center">pop()</td>
<td align="center">弹出栈顶元素。</td>
</tr>
</tbody></table>
<ul>
<li><strong>stack 和queue 没有迭代器</strong>，因此访问元素的唯一方式是遍历容器，通过不断移除访问过的元素，去访问下一个元素。</li>
</ul>
<h3 id="priority-queue的使用"><a href="#priority-queue的使用" class="headerlink" title="priority_queue的使用"></a>priority_queue的使用</h3><p>优先队列具有与队列相似的操作：<code>top()</code>返回队首元素、<code>pop()</code>弹出队首元素、<code>push()</code>插入至队尾并排序。优先队列在内部添加了一个排序。其模板有3个参数：<code>priority_queue&lt; type, container, function &gt;</code>，<code>type</code>是存放的数据类型，<code>container</code>是实现优先队列的底层容器（一般都是<code>vector&lt;int&gt;</code>），<code>function</code>是元素之间的排序方式。</p>
<ul>
<li><p>大顶堆（降序队列）</p>
<p><code>priority_queue&lt;int&gt; a; //缺省情况下同下面定义</code></p>
<p><code>priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt;&gt; a;</code></p>
</li>
<li><p>小顶堆（升序队列）</p>
<p><code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; c;</code></p>
</li>
<li><p>常常把<code>pair&lt;int,int&gt;</code>作为数据类型存放进<code>priority_queue</code>里面，这时排序的规则就是先比较第一个元素，如果第一个元素相等再比较第二个元素。</p>
</li>
<li><p>对于自定义类型存放进<code>priority_queue</code>，那么仿函数<code>function</code>需要自己写。</p>
<p>具体写法定义一个类，里面定义<code>bool operator()(xxx,xxx)&#123;return a.x&lt;b.x;&#125;</code></p>
</li>
</ul>
<h3 id="STL常用算法"><a href="#STL常用算法" class="headerlink" title="STL常用算法"></a>STL常用算法</h3><ul>
<li><p>交换<code>swap()</code></p>
<p><code>vector</code>常用（交换容器中各元素的内存地址，并不是交换各个元素变量所存储的值）。</p>
<p>注意string是个例外，对string调用swap会导致迭代器、引用和指针失效</p>
<p>用法为：<code>swap(vec1,vec2);</code></p>
</li>
<li><p>逆序<code>reverse()</code></p>
<p><code>vector, string</code> 常用，反转在<code>[first,last)</code>范围内的顺序（包括first指向的元素，不包括last指向的元素），无返回值。</p>
<p>用法为<code>reverse(str.begin(),str.end());</code></p>
</li>
<li><p>统计<code>count()</code></p>
<p>统计某一值在一定范围内<code>[first,last)</code>出现的次数。</p>
<p>比如<code>int num = count(s.begin(),s.end(),&#39;a&#39;);</code></p>
</li>
<li><p>排序<code>sort()</code></p>
<p><code>sort (first, last) </code>对容器或普通数组中<code>[first, last)</code>范围内的元素进行排序，默认进行升序排序。</p>
<p><code>is_sorted (first, last)</code> 检测 <code>[first, last) </code>范围内是否已经排好序，默认检测是否按升序排序。</p>
<p><code>sort(vec.begin(), vec.end(), cmp)</code> 自定义比较函数<code>cmp</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mycomp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (i &gt; j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">32</span>, <span class="number">71</span>, <span class="number">12</span>, <span class="number">45</span>, <span class="number">26</span>, <span class="number">80</span>, <span class="number">53</span>, <span class="number">33</span> &#125;</span><br><span class="line">    <span class="comment">//降序排列，通过自定义比较规则进行排序</span></span><br><span class="line">    <span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), mycomp);</span><br><span class="line">    <span class="comment">//降序排列，利用lambda函数</span></span><br><span class="line">    <span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), [&amp;](<span class="keyword">int</span>&amp; i, <span class="keyword">int</span>&amp; j)&#123;<span class="keyword">return</span> i &gt; j;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义结构体排序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myData</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">myData</span>(<span class="keyword">int</span> a_, b_) : <span class="built_in">a</span>(a_), <span class="built_in">b</span>(b_) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//自定义排序，按照a的大小，降序排列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> myData&amp; data1, <span class="keyword">const</span> myData&amp; data2)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data1.a &gt; data2.a;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    set&lt;myData, cmp&gt; myset;</span><br><span class="line">    myset.<span class="built_in">insert</span>(<span class="built_in">myData</span>(<span class="number">1</span>, <span class="number">100</span>));</span><br><span class="line">    myset.<span class="built_in">insert</span>(<span class="built_in">myData</span>(<span class="number">2</span>, <span class="number">200</span>));</span><br><span class="line">    myset.<span class="built_in">insert</span>(<span class="built_in">myData</span>(<span class="number">3</span>, <span class="number">300</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : myset) &#123;</span><br><span class="line">        cout &lt;&lt; c.a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>二分查找函数：</p>
<p><code>lower_bound(vec.begin(), vec.end(), target)</code>寻找<code>vec</code>数组中大于等于<code>target</code>的第一个数，返回其迭代器。</p>
<p><code>Upper_bound()</code>则是寻找第一个大于target的数。</p>
</li>
<li><p>全排列函数</p>
<p><code>next_permutation()</code>寻找下一个排列组合，<code>prev_permutation()</code>为上一个。</p>
<p>当<code> next_permutation()</code> 返回<code> false</code> 时，循环结束，表明到达最小排列。这样恰好可以生成 序列的全部排列。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string str = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="built_in">sort</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>()));</span><br></pre></td></tr></table></figure></li>
<li><p>原地删除<code>erase()</code></p>
<p>对于string：</p>
<ul>
<li><code>erase(pos,n);</code> 删除从下标<code>pos</code>开始的n个字符，比如<code>erase(0,1)</code>就是删除第一个字符。</li>
<li><code>erase(position);</code> 删除<code>postion</code>处的一个字符（<strong>position是一个string类型的迭代器</strong>）。</li>
<li><code>erase(first,last);</code> 删除从<code>first</code>到<code>last</code>之间的字符（<code>first</code>和<code>last</code>都是迭代器），注意是左闭右开。</li>
</ul>
<p>对于map：</p>
<ul>
<li><code>mymap.erase(key)</code>，会按key来删除map中对应的键值对。</li>
<li><code>mymap.erase(position)</code>，position为迭代器。</li>
<li><code>mymap.erase(first,last)</code>，删除迭代器表示的范围。</li>
</ul>
</li>
<li><p>子字符串<code>substr()</code></p>
<p><code>string sub=s.substr(pos);</code>复制从下标<code>pos</code>开始的一直到结尾的字符串为新的sub子串。</p>
<p><code>string sub=s.substr(pos,n)；</code>复制从下标<code>pos</code>开始的<code>n</code>个字符。</p>
</li>
<li><p>技巧：字符与数字的转换</p>
<ul>
<li><p>字符char 转为 数字int，利用<code>str[0]-‘0’</code></p>
</li>
<li><p>数字int 转为 字符char，利用<code>(7+&#39;0&#39;)</code></p>
</li>
<li><p>特殊字符char 转为 int，比如要把<code>&#39;a&#39;</code>转为0，<code>&#39;d&#39;</code>转为3。利用ASICII码，<code>’a’</code>的ASICII码为97，所以<code>(int)str[2]-97</code></p>
</li>
<li><p>字符串string 转为 int，<code>atoi()/stoi()</code>函数</p>
</li>
<li><p>整数int 转为字符串string，<code>to_string(value)</code>函数</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
      <tags>
        <tag>c++输入处理</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯算法思想</title>
    <url>/posts/6957245a.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h1 id="回溯算法思想"><a href="#回溯算法思想" class="headerlink" title="回溯算法思想"></a>回溯算法思想</h1><p>回溯算法相当于一个决策树，解决一个决策树的遍历问题，需要考虑：</p>
<ul>
<li>路径：已经做出的选择</li>
<li>选择列表：可以做的选择</li>
<li>结束条件：到达决策树底层，无法做出选择的条件</li>
</ul>
<p>回溯框架：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrack</span>(<span class="params">路径，选择列表</span>):</span></span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径，选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure>

<h2 id="子集穷举"><a href="#子集穷举" class="headerlink" title="子集穷举"></a>子集穷举</h2><ol start="78">
<li>给定一组不含重复元素的整数数组 <code>nums</code>，返回该数组所有可能的子集（幂集）。</li>
</ol>
<p>说明：解集不能包含重复的子集。</p>
<p>示例: 输入: nums = [1,2,3] 输出: [ [3],  [1],  [2],  [1,2,3],  [1,3],  [2,3],  [1,2],  [] ]</p>
<p><a href="https://leetcode-cn.com/problems/subsets/">力扣题目链接</a></p>
<img src="/posts/image-20220404212935154.png" alt="image-20220404212935154" style="zoom:50%;">

<p><code>[1, 2, 3]</code>的全部子集为递归树上的所有节点，for循环横向遍历，递归纵向遍历</p>
<ul>
<li><p>递归参数：二维数组<code>result</code>存放子集组合，一维数组<code>path</code>收集路径元素，需要<code>start</code>参数控制递归</p>
</li>
<li><p>递归终止条件：<code>start</code>大于等于数组的长度。没有元素可取</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (start &gt;= nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>单层逻辑：遍历整棵树，不需要剪枝</p>
</li>
</ul>
<p>完整代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储所有子集</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*主函数*/</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">subsets</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    <span class="comment">//记录走过的路径</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line">    <span class="built_in">backtrack</span>(nums, <span class="number">0</span>, path);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*回溯算法*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> start, vector&lt;<span class="keyword">int</span>&gt;&amp; path)</span> </span>&#123;</span><br><span class="line">    res.<span class="built_in">push_back</span>(path); <span class="comment">//收集子集，始终在上面，防止漏掉自己，前序遍历的位置</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (start &gt;= nums.<span class="built_in">size</span>()) <span class="keyword">return</span>; <span class="comment">//可以不加，每次递归的下一层就是从i+1开始的</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从start开始，防止产生重复子集</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">//做选择</span></span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="comment">//递归回溯</span></span><br><span class="line">        <span class="built_in">backtrack</span>(nums, i + <span class="number">1</span>, path);</span><br><span class="line">        <span class="comment">//撤销选择</span></span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="90">
<li>给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</li>
</ol>
<p>说明：解集不能包含重复的子集。</p>
<p>示例:</p>
<ul>
<li>输入: [1,2,2]</li>
<li>输出: [ [2], [1], [1,2,2], [2,2], [1,2], [] ]</li>
</ul>
<p><a href="https://leetcode-cn.com/problems/subsets-ii/">力扣题目链接</a></p>
<p>解法：回溯+去重，同一层横向遍历需要去重（需要首先对集合排序）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> start, vector&lt;<span class="keyword">int</span>&gt;&amp; path)</span> </span>&#123;</span><br><span class="line">    result.<span class="built_in">push_back</span>(path);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// 对同一树层使用过的元素进行跳过</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; start &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] ) &#123; <span class="comment">// 注意这里使用i &gt; start</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="built_in">backtrack</span>(nums, i + <span class="number">1</span>, path);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">subsetsWithDup</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()); <span class="comment">// 去重需要排序</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; path; <span class="comment">//记录走过的路径</span></span><br><span class="line">    <span class="built_in">backtrack</span>(nums, <span class="number">0</span>, path);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p>
<p>示例:<br>输入: <code> n = 4, k = 2</code><br>输出: <code> [[2,4], [3,4], [2,3], [1,2], [1,3], [1,4]]</code></p>
<p>解法：<code>combine(4, 2)</code>的结果，决策树的高度为k，宽度为n的所有叶子节点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录所有组合</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line"><span class="comment">/*主函数*/</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= <span class="number">0</span> || n &lt;= <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; path; <span class="comment">//记录走过的路径</span></span><br><span class="line">    <span class="built_in">backtrack</span>(n, k, <span class="number">1</span>, path);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> start, vector&lt;<span class="keyword">int</span>&gt;&amp; path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//到达叶子节点更新result</span></span><br><span class="line">    <span class="keyword">if</span> (k == path.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        result.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//i从start开始递增</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= n; i++) &#123;</span><br><span class="line">        path.<span class="built_in">push_back</span>(i); <span class="comment">// 处理节点 </span></span><br><span class="line">        <span class="built_in">backtracking</span>(n, k, i + <span class="number">1</span>, path); <span class="comment">// 递归</span></span><br><span class="line">        path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯，撤销处理的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组合可以看作特定长度的子集，<code>combine(3, 2) </code>等价于 <code>subset([1, 2, 3])</code>长度为2 的子集</p>
<h2 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h2><ol start="46">
<li>给定一个 <strong>没有重复</strong> 数字的序列，返回其所有可能的全排列。</li>
</ol>
<p>示例:</p>
<ul>
<li>输入:<code> [1,2,3]</code></li>
<li>输出: <code>[[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]</code></li>
</ul>
<p><a href="https://leetcode-cn.com/problems/permutations/">力扣题目链接</a></p>
<p>解法：排列是有序的， <code>[1,2] </code>和 <code>[2,1]</code> 是两个集合，处理全排列问题不需要start防止重复。需要排除已经选择过的数字，将所有叶子节点作为结果。可以使用一个<code>used</code>数组，标记此时<code>path</code>中已经选择的元素，<strong>一个排列里一个元素只能使用一次</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; path; <span class="comment">//记录路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtracking</span> <span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, vector&lt;<span class="keyword">bool</span>&gt;&amp; used)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此时说明到达叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        result.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (used[i] == <span class="literal">true</span>) <span class="keyword">continue</span>; <span class="comment">// path里已经收录的元素，直接跳过</span></span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">        used[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*主函数*/</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">used</span><span class="params">(nums.size(), <span class="literal">false</span>)</span></span>; <span class="comment">//标记bool数组</span></span><br><span class="line">    <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="47">
<li>给定一个<strong>可包含重复数字</strong>的序列 nums ，按任意顺序 返回所有不重复的全排列。</li>
</ol>
<p>示例 1：</p>
<ul>
<li>输入：<code>nums = [1,1,2]</code></li>
<li>输出：<code> [[1,1,2], [1,2,1], [2,1,1]]</code></li>
</ul>
<p>示例 2：</p>
<ul>
<li>输入：<code>nums = [1,2,3]</code></li>
<li>输出：<code>[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</code></li>
</ul>
<p><a href="https://leetcode-cn.com/problems/permutations-ii/">力扣题目链接</a></p>
<p>解法：回溯+去重，去重需要对元素序列排序，方便通过相近节点判断是否重复使用。</p>
<p>去重逻辑的关键代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// used[i - 1] == false，说明同一树层nums[i - 1]使用过</span></span><br><span class="line"><span class="comment">// 如果同一树层nums[i - 1]使用过则直接跳过</span></span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总体代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtracking</span> <span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, vector&lt;<span class="keyword">bool</span>&gt;&amp; used)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此时说明找到了一组</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        result.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// used[i - 1] == true，说明同一树枝nums[i - 1]使用过</span></span><br><span class="line">        <span class="comment">// used[i - 1] == false，说明同一树层nums[i - 1]使用过</span></span><br><span class="line">        <span class="comment">// 如果同一树层nums[i - 1]使用过则直接跳过</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; used[i - <span class="number">1</span>] == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (used[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()); <span class="comment">// 排序</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">used</span><span class="params">(nums.size(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="built_in">backtracking</span>(nums, used);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>回溯算法</tag>
        <tag>子集</tag>
        <tag>排列</tag>
        <tag>组合</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树基础</title>
    <url>/posts/84ac9751.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="二叉树基础"><a href="#二叉树基础" class="headerlink" title="二叉树基础"></a>二叉树基础</h2><h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><ul>
<li><strong>满二叉树</strong>：一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上。</li>
</ul>
<img src="/posts/image-20220326214418676.png" alt="image-20220326214418676" style="zoom: 30%;">

<p>满二叉树的深度为k，有2^k-1个节点的二叉树。</p>
<ul>
<li><strong>完全二叉树</strong>：除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2^(h-1)  个节点。</li>
</ul>
<img src="/posts/image-20220326214559918.png" alt="image-20220326214559918" style="zoom:75%;">

<ul>
<li><strong>二叉搜索树</strong>：有序树，满足：<ul>
<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>
<li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>
<li>它的左、右子树也分别为二叉排序树。</li>
</ul>
</li>
</ul>
<img src="/posts/image-20220326214858888.png" alt="image-20220326214858888" style="zoom:75%;">

<ul>
<li><strong>平衡二叉搜索树</strong>：又被称为AVL（Adelson-Velsky and Landis）树，满足：<ul>
<li>是一棵空树或它的左右两个子树的高度差的绝对值不超过1；</li>
<li>左右两个子树都是一棵平衡二叉树。</li>
</ul>
</li>
</ul>
<img src="/posts/image-20220326215122495.png" alt="image-20220326215122495" style="zoom:75%;">

<table>
<thead>
<tr>
<th align="center">C++中常用容器</th>
<th align="center">底层实现</th>
</tr>
</thead>
<tbody><tr>
<td align="center">map、set、multimap，multiset</td>
<td align="center">平衡二叉搜索树</td>
</tr>
<tr>
<td align="center">unordered_map、unordered_set，<br>unordered_map、unordered_map</td>
<td align="center">哈希表</td>
</tr>
</tbody></table>
<h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><p>二叉树主要有两种遍历方式：</p>
<ol>
<li>深度优先遍历：先往深走，遇到叶子节点再往回走。前中后序遍历。</li>
<li>广度优先遍历：一层一层的去遍历。层次遍历。</li>
</ol>
<p>遍历顺序：</p>
<ul>
<li>前序遍历：中左右</li>
<li>中序遍历：左中右</li>
<li>后序遍历：左右中</li>
</ul>
<img src="/posts/image-20220326221443483.png" alt="image-20220326221443483" style="zoom:75%;">

<h3 id="二叉树定义："><a href="#二叉树定义：" class="headerlink" title="二叉树定义："></a>二叉树定义：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="keyword">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h2><p>递归三要素：</p>
<ol>
<li><strong>确定递归函数的参数和返回值：</strong> 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。</li>
<li><strong>确定终止条件：</strong> 写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。</li>
<li><strong>确定单层递归的逻辑：</strong> 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</li>
</ol>
<p><strong>每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中</strong>，然后递归返回的时候，从栈顶弹出上一次递归的各项参数。</p>
<p>前序遍历：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*辅助遍历函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(cur-&gt;val);    <span class="comment">// 中</span></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;left, vec);  <span class="comment">// 左</span></span><br><span class="line">        <span class="built_in">traversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*主函数*/</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="built_in">traversal</span>(root, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>中序遍历：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;left, vec);  <span class="comment">// 左</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(cur-&gt;val);    <span class="comment">// 中</span></span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后序遍历：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode* cur, vector&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;left, vec);  <span class="comment">// 左</span></span><br><span class="line">    <span class="built_in">traversal</span>(cur-&gt;right, vec); <span class="comment">// 右</span></span><br><span class="line">    vec.<span class="built_in">push_back</span>(cur-&gt;val);    <span class="comment">// 中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h2><p>迭代法：用栈来实现递归</p>
<p>中序遍历：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line"></span><br><span class="line">                st.<span class="built_in">push</span>(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.<span class="built_in">pop</span>();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.<span class="built_in">top</span>();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                result.<span class="built_in">push_back</span>(node-&gt;val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>前序遍历：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*和中序遍历相比仅仅改变了两行代码的顺序*/</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);  <span class="comment">// 右</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);    <span class="comment">// 左</span></span><br><span class="line">                st.<span class="built_in">push</span>(node);                          <span class="comment">// 中</span></span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                result.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>后序遍历：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* node = st.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                st.<span class="built_in">push</span>(node);                          <span class="comment">// 中</span></span><br><span class="line">                st.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) st.<span class="built_in">push</span>(node-&gt;right);  <span class="comment">// 右</span></span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) st.<span class="built_in">push</span>(node-&gt;left);    <span class="comment">// 左</span></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                node = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                result.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p>解法：广度优先遍历，使用辅助队列，先进先出</p>
<p>层序遍历：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>) que.<span class="built_in">push</span>(root);</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">            <span class="comment">// 这里一定要使用固定大小size，不要使用que.size()，因为que.size是不断变化的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode* node = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                vec.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) que.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) que.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.<span class="built_in">push_back</span>(vec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="二叉树构造"><a href="#二叉树构造" class="headerlink" title="二叉树构造"></a>二叉树构造</h2><h3 id="中序与后序遍历序列构造二叉树"><a href="#中序与后序遍历序列构造二叉树" class="headerlink" title="中序与后序遍历序列构造二叉树"></a>中序与后序遍历序列构造二叉树</h3><p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">力扣题目链接</a></p>
<p>根据一棵树的中序遍历与后序遍历构造二叉树。</p>
<p>解法：对中序和后序遍历序列进行切割，找好切割区间，建议左闭右开。</p>
<p>中序数组 ==&gt; 左中序数组 + 根 + 右中序数组</p>
<p>后序数组 ==&gt; 左后序数组 + 右后序数组 + 根</p>
<p>递归求解：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">traversal</span> <span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; inorder, vector&lt;<span class="keyword">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (postorder.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后序遍历数组最后一个元素，就是当前的中间节点</span></span><br><span class="line">    <span class="keyword">int</span> rootValue = postorder[postorder.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> (postorder.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到中序遍历的切割点</span></span><br><span class="line">    <span class="keyword">int</span> delimiterIndex;</span><br><span class="line">    <span class="keyword">for</span> (delimiterIndex = <span class="number">0</span>; delimiterIndex &lt; inorder.<span class="built_in">size</span>(); delimiterIndex++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inorder[delimiterIndex] == rootValue) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切割中序数组</span></span><br><span class="line">    <span class="comment">// 左闭右开区间：[0, delimiterIndex)</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">leftInorder</span><span class="params">(inorder.begin(), inorder.begin() + delimiterIndex)</span></span>;</span><br><span class="line">    <span class="comment">// [delimiterIndex + 1, end)</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">rightInorder</span><span class="params">(inorder.begin() + delimiterIndex + <span class="number">1</span>, inorder.end() )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// postorder 舍弃末尾元素</span></span><br><span class="line">    postorder.<span class="built_in">resize</span>(postorder.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切割后序数组</span></span><br><span class="line">    <span class="comment">// 依然左闭右开，注意这里使用了左中序数组大小作为切割点</span></span><br><span class="line">    <span class="comment">// [0, leftInorder.size)</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">leftPostorder</span><span class="params">(postorder.begin(), postorder.begin() + leftInorder.size())</span></span>;</span><br><span class="line">    <span class="comment">// [leftInorder.size(), end)</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">rightPostorder</span><span class="params">(postorder.begin() + leftInorder.size(), postorder.end())</span></span>;</span><br><span class="line"></span><br><span class="line">    root-&gt;left = <span class="built_in">traversal</span>(leftInorder, leftPostorder);</span><br><span class="line">    root-&gt;right = <span class="built_in">traversal</span>(rightInorder, rightPostorder);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="构造最大二叉树"><a href="#构造最大二叉树" class="headerlink" title="构造最大二叉树"></a>构造最大二叉树</h3><p><a href="https://leetcode-cn.com/problems/maximum-binary-tree/">力扣题目地址</a></p>
<p>给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：</p>
<ul>
<li>二叉树的根是数组中的最大元素。</li>
<li>左子树是通过数组中最大值左边部分构造出的最大二叉树。</li>
<li>右子树是通过数组中最大值右边部分构造出的最大二叉树。</li>
</ul>
<p>通过给定的数组构建最大二叉树，并且输出这个树的根节点。</p>
<p>解析：首先找到序列的最大值，以最大值构造根节点，左子树区间 + 根节点（最大值）+ 右子树区间，递归构造子区间至少一个值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    TreeNode* node = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">        node-&gt;val = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到数组中最大的值和对应的下标</span></span><br><span class="line">    <span class="keyword">int</span> maxValue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxValueIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; maxValue) &#123;</span><br><span class="line">            maxValue = nums[i];</span><br><span class="line">            maxValueIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;val = maxValue;</span><br><span class="line">    <span class="comment">// 最大值所在的下标左区间 构造左子树</span></span><br><span class="line">    <span class="keyword">if</span> (maxValueIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">newVec</span><span class="params">(nums.begin(), nums.begin() + maxValueIndex)</span></span>;</span><br><span class="line">        node-&gt;left = <span class="built_in">constructMaximumBinaryTree</span>(newVec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最大值所在的下标右区间 构造右子树</span></span><br><span class="line">    <span class="keyword">if</span> (maxValueIndex &lt; (nums.<span class="built_in">size</span>() - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">newVec</span><span class="params">(nums.begin() + maxValueIndex + <span class="number">1</span>, nums.end())</span></span>;</span><br><span class="line">        node-&gt;right = <span class="built_in">constructMaximumBinaryTree</span>(newVec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题必会：快速排序/选择</title>
    <url>/posts/202ade3b.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序的逻辑是，若要对<code> nums[lo..hi]</code> 进⾏排序，我们先找⼀个分界点<code> p</code>，通过交换元素使得<code>nums[lo..p-1] </code>都⼩于等于<code> nums[p]</code>，且 <code>nums[p+1..hi] </code>都⼤于<code> nums[p]</code>，然后递归地去<code>nums[lo..p-1] </code>和<code>nums[p+1..hi] </code>中寻找新的分界点，最后整个数组就被排序了。</p>
<p>关键就在于这个分界点索引 <code>p</code> 的确定</p>
<img src="/posts/image-20220322165722861.png" alt="image-20220322165722861" style="zoom:50%;">

<p>索引<code>p</code>左侧的元素都⽐ <code>nums[p] </code>⼩，右侧的元素都⽐ <code>nums[p]</code>⼤，意味着这个元素已经放到了正确的位置 。</p>
<p>实现代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 快速排序主函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"> 	<span class="comment">// 将 nums 数组随机打乱</span></span><br><span class="line"> 	<span class="built_in">shuffle</span>(nums);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>, hi = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"> 	<span class="built_in">quicksort</span>(nums, lo, hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 快速排序核⼼逻辑 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lo &gt;= hi) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="built_in">partition</span>(nums, lo, hi);</span><br><span class="line">    <span class="comment">// 现在 nums[lo..p-1] 都⼩于 nums[p]，</span></span><br><span class="line"> 	<span class="comment">// 且 nums[p+1..hi] 都⼤于 nums[p]</span></span><br><span class="line"> 	<span class="built_in">quicksort</span>(nums, lo, p - <span class="number">1</span>);</span><br><span class="line"> 	<span class="built_in">quicksort</span>(nums, p + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分界点索引 p 的确定 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo + <span class="number">1</span>, j = hi;</span><br><span class="line">    	<span class="comment">// 将 nums[lo] 作为默认分界点 p</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; hi &amp;&amp; nums[i] &lt;= nums[lo]) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (lo &lt; j &amp;&amp; nums[j] &gt;= nums[lo]) &#123;</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//此时， nums[i] &gt; p &amp;&amp; nums[j] &lt; p，需交换 nums[i] 和 nums[j]</span></span><br><span class="line">            <span class="comment">//保证 nums[lo..i] &lt; p &lt; nums[j..hi]</span></span><br><span class="line">            <span class="built_in">swap</span>(nums[i], nums[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="comment">//将 p值（nums[lo]）交换到正确的位置</span></span><br><span class="line">        <span class="built_in">swap</span>(nums[lo], nums[j]);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数组元素进⾏随机打乱</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">random_shuffle</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="快速选择"><a href="#快速选择" class="headerlink" title="快速选择"></a>快速选择</h2><blockquote>
<p>相关题目：</p>
<ol start="215">
<li>数组中的第 K 个最⼤元素（中等）</li>
</ol>
</blockquote>
<p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code>k</code> 个最大的元素。请注意，需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素。</p>
<p> 解法：快排简化，可以在O(n) 时间复杂度，O(1) 空间复杂度完成求解工作。快速选择需要找到第<code>k </code>大的枢（pivot），不需要对其左右再进行排序。快速选择一般需要先打乱数组，否则最坏情况下时间复杂度为O($n^2$).</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    	<span class="built_in">random_shuffle</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());<span class="comment">// ⾸先随机打乱数组</span></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>, target = nums.<span class="built_in">size</span>() - k;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = <span class="built_in">quickSelection</span>(nums, l, r);</span><br><span class="line">            <span class="keyword">if</span> (mid == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[mid];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mid &gt; target) &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助函数 - 快速选择</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quickSelection</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l + <span class="number">1</span>, j = r;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; r &amp;&amp; nums[i] &lt;= nums[l]) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; j &amp;&amp; nums[j] &gt;= nums[l]) &#123;</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(nums[i], nums[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(nums[l], nums[j]);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数组</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题小知识：二叉树</title>
    <url>/posts/471b5238.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><blockquote>
<p>相关题目：</p>
<ol start="226">
<li><p>翻转⼆叉树（简单） </p>
</li>
<li><p>⼆叉树展开为链表（中等） </p>
</li>
<li><p>填充每个节点的下⼀个右侧节点指针（中等）</p>
</li>
</ol>
</blockquote>
<p>二叉树递归：明确函数的定义，根据定义递归推导最终结果。先搞清楚当前根节点”该做什么”与”什么时候做”，然后根据函数定义递归调⽤⼦节点，让孩⼦节点做相同的事情。</p>
<h3 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h3><p>输⼊⼀个⼆叉树根节点<code> root</code>，把整棵树镜像翻转，⼆叉树上的每⼀个节点的左右⼦节点进⾏交换。</p>
<img src="/posts/invert1-tree.jpg" alt="img" style="zoom:50%;">



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将整棵树的节点翻转</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//base case</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**** 前序遍历位置 ****/</span></span><br><span class="line">    <span class="comment">//root节点需要交换它的左右节点</span></span><br><span class="line">    TreeNode* tmp = root -&gt; left;</span><br><span class="line">    root -&gt; left = root -&gt; right;</span><br><span class="line">    root -&gt; right = tmp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 让左右⼦节点继续翻转它们的⼦节点</span></span><br><span class="line">    <span class="built_in">invertTree</span>(root -&gt; left);</span><br><span class="line">    <span class="built_in">invertTree</span>(root -&gt; right);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="填充⼆叉树节点的右侧指针"><a href="#填充⼆叉树节点的右侧指针" class="headerlink" title="填充⼆叉树节点的右侧指针"></a>填充⼆叉树节点的右侧指针</h3><p>给定一个 <strong>完美二叉树</strong> ，其所有叶子节点都在同一层，每个父节点都有两个子节点。填充它的每个<code> next</code> 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 <code>next</code> 指针设置为 <code>NULL</code>。初始状态下，所有 next 指针都被设置为 <code>NULL</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/posts/116_sample.png" alt="img" style="zoom:50%;">

<p>⼆叉树的问题难点在于，如何把题⽬的要求细化成每个节点需要做的事情，如果只依赖一个节点进行递归，无法连接跨父节点的两个相邻节点。需细化为两个节点进行递归。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">connectTwoNode</span>(root -&gt; left, root -&gt; right);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 辅助函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connectTwoNode</span><span class="params">(Node* node1, Node* node2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node1 == <span class="literal">nullptr</span> || node2 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**** 前序遍历位置 ****/</span></span><br><span class="line">    <span class="comment">// 将传⼊的两个节点连接</span></span><br><span class="line">    node1 -&gt; next = node2;</span><br><span class="line">    <span class="comment">// 连接相同⽗节点的两个⼦节点</span></span><br><span class="line">    <span class="built_in">connectTwoNode</span>(node1 -&gt; left, node1 -&gt; right);</span><br><span class="line">    <span class="built_in">connectTwoNode</span>(node2 -&gt; left, node2 -&gt; right);</span><br><span class="line">    <span class="comment">// 连接跨越⽗节点的两个⼦节点</span></span><br><span class="line">    <span class="built_in">connectTwoNode</span>(node1 -&gt; right, node2 -&gt; left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题小知识：队列/栈</title>
    <url>/posts/16a357.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>队列主要⽤在 BFS 算法，栈主要⽤在括号相关的问题</p>
<h2 id="队列实现栈以及栈实现队列"><a href="#队列实现栈以及栈实现队列" class="headerlink" title="队列实现栈以及栈实现队列"></a>队列实现栈以及栈实现队列</h2><blockquote>
<p>相关题目：</p>
<ol start="232">
<li><p>⽤栈实现队列（简单） </p>
</li>
<li><p>⽤队列实现栈（简单） </p>
</li>
</ol>
</blockquote>
<p>队列：先进先出；栈：先进后出</p>
<h3 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h3><p>双栈实现队列</p>
<img src="/posts/image-20220315182119191.png" alt="image-20220315182119191" style="zoom:50%;">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 添加元素到队尾 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        s1.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 删除队头的元素并返回 */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="built_in">peek</span>();</span><br><span class="line">        s2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 返回队头元素 */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s2.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                s2.<span class="built_in">push</span>(s1.<span class="built_in">top</span>());</span><br><span class="line">                s1.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s2.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 判断队列是否为空 */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.<span class="built_in">empty</span>() &amp;&amp; s2.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h3><p>双队列实现栈</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q1;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q2;</span><br><span class="line">    <span class="built_in">MyStack</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 添加元素到栈顶 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        q2.<span class="built_in">push</span>(x);</span><br><span class="line">        <span class="keyword">while</span>(!q1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            q2.<span class="built_in">push</span>(q1.<span class="built_in">front</span>());</span><br><span class="line">            q1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(q1, q2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 删除栈顶的元素并返回 */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = q1.<span class="built_in">front</span>();</span><br><span class="line">        q1.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 返回栈顶元素 */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = q1.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 判断栈是否为空 */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q1.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="括号字符串问题"><a href="#括号字符串问题" class="headerlink" title="括号字符串问题"></a>括号字符串问题</h2><blockquote>
<p>相关题目：</p>
<ol start="20">
<li><p>有效的括号（简单） </p>
</li>
<li><p>使括号有效的最⼩添加（中等） </p>
</li>
<li><p>平衡括号串的最少插⼊（中等） </p>
</li>
</ol>
</blockquote>
<h3 id="判断合法括号字符串"><a href="#判断合法括号字符串" class="headerlink" title="判断合法括号字符串"></a>判断合法括号字符串</h3><p>输⼊⼀个字符串，其中包含<code>[]()&#123;&#125;</code>六种括号，判断这个字符串组成的括号是否合法。 </p>
<p>每个右括号 <code>)</code> 的左边必须有⼀个左括号 <code>(</code> 和它匹配。</p>
<p>解法：使用栈，遇到左括号就⼊栈，遇到右括号就去栈中寻找最近的左括号，看是否匹配</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="keyword">char</span>&gt; left;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> c : str) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;[&#x27;</span> || c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            left.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 字符 c 是右括号</span></span><br><span class="line">            <span class="keyword">if</span> (!left.<span class="built_in">empty</span>() &amp;&amp; <span class="built_in">leftOf</span>(c) == left.<span class="built_in">top</span>())</span><br><span class="line">                left.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="comment">// 和最近的左括号不匹配</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">leftOf</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;&#123;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="平衡括号串"><a href="#平衡括号串" class="headerlink" title="平衡括号串"></a>平衡括号串</h3><p>输⼊⼀个字符串 <code>s</code>，你可以在其中的任意位置插⼊左括号<code>(</code>或者右括号<code> )</code>，返回需要⼏次插⼊才能使得 <code>s </code>变成⼀个合法的括号串</p>
<p>输⼊ <code>s = &quot;())(&quot;</code>，算法应该返回 2，因为⾄少需要插⼊两次把 s 变成<code> &quot;(())()&quot;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minAddToMakeValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>; <span class="comment">// res 记录插⼊次数</span></span><br><span class="line">    <span class="keyword">int</span> need = <span class="number">0</span>; <span class="comment">// need 变量记录右括号的需求量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 对右括号的需求 + 1</span></span><br><span class="line">            need++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 对右括号的需求 - 1\</span></span><br><span class="line"><span class="comment">            need--;</span></span><br><span class="line">            <span class="keyword">if</span> (need == <span class="number">-1</span>) &#123;</span><br><span class="line">                need = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 需插⼊⼀个左括号</span></span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res + need;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单调栈结构"><a href="#单调栈结构" class="headerlink" title="单调栈结构"></a>单调栈结构</h2><blockquote>
<p>相关题目：</p>
<ol start="496">
<li><p>下⼀个更⼤元素I（简单） </p>
</li>
<li><p>下⼀个更⼤元素II（中等） </p>
</li>
<li><p>每⽇温度（中等） </p>
</li>
</ol>
</blockquote>
<p>单调栈：每次新元素⼊栈后，栈内的元素都保持有序（单调递增或单调递减）。 </p>
<p>一般只用来处理Next Greater Element 问题。</p>
<h3 id="单调栈模板"><a href="#单调栈模板" class="headerlink" title="单调栈模板"></a>单调栈模板</h3><p>⽐如：输⼊⼀个数组<code> nums = [2,1,2,4,3]</code>，返回数组<code> [4,2,4,-1,-1]</code>。 </p>
<p>解释：第⼀个 2 后⾯⽐ 2 ⼤的数是 4; 1 后⾯⽐ 1 ⼤的数是 2；第⼆个 2 后⾯⽐ 2 ⼤的数是 4; 4 后⾯没有⽐ 4 ⼤的数，填 -1；3 后⾯没有⽐ 3 ⼤的数，填 -1。 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(nums.size())</span></span>; <span class="comment">// 存放答案的数组</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt;  s;</span><br><span class="line">    <span class="comment">// 倒着往栈⾥放</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span> ;i++) &#123;</span><br><span class="line">        <span class="comment">// 判定个⼦⾼矮</span></span><br><span class="line">        <span class="keyword">while</span>(!s.<span class="built_in">empty</span>() &amp;&amp; s.<span class="built_in">top</span>() &lt;= nums[i]) &#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// nums[i] 身后的 next great number</span></span><br><span class="line">        res[i] = s.<span class="built_in">empty</span>() ? <span class="number">-1</span> : s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="每日温度"><a href="#每日温度" class="headerlink" title="每日温度"></a>每日温度</h3><p>给定⼀个数组 T，这个数组存放的是近⼏天的天⽓⽓温，你返回⼀个等⻓的数组，计算：对于每⼀天，还要⾄少等多少天才能等到⼀个更暖和的⽓温；如果等不到那⼀天，填 0。</p>
<p>⽐如：输⼊ <code>T = [73,74,75,71,69,76]</code>，返回 <code>[1,1,3,2,1,0]</code>。 </p>
<p>解释：第⼀天 73 华⽒度，第⼆天 74 华⽒度，⽐ 73 ⼤，所以对于第⼀天，只要等⼀天就能等到⼀个更暖和的⽓温，后⾯的同理。 </p>
<p>解法：单调栈，区别在于需要返回与Next Greater Number 的距离。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; T)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(T.size())</span></span>;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s; <span class="comment">// 这⾥放元素索引，⽽不是元素</span></span><br><span class="line">    <span class="comment">/* 单调栈模板 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = T.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(!s.<span class="built_in">empty</span>() &amp;&amp; T[s.<span class="built_in">top</span>()] &lt;= T[i]) &#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到索引间距</span></span><br><span class="line">        res[i] = s.<span class="built_in">empty</span>() ? <span class="number">0</span> : (s.<span class="built_in">top</span>() - i);</span><br><span class="line">        s.<span class="built_in">push</span>(i); <span class="comment">// 将索引⼊栈，⽽不是元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
      <tags>
        <tag>队列</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题小知识：数组/链表</title>
    <url>/posts/a0fdfee0.html</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>数组链表代表着计算机最基本的两种存储形式：顺序存储和链式存储。</p>
<p>主要算法：双指针，可分为</p>
<ul>
<li>中间向两端扩散</li>
<li>两端向中间收缩</li>
<li>快慢指针</li>
</ul>
<h2 id="1-前缀和数组"><a href="#1-前缀和数组" class="headerlink" title="1. 前缀和数组"></a>1. 前缀和数组</h2><p>前缀和技巧适⽤于快速、频繁地计算⼀个索引区间内的元素之和。</p>
<p><strong>注：原始数组/矩阵不可变，频繁查询某个区间的累加和。</strong></p>
<blockquote>
<p>相关题目：</p>
<ol start="303">
<li><p>区域和检索 - 数组不可变（中等） </p>
</li>
<li><p>⼆维区域和检索 - 矩阵不可变（中等） </p>
</li>
<li><p>和为K的⼦数组（中等） </p>
</li>
</ol>
</blockquote>
<p>一维数组的前缀和</p>
<img src="/posts/image-20220310181632054.png" alt="image-image-20220310181632054" style="zoom:50%;">

<p>新建一个<code>preSum</code>数组，<code>preSum[i]</code> 记录 <code>nums[0..i-1]</code> 的累加和</p>
<p>如果我想求索引区间<code>[1, 4]</code> 内的所有元素之和，就可以通过 <code>preSum[5] - preSum[1] </code>得出。 </p>
<p>核心代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrefixSum</span> &#123;</span></span><br><span class="line"> <span class="comment">// 前缀和数组</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">     vector&lt;<span class="keyword">int</span>&gt; prefix;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="comment">/* 输⼊⼀个数组，构造前缀和 */</span></span><br><span class="line">     <span class="built_in">PrefixSum</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">     prefix.<span class="built_in">resize</span>(nums.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">     <span class="comment">// 计算 nums 的累加和</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prefix.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">         prefix[i] = prefix[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">     	&#125;</span><br><span class="line">     &#125;</span><br><span class="line"> 	<span class="comment">/* 查询闭区间 [i, j] 的累加和 */</span></span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"> 	 	<span class="keyword">return</span> prefix[j + <span class="number">1</span>] - prefix[i];</span><br><span class="line"> 	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二维数组前缀和</p>
<img src="/posts/image-20220310183903115.png" alt="image-20220310183903115" style="zoom:33%;">

<p>如果我想计算红⾊的这个⼦矩阵的元素之和，可以⽤绿⾊矩阵减去蓝⾊矩阵减去橙⾊矩阵最后加上粉⾊矩 阵，⽽绿蓝橙粉这四个矩阵有⼀个共同的特点，就是左上⻆就是 (0, 0) 原点。 </p>
<p>那么我们可以维护⼀个⼆维 <code>preSum </code>数组，专⻔记录以原点为顶点的矩阵的元素之和，就可以⽤⼏次加减运算算出任何⼀个⼦矩阵的元素和：</p>
<h2 id="2-差分数组"><a href="#2-差分数组" class="headerlink" title="2. 差分数组"></a>2. 差分数组</h2><blockquote>
<p>相关题目：</p>
<ol start="370">
<li><p>区间加法（中等） </p>
</li>
<li><p>航班预订统计（中等） </p>
</li>
<li><p>拼⻋（中等）</p>
</li>
</ol>
</blockquote>
<p>差分数组的主要适⽤场景是<strong>频繁对原始数组的某个区间的元素进⾏增减</strong>。 </p>
<p>对 <code>nums</code> 数组构造⼀个 <code>diff</code> 差分数组，**<code>diff[i]</code>** 就是 <strong><code>nums[i]</code></strong> 和 <strong><code>nums[i-1]</code></strong> 之差：</p>
<img src="/posts/image-20220311120935829.jpg" alt="image-20220311120935829" style="zoom:50%;">

<p>这样构造差分数组 **<code>diff</code>**，就可以快速进⾏区间增减的操作，如果你想对区间 <code>nums[i..j] </code>的元素全部加 3，那么只需要让 <code>diff[i] += 3</code>，然后再让<code> diff[j+1] -= 3</code> 即可：</p>
<p>把差分数组抽象成⼀个类，包含 increment ⽅法和 result ⽅法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 差分数组⼯具类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Difference</span> &#123;</span>   </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; diff;	<span class="comment">//差分数组</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Difference</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        assert nums.<span class="built_in">size</span>() &gt; <span class="number">0</span>;</span><br><span class="line">        diff,<span class="built_in">resize</span>(nums.<span class="built_in">size</span>());</span><br><span class="line">        <span class="comment">// 根据初始数组构造差分数组</span></span><br><span class="line">        diff[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        	diff[i] = nums[i] - nums[i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 给闭区间 [i,j] 增加 val（可以是负数）*/</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        diff[i] += val;</span><br><span class="line">        <span class="keyword">if</span> (j + <span class="number">1</span> &lt; diff.<span class="built_in">size</span>()) &#123; <span class="comment">//当 j+1 &gt;= diff.length 时，说明是对 nums[i] 及以后的整个数组都进⾏修改，那么就不需要再给 diff数组减 val 了。</span></span><br><span class="line">            diff[j + <span class="number">1</span>] -= val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 返回结果数组 */</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">result</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(diff.size())</span></span>;</span><br><span class="line">        res[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; diff.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] = res[i - <span class="number">1</span>] + diff[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-滑动窗口"><a href="#3-滑动窗口" class="headerlink" title="3. 滑动窗口"></a>3. 滑动窗口</h2><blockquote>
<p>相关题目：</p>
<ol start="76">
<li><p>最⼩覆盖⼦串（困难） </p>
</li>
<li><p>字符串的排列（中等） </p>
</li>
<li><p>找到字符串中所有字⺟异位词（中等） </p>
</li>
<li><p>⽆重复字符的最⻓⼦串（中等） </p>
</li>
</ol>
</blockquote>
<p>滑动窗⼝算法的代码框架：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 滑动窗⼝算法框架 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slidingWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">	unordered_map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; need, window;	</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : t) need[c]++;</span><br><span class="line"> 	<span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;	</span><br><span class="line">    <span class="keyword">int</span> valid = <span class="number">0</span>; </span><br><span class="line">	<span class="keyword">while</span> (right &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		<span class="comment">// c 是将移⼊窗⼝的字符</span></span><br><span class="line">		<span class="keyword">char</span> c = s[right];</span><br><span class="line">		<span class="comment">// 右移窗⼝</span></span><br><span class="line">		right++;</span><br><span class="line">		<span class="comment">// 进⾏窗⼝内数据的⼀系列更新</span></span><br><span class="line">		 ...</span><br><span class="line">		<span class="comment">/*** debug 输出的位置 ***/</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;window: [%d, %d)\n&quot;</span>, left, right);</span><br><span class="line">		<span class="comment">/********************/</span></span><br><span class="line"> </span><br><span class="line">		<span class="comment">// 判断左侧窗⼝是否要收缩</span></span><br><span class="line">		<span class="keyword">while</span> (window needs shrink) &#123;</span><br><span class="line"> 		<span class="comment">// d 是将移出窗⼝的字符</span></span><br><span class="line"> 		<span class="keyword">char</span> d = s[left];</span><br><span class="line"> 		<span class="comment">// 左移窗⼝</span></span><br><span class="line"> 		left++;</span><br><span class="line"> 		<span class="comment">// 进⾏窗⼝内数据的⼀系列更新</span></span><br><span class="line"> 		...</span><br><span class="line"> 		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-二分搜索"><a href="#4-二分搜索" class="headerlink" title="4. 二分搜索"></a>4. 二分搜索</h2><blockquote>
<p>相关题目：</p>
<ol start="704">
<li><p>⼆分查找（简单） </p>
</li>
<li><p>在排序数组中查找元素的第⼀个和最后⼀个位置（中等） </p>
</li>
</ol>
</blockquote>
<p>搜索一个元素，搜索区间两端闭，while带等号</p>
<p>搜索左右边界，左闭右开常用，while用小于号</p>
<p>零、二分查找框架</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = ...;</span><br><span class="line">    <span class="keyword">while</span>(...) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line">            left = ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line">            right = ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析⼆分查找的⼀个技巧是：不要出现 else，⽽是把所有情况⽤ else if 写清楚，这样可以清楚地展现所有细节。</p>
<h3 id="寻找一个数：存在返回其索引，不存在返回-1"><a href="#寻找一个数：存在返回其索引，不存在返回-1" class="headerlink" title="寻找一个数：存在返回其索引，不存在返回-1."></a>寻找一个数：存在返回其索引，不存在返回-1.</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="寻找左侧边界的二分搜索："><a href="#寻找左侧边界的二分搜索：" class="headerlink" title="寻找左侧边界的二分搜索："></a>寻找左侧边界的二分搜索：</h3><p>左闭右开区间写法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// target ⽐所有数都⼤</span></span><br><span class="line">    <span class="keyword">if</span> (left == nums.length) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 类似之前算法的处理⽅式</span></span><br><span class="line">	<span class="keyword">return</span> nums[left] == target ? left : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>全闭区间写法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//搜索区间为[left, right]</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            <span class="comment">// 搜索区间变为 [mid+1, right]</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            <span class="comment">// 搜索区间变为 [left, mid-1]</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">// 收缩右侧边界</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查出界情况</span></span><br><span class="line">    <span class="keyword">if</span>(left &gt;= nums.<span class="built_in">size</span>() || nums[left] != target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="寻找右侧边界的⼆分查找"><a href="#寻找右侧边界的⼆分查找" class="headerlink" title="寻找右侧边界的⼆分查找:"></a>寻找右侧边界的⼆分查找:</h3><p>左闭右开写法（常见）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;  <span class="comment">// 注意</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">if</span> (left == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> nums[left<span class="number">-1</span>] == target ? (left<span class="number">-1</span>) : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>全闭区间写法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//搜索区间为[left, right]</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            <span class="comment">// 搜索区间变为 [mid+1, right]</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            <span class="comment">// 搜索区间变为 [left, mid-1]</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">            <span class="comment">// 收缩左侧边界</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查出界情况</span></span><br><span class="line">    <span class="keyword">if</span>(right &lt; <span class="number">0</span> || nums[right] != target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>建议搜索区间全都统⼀成了<strong>两端都闭</strong>，便于记忆，只要修改两处即可变化出三种写法</p>
<h2 id="5-原地修改数组"><a href="#5-原地修改数组" class="headerlink" title="5. 原地修改数组"></a>5. 原地修改数组</h2><blockquote>
<p>相关题目：</p>
<ol start="26">
<li><p>删除有序数组中的重复项（简单） </p>
</li>
<li><p>删除排序链表中的重复元素（简单） </p>
</li>
<li><p>移除元素（简单） </p>
</li>
<li><p>移动零（简单） </p>
</li>
</ol>
</blockquote>
<h3 id="有序数组-链表去重"><a href="#有序数组-链表去重" class="headerlink" title="有序数组/链表去重"></a>有序数组/链表去重</h3><p>通⽤解法：快慢指针技巧</p>
<h3 id="有序数组去重："><a href="#有序数组去重：" class="headerlink" title="有序数组去重："></a>有序数组去重：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (fast &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] != num[slow]) &#123;</span><br><span class="line">            slow++;</span><br><span class="line">            <span class="comment">// 维护 nums[0..slow] ⽆重复</span></span><br><span class="line">            num[slow] = num[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 数组⻓度为索引 + 1</span></span><br><span class="line">    <span class="keyword">return</span> slow + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有序链表去重："><a href="#有序链表去重：" class="headerlink" title="有序链表去重："></a>有序链表去重：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode slow = head, fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fast -&gt; val != slow -&gt; val) &#123;</span><br><span class="line">            <span class="comment">// nums[slow] = nums[fast];</span></span><br><span class="line">            slow -&gt; next = fast;</span><br><span class="line">            <span class="comment">// slow++;</span></span><br><span class="line">            slow = slow -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// fast++</span></span><br><span class="line">        fast = fast -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 断开与后⾯重复元素的连接</span></span><br><span class="line">    slow -&gt; next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组原地删除元素："><a href="#数组原地删除元素：" class="headerlink" title="数组原地删除元素："></a>数组原地删除元素：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fast = <span class="number">0</span>, slow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] != val) &#123;</span><br><span class="line">            nums[slow] = nums[fast];</span><br><span class="line">            slow++;</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="原地修改，将数组中的所有值为-0-的元素移到数组末尾："><a href="#原地修改，将数组中的所有值为-0-的元素移到数组末尾：" class="headerlink" title="原地修改，将数组中的所有值为 0 的元素移到数组末尾："></a>原地修改，将数组中的所有值为 0 的元素移到数组末尾：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; nums)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 去除 nums 中的所有 0</span></span><br><span class="line">	<span class="comment">// 返回去除 0 之后的数组⻓度</span></span><br><span class="line">	<span class="keyword">int</span> p = <span class="built_in">removeElement</span>(nums, <span class="number">0</span>);</span><br><span class="line">	<span class="comment">// 将 p 之后的所有元素赋值为 0</span></span><br><span class="line">	<span class="keyword">for</span> (; p &lt; nums.length; p++) &#123;</span><br><span class="line">		nums[p] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ⻅上⽂代码实现</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; nums, <span class="keyword">int</span> val)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="6-单链表"><a href="#6-单链表" class="headerlink" title="6. 单链表"></a>6. 单链表</h2><blockquote>
<p>相关题目：</p>
<ol start="21">
<li><p>合并两个有序链表（简单） </p>
</li>
<li><p>合并K个升序链表（困难） </p>
</li>
<li><p>环形链表（简单） </p>
</li>
<li><p>环形链表 II（中等） </p>
</li>
<li><p>链表的中间结点（简单） </p>
</li>
<li><p>相交链表（简单） </p>
</li>
<li><p>删除链表的倒数第 N 个结点（中等）</p>
</li>
</ol>
</blockquote>
<h3 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h3><p>给定输⼊两个有序链表，把他俩合并成⼀个新的有序链表。</p>
<p>输入：<code>l1 = [1, 2, 4], l2 = [1, 3, 4]</code></p>
<p>输出：<code>[1, 1, 2, 3, 4, 4]</code></p>
<p>解法：设立虚拟头节点<code>dummy</code>，避免处理空指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 虚拟头结点</span></span><br><span class="line">    ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *p = dummy;</span><br><span class="line">    ListNode* p1 = l1, *p2 = l2;</span><br><span class="line">    <span class="keyword">while</span>(p1 != <span class="literal">nullptr</span> &amp;&amp; p2 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// ⽐较 p1 和 p2 两个指针</span></span><br><span class="line"> 		<span class="comment">// 将值较⼩的的节点接到 p 指针</span></span><br><span class="line">        <span class="keyword">if</span>(p1 -&gt; val &gt; p2 -&gt; val) &#123;</span><br><span class="line">            p -&gt; next = p2;</span><br><span class="line">            p2 = p2 -&gt; next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p -&gt; next = p1;</span><br><span class="line">            p1 = p1 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// p 指针不断前进</span></span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p1 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        p -&gt; next = p1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p2 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        p -&gt; next = p2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dummy -&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="合并k个升序链表"><a href="#合并k个升序链表" class="headerlink" title="合并k个升序链表"></a>合并k个升序链表</h3><p>给定输⼊k个有序链表，把他们合并成⼀个新的有序链表。</p>
<p>输入：<code>lists = [[1, 4, 5], [1, 3, 4], [2, 6]]</code></p>
<p>输出：<code>[1, 1, 2, 3, 4, 4, 5, 6]</code></p>
<p>解法：优先级队列（二叉堆），把链表节点放⼊⼀个最⼩堆，就可以每次获得 k 个节点中的最⼩节点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">        ListNode* p = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp; n) <span class="keyword">const</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n.val &lt; val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 优先级队列，最⼩堆</span></span><br><span class="line">    priority_queue&lt;Node&gt; pq;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lists.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// 虚拟头结点</span></span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>), *p = dummy;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将 k 个链表的头结点加⼊最⼩堆</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> head : lists) &#123;</span><br><span class="line">            <span class="keyword">if</span>(head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;head -&gt; val, head&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="comment">// 获取最⼩节点，接到结果链表中</span></span><br><span class="line">            ListNode* node = pq.<span class="built_in">top</span>().p;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            p -&gt; next = node;</span><br><span class="line">            <span class="keyword">if</span>(node -&gt; next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;node -&gt; next -&gt; val, node -&gt; next&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// p 指针不断前进</span></span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="单链表的倒数第k个节点"><a href="#单链表的倒数第k个节点" class="headerlink" title="单链表的倒数第k个节点"></a>单链表的倒数第k个节点</h3><p>要点：只遍历⼀次链表，就算出倒数第 k 个节点</p>
<img src="/posts/image-20220314210806020.png" alt="image-20220314210806020" style="zoom:50%;">

<p>指针<code>p1</code>指向<code>head</code>节点，开始走<code>k</code>步；</p>
<img src="/posts/image-20220314211006249.png" alt="image-20220314211006249" style="zoom:50%;">

<p>指针<code>p2</code>指向<code>head</code>节点，<code>p1</code>和<code>p2</code>同时走，<code>n-k</code>步后<code>p1</code>走到链表末尾空指针结束，返回<code>p2</code>即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">findFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ListNode* p1 = head;</span><br><span class="line">    <span class="comment">// p1 先⾛ k 步</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        p1 = p1 -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* p2 = head;</span><br><span class="line">    <span class="comment">// p1 和 p2 同时⾛ n - k 步</span></span><br><span class="line">    <span class="keyword">while</span>(p1 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        p2 = p2 -&gt; next;</span><br><span class="line">        p1 = p1 -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// p2 现在指向第 n - k 个节点</span></span><br><span class="line">    <span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单链表中点"><a href="#单链表中点" class="headerlink" title="单链表中点"></a>单链表中点</h3><p>解法：让两个指针 <code>slow</code> 和 <code>fast</code> 分别指向链表头结点<code> head</code>。 每当慢指针<code> slow</code> 前进⼀步，快指针 <code>fast</code> 就前进两步，这样，当 <code>fast</code> ⾛到链表末尾时，<code>slow</code> 就指向了链 表中点。 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 快慢指针初始化指向 head</span></span><br><span class="line"> 	ListNode* slow = head, *fast = head;</span><br><span class="line"> 	<span class="comment">// 快指针⾛到末尾时停⽌</span></span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">nullptr</span> &amp;&amp; fast -&gt; next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// 慢指针⾛⼀步，快指针⾛两步</span></span><br><span class="line"> 		slow = slow -&gt; next;</span><br><span class="line"> 		fast = fast -&gt; next -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 慢指针指向中点</span></span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：如果链表⻓度为偶数，也就是说中点有两个的时候，这个解法返回的节点是靠后的那个节点。 </p>
<h3 id="判断链表是否包含环"><a href="#判断链表是否包含环" class="headerlink" title="判断链表是否包含环"></a>判断链表是否包含环</h3><p>解法：快慢指针，每当慢指针<code> slow</code> 前进⼀步，快指针 <code>fast</code> 就前进两步，如果 <code>fast</code> 最终遇到空指针，说明链表中没有环；如果 <code>fast </code>最终和<code>slow</code>相遇，那肯定是<code> fast</code> 超过了<code>slow</code> ⼀圈，说明链表中含有环。</p>
<p>只需要把寻找链表中点的代码稍加修改：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 快慢指针初始化指向 head</span></span><br><span class="line"> 	ListNode* slow = head, *fast = head;</span><br><span class="line"> 	<span class="comment">// 快指针⾛到末尾时停⽌</span></span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">nullptr</span> &amp;&amp; fast -&gt; next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// 慢指针⾛⼀步，快指针⾛两步</span></span><br><span class="line"> 		slow = slow -&gt; next;</span><br><span class="line"> 		fast = fast -&gt; next -&gt; next;</span><br><span class="line">        <span class="comment">// 快慢指针相遇，说明含有环</span></span><br><span class="line">        <span class="keyword">if</span>(slow == fast) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不包含环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*计算环的起点*/</span></span><br><span class="line"><span class="function">ListNode* <span class="title">detectCycle</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* fast = head, *slow = head;</span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">nullptr</span> &amp;&amp; fast -&gt; next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        slow = slow -&gt; next;</span><br><span class="line"> 		fast = fast -&gt; next -&gt; next;</span><br><span class="line">        <span class="comment">// 快慢指针相遇，说明含有环</span></span><br><span class="line">        <span class="keyword">if</span>(slow == fast) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fast == <span class="literal">nullptr</span> || fast -&gt; next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line"> 		<span class="comment">// fast 遇到空指针说明没有环</span></span><br><span class="line"> 		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line">    <span class="comment">// 重新指向头结点</span></span><br><span class="line">	 slow = head;</span><br><span class="line"> 	<span class="comment">// 快慢指针同步前进，相交点就是环起点</span></span><br><span class="line"> 	<span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line"> 		fast = fast -&gt; next;</span><br><span class="line">     	slow = slow -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="两个链表是否相交"><a href="#两个链表是否相交" class="headerlink" title="两个链表是否相交"></a>两个链表是否相交</h3><p>输⼊两个链表的头结点<code>headA</code>和<code> headB</code>，这两个链表可能存在相交。如果相交，应该返回相交的那个节点；如果没相交，则返回 <code>nullptr</code>。</p>
<p>解法：可以让 <code>p1</code> 遍历完链表 <code>A</code> 之后开始遍历链表 <code>B</code>，让<code> p2</code> 遍历完链表 <code>B</code> 之后开始遍历链表<code> A</code>，这样相 当于「逻辑上」两条链表接在了⼀起。让<code> p1</code> 和<code> p2</code> 同时进⼊公共部分，也就是同时到达相交节点<code> c1</code></p>
<img src="/posts/image-20220315104422008.png" alt="image-20220315104422008" style="zoom:50%;">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// p1 指向 A 链表头结点，p2 指向 B 链表头结点</span></span><br><span class="line">    ListNode* p1 = headA, *p2 = headB;</span><br><span class="line">    <span class="keyword">while</span>(p1 != p2) &#123;</span><br><span class="line">        <span class="comment">// p1 ⾛⼀步，如果⾛到 A 链表末尾，转到 B 链表</span></span><br><span class="line">        <span class="keyword">if</span>(p1 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            p1 = headB;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p1 = p1 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// p2 ⾛⼀步，如果⾛到 B 链表末尾，转到 A 链表</span></span><br><span class="line">        <span class="keyword">if</span>(p2 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            p2 = headA;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p2 = p2 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-链表操作的递归实现"><a href="#7-链表操作的递归实现" class="headerlink" title="7. 链表操作的递归实现"></a>7. 链表操作的递归实现</h2><blockquote>
<p>相关题目：</p>
<ol start="206">
<li><p>反转链表（简单） </p>
</li>
<li><p>反转链表II（中等） </p>
</li>
</ol>
</blockquote>
<h3 id="递归反转整个链表"><a href="#递归反转整个链表" class="headerlink" title="递归反转整个链表"></a>递归反转整个链表</h3><p>输⼊⼀个节点 <code>head</code>，将以<code>head</code>为起点的链表反转，并返回反转之后的头结点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//递归函数base case，如果链表只有⼀个节点的时候，直接返回即可</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head -&gt; next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新的头结点是last, 将head之后部分反转</span></span><br><span class="line">    ListNode* last = <span class="built_in">reverse</span>(head -&gt; next);</span><br><span class="line">    head -&gt; next -&gt; next = head;</span><br><span class="line">    <span class="comment">//head 变成了最后⼀个节点，别忘了链表的末尾要指向 null</span></span><br><span class="line">    head -&gt; next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反转链表前N个节点"><a href="#反转链表前N个节点" class="headerlink" title="反转链表前N个节点"></a>反转链表前N个节点</h3><p>解决思路和反转整个链表差不多，稍加修改即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ListNode* successor = <span class="literal">nullptr</span>; <span class="comment">// 后驱节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转以 head 为起点的 n 个节点，返回新的头结点</span></span><br><span class="line"><span class="function">ListNode* <span class="title">reverseN</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"> 		<span class="comment">// 记录第 n + 1 个节点</span></span><br><span class="line"> 		successor = head -&gt; next;</span><br><span class="line"> 		<span class="keyword">return</span> head;</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="comment">// 以 head.next 为起点，需要反转前 n - 1 个节点</span></span><br><span class="line"> 	ListNode* last = <span class="built_in">reverseN</span>(head -&gt; next, n - <span class="number">1</span>);</span><br><span class="line"> 	head -&gt; next -&gt; next = head;</span><br><span class="line">	<span class="comment">// 让反转之后的 head 节点和后⾯的节点连起来</span></span><br><span class="line"> 	head -&gt; next = successor;</span><br><span class="line"> 	<span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转链表的任意区间[left, right]</span></span><br><span class="line"><span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">reverseN</span>(head, right);</span><br><span class="line">    head -&gt; next = <span class="built_in">reverseBetween</span>(head -&gt; next, left - <span class="number">1</span>, right - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="反转链表的一部分"><a href="#反转链表的一部分" class="headerlink" title="反转链表的一部分"></a>反转链表的一部分</h3><p>给⼀个索引区间<code> [left, right]</code>（索引从 1 开始），仅仅反转区间中的链表元素。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接上部分反转链表代码</span></span><br><span class="line"><span class="comment">//反转链表的任意区间[left, right]</span></span><br><span class="line"><span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">reverseN</span>(head, right);</span><br><span class="line">    <span class="comment">// 前进到反转的起点触发 base case</span></span><br><span class="line">    head -&gt; next = <span class="built_in">reverseBetween</span>(head -&gt; next, left - <span class="number">1</span>, right - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷题笔记</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>链表</tag>
      </tags>
  </entry>
</search>
